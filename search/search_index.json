{"config":{"lang":["fr","nl","pt","ru","en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>This book is born from a simple desire: to give back. After years of working with Zabbix, and authoring previous many other publications about the platform, Patrik and Nathan felt a strong pull to share their knowledge in a way that was accessible to everyone. That's how the initial idea of a free, online Zabbix resource was conceived \u2013 a community-driven project dedicated to empowering users.</p> <p>As the online resource grew, so did the vision. We recognized the potential to create something even more impactful. This led to the formation of a foundation, dedicated to ensuring the long-term sustainability and growth of this community effort. This book, a tangible culmination of that vision, represents the next step. All profits generated from its sales will be reinvested back into the community, enabling us to further expand and enhance the resources and support we offer. This is more than just a book; it's a testament to the power of shared knowledge and a commitment to fostering a thriving Zabbix community.\"</p>"},{"location":"#license","title":"License","text":"<p>Please note: The english version is the primary source document. Translations are provided for convenience, but this version is considered the most accurate.</p> <p>Please before you start take a look at our most updated license : License on Github.</p> <p>The Zabbix Book is a freely accessible resource designed to help users understand and master Zabbix. Contributions are highly encouraged to improve and expand its content. However, the book is distributed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) license, meaning it is free for non-commercial use only.</p> <p>Contributors should be aware that:</p> <ul> <li>By contributing to this work, you irrevocably assign and transfer all rights, title, and interest in your contributions to The Monitoring Penmasters Foundation, including any associated intellectual property rights, to the fullest extent permitted by law.</li> <li>The Monitoring Penmasters Foundation reserves the right to use, reproduce, modify, distribute, and commercially exploit any contributed material in any form, including but not limited to the publication of physical and digital books.</li> <li>All contributors must sign a Deed of Transfer of Intellectual Property Rights before making any contributions, ensuring the proper transfer of rights and handling of the content by The Monitoring Penmasters Foundation. Any contributions without a signed Deed of Transfer of Intellectual Property Rights cannot be accepted.</li> <li>All profits generated will be used by The Monitoring Penmasters Foundation to cover operational expenses and to sponsor other open-source projects, as determined by the foundation.</li> </ul> <p>Your contributions are invaluable and will help make The Zabbix Book an even greater resource for the entire community!</p> <p>Shield: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"Guidelines/","title":"Guidelines","text":""},{"location":"Guidelines/#how-to-contribute","title":"How to contribute","text":"<ul> <li>Sign the deed of transfer preferable electronically</li> <li>Clone this project to your Github account</li> <li> <p>Clone the repository to you pc</p> </li> <li> <p>Install the needed software for Mkdocs to work,   check the file in the root folder how-to-install-mkdocs.md</p> </li> <li>Create a new branch to make your changes<ul> <li>git branch \"&lt;your branch name&gt;\"</li> <li>git checkout \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Make the changes you want and commit them<ul> <li>git add \"files you changed\"</li> <li>git commit -m \"add useful commit info\"</li> </ul> </li> <li>Return back to the main branch<ul> <li>git checkout main</li> </ul> </li> <li>Make sure you have the latest changes merged from main<ul> <li>git pull origin main</li> </ul> </li> <li>Merge your branch into the main branch<ul> <li>git merge \"&lt;your branch name&gt;\"</li> <li>git push</li> </ul> </li> <li>cleanup your branch<ul> <li>git branch -d \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Create a pull requests so that we can merge it :)</li> <li>Follow these guidelines when you write a topic.</li> </ul>"},{"location":"Supporters-Contributors/","title":"Supporters &amp; Contributors","text":"<p>This book would not have been possible without the dedication, generosity, and expertise of many individuals and organizations. We extend our heartfelt thanks to everyone who has supported this project, whether through financial contributions, technical expertise, content reviews, or community engagement.</p>"},{"location":"Supporters-Contributors/#our-sponsors","title":"Our Sponsors","text":"<p>We are deeply grateful to the sponsors who have provided financial or material support to help bring this book to life. Their contributions have enabled us to maintain high-quality content, support open-source initiatives, and ensure that this book remains accessible to as many people as possible.</p> <ul> <li>OICTS : https://oicts.com/</li> <li>ZABBIX : https://www.zabbix.com/</li> </ul>"},{"location":"Supporters-Contributors/#our-contributors","title":"Our Contributors","text":"<p>This book is a community effort, and we sincerely appreciate the time and knowledge shared by our contributors. From writing and reviewing content to providing feedback and sharing expertise, your efforts have helped shape this resource into something valuable for the monitoring and open-source communities.</p> <ul> <li>Patrik Uytterhoeven : http://github.com/Trikke76</li> <li>Nathan Liefting : https://github.com/larcorba</li> <li>Evgeny Yurchenko: https://github.com/BGmot</li> <li>Nikolas Garofil: https://github.com/ngaro</li> <li>Aigars Kadikis : https://github.com/aigarskadikis</li> </ul> <p>A list of all the contributors who where so kind to fix typos etc .. can be found here : https://github.com/penmasters/zabbix-book/graphs/contributors</p>"},{"location":"Supporters-Contributors/#translators","title":"Translators","text":"<ul> <li>Nicolas Hermel : https://github.com/wityender</li> <li>Dimitry Q : https://github.com/krotesk</li> </ul>"},{"location":"Supporters-Contributors/#special-thanks-to-our-board-members","title":"Special Thanks to Our Board Members","text":"<p>A special acknowledgment goes to the members of our board, whose vision, leadership, and dedication have guided this project from its inception. Their commitment to open-source principles and knowledge sharing has been instrumental in making this book a reality.</p> <ul> <li>Patrik Uytterhoeven : http://github.com/Trikke76</li> <li>Nathan Liefting : https://github.com/larcorba</li> <li>Alexei Vladishev :</li> </ul>"},{"location":"Supporters-Contributors/#every-contribution-matters","title":"Every Contribution Matters","text":"<p>Open-source thrives on collaboration, and even the smallest contributions help make a difference. Whether it was reporting a typo, suggesting an improvement, opening an issue, or simply sharing feedback, we appreciate everyone who took the time to help refine and improve this book. Your efforts, no matter how small, are a valuable part of this project. Check out Everyone who created an issue.</p>"},{"location":"Supporters-Contributors/#join-the-community","title":"Join the Community","text":"<p>We welcome new contributors and supporters! If you'd like to get involved whether by contributing content, providing feedback, or supporting this initiative you can find more details on how to participate at Guidelines.</p> <p>Thank you for being part of this journey and helping us build a valuable resource for the open-source community!</p>"},{"location":"tags/","title":"Tags","text":"<p>Use tags to quickly browse per level.</p> <ul> <li>beginner \u2014 Assumes no or minimal prior Zabbix knowledge. Covers basic concepts, installation, simple use cases.</li> <li>advanced \u2014 Assumes the reader is comfortable with core Zabbix features and configurations; covers more involved setups, integrations, intermediate complexity.</li> <li>expert \u2014 Covers high-end topics: scaling, HA, deep performance tuning, custom extensions, edge cases, complex architectures, security hardening.</li> </ul>"},{"location":"tags/#tag:advanced","title":"advanced","text":"<ul> <li>            Active and Passive proxies          </li> <li>            Browser item          </li> <li>            Calculated items          </li> <li>            Custom LLD          </li> <li>            Database checks via agent          </li> <li>            Database checks via odbc          </li> <li>            Dependent LLD          </li> <li>            External checks          </li> <li>            Frontend Scripts          </li> <li>            Global scripts          </li> <li>            HTTP          </li> <li>            Http          </li> <li>            IPMI          </li> <li>            Media types          </li> <li>            Monitoring Java Applications with JMX          </li> <li>            Multi factor authentication          </li> <li>            Preprocessing          </li> <li>            Proxy groups          </li> <li>            SAML          </li> <li>            SNMP Polling          </li> <li>            SNMP Trapping          </li> <li>            Scripts          </li> <li>            Triggers          </li> <li>            Web services          </li> <li>            Working with templates          </li> <li>            Zabbix Agent Active monitoring          </li> <li>            Zabbix Agent installation and Passive monitoring          </li> <li>            Zabbix trapper          </li> </ul>"},{"location":"tags/#tag:beginner","title":"beginner","text":"<ul> <li>            Basic Installation          </li> <li>            Dataflow          </li> <li>            Dependent items          </li> <li>            Frontend explained          </li> <li>            Host Groups          </li> <li>            Host Interfaces          </li> <li>            Hosts          </li> <li>            Proxy basics          </li> <li>            SSH / Telnet          </li> <li>            Simple checks          </li> <li>            System Requirements          </li> <li>            User Groups          </li> </ul>"},{"location":"tags/#tag:expert","title":"expert","text":"<ul> <li>            Actions          </li> <li>            Advanced triggers          </li> <li>            Browser item          </li> <li>            Global scripts          </li> <li>            HA Setup          </li> <li>            LDAP / AD          </li> <li>            Running Proxies as containers          </li> <li>            Script item          </li> <li>            Scripts          </li> <li>            Zabbix Internals          </li> </ul>"},{"location":"ch00-getting-started/Requirements/","title":"System Requirements","text":"","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#requirements","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today's virtualised environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Note <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":"<p>Operating systems, so many choices, each with its own advantages and loyal user base. While Zabbix can be installed on a wide range of platforms, documenting the process for every available OS would be impractical. To keep this book focused and efficient, we have chosen to cover only the most widely used options: Ubuntu and Red Hat based distributions.</p> <p>Since not everyone has access to a Red Hat Enterprise Linux (RHEL) subscription even though a developer account provides limited access we have opted for Rocky Linux as a readily available alternative. For this book, we will be using Rocky Linux 9.x and Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <p>Install and enable the firewall</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <p>Allow Zabbix trapper access</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>If the service is not recognized, you can manually specify the port:</p> <p>Add port instead of the service name</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Note <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>An alternative approach is to define dedicated firewall zones for specific use cases. For example...</p> <p>Create a firewalld zone</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>You can confirm the creation of the zone by executing the following command:</p> <p>Verify the zone creation</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>block dmz drop external home internal nm-shared postgresql-access public trusted work</p> <p>Using zones in firewalld to configure firewall rules for PostgreSQL provides several advantages in terms of security, flexibility, and ease of management. Here\u2019s why zones are beneficial:</p> <ul> <li>Granular Access Control :</li> <li>firewalld zones allow different levels of trust for different network interfaces     and IP ranges. You can define which systems are allowed to connect to PostgreSQL     based on their trust level.</li> <li>Simplified Rule management:</li> <li>Instead of manually defining complex iptables rules, zones provide an organized     way to group and manage firewall rules based on usage scenarios.</li> <li>Enhanced security:</li> <li>By restricting PostgreSQL access to a specific zone, you prevent unauthorized     connections from other interfaces or networks.</li> <li>Dynamic configuration:</li> <li>firewalld supports runtime and permanent rule configurations, allowing changes     without disrupting existing connections.</li> <li>Multi-Interface support:</li> <li>If the server has multiple network interfaces, zones allow different security     policies for each interface.</li> </ul> <p>Bringing everything together it would look like this:</p> <p>Firewalld with zone config</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Where the <code>source IP</code> is the only address permitted to establish a connection to the database.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install and enable chrony, our NTP client, use the following command:</p> <p>Install NTP client</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>After installation, verify that Chrony is enabled and running by checking its status with the following command:</p> <p>Check status chronyd</p> <pre><code>systemctl status chronyd\n</code></pre> what is apt or dnf <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> what is Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <p>check the time config</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <p>list the timezones</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>This command will display a list of available time zones, allowing you to select the one closest to your location. For example:</p> <p>List of all the timezones available</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <p>Set the timezone</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <p>Check the time and zone</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <p>Verify chrony</p> <pre><code>chronyc\n</code></pre> <p>The output should resemble:</p> <p>Verify your chrony output</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <p>Check your time server sources</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here: www.ntppool.org.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file for Red Hat based systems, and if you use Ubuntu edit <code>/etc/chrony/chrony.conf</code>. Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <p>example ntp pool config</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <p>restart the chrony service</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <p>Check chrony sources</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <p>Example output</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#conclusion","title":"Conclusion","text":"<p>As we have seen, before even considering the Zabbix packages, attention must be paid to the environment in which it will reside. A properly configured operating system, an open path through the firewall, and accurate timekeeping are not mere suggestions, but essential building blocks. Having laid this groundwork, we can now proceed with confidence to the Zabbix installation, knowing that the underlying system is prepared for the task.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#questions","title":"Questions","text":"<ul> <li>Why do you think accurate time synchronization is so crucial for a monitoring   system like Zabbix?</li> <li>Now that the groundwork is laid, what do you anticipate will be the first step   in the actual Zabbix installation process?</li> <li>As we move towards installing Zabbix, let's think about network communication.   What key ports do you anticipate needing to allow through the firewall for the   Zabbix server and agents to interact effectively?</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/initial-steps/","title":"Getting Started with Zabbix \u2013 Unlocking the Power of Monitoring","text":"<p>Welcome to the world of Zabbix, a powerful open-source monitoring solution designed to give you comprehensive insights into your IT infrastructure. Whether you're managing a small network or overseeing a large-scale enterprise system, Zabbix provides the tools you need to monitor performance, detect issues, and ensure the smooth operation of your services.</p> <p>In this book, we focus on Zabbix LTS 8.0, the long-term support version that ensures stability and reliability for your monitoring needs. We'll explore its extensive feature set, including the newly introduced reporting functionality and built-in web monitoring based on the Selenium driver, which allows for sophisticated end-user experience monitoring through automated browser interactions.</p> <p>Zabbix is more than just a simple monitoring tool. It offers a wide range of features that allow you to:</p> <ul> <li>Monitor diverse environments: Track the performance and availability of servers, virtual machines, network devices, databases, and applications.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that notify you of potential issues before they become critical, using various channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to tailor Zabbix to your specific needs.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/","title":"Basic installation","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. There are many different ways to setup a Zabbix server. We will cover the most common setups with MariaDB and PostgreSQL on Ubuntu and on Rocky Linux.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p>Creation of DB users</p> <pre><code>In our setup we will create 2 DB users `zabbix-web` and `zabbix-srv`. The \nzabbix-web user will be used for the frontend to connect to our zabbix database.\nThe zabbix-srv user will be used by our zabbix server to connect to the database.\nThis allows us to limit the permissions for every user to only what is strictly\nneeded.\n</code></pre> <p></p> <p>1.1 Zabbix basic split installation</p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server's configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>We will cover the following topics:</p> <ul> <li>Install our Database based on MariaDB.</li> <li>Install our Database based on PostgreSQL.</li> <li>Installing the Zabbix server.</li> <li>Install the frontend.</li> </ul>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-mariadb-database","title":"Installing the MariaDB database","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, mariadb.repo on Rocky, must be placed in the /etc/yum.repos.d/ directory. The repository file will allow your package manager to locate and install the necessary MariaDB components. For Ubuntu we need to import the repository keys and create a file for example '/etc/apt/sources.list.d/mariadb.sources'.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<p>To create the MariaDB repository file, execute the following command in your terminal:</p> <p>create mariadb repository</p> <p>Red Hat <pre><code>vi /etc/yum.repos.d/mariadb.repo\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install apt-transport-https curl\nsudo mkdir -p /etc/apt/keyrings\nsudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\nsudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre></p> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> Tip <p>Always check Zabbix documentation for the latest supported versions.</p> <p>The latest config can be found here: https://mariadb.org/download/?t=repo-config</p> <p>Here's the configuration you need to add into the file:</p> <p>Mariadb repository</p> <p>Red Hat <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre></p> <p>Ubuntu <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre></p> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it's a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <p>Update OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <p>Install Mariadb</p> <p>Red Hat <pre><code>dnf install MariaDB-server\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install mariadb-server\n</code></pre></p> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <p>Enable mariadb service</p> <p>Red Hat <pre><code>systemctl enable mariadb --now\n</code></pre></p> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <p>Check Mariadb version</p> <p>Red Hat and Ubuntu <pre><code>sudo mariadb -V\n</code></pre></p> <p>The expected output should resemble this:</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <p>Get mariadb status</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl status mariadb\n</code></pre></p> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <p>mariadb service status example</p> <pre><code> mariadb.service - MariaDB 11.4.5 database server\n      Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n     Drop-In: /etc/systemd/system/mariadb.service.d\n              \u2514\u2500migrated-from-my.cnf-settings.conf\n      Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n        Docs: man:mariadbd(8)\n              https://mariadb.com/kb/en/library/systemd/\n     Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n     Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ] &amp;&amp; systemctl set-enviro&gt;\nProcess: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment \\_WSREP_START_POSITION (code=exited, status=0/SUCCESS)\nMain PID: 23156 (mariadbd)\nStatus: \"Taking your SQL requests now...\"\nTasks: 7 (limit: 30620)\nMemory: 281.7M\nCPU: 319ms\nCGroup: /system.slice/mariadb.service\n\u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#securing-the-mariadb-database","title":"Securing the MariaDB Database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <p>Secure Mariadb setup</p> <p>Red Hat and Ubuntu <pre><code> sudo mariadb-secure-installation\n</code></pre></p> <pre><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure. You are now ready to configure the database for Zabbix.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <p>Log in to the MariaDB shell as the root user: You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <p>Enter Mariadb as user root</p> <p>Red Hat and Ubuntu <pre><code>mariadb -uroot -p\n</code></pre></p> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <p>Create the database</p> <p><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> Note <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all  Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB  only supports up to three bytes per character and is not a true UTF-8 implementation,  which is why utf8mb4 is recommended.</p> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <p>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</p> <p>Create users and grant privileges</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them access to the zabbix database, and ensures that the privileges are applied immediately.</p> <p>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled. To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <p>Activate temporarily extra privileges for non root users</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>If we want our Zabbix server to connect to our DB then we also need to open our firewall port.</p> <p>Add firewall rules</p> <p>Red Hat <pre><code>firewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 3306/tcp\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-maria-db","title":"Populate the Zabbix Maria DB","text":"<p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <p>One of the first things we need to do is add the Zabbix repository to our machine. This may sound weird but actually makes sense because we need to populate our DB with our Zabbix schemas.</p> <p>Add Zabbix repo and install scripts</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>Now lets upload the data from zabbix (db structure, images, user, ... ) for this we make use of the user <code>zabbix-srv</code> and we upload it all in our DB <code>zabbix</code>.</p> <p>Populate the database</p> <p>Red Hat and Ubuntu <pre><code>sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre></p> Note <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <p>Enter mariadb as user root</p> <p><code>mariadb -uroot -p</code></p> <p>Once the import of the Zabbix schema is complete and you no longer need the log_bin_trust_function_creators global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to 0, use the following command in the MariaDB shell:</p> <p>Disable function log_bin_trust again</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the servers security posture remains robust.</p> <p>This concludes our installation of the MariaDB</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-postgresql-database","title":"Installing the PostgreSQL database","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-17 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is something we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found https://docs.timescale.com/self-hosted/latest/upgrades/upgrade-pg/</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#add-the-postgresql-repository","title":"Add the PostgreSQL repository","text":"<p>So let us start first setting up our PostgreSQL repository with the following commands.</p> <p>Add PostgreSQL repo</p> <p>Red Hat <pre><code>Install the repository RPM:\ndnf install https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\nDisable the built-in PostgreSQL module:\ndnf -qy module disable postgresql\n</code></pre></p> <p>Ubuntu <pre><code># Import the repository signing key:\nsudo apt install curl ca-certificates\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n\n# Create the repository configuration file:\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n\n# Update the package lists:\nsudo apt update\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#install-the-postgresql-databases","title":"Install the PostgreSQL databases","text":"<p>Install the Postgres server</p> <p>Red Hat <pre><code># Install Postgres server:\ndnf install postgresql17-server\n\n# Initialize the database and enable automatic start:\n/usr/pgsql-17/bin/postgresql-17-setup initdb\nsystemctl enable postgresql-17 --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install postgresql-17\n</code></pre></p> <p>To update your OS, run the following command:</p> <p>update the OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\" https://www.postgresql.org/docs/current/auth-pg-hba-conf.html</p> <p>Add the following lines, the order here is important.</p> <p>Edit the pg_hba file</p> <p>Red hat <pre><code>vi /var/lib/pgsql/17/data/pg_hba.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/pg_hba.conf\n</code></pre></p> <p>The result should look like :</p> <p>pg_hba example</p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal    zabbix     zabbix-srv                                                              scram-sha-256\nlocal    all            all                                                                            peer\n# IPv4 local connections\nhost     zabbix     zabbix-srv          &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     zabbix     zabbix-web        &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     all            all                         127.0.0.1/32                            scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incoming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <p>Edit postgresql.conf file</p> <p>Red Hat <pre><code>vi /var/lib/pgsql/17/data/postgresql.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/postgresql.conf\n</code></pre></p> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>and replace it with:</p> <p><code>listen_addresses = '*'</code></p> Note <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. In production it's probably a good idea to limit who can connect to the DB.</p> <p>After making this change, restart the PostgreSQL service to apply the new settings:</p> <p>restart the DB server</p> <p>Red Hat <pre><code>systemctl restart postgresql-17\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl restart postgresql\n</code></pre></p> <p>If the service fails to restart, review the pg_hba.conf file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you'll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database-with-postgresql","title":"Create the Zabbix database with PostgreSQL","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <p>Add zabbix schema repos package</p> <p>Red Hat <pre><code>dnf install https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <p>create server users</p> <pre><code>sudo su - postgres\ncreateuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <p>Create front-end user</p> <pre><code>createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root or your regular user, unzip the necessary schema files by running the following command:</p> <p>Unzip the DB patch</p> <p>Red Hat <pre><code>gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> <p>Ubuntu <pre><code>sudo gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> Note <p>Zabbix seems to like to change the locations of the script to populate the DB every version or in between versions. If you encounter an error take a look at the Zabbix documentation there is a good chance that some location was changed.</p> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database. First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to zabbix-srv:</p> <p>Create DB</p> <p>Red Hat <pre><code>su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Ubuntu <pre><code>sudo su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the zabbix database using the zabbix-srv user:</p> <p>Login as user zabbix-srv</p> <pre><code>psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other's data.</p> Note <p>PostgreSQL comes with a default schema, typically called public, but it's in general best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, https://hevodata.com/learn/postgresql-schema/#schema which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <p>create the db schema</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\n</code></pre> <p>Next, we set the <code>search path</code> to <code>zabbix_server</code> schema so that it's the default for the current session:</p> <p>Set search path</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <p>verify schema access</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <p>Grant access to schema for user zabbix-web</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-postgresql-db","title":"Populate the Zabbix PostgreSQL DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in the   <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <p>upload the DB schema to db zabbix</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <p>Output example</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <p>Grant rights on the schema to user zabbix-web</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server\nTO \"zabbix-web\";\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>Verify if the rights are correct on the schema :</p> <p>Example schema rights</p> <pre><code>zabbix=&gt; \\dn+\n                                           List of schemas\n     Name      |       Owner       |           Access privileges            |      Description\n---------------+-------------------+----------------------------------------+------------------------\n public        | pg_database_owner | pg_database_owner=UC/pg_database_owner+| standard public schema\n               |                   | =U/pg_database_owner                   |\n zabbix_server | zabbix-srv        | \"zabbix-srv\"=UC/\"zabbix-srv\"          +|\n               |                   | \"zabbix-web\"=U/\"zabbix-srv\"            |\n</code></pre> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no     schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <p>List tables</p> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <p>List table with relations</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has   the necessary permissions. You can check permissions for specific tables using   the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <pre><code>                                                     Access privileges\n    Schema     |            Name            |   Type   |         Access privileges          | Column privileges | Policies\n---------------+----------------------------+----------+------------------------------------+-------------------+----------\n zabbix_server | acknowledges               | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | actions                    | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | alerts                     | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | auditlog                   | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <p>Exit the database</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>Red Hat <pre><code>firewall-cmd --add-port=5432/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 5432/tcp\n</code></pre></p> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-mariadbmysql","title":"Installing the Zabbix server for MariaDB/Mysql","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use Red Hat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <p>Selinux status</p> <p><pre><code>sestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <p>Disable SeLinux</p> <p><pre><code>setenforce 0\nsestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>Disable SeLinux permanent</p> <p>Red Hat <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre></p> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <p>Verify selinux status again</p> <p><pre><code>sestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.2 Zabbix download</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>exclude packages</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>Add the zabbix repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>Install the zabbix server</p> <p>Red Hat <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre></p> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's   on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> Note <p>Before restarting the Zabbix server after modifying its configuration, it is considered best practice to validate the configuration to prevent potential issues. Running a configuration check ensures that any errors are detected beforehand, avoiding downtime caused by an invalid configuration. This can be accomplished using the following command: <code>zabbix-server -T</code></p> <p>enable and start zabbix-server service</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>Check the log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example log with errors</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check status of zabbix-server service</p> <p><pre><code>systemctl status zabbix-server\n</code></pre> <pre><code>zabbix-server.service - Zabbix Server\nLoaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\nActive: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\nMain PID: 12074 (zabbix_server)\nTasks: 77 (limit: 24744)\nMemory: 71.5M\nCPU: 18.535s\nCGroup: /system.slice/zabbix-server.service\n\u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n\u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n\u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n\u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n\u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n\u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n\u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n\u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n\u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n\u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n\u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n\u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n\u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n\u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n\u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n\u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n\u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n\u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n\u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n\u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n\u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n\u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n\u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n\u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use Red Hat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <p>check the selinux status</p> <pre><code>sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <p>change selinux to permissive</p> <p><pre><code>setenforce 0\nsestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>Adapt selinux config permanently</p> <p>Red Hat <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre></p> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <p>check if everything is disabled</p> <pre><code>sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository_1","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.3 Zabbix download</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>Add exclude to epelrepo for zabbix</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>add the repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>install zabbix server</p> <p>Red Hat</p> <pre><code>dnf install zabbix-server-pgsql\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre></p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's   on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <p><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code></p> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>enable zabbix server service and start</p> <p>Red Hat <pre><code>systemctl enable zabbix-server --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>check the zabbix log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example log output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example of an error in the log</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check server status</p> <p><pre><code> systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n      Memory: 71.5M\n         CPU: 18.535s\n      CGroup: /system.slice/zabbix-server.service\n              \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n              \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n              \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n              \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n              \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n              \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n              \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n              \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n              \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n              \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n              \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n              \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n              \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n              \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n              \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n              \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n              \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n              \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n              \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n              \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n              \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n              \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n              \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n              \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the packages on the same server as is in our case. It's also perfectly possible to install the front-end on another server. In that case you only need to specify the correct IP addresses and open the correct firewall ports.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>install frontend packages</p> <p>Red Hat <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql\n</code></pre></p> <p>Ubuntu <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>edit nginx config for Red Hat</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <p>original config</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nserver*name *;\nroot /usr/share/nginx/html;\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <p>config after edit</p> <pre><code>server {\n# listen 80;\n# listen [::]:80;\n# server*name *;\n# root /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <p>edit zabbix config for nginx</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <p>original config</p> <pre><code>server {\nlisten 8080;\nserver_name example.com;\n\nroot    /usr/share/zabbix;\n\nindex   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <p>config after the edit</p> <pre><code>server { # listen 8080; # server*name example.com;\nlisten 80;\nserver_name *;\n\n         root    /usr/share/zabbix;\n\n         index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>edit nginx config for ubuntu</p> <pre><code>sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <p>original config</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <p>config after edit</p> <pre><code>server {\nlisten xxx.xxx.xxx.xxx:80;\nserver_name \"\";\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> Note <p>server_name is normally replaced with the fqdn name of your machine. If you have no fqdn you can keep it open like in this example.</p> <p>restart the front-end services</p> <p>Red Hat <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>check if the service is running</p> <p><pre><code>systemctl status nginx\n</code></pre> <pre><code>\u25cf nginx.service - The nginx HTTP and reverse proxy server\n      Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n     Drop-In: /usr/lib/systemd/system/nginx.service.d\n              \u2514\u2500php-fpm.conf\n      Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n    Main PID: 1206 (nginx)\n       Tasks: 2 (limit: 12344)\n      Memory: 4.8M\n         CPU: 38ms\n      CGroup: /system.slice/nginx.service\n              \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n              \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre></p> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>configure the firewall</p> <p>Red Hat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu <pre><code>sudo ufw allow 80/tcp\n</code></pre></p> <p>Open your browser and go to the url or ip of your front-end :</p> <p>front-end configuration</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file:</p> <pre><code> /var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>1.4 Zabbix welcome</p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>!.5 Zabbix welcome language choice</p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>install language packs</p> <p>Red Hat <pre><code>dnf list glibc-langpack-*\n</code></pre></p> <p>Ubuntu <pre><code>apt-cache search language-pack\n</code></pre></p> <p>Users on Ubuntu will probably notice following error `\"Locale for language \"en_US\" is not found on the web server.\"``</p> <p>This can be solved easy with the following commands.</p> <pre><code>sudo locale-gen en_US.UTF-8\nsudo update-locale\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>This will give you on Red Hat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n---\nglibc-langpack-zu.x86_64\n</code></pre> <p>on Ubuntu it will look like :</p> <pre><code>language-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n---\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>search for language pack</p> <p>Red Hat <pre><code>dnf list glibc-langpack-* | grep zh\n</code></pre></p> <pre><code>glibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu <pre><code>sudo apt-cache search language-pack | grep -i zh\n</code></pre></p> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>install the package</p> <p>Red Hat <pre><code>dnf install glibc-langpack-zh.x86_64\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install language-pack-zh-hans\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> <p>1.6 Zabbix select language</p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>1.7 Zabbix pre-requisites</p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on your    setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the schema    name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web front-end,    remember in our basic installation guide we created 2 users zabbix-web and zabbix-srv.    One for the frontend and the other one for our zabbix server so here we will use     the user <code>zabbix-web</code>. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>1.8 Zabbix connections</p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer to use.</li> <li>Encrypt connections from Web interface: I marked this box but you should    not. This box is to encrypt communications between Zabbix frontend and your    browser. We will cover this later.    Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</li> </ol> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>1.9 Zabbix summary</p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>1.10 Zabbix install</p> <p>We are now ready to login :</p> <p></p> <p>1.11 Zabbix login</p> <ul> <li>Login : Admin</li> <li>Password : zabbix</li> </ul> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#conclusion","title":"Conclusion","text":"<p>With this, we conclude our journey through setting up Zabbix and configuring it with MySQL or PostgreSQL on RHEL-based systems and Ubuntu. We have walked through the essential steps of preparing the environment, installing the necessary components, and ensuring a fully functional Zabbix server. From database selection to web frontend configuration with Nginx, each decision has been aimed at creating a robust and efficient monitoring solution.</p> <p>At this stage, your Zabbix instance is operational, providing the foundation for advanced monitoring and alerting. In the upcoming chapters, we will delve into fine-tuning Zabbix, optimizing performance, and exploring key features that transform it into a powerful observability platform.</p> <p>Now that your Zabbix environment is up and running, let\u2019s take it to the next level.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#questions","title":"Questions","text":"<ol> <li>Should I choose MySQL or PostgreSQL as the database back-end? Why?</li> <li>What version of Zabbix should I install for compatibility and stability?</li> <li>What port does my DB use ?</li> <li>What Zabbix logs should I check for troubleshooting common issues?</li> </ol>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.postgresql.org/docs/current/ddl-priv.html</li> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>","tags":["beginner"]},{"location":"ch01-zabbix-components/chapter/","title":"Zabbix components, basic functions and installation","text":"<p>In this chapter, we expand on the foundational knowledge from the \"Getting Started\" section to provide a comprehensive guide for both beginners who are installing Zabbix for the first time and advanced users who seek to optimize their setup. We\u2019ll not only cover the essential steps for a basic installation but also delve into the finer details of Zabbix architecture, components, and best practices.</p> <p>We\u2019ll start by walking through the installation process, ensuring you have a solid foundation to build on. From there, we'll move into the core components of Zabbix, what each one does, how they interact, and why they are crucial to your monitoring solution. You'll learn about subprocesses, their roles, and how they contribute to Zabbix efficiency and reliability.</p> <p>Additionally, we\u2019ll explore good architectural choices that can make or break your monitoring setup. Whether you're managing a small network or a large-scale infrastructure, making the right design decisions early on will pay dividends in scalability, performance, and maintenance.</p> <p>This chapter is designed to cater to a wide range of readers. If you're simply looking to get Zabbix up and running, you'll find clear, step-by-step instructions. For those wanting to dive deeper, we'll provide detailed insights into how Zabbix functions under the hood, helping you make informed choices that align with your needs and future growth plans.</p> <p>By the end of this chapter, you will have not only a working Zabbix installation but also a thorough understanding of its components and architecture, empowering you to leverage Zabbix to its fullest potential, regardless of the complexity of your environment.</p> <p>Let\u2019s embark on this detailed journey into Zabbix and equip ourselves with the knowledge to both start and optimize a powerful monitoring solution.</p>"},{"location":"ch01-zabbix-components/ha-setup/","title":"HA Setup","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers and one database, but the setup allows for adding more zabbix servers if necessary.</p> <p></p> <p>1.1 HA Setup</p> <p>It's important to note that Zabbix HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and some place to add their respective IP addresses for your convenience :</p> Server IP Address Zabbix Server 1 Zabbix Server 2 Database Virtual IP Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-database","title":"Installing the Database","text":"<p>Refer to the Basic Installation chapter for detailed instructions on setting up the database. That chapter provides step-by-step guidance on installing either a PostgreSQL or MariaDB database on a dedicated node running Ubuntu or Rocky Linux. The same installation steps apply when configuring the database for this setup.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-zabbix-cluster","title":"Installing the Zabbix cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p> <p>Add the Zabbix Repositories to your servers.</p> <p>First, add the Zabbix repository to both of your Zabbix servers:</p> <p>add zabbix repository</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>Once this is done we can install the zabbix server packages.</p> <p>install zabbix server packages</p> <p>Redhat</p> <p><pre><code>dnf install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu</p> <p><pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file,</p> <p>edit the server config file</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the zabbix-server service on each:</p> <p>restart zabbix-server service</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> Note <p>The <code>NodeAddress</code> must match the IP or FQDN name of the Zabbix server node. Without this parameter the Zabbix front-end is unable to connect to the active node. The result will be that the frontend is unable to display the status the queue and other information.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <p>check logs for HA messages</p> <pre><code>sudo grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>In the system logs, you should observe the following entries, indicating the initialization of the High Availability (HA) manager:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>These log messages confirm that the HA manager process has started and assumed the active role. This means that the Zabbix instance is now the primary node in the HA cluster, handling all monitoring operations. If a failover event occurs, another standby node will take over based on the configured HA strategy.</p> <p>On the second server (and any additional nodes):</p> <pre><code>grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>In the system logs, the following entries indicate the initialization of the High Availability (HA) manager:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>These messages confirm that the HA manager process was invoked and successfully launched in standby mode. This suggests that the node is operational but not currently acting as the active HA instance, awaiting further state transitions based on the configured HA strategy.</p> <p>At this stage, your Zabbix cluster is successfully configured for High Availability (HA). The system logs confirm that the HA manager has been initialized and is running in standby mode, indicating that failover mechanisms are in place. This setup ensures uninterrupted monitoring, even in the event of a server failure, by allowing automatic role transitions based on the HA configuration.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before proceeding with the installation and configuration of the web server, it is essential to install Keepalived. Keepalived enables the use of a Virtual IP (VIP) for frontend services, ensuring seamless failover and service continuity. It provides a robust framework for both load balancing and high availability, making it a critical component in maintaining a resilient infrastructure.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#setting-up-keepalived","title":"Setting up keepalived","text":"Note <p>Keepalived is like a helper that makes sure one computer takes over if another one stops working. It gives them a shared magic IP address so users don't notice when a server fails. If the main one breaks, the backup jumps in right away. You can replace it with tools like Pacemaker, Corosync, or cloud load balancers that do the same \u201ctake over\u201d job. So let's get started. On both our servers we have to install keepalived.</p> <p>install keepalived</p> <p>Redhat <pre><code>dnf install keepalived\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install keepalived\n</code></pre></p> <p>Next, we need to modify the Keepalived configuration on both servers. While the configurations will be similar, each server requires slight adjustments. We will begin with Server 1. To edit the Keepalived configuration file, use the following command:</p> <p>edit the keepalived config</p> <p>RedHat and Ubuntu <pre><code>sudo vi /etc/keepalived/keepalived.conf\n</code></pre></p> <p>If the file contains any existing content, it should be cleared and replaced with the following lines :</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> Warning <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with something secure. For the virtual_ipaddress use a free IP from your network. This will be used as our VIP.</p> <p>We can now do the same modification on our <code>second</code> Zabbix server. Delete everything again in the same file like we did before and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n       xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1st Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with your password and fill in the virtual_ipaddress as used before.</p> <p>This ends the configuration of keepalived. We can now continue adapting the frontend.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#install-and-configure-the-frontend","title":"Install and configure the frontend","text":"<p>On both servers we can run the following commands to install our web server and the zabbix frontend packages:</p> <p>install web server and config</p> <p>RedHat <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install nginx zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>Additionally, it is crucial to configure the firewall. Proper firewall rules ensure seamless communication between the servers and prevent unexpected failures. Before proceeding, verify that the necessary ports are open and apply the required firewall rules accordingly.</p> <p>configure the firewall</p> <p>RedHat <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\nsudo ufw allow 80/tcp\n</code></pre></p> <p>With the configuration in place and the firewall properly configured, we can now start the Keepalived service. Additionally, we should enable it to ensure it automatically starts on reboot. Use the following commands to achieve this:</p> <p>start and enable keepalived</p> <p>RedHat and Ubuntu <pre><code>sudo systemctl enable keepalived nginx --now\n</code></pre></p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configure-the-web-server","title":"Configure the web server","text":"<p>The setup process for the frontend follows the same steps outlined in the <code>Basic Installation</code> section under Installing the Frontend. By adhering to these established procedures, we ensure consistency and reliability in the deployment.</p> Warning <p>Ubuntu users need to use the VIP in the setup of Nginx, together with the local IP in the listen directive of the config.</p> Note <p>Don't forget to configure both front-ends. Also this is a new setup. Keep in mind that with an existing setup we need to comment out the lines  <code>$ZBX_SERVER</code> and <code>$ZBX_SERVER_PORT</code>. Our frontend will check what node is active by reading the node table in the database.</p> <p><pre><code>select * from ha_node;\n</code></pre> <pre><code>zabbix=# select * from ha_node;\n         ha_nodeid         |  name   |   address       | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+-----------------+-------+------------+--------+---------------------------\n cm8agwr2b0001h6kzzsv19ng6 | zabbix1 | xxx.xxx.xxx.xxx | 10051 | 1742133911 |      0 | cm8apvb0c0000jkkzx1ojuhst\n cm8agyv830001ell0m2nq5o6n | zabbix2 | localhost       | 10051 | 1742133911 |      3 | cm8ap7b8u0000jil0845p0w51\n(2 rows)\n</code></pre></p> <p>In this instance, the node <code>zabbix2</code> is identified as the active node, as indicated by its status value of <code>3</code>, which designates an active state. The possible status values are as follows:</p> <ul> <li><code>0</code> \u2013 Multiple nodes can remain in standby mode.</li> <li><code>1</code> \u2013 A previously detected node has been shut down.</li> <li><code>2</code> \u2013 A node was previously detected but became unavailable without a proper shutdown.</li> <li><code>3</code> \u2013 The node is currently active.</li> </ul> <p>This classification allows for effective monitoring and state management within the cluster.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#verify-the-correct-working","title":"Verify the correct working","text":"<p>To verify that the setup is functioning correctly, access your <code>Zabbix server</code> using the Virtual IP (VIP). Navigate to Reports \u2192 System Information in the menu. At the bottom of the page, you should see a list of servers, with at least one marked as active. The number of servers displayed will depend on the total configured in your HA setup.</p> <p></p> <p>1.2 verify HA</p> <p>Shut down or reboot the active frontend server and observe that the <code>Zabbix frontend</code> remains accessible. Upon reloading the page, you will notice that the other <code>frontend server</code> has taken over as the active instance, ensuring an almost seamless failover and high availability.</p> <p></p> <p>1.3 verify HA</p> <p>In addition to monitoring the status of HA nodes, Zabbix provides several runtime commands that allow administrators to manage failover settings and remove inactive nodes dynamically.</p> <p>One such command is:</p> <pre><code>zabbix_server -R ha_set_failover_delay=10m\n</code></pre> <p>This command adjusts the failover delay, which defines how long Zabbix waits before promoting a standby node to active status. The delay can be set within a range of 10 seconds to 15 minutes.</p> <p>To remove a node that is either stopped or unreachable, the following runtime command must be used:</p> <pre><code>zabbix_server -R ha_remove_node=`zabbix1`\n</code></pre> <p>Executing this command removes the node from the HA cluster. Upon successful removal, the output confirms the action:</p> <pre><code>Removed node \"zabbix1\" with ID \"cm8agwr2b0001h6kzzsv19ng6\"\n</code></pre> <p>If the removed node becomes available again, it can be added back automatically when it reconnects to the cluster. These runtime commands provide flexibility for managing high availability in Zabbix without requiring a full restart of the <code>zabbix_server</code> process.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#conclusion","title":"Conclusion","text":"<p>In this chapter, we have successfully set up a high-availability (HA) Zabbix environment by configuring both the Zabbix server and frontend for redundancy. We first established HA for the Zabbix server, ensuring that monitoring services remain available even in the event of a failure. Next, we focused on the frontend, implementing a Virtual IP (VIP) with Keepalived to provide seamless failover and continuous accessibility.</p> <p>Additionally, we configured the firewall to allow Keepalived traffic and ensured that the service starts automatically after a reboot. With this setup, the Zabbix frontend can dynamically switch between servers, minimizing downtime and improving reliability.</p> <p>While database HA is an important consideration, it falls outside the scope of this setup. However, this foundation provides a robust starting point for building a resilient monitoring infrastructure that can be further enhanced as needed.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#questions","title":"Questions","text":"<ol> <li>What is Zabbix High Availability (HA), and why is it important?</li> <li>How does Zabbix determine which node is active in an HA setup?</li> <li>Can multiple Zabbix nodes be active simultaneously in an HA cluster? Why or    why not?</li> <li>What configuration file(s) are required to enable HA in Zabbix?</li> </ol>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.redhat.com/sysadmin/advanced-keepalived</li> <li>https://keepalived.readthedocs.io/en/latest/introduction.html</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/concepts/server/ha</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/chapter/","title":"Getting started with the Zabbix installation","text":"<p>We begin this chapter with a deep dive into the Zabbix frontend, the central hub where all monitoring and configuration tasks come together. Alongside the basic introduction to navigating the frontend, this chapter also covers user and group setup, focusing on creating a secure and efficient user management system.</p> <p>We'll walk through setting up internal authentication with best practices for security, including dual-factor authentication. For those needing advanced integration, we'll explore options like SAML, LDAP, and other external authentication methods.</p> <p>This chapter strikes a balance between a straightforward overview \u201cthis is the frontend\u201d and a more in depth look at the advanced choices you can make to enhance your system's security and manageability. Whether you're just getting started or looking to implement robust security measures, there's something here for everyone.</p> <p>By the end, you'll be well equipped to navigate the Zabbix frontend with confidence and set up a secure, scalable user management system tailored to your organization's needs.</p>"},{"location":"ch02-zabbix-installation/frontend/","title":"Frontend explained","text":"<p>This chapter is going to cover the basics we need to know when it comes to the Zabbix user interface and the thing we need to know before we can start to fully dive into our monitoring tool. We will see how the user interface works how to add a host, groups users, items ... so that we have a good understanding of the basics. This is something that is sometimes missed and can lead to frustrations not knowing why things don't work like we had expected them to work. So even if you are an advanced user it may be useful to have a look into this chapter.</p> <p>Let's get started</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page</p> <p>like this where we have our <code>main window</code> in green our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>2.1 Overview</p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons. When we click on the button with the 2 arrows to the left:</p> <p></p> <p>2.2 Collapse</p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state.</p> <p>When you click on the icon that looks like a box with an arrow sticking out, next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>2.3 Hide</p> <p>To bring back our <code>main menu</code> is rather easy, we just look for the button on the left with three horizontal lines and click on it. This will show the <code>main menu</code> but it won't stay. When we click on the box with the arrow now pointing to the bottom right it will keep the <code>main menu</code> back in it's position.</p> <p>Yet another way to make the screen bigger that is quite useful for monitors in <code>NOK teams</code> for example is the <code>kiosk mode</code> button. This one however is located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only the <code>main window</code> to focus on.</p> <p></p> <p>2.4 Expand</p> <p>When we want to leave the kiosk mode, the button will be changed to 2 arrows pointing to the inside of the screen. Pressing this button will revert us back to the original state.</p> <p></p> <p>2.5 Shrink</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode.</p> Note <p>There are many other page parameters we can use. A full list can be found at https://www.zabbix.com/documentation/7.4/en/manual/web_interface/page_parameters Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p>If we type in the search box the word <code>server</code> you will see that we get an overview of all <code>templates</code>, <code>host groups</code> and <code>hosts</code> with the name server in it. That's why this is called the <code>global search</code> box.</p> <p></p> <p>2.6 Global search</p> <p>This is our result after we looked for the word <code>server</code>. If you have a standard Zabbix setup your page should look more or less the same.</p> <p></p> <p>2.7 Global search result</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#main-menu","title":"Main menu","text":"<p>We shall now briefly examine the constituent sections of the primary application menu. The <code>main menu</code>, situated on the left hand interface, comprises a total of nine distinct sections:</p> Menu Name Details Dashboards Contains an overview of all the dashboards we have access to. Monitoring Shows us the hosts, problems, latest data, maps, ... Services An overview of all the Services and SLA settings. Inventory An overview of our collected inventory data. Reports Shows us the system information, scheduled reports, audit logs, action logs, etc . Data collection Contains all things related to collecting data like hosts, templates, maintenance, discovery, ... Alert The configuration of our media types, scripts and actions Users User configuration like user roles, user groups, authentication, API tokes, ... Administration The administration part containing all global settings, housekeeper, proxies, queue, ...","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#links-menu","title":"Links menu","text":"<p>Immediately subjacent to the primary application menu on the left-hand interface resides the <code>Links</code> menu. This module furnishes a collection of pertinent hyperlinks for user access.</p> Menu name Details Support This brings us to the technical support page that you can buy from Zabbix. Remember that your local partner is also able to sell these contracts and can help you in your own language. Your local distributors Integrations The official zabbix integration page Help The link to the documentation of your Zabbix version User settings The user profile settings. Sign out Log out of the current session. <p>A few interactive elements remains to be addressed on the right-hand portion of the display.</p> <p></p> <p>2.8 Edit dashboard</p> <p>The <code>Edit dashboard</code> button facilitates modification of the user's dashboard configuration, a feature that will be elaborated upon in subsequent sections. Located on the extreme left margin is a query mark icon ('?'), activation of which redirects the user to the Zabbix documentation portal providing comprehensive details regarding dashboard functionalities. Conversely, the control situated on the right margin, represented by three horizontal lines, provides access to operations such as sharing, renaming, and deletion of user defined dashboards.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#system-information","title":"System information","text":"<p>The dashboard also features a dedicated panel labeled <code>System Information</code>. This widget provides a real-time overview of the operational status of the Zabbix deployment. We will now examine the individual data points presented within this panel, as their interpretation is crucial for system comprehension.</p> <p></p> <p></p> <p>2.9 System Information</p> Parameter Value Details Zabbix server is running The status of our zabbix server if it is running yes or no and if it is running on our localhost or another IP and on what port the zabbix server is listening. If no trapper is listening the rest of the information can not be displayed IP and port of the Zabbix server Zabbix server version This shows us the version of the <code>Zabbix server</code> so the version you see at the bottom of your screen is the one from the Zabbix frontend and can be different but should be in the same major version. Version Number Zabbix frontend version This is the version of the frontend and should match with what you see at the bottom of your screen. Version Number Number of hosts (enabled/disabled) The total number of hosts configured on our system How many of those are enabled and disabled Number of templates The number of templates installed on our Zabbix server. Number of items (enabled/disabled/not supported) This line shows us the number of items we have configured in total in this case 99 90 are enabled and 0 are disabled but 9 of them are unsupported. This last number is important as those are items not working. We will look into this later why it happens and how to fix it. For now remember that a high number of unsupported items is not a good idea. Number of triggers (Enabled/disabled[problem/ok]) The number of triggers configured Number of enabled and disabled triggers. Just as with items we also see if there are triggers that are in a problem state or ok state. A trigger in a problem state is a non working trigger something we need to monitor and fix. We will cover this also later. Number of users (online) Here we see the number of users that are configured on our system The number of users currently online. Required server performance, nvps The number of new values per second that Zabbix will process per second. This is just an estimated number as some values we get are unknown so the real value is probably higher. So we can have some indication about how many IOPS we need and how busy our database is. A better indication is probably the internal item <code>zabbix[wcache,values,all]</code> Global scripts on Zabbix server It notifies us that the Global scripts are enabled or disabled in the server config. Global scripts can be used in our frontend, actions, ... but need to be activated first High availability cluster It will show us if Zabbix HA cluster is disabled or not Failover delay once HA is activated Note <p><code>Global script</code> execution on Zabbix server can be enabled by going to the zabbix server configuration file and setting <code>EnableGlobalScripts=1</code>. For new installations, since Zabbix 7.0, global script execution on Zabbix server is disabled by default.</p> Tip <p>System information may display some additional warnings like when your database  doesn't have the correct character set or collation UTF-8.  Also when the database you used is lower or higher then the recommended version  or when there are misconfigurations on housekeeper or TimescaleDB.  Another warning you can see is about database history tables that aren't  upgraded or primary keys that have not been set. This is possible if you are  coming from an older version before Zabbix 6 and never did the upgrade.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have seen so far our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This has a serious impact on what we can see and do in Zabbix as this user has no restrictions. Zabbix works with 3 different levels of users we have the regular <code>users</code>, <code>Zabbix Admin</code> and <code>Zabbix Super Admin</code> users. Let's have a deeper look at the differences :</p> <p></p> <p>2.10 Main menu sections</p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the yellow   part of the <code>main menu</code> and is able to change our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able   to change the configuration and all the global settings.</li> </ul> <p></p> <p>2.11 Monitoring menu</p> <ul> <li>Problems: This page will give us an overview of all the problems.   With filter we can look at recent problems past problems and problems   that are active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with what's happening   on our hosts and allows us to quickly go to the latest data, graphs and dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the information   collected from all our hosts.</li> <li>Maps: The location where we can create map that are an overview of our   IT infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can find   the results.</li> </ul> <p></p> <p>2.12 Services menu</p> <ul> <li>Services: This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.</li> </ul> <p></p> <p>2.13 Inventory menu</p> <ul> <li>Overview: A place where we can watch all our inventory data that   we have retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.</li> </ul> <p></p> <p>2.14 Inventory menu</p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a <code>pdf</code> of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in <code>ok</code>/<code>nok</code> state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a <code>NOK</code> state.</li> <li>Audit log: An overview of the user activity that happened on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here.   What mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to each   user.</li> </ul> <p></p> <p>2.15 Data collection</p> <ul> <li>Template groups: A place to logical group all templates together in different   groups. Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together.   Host groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped together   on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance   can be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers related   we can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices, services,...   on our network. This can be done here.</li> </ul> <p></p> <p>2.16 Alerts menu</p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions   we have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.</li> </ul> <p></p> <p>2.17 Users menu</p> <ul> <li>User groups: The <code>User groups</code> menu section enables the creation and management of user groupings for streamlined access and permission control.</li> <li>User roles: The <code>User roles</code> menu section defines sets of permissions that can be assigned to individual users, limiting their allowed actions based on the user type they have within the system.</li> <li>Users: The <code>Users</code> menu section provides the interface for managing individual user accounts, including creation and modification settings.</li> <li>API tokens: The <code>API tokens</code> menu section manages authentication credentials specifically designed for programmatic access to the system's Application Programming Interface (API), enabling secure automation and integration with external applications.</li> <li>Authentication: The <code>Authentication</code> menu section configures the methods and settings used to verify user identities and control access to the system.</li> </ul> <p></p> <p>2.18 Administration menu</p> <ul> <li>General: The <code>General</code> menu section within administration allows configuration of core system-wide settings and parameters.</li> <li>Audit log: The <code>Audit log</code> menu section provides a chronological record of system activities and user actions for security monitoring and troubleshooting.</li> <li>Housekeeping: The <code>Housekeeping</code> menu section configures automated maintenance tasks for managing historical data and system performance.</li> <li>Proxies: The <code>Proxies</code> menu section manages the configuration and monitoring of proxy servers used for communication with managed hosts in distributed environments.</li> <li>Macros: The <code>Macros</code> menu section allows the definition and management of global variables for flexible system configuration.</li> <li>Queue: The <code>Queue</code> menu section provides real-time insight into the processing status of internal system tasks and data handling.</li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix developers <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didn't made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#conclusion","title":"Conclusion","text":"<p>The Zabbix frontend serves as the central command center for monitoring, configuration, and system awareness. In this chapter, you explored how to navigate its interface from dashboards and the customizable main menu to powerful tools like system information and global search. You learned how each menu section (Monitoring, Data Collection, Alerts, Users, Administration, and more) aligns with distinct functions, and how kiosk mode and layout controls help optimize visibility during daily operations.</p> <p>Additionally, the system information widget stands out as a real time diagnostic snapshot, revealing critical metrics such as server status, number of hosts, templates, items, triggers, and user activity all of which aid rapid troubleshooting and performance assessment.</p> <p>By mastering these frontend components, you're now better equipped to confidently navigate Zabbix, manage user access, interpret monitoring data, and maintain your environment more effectively. This foundational knowledge lays the groundwork for deeper exploration into host configuration, authentication mechanisms, and advanced monitoring workflows in the chapters that follow.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#questions","title":"Questions","text":"<ul> <li> <p>Which frontend section (Monitoring, Data Collection, Alerts, Users, or Administration)   do you think you'll use most often in your daily work, and why?</p> </li> <li> <p>How can kiosk mode be useful in a real-world monitoring environment, and what   types of dashboards would you display with it?</p> </li> <li> <p>What insights can the system information widget provide during troubleshooting,   and how might it help identify issues with server performance?</p> </li> <li> <p>Why is it important to understand the difference between data displayed in \u201cMonitoring\u201d   and configuration options found in \u201cData Collection\u201d?</p> </li> <li> <p>If you were onboarding a new team member, which parts of the frontend would you   show them first, and why?</p> </li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#useful-urls","title":"Useful URLs","text":"<ul> <li> <p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/dashboards</p> </li> <li> <p>https://blog.zabbix.com/handy-tips-6-organize-your-dashboards-and-create-slideshows-with-dashboard-pages/17511/</p> </li> <li> <p>https://blog.zabbix.com/interactive-dashboard-creation-for-large-organizations-and-msps/30132/</p> </li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/","title":"Host Groups","text":"<p>In Zabbix, host groups serve as a foundational mechanism for organizing monitored entities. They allow you to logically categorize hosts for easier management, simplified permissions, and streamlined configuration, especially useful in larger environments.</p> <p>Common examples include:</p> <ul> <li>Grouping all Linux servers together.</li> <li>Separating database servers (e.g., PostgreSQL, MySQL).</li> <li>Organizing hosts by team, location, or function.</li> </ul> <p>Host groups are not only for structuring your monitored hosts, they also play an important role in assigning templates, setting up user permissions, and filtering hosts in dashboards or maps.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#accessing-host-groups","title":"Accessing Host Groups","text":"<p>You can manage host groups by navigating to:</p> <p>Menu \u2192 Data collection \u2192 Host groups</p> <p></p> <p>2.19 Host Groups menu</p> <p>In this menu under <code>Data collection</code>, you'll notice two distinct sections:</p> <ul> <li>Host groups: Groups that contain hosts.</li> <li>Template groups: A newer addition, specifically created for organizing templates.</li> </ul> Info <p>If you're migrating from an older Zabbix version: In previous versions, templates and hosts were often placed in the same groups. This led to confusion, particularly for new users, as templates don't technically belong to host groups in Zabbix. As of recent versions (starting from Zabbix 6.x), template groups are separated out for better clarity.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#understanding-the-host-groups-overview","title":"Understanding the Host Groups Overview","text":"<p>When you open the Host groups menu, you'll see a list of predefined groups. Each group entry includes:</p> <ul> <li>Group name (e.g., <code>Linux servers</code>)</li> <li>Number of hosts in the group (displayed as a number in front)</li> <li>Host names currently assigned to that group</li> </ul> <p>Clicking on a host name will take you directly to the host's configuration screen, providing a convenient way to manage settings without navigating through multiple menus.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#creating-a-host-group","title":"Creating a Host Group","text":"<p>There are two main ways to create host groups:</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#1-during-host-creation","title":"1. During Host Creation","text":"<p>When adding a new host:</p> <ol> <li>Go to Data collection \u2192 Hosts.</li> <li>Click Create host (top right).</li> <li>In the Host groups field, select an existing group or type a new name to    create one on the fly.</li> </ol>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#2-from-the-host-groups-page","title":"2. From the Host Groups Page","text":"<ol> <li>Navigate to Data collection \u2192 Host groups.</li> <li>Click Create host group in the top right.</li> <li>Enter a Group name and click Add.</li> </ol> <p>2.20 Create new host groups</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#nested-host-groups","title":"Nested Host Groups","text":"<p>Zabbix supports nested host groups using forward slashes (<code>/</code>) in group names. This allows you to represent hierarchies such as:</p> <ul> <li><code>Europe/Belgium</code></li> <li><code>Europe/France</code></li> <li><code>Datacenters/US/Chicago</code></li> </ul> <p>These nested group names are just names Zabbix does not require that parent folders (e.g., <code>Europe</code>) physically exist as separate groups unless you explicitly create them.</p> Note <ul> <li>You cannot escape the <code>/</code> character.</li> <li>Group names cannot contain leading/trailing slashes or multiple consecutive   slashes.</li> <li><code>/</code> is reserved for nesting and cannot be used in regular group names.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#applying-permissions-and-tag-filters-to-nested-groups","title":"Applying Permissions and Tag Filters to Nested Groups","text":"<p>Once you've created nested groups, the Host group overview screen provides an option to apply permissions and tag filters to all subgroups:</p> <ol> <li>Click on a parent group (e.g., <code>Europe</code>).</li> <li>A box appears: Apply permissions and tag filters to all subgroups.</li> <li>Enabling this will cascade any rights assigned to the parent group down to its    subgroups.</li> </ol> <p></p> <p>2.21 subgroup permissions</p> <p>This is especially useful for user groups. For example:</p> <ul> <li>If Brian is in a user group with access to <code>Europe/Belgium</code>, enabling this   option allows Brian to see all hosts in subgroups like <code>Europe/Belgium/Gent</code>   or <code>Europe/Belgium/Brussels</code>, including their tags and data.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#best-practices","title":"Best Practices","text":"<ul> <li>Use a consistent naming convention: <code>Location/Function</code>, <code>Team/Environment</code>, etc.</li> <li>Assign hosts to multiple groups if they logically belong in more than one.</li> <li>Avoid overly deep nesting keep it readable and manageable.</li> <li>Regularly review group usage and clean up unused or outdated groups.</li> </ul> Tip <p>You can even try adding emojis to group names for a fun visual touch! \ud83c\udf89 For example: <code>\ud83c\udf0d Europe/\ud83c\udde7\ud83c\uddea Belgium</code> or <code>\ud83d\udce6 Containers/Docker</code>.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#conclusion","title":"Conclusion","text":"<p>Host groups are a key organizational tool in Zabbix. With the introduction of template groups, clearer group separation, and support for nested structures, modern versions of Zabbix offer great flexibility for tailoring your monitoring setup to your organization's structure and workflows.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#questions","title":"Questions","text":"<ul> <li>What are host groups used for in Zabbix?</li> <li>Can you assign a host to more than one group?</li> <li>How are nested groups created in Zabbix?</li> <li>What happens when you apply permissions to subgroups?</li> <li>Why are slashes (/) special in host group names?</li> <li>Can a parent group exist only logically (i.e., not created in Zabbix)?</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/hosts/host_groups</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/http/","title":"HTTP","text":"<p>HTTP authentication is one of external authentication methods provided by Zabbix and can be used to additionally secure your Zabbix WebUI with basic authentication mechanism at HTTP server level.</p> <p>Basic HTTP authentication protects Website (Zabbix WebUI) resources with a username and password. When a user attempts to access Zabbix WebUI, the browser pops up a dialog asking for credentials before sending anything over to Zabbix WebUI php code.</p> <p>An HTTP server has a file with credentials that is used to authenticate users.</p> Note <p>IMPORTANT: usernames configured for basic authentication in HTTP server must exit in Zabbix. But only passwords configured in HTTP server are used for users authentication.</p> <p>First let's see how we can configure basic authentication in HTTP server.</p> Warning <p>The examples below provide just minimum set of options to configure basic authentication. Please refer to respective HTTP server documentation for more details</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#basic-authentication-in-nginx","title":"Basic authentication in Nginx","text":"<p>Find <code>location / {</code> block in Nginx configuration file that defines your Zabbix WebUI (in my Zabbix deployment it is <code>/etc/nginx/conf.d/nginx.conf</code> file) and add these two lines:</p> <pre><code>    location / {\n        ...\n        auth_basic \"Basic Auth Protected Site\";\n        auth_basic_user_file /etc/nginx/httpauth;\n    }\n</code></pre> <p>Do not forget to restart Nginx service after making this change.</p> <p>Then you need to create <code>/etc/nginx/httpauth</code> file which will keep all users' password (make sure to restrict access to this file). Format of this file is <code>username:hashed_password</code>, for example, for users <code>Admin</code> and <code>test</code>:</p> <pre><code>Admin:$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\ntest:$1$GXoDIOCA$u/n1kkDeFwcI4KhyHkY6p/\n</code></pre> <p>To generate hashed_password you can use <code>openssl</code> tool entering the password twice: <pre><code>openssl passwd\nPassword:\nVerifying - Password:\n$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\n</code></pre></p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#basic-authentication-in-apache-httpd","title":"Basic authentication in Apache HTTPD","text":"<p>Find <code>&lt;Directory \"/usr/share/zabbix\"&gt;</code> block in Apache HTTPD configuration file that defines your Zabbix WebUI (in my case it is <code>/etc/zabbix/apache.conf</code>) and add these lines:</p> Note <p>By default configuration has <code>Require all granted</code>, remove this line.</p> <p>For Ubuntu/Debian: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>For RedHat: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/httpd/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>Do not forget to restart apache2 service after making this change.</p> <p>Create <code>/etc/apache2/.httpasswd</code> (<code>/etc/httpd/.htpassword</code> for RedHat) file that will have all the users with passwords, do it by using <code>htpasswd</code> tool, to add user <code>test</code> execute:</p> <p>For Ubuntu/Debian <pre><code>sudo htpasswd -c /etc/apache2/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>For RedHat <pre><code>sudo htpasswd -c /etc/httpd/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>To add more users to the file repeat the command without <code>-c</code> flag.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#zabbix-configuration-for-http-authentication","title":"Zabbix configuration for HTTP authentication","text":"<p>When we have a WEB server configured with basic authentication it is high time to configure Zabbix server. In Zabbix menu select <code>Users | Authentication | HTTP settings</code> and check <code>Enable HTTP authentication</code> check-box. Click <code>Update</code> and confirm the changes by clicking <code>OK</code> button.</p> <p></p> <p>2.1 HTTP users authentication</p> <p><code>Remove domain name</code> field should have a comma separated list of domains that Zabbix will remove from provided username, e.g. if a user enters \"test@myzabbix\" or \"myzabbix\\test\" and we have \"myzabbix\" in this field then the user will be logged in with username \"test\".</p> <p>Unchecking <code>Case-sensitive login</code> check-box will tell Zabbix to not pay attention to capital/small letters in usernames, e.g. \"tEst\" and \"test\" will become equally legitimate usernames even if in Zabbix we have only \"test\" user configured.</p> <p>Note that <code>Default login form</code> is set to \"Zabbix login form\". Now if you sign out you will see \"Sign in with HTTP\" link below Username and Password fields. If you click on the link you will be automatically logged in into Zabbix WebUI with the same username you previously used. Or you can enter different Username and Password and normally log in into Zabbix WebUI as different user.</p> <p></p> <p>2.2 HTTP users authentication login form</p> <p>If you select \"HTTP login form\" in <code>Default login form</code> drop-down you won't see standard Zabbix login form when you try to log out. You actually won't be able to sign out unless your authentication session expires. The only way to sign out is to clear cookies in your browser. Then you'll have to go through the Web server basic authentication procedure again.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#conclusion","title":"Conclusion","text":"<p>Configuring HTTP level authentication adds a critical layer of access control to your Zabbix Web UI by leveraging your web server's native authentication mechanisms. Whether using Nginx or Apache, this approach ensures that users are prompted for credentials before even reaching Zabbix, effectively guarding against unauthorized access at the HTTP entry point. Key considerations include ensuring that usernames used in the HTTP authentication are already defined within Zabbix itself only the password from the web server matters for credential checks and correctly setting up Zabbix's HTTP authentication settings (such as domain removal and case sensitivity options). By coordinating web server authentication settings with Zabbix's internal configuration, you can achieve seamless and secure user login workflows that blend frontend usability with robust protective measures.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#questions","title":"Questions","text":"<ul> <li> <p>What advantage does HTTP (web server based) authentication provide compared to   Zabbix's internal authentication mechanism? (Consider protection at the web   server layer before the user even reaches the Zabbix UI.)</p> </li> <li> <p>Why is it essential that a user must exist in Zabbix even when HTTP authentication   is enabled and why does the Zabbix password become irrelevant in that case?</p> </li> <li> <p>What are the configuration options in Zabbix's frontend under \u201cAdministration   \u2192 Authentication\u201d for HTTP authentication, and how might each affect login behavior?   Examples include enabling/disabling case sensitivity, domain stripping, and choice   of login form. </p> </li> <li> <p>Suppose you disable case sensitive logins and maintain both 'Admin' and 'admin'   accounts in Zabbix. How will HTTP authentication behave, and what outcome should   you expect?</p> </li> <li> <p>Imagine troubleshooting a login failure when using HTTP authentication: What   steps would you take to ensure the web server\u2019s authentication is configured   correctly before examining Zabbix settings?</p> </li> <li> <p>From a security standpoint, when would HTTP authentication alone be   insufficient and what other authentication methods (e.g., LDAP, SAML, MFA) might   you layer on top for added security?</p> </li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/http</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/ldap-ad/","title":"LDAP / AD","text":"<p>As any modern system Zabbix can perform users authentication using Lightweight Directory Access Protocol (LDAP). In theory LDAP is very well defined open protocol that should be vendor independent but its relative complexity plays a role in every LDAP server implementation. Zabbix is known to work well with Microsoft Active Directory and OpenLDAP server.</p> <p>LDAP authentication can be configured in two modes:</p> <ul> <li>Users authentication</li> <li>Users authentication with users provisioning</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#users-authentication-mode","title":"Users authentication mode","text":"<p>The process of the authenticating users follows this diagram.</p> <p></p> <p>2.3 LDAP users authentication</p> <p>As shown on the diagram a user that tries to log in must be pre-created in Zabbix to be able to log in using LDAP. The database user records do not have any fields \"saying\" that the user will be authenticated via LDAP, it's just users' passwords stored in the database are ignored, instead, Zabbix goes to a LDAP server to verify whether:</p> <ul> <li>user with a given username exists</li> <li>user provided the correct password</li> </ul> <p>no other attributes configured for the user on the LDAP server side are taken into account.</p> <p>So when Zabbix is used by many users and groups, user management becomes not a very trivial task as new people join different teams (or leave). This problem is addressed by \"users provisioning\" and we'll cover this topic a bit later. For now let's take a look at how to configure LDAP authentication.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#configure-ldap","title":"Configure LDAP","text":"<p>We believe that it is better to learn this topic by example so we'll be using our own LDAP server that you can spin up in a container by executing:</p> <pre><code># Install docker if you don't have it\n# For Ubuntu\napt install docker-ce\n\n# Start LDAP server container with pre-loaded data\ndocker run -p 3389:389 -p 6636:636 --name openldap-server --detach bgmot42/openldap-server:0.1.1\n</code></pre> <p>All users (including <code>ldap_search</code>) in this test LDAP server for simplicity have the word <code>password</code> as their passwords.</p> <p>Users <code>user1</code> and <code>user2</code> is a member of <code>zabbix-admins</code> LDAP group. User <code>user3</code> is a member of <code>zabbix-users</code> LDAP group.</p> Optional <p>To visually see LDAP server data (and add your own configuration like users and groups) you can start this standard container <code>docker run -p 8081:80 -p 4443:443 --name phpldapadmin --hostname phpldapadmin\\ --link openldap-server:ldap-host --env PHPLDAPADMIN_LDAP_HOSTS=ldap-host\\ --detach osixia/phpldapadmin:0.9.0</code> Now you can access this LDAP server via https://:4443 (or any other port you configure to access this Docker container), click Login, enter \u201ccn=admin,dc=example,dc=org\u201d in Login DN field and \u201cpassword\u201d in Password field, click Authenticate. You should see the following structure of the LDAP server (picture shows \u2018zabbix-admins\u2019 group configuration): <p></p> <p>2.4 LDAP server data</p> <p>Let's configure LDAP server settings in Zabbix. In Zabbix menu select <code>Users | Authentication | LDAP settings</code>, then check the check-box <code>Enable LDAP authentication</code> and click <code>Add</code> under <code>Servers</code> (change IP address of your LDAP server and port number according to your set up):</p> <p></p> <p>2.5 LDAP server settings in Zabbix</p> <p>Following diagram can help you understand how to configure LDAP server in Zabbix based on your LDAP server data structure:</p> <p></p> <p>2.6 LDAP server to Zabbix</p> <p>\u201cSpecial\u201d Distinguished Name (DN) cn=ldap_search,dc=example,dc=org is used for searching, i.e. Zabbix uses this DN to connect to LDAP server and of course when you connect to LDAP server you need to be authenticated \u2013 this is why you need to provide Bind password. This DN should have access to a sub-tree in LDAP data hierarchy where all your users are configured. In our case all the users configured \u201cunder\u201d ou=Users,dc=example,dc=org, this DN is called base DN and used by Zabbix as so to say \u201cstarting point\u201d to start searching.</p> Note <p>technically it is possible to bind to LDAP server anonymously, without providing a password but this is a huge breach in security as the whole users sub-tree becomes available for anonymous (unauthenticated) search, i.e. effectively exposed to any LDAP client that can connect to LDAP server over TCP. The LDAP server we deployed previously in Docker container does not provide this functionality.</p> <p>Click <code>Test</code> button and enter <code>user1</code> and <code>password</code> in the respective fields, the test should be successful confirming Zabbix can authenticate users against LDAP server.</p> Note <p>We can add multiple LDAP servers and use them for different <code>User groups</code>.</p> <p>To test real users login using LDAP authentication we need to create user groups and users in Zabbix. In Zabbix menu select <code>Users | User groups</code>. Make sure <code>Zabbix administrators</code> group exists (we'll need it later) and create new group <code>Zabbix users</code> by clicking <code>Create user group</code> button. Enter \"Zabbix users\" in <code>Group name</code> field, select \"LDAP\" in <code>Frontend access</code> drop-down that will make Zabbix to authenticate users belonging to this group against LDAP server and in <code>LDAP server</code> drop-down select LDAP server we earlier configured \"Test LDAP server\". Click <code>Add</code> button to create this User group:</p> <p></p> <p>2.7 Add user group in zabbix</p> <p>Now we need to create our test user. In Zabbix menu select <code>Users | Users</code> and click <code>Create user</code> button. Then enter \"user3\" in <code>Username</code> field. Select \"Zabbix users\" in <code>Groups</code> field. What you enter in <code>Password</code> and <code>Password (once again)</code> fields does not matter as Zabbix will not try to use this password, instead it will go to LDAP server to authenticate this user since it's a member of the User group that has authentication method <code>LDAP</code>, just make sure you enter the same string in these two fields and it satisfied your password strength policy defined in <code>Users | Authentication</code>.</p> <p></p> <p>2.8 Add user in Zabbix</p> <p>Then click <code>Permissions</code> tab and select \"User role\" in <code>Role</code> field:</p> <p></p> <p>2.9 Add user in Zabbix - permissions</p> <p>Click <code>Add</code> button to create the user.</p> <p>We are ready to test our LDAP server authentication! Click <code>Sign out</code> in Zabbix menu and login with \"user3\" as Username and \"password\" as <code>Password</code>, if you carefully followed the steps above you should successfully login with User role permissions.</p> <p>Click <code>Sign out</code> again and login as Admin again to proceed.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#just-in-time-user-provisioning","title":"Just-in-Time user provisioning","text":"<p>Now let's talk about really cool feature Zabbix provides - \"Just-in-Time user provisioning (JIT) available since Zabbix 6.4.</p> <p>This picture illustrates on high level how it works: </p> <p>2.10 LDAP JIT explained</p> <p>Here when Zabbix gets a username and password from the Zabbix Login form it goes to the LDAP server and gets all the information available for this user including his/her LDAP groups membership and e-mail address. Obviously, it gets all that only if the correct (from LDAP server perspective) username and password were provided. Then Zabbix goes through pre-configured mapping that defines users from which <code>LDAP group</code> goes to which <code>Zabbix user group</code>. If at least one match is found then a <code>Zabbix user</code> is created in the Zabbix database belonging to a <code>Zabbix user group</code> and having a <code>Zabbix user role</code> according to configured \u201cmatch\u201d. So far sounds pretty simple, right? Now let\u2019s go into details about how all this should be configured.</p> <p>In <code>Users | Authentication</code> we need to do two things:</p> <ul> <li> <p>Set <code>Default authentication</code> to LDAP. When JIT is turned off then type of   authentication is defined based on the User group a user that tries to login   belongs to. In case of JIT the user does not exist in Zabbix yet thus obviously   does not belong to any User group so Default method authentication is used   and we want it to be LDAP.</p> </li> <li> <p>Provide <code>Deprovisioned users group</code>. This group must be literally disabled   otherwise you won't be able to select it here. This is the Zabbix user group   where all de-provisioned users will be put into so effectively will get   disabled from accessing Zabbix.</p> </li> </ul> <p></p> <p>2.11 Default authentication</p> <p>Click <code>Update</code> button`.</p> <ul> <li>Enable JIT provisioning check-box which obviously needs to be checked for this   feature to work. It's done in our Test LDAP server configuration - select   <code>Users | Authentication | LDAP settings</code> and click on our server in <code>Servers</code>   section. After enabling this check-box we'll see some other fields related to   JIT to be filled in and what we put in there depends on the method we choose to   perform JIT.</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#group-configuration-method-memberof","title":"Group configuration method \u201cmemberOf\u201d","text":"<p>All users in our LDAP server have memberOf attribute which defines what LDAP groups every user belongs to, e.g. if we perform a LDAP query for user1 user we\u2019ll get that its memberOf attribute has this value:</p> <p>memberOf: cn=zabbix-admins,ou=Group,dc=example,dc=org</p> <p>Note, that your real LDAP server can have totally different LDAP attribute that provides users\u2019 group membership, and of course, you can easily configure what attribute to use when searching for user\u2019s LDAP groups by putting it into <code>User group membership attribute</code> field:</p> <p></p> <p>2.12 LDAP groups mapping</p> <p>In the picture above we are telling Zabbix to use memberOf attribute to extract DN defining user\u2019s group membership (in this case it is cn=zabbix-admins,out=Group,dc=example,dc=org) and take only cn attribute from that DN (in this case it is zabbix-admins) to use in searching for a match in User group mapping rules. Then we define as many mapping rules as we want. In the picture above we have two rules:</p> <ul> <li>All users belonging to zabbix-users LDAP group will be created in Zabbix as   members of Zabbix users group with User role</li> <li>All users belonging to zabbix-admins LDAP group will be created in Zabbix   as members of Zabbix administrators group with Super admin role</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#group-configuration-method-groupofnames","title":"Group configuration method \u201cgroupOfNames\u201d","text":"<p>There is another method of finding users\u2019 group membership called \u201cgroupOfNames\u201d it is not as efficient as \u201cmemberOf\u201d method but can provide much more flexibility if needed. Here Zabbix is not querying LDAP server for a user instead it is searching for LDAP groups based on a given criterion (filter). It\u2019s easier to explain with pictures depicting an example:</p> <p></p> <p>2.13 LDAP server groupOfNames</p> <p>Firstly we define LDAP \u201csub-tree\u201d where Zabbix will be searching for LDAP groups \u2013 note ou=Group,dc=example,dc=org in Group base DN field. Then in the field <code>Group name attribute</code> field we what attribute to use when we search in mapping rules (in this case we take cn, i.e. only zabbix-admins from full DN cn=zabbix-admins,ou=Group,dc=example,dc=org). Each LDAP group in our LDAP server has member attribute that has all users that belong to this LDAP group (look at the right picture) so we put member in <code>Group member attribute</code> field. Each user\u2019s DN will help us construct <code>Group filter</code> field. Now pay attention: <code>Reference attribute</code> field defines what LDAP user\u2019s attribute Zabbix will use in the <code>Group filter</code>, i.e. %{ref} will be replaced with the value of this attribute (here we are talking about the user\u2019s attributes \u2013 we already authenticated this user, i.e. got all its attributes from LDAP server). To sum up what I've said above Zabbix:</p> <ol> <li>Authenticates the user with entered Username and Password against LDAP    server getting all user\u2019s LDAP attributes</li> <li>Uses <code>Reference attribute</code> and <code>Group filter</code> fields to construct a filter    (when user1 logs in the filter will be (member=uid=user1,ou=Users,dc=example,    dc=org)</li> <li>Performs LDAP query to get all LDAP groups with member attribute (configured    in <code>Group member attribute</code> field) containing constructed in step 2) filter</li> <li>Goes through all LDAP groups received in step 3) and picks <code>cn</code> attribute    (configured in <code>Group name attribute</code> field) and finds a match in User group    mapping rules</li> </ol> <p>Looks a bit complicated but all you really need to know is the structure of your LDAP data.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#ready-to-test","title":"Ready to test","text":"<p>Now when you login with user1 or user2 username then these users will be created by Zabbix and put into Zabbix administrators user group, when you login with user3 username then this user will be created by Zabbix and put into Zabbix users user group:</p> <p></p> <p>2.14 Test user1</p> <p></p> <p>2.15 Test user3</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#conclusion","title":"Conclusion","text":"<p>Integrating Zabbix with LDAP\u2014or specifically, Active Directory elevates your system's authentication capabilities by leveraging existing organizational credentials. It allows users to log in using familiar domain credentials, while Zabbix offloads the password verification process to a trusted external directory. Notably, even when configuring LDAP authentication, corresponding user accounts must still exist within Zabbix though their internal passwords become irrelevant once external authentication is active.</p> <p>Particularly powerful is the Just-In-Time (JIT) provisioning feature: this enables Zabbix to dynamically create user accounts upon first successful LDAP login streamlining onboarding and reducing manual administration. Beyond that, JIT supports ongoing synchronization updating user roles, group memberships, or even user removals in Zabbix to mirror changes in LDAP\u2014either when a user logs in or during configured provisioning intervals.</p> <p>Important configuration details such as case sensitivity, authentication binding methods, search filters, and group mapping need careful attention to ensure reliable and secure operation. And while LDAP offers seamless integration, Zabbix still maintains control over roles, permissions, and access behavior through its own user and user group models Zabbix.</p> <p>In sum, LDAP/AD authentication offers a scalable, secure, and enterprise-aligned approach to centralizing identity management in Zabbix. With flexible provisioning and synchronization, organizations can reduce administrative load while reinforcing consistency across their access control and authentication strategy.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#questions","title":"Questions","text":"<ul> <li> <p>What are the main benefits of integrating Zabbix authentication with LDAP or Active   Directory compared to using only internal Zabbix accounts?</p> </li> <li> <p>Why must a user still exist in Zabbix even when LDAP authentication is enabled,   and what role does the internal password play in that case?</p> </li> <li> <p>How does Just-In-Time (JIT) provisioning simplify user management in Zabbix,   and what potential risks or caveats should an administrator consider when   enabling it?</p> </li> <li> <p>What is the difference between user authentication and user authorization in   the context of LDAP integration with Zabbix? (Hint: Authentication verifies   credentials, while authorization determines permissions inside Zabbix.)</p> </li> <li> <p>Imagine an administrator incorrectly configures the LDAP search filter. What issues   might users encounter when attempting to log in, and how could you troubleshoot   the problem?</p> </li> <li> <p>How could LDAP group mappings be used to streamline permission assignment in   Zabbix? Can you think of an example from your own environment?</p> </li> <li> <p>If an organization disables a user account in Active Directory, how does JIT   provisioning ensure that Zabbix access is also updated? What would happen if   JIT was not enabled?</p> </li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/ldap</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/mfa/","title":"Multi factor authentication","text":"<p>We all know that before you can start configuring Zabbix via WebUI you have to sign in. Zabbix has several options to provide better security for user passwords by configuring password policy:</p> <ul> <li>Requirement for Minimum password length</li> <li>Requirements for password to contain an uppercase and a lowercase Latin letter,   a digit, a special character</li> <li>Requirement to avoid easy-to-guess passwords</li> </ul> <p>To secure sign in process even more you can configure multi factor authentication (MFA). MFA protects Zabbix by using a second source of validation before granting access to its WebUI after a user enters his/her password correctly. Zabbix offers to types of MFA - Time-based one-time password (TOTP) and Duo MFA provider.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#time-based-one-time-password","title":"Time-based one-time password","text":"<p>In the menu select <code>Users</code> section and then <code>Authentication</code></p> <p></p> <p>2.20 Initial MFA settings</p> <p>Now in <code>MFA settings</code> tab select the <code>Enable multi-factor authentication</code> check-box, then select <code>TOTP</code> in Type drop-down list.</p> <p></p> <p>2.21 New MFA method</p> <p>In <code>Hash function</code> drop-down list you can choose SHA-1, SHA-256 or SHA-512, the higher number is the better security.</p> <p>In <code>Code lentgh</code> you can select how many digits will be generated for you by Authenticator application on your phone.</p> <p>Click <code>Add</code> and then <code>Update</code>. Now you have TOTP MFA configured and it is the default method of MFA.</p> <p></p> <p>2.22 New MFA method added</p> <p>Now you need to tell Zabbix for which User group (or groups) to use MFA. Let's create a User group that would require MFA.</p> <p>In the menu select <code>Users</code> section and then <code>User groups</code>, then click <code>Create user group</code> button</p> <p></p> <p>2.23 Create user group</p> <p>In <code>Group name</code> put \"test\". Note that <code>Multi-factor authentication</code> field is \"Default\", as currently we have only one MFA method configured it does not matter whether we select \"Default\" or \"TOTP1\" that we created above. You also can disable MFA for all users belonging to this User group. Click <code>Add</code> button to create \"test\" User group.</p> <p></p> <p>2.24 New user group configuration</p> Note <p>MFA method is defined on per User group basis, i.e. MFA method configured for a User group will be applied to all users belonging to this group.</p> <p>Let's add a user to this user group. In the menu select <code>Users</code> section and then <code>Users</code>, then click <code>Create user</code> button</p> <p></p> <p>2.25 Create user</p> <p>Fill in <code>Username</code>, <code>Password</code> and <code>Password (once again)</code> fields. Make sure you select <code>test</code> user group in <code>Groups</code> field.</p> <p></p> <p>2.26 New user configuration</p> <p>Then switch to <code>Permissions</code> tab and select any role.</p> <p></p> <p>2.27 New user permissions</p> <p>Click <code>Add</code> button to add the user.</p> <p>Now we can test how TOTP MFA works. Sign out and then try to sign in as a test user you just created. You will be presented with a QR code. That means that the user <code>test</code> has not been enrolled in TOTP MFA yet.</p> <p></p> <p>2.28 TOTP QR code</p> <p>On your phone you need to install either \"Microsoft authenticator\" or \"Google authenticator\" application. The procedure of adding new QR code is quite similar, here is how it looks in \"Google authenticator\". Tap <code>Add a code</code> and then <code>Scan a QR code</code>. You'll be immediately presented with a 6 digit code (remember we selected 6 in <code>Code length</code> when we configured TOTP MFA?)</p> <p></p> <p>2.29 Authenticator app, step 1</p> <p></p> <p>2.30 Authenticator app, step 2</p> <p></p> <p>2.31 Authenticator app, step 3</p> <p>Enter this code into <code>Verification code</code> field of your login screen and click <code>Sign in</code>, if you did everything right you are logged in into Zabbix at this point. At this point the user \"test\" is considered enrolled into TOTP MFA and Zabbix stores a special code used for further authentications in its database. The next time user \"test\" tries to login into Zabbix there will be only a field to enter verification code</p> <p></p> <p>2.32 Verification code request</p> Warning <p>For TOTP MFA to work your Zabbix server must have correct time. Sometimes it's not the case especially if you are working with containers so pay attention to this.</p> <p>If a user changes (or loses) his/her phone, then Zabbix administrator should reset his/her enrolment. To do that in the menu select <code>Users</code> then mark a check-box to the left of \"test\" user and click \"Reset TOTP secret\" button.</p> <p></p> <p>2.33 Reset TOTP secret</p> <p>After you reset TOTP secret the \"test\" user will have to undergo enrolment procedure again.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#duo-mfa-provider","title":"Duo MFA provider","text":"<p>Duo is a very famous security platform that provides a lot of security related features/products. To read more please visit Duo. Here we'll talk about Duo only in regards to Zabbix MFA.</p> Warning <p>For Duo MFA to work your Zabbix WebUI must be configured to work with HTTPS (valid certificate is not required, self-signed certificate will work).</p> <p>First of all you need to create an account with Duo (it's free to manage up to 10 users) then login into Duo, you are an admin here. In the menu on the left select <code>Applications</code> and click <code>Protect an Application</code> button.</p> <p></p> <p>2.34 DUO Applications menu</p> <p>Then you will see WebSDK in applications list, click on it</p> <p></p> <p>2.35 DUO Applications list</p> <p>Here you'll see all the data needed for Zabbix.</p> <p></p> <p>2.36 DUO WebSDK application settings</p> <p>Now let's go to Zabbix. First we need to configure Duo MFA method. In the menu select <code>Users</code> and click <code>Authentication</code>. Then on <code>MFA settings</code> tab click <code>Add</code> in <code>Methods</code> section.</p> <p></p> <p>2.37 Add MFA method</p> <p>Fill in all the fields with data from Duo Dashboard -&gt; Applications -&gt; Web SDK page (see screenshot above) and click <code>Add</code>, then click <code>Update</code> to update Authentication settings.</p> <p></p> <p>2.38 DUO method settings</p> <p>After the MFA method is configured let's switch the \"Test\" group to use Duo MFA. In the menu select <code>Users</code> and click <code>User groups</code>, then click \"test\" group. In the field <code>Multi-factor authentication</code> select \"DUO1\" and click <code>Update</code>.</p> <p></p> <p>2.39 DUO MFA authentication method for user group</p> <p>Everything is ready. Let's test it. Sign out of Zabbix and sign back in with \"test\" user. You should see a welcome screen from Duo. Click several <code>Next</code> buttons.</p> <p></p> <p>2.40 Enrolling into DUO, step1</p> <p></p> <p>2.41 Enrolling into DUO, step2</p> <p></p> <p>2.42 Enrolling into DUO, step3</p> <p>Then you need to select the method of authentication.</p> <p></p> <p>2.43 Enrolling into DUO, step4</p> <p>It is up to you what to select you can experiment with all these methods. Let's select \"Duo Mobile\" (you need to install \"Duo mobile\" application on your device). Click <code>I have a tablet</code> (it's just easier to activate your device this way) and confirm that you installed \"Duo mobile\" on your phone. At this point you should see a QR code that you need to scan in \"Duo mobile\" application.</p> <p></p> <p>2.44 Enrolling into DUO, step5</p> <p></p> <p>2.45 Enrolling into DUO, step6</p> <p></p> <p>2.46 Enrolling into DUO, step7</p> <p>Open \"Duo mobile\" on your phone. If you did not have this application previously installed (thus no accounts enrolled) you will see couple of welcome screens.</p> <p></p> <p>2.47 Configure DUO app, step 1</p> <p></p> <p>2.48 Configure DUO app, step 2</p> <p>Tap on \"Use a QR code\" and then scan the code presented by Duo in your Zabbix login screen. After you do that you will see that the account is enrolled to your Duo MFA. Enter account name and tap \"Done\" and you will see the account in the list of all accounts enrolled into Duo MFA on this device. In Zabbix WebUI you will also see a confirmation, click \"Continue\".</p> <p></p> <p>2.49 Configure DUO app, step 3</p> <p></p> <p>2.50 Configure DUO app, step 4</p> <p></p> <p>2.51 Enrolment confirmation</p> <p>Duo will ask you now whether you want to add another method of authentication, click <code>Skip for now</code> and you'll see a confirmation that set up completed. Click <code>Login with Duo</code> and a notification will be pushed to your device.</p> <p></p> <p>2.52 Add another way to login</p> <p></p> <p>2.53 MFA DUO set up completed</p> <p></p> <p>2.54 DUO push notification sent</p> <p>Now just tap on \"Approve\" on your device and you will be logged in into Zabbix.</p> <p></p> <p>2.55 DUO push notification on the phone</p> <p>Duo MFA enrolment complete. If you sign out and sign in back then immediately a push notification will be sent to your device and all you need is tap on \"Approve\". Also you will see the user \"test\" in Duo where you can delete the user, or deactivate just click on it and experiment.</p> <p></p> <p>2.56 New user registered in DUO</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#conclusion","title":"Conclusion","text":"<p>Implementing Multi-Factor Authentication (MFA) in Zabbix is a powerful way to significantly advance your system\u2019s security beyond the standard password policies. This chapter outlined how Zabbix supports two robust MFA mechanisms:</p> <ul> <li> <p>Time Based One-Time Password (TOTP): Offers user-friendly, secure login via an   authenticator app (like Google or Microsoft Authenticator). It's easy to   configure and effective just ensure that your Zabbix server maintains accurate   time settings to avoid authentication issues.</p> </li> <li> <p>Duo MFA: Integrates a more advanced, enterprise grade solution that provides   features like push notifications and customizable authentication methods. Duo   offers flexible and strong security, albeit requiring a bit more setup (including   HTTPS on the Zabbix WebUI).</p> </li> </ul> <p>Both MFA options elevate the login process by introducing an additional layer of validation. Administrators can apply MFA selectively by assigning it to specific user groups thus tailoring the security posture to organizational needs.</p> <p>Ultimately, enabling MFA not only enhances protection against unauthorized access but also fits within a broader strategy of robust authentication. Whether through TOTP or Duo, adding MFA demonstrates a commitment to safeguarding access to your Zabbix environment and fortifying your monitoring infrastructure.n</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#questions","title":"Questions","text":"<ul> <li> <p>Why is relying on a password alone not sufficient to secure access to a Zabbix   instance? (Think about common attack methods like password reuse, brute force,   or phishing.)</p> </li> <li> <p>What are the key differences between TOTP-based MFA and Duo MFA in terms of setup,   security, and user experience?</p> </li> <li> <p>How does accurate system time affect the reliability of TOTP authentication,   and what could go wrong if time synchronization is not maintained?</p> </li> <li> <p>If you were tasked with enabling MFA for a production Zabbix system, which method   (TOTP or Duo) would you choose, and why? (Consider factors such as environment   size, user skill level, regulatory requirements, and available resources.)</p> </li> <li> <p>What are some potential challenges when rolling out MFA in an organization,   and how could an administrator mitigate user resistance or technical issues?</p> </li> <li> <p>Why might it be useful to enable MFA only for certain user groups in Zabbix   rather than enforcing it globally?</p> </li> <li> <p>How does adding MFA to Zabbix align with a broader security strategy, and what   other complementary security measures should be considered?</p> </li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/mfa https://duo.com/docs/sso-zabbix</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/","title":"SAML","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#google","title":"Google","text":"<p>Integrating Security Assertion Markup Language (SAML) for authentication within Zabbix presents a non-trivial configuration challenge. This process necessitates meticulous management of cryptographic certificates and the precise definition of attribute filters. Furthermore, the official Zabbix documentation, while comprehensive, can initially appear terse.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#initial-configuration-certificate-generation","title":"Initial Configuration: Certificate Generation","text":"<p>The foundational step in SAML integration involves the generation of a <code>private key</code> and a corresponding X.509 certificate. These cryptographic assets are critical for establishing a secure trust relationship between Zabbix and the Identity Provider (IdP).</p> <p>By default, Zabbix expects these files to reside within the <code>ui/conf/certs/</code> directory. However, for environments requiring customized storage locations, the zabbix.conf.php configuration file allows for the specification of alternative paths.</p> <p>Let's create our private key and certificate file.</p> <pre><code>cd /usr/share/zabbix/ui/conf/certs/\nopenssl req -newkey rsa:2048 -nodes -keyout sp.key -x509 -days 365 -out sp.crt\n</code></pre> <p>Following the generation and placement of the Zabbix Service Provider (SP) certificates, the next critical phase involves configuring the Identity Provider (IdP). In this context, we will focus on Google Workspace as the IdP.</p> <p>Retrieving the IdP Certificate (idp.crt) from Google Workspace:</p> <ol> <li>Access the Google Workspace Admin Console: Log in to your Google Workspace    administrator account.</li> <li>Navigate to Applications: Within the admin console, locate and select the    \"Apps\" section.</li> <li>Access Web and Mobile Apps: Choose <code>Web and mobile apps</code> from the available    options.</li> <li>Create a New Application: Initiate the creation of a new application to    facilitate SAML integration. This action will trigger Google Workspace to generate    the necessary IdP certificate.    </li> </ol> <p>2.16 create new application</p> <ol> <li>Download the IdP Certificate: Within the newly created application's settings,    locate and download the idp.crt file. This certificate is crucial for establishing    trust between Zabbix and Google Workspace.</li> <li>Placement of idp.crt: Copy the downloaded <code>idp.crt</code> file to the same directory    as the SP certificates in Zabbix, under <code>ui/conf/certs/</code>.</li> </ol> <p></p> <p>2.17 add certificate</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#saml-attribute-mapping-and-group-authorization","title":"SAML Attribute Mapping and Group Authorization","text":"<p>A key aspect of SAML configuration is the mapping of attributes between Google Workspace and Zabbix. This mapping defines how user information is transferred and interpreted.</p> <p>Attribute Mapping:</p> <ul> <li>It is strongly recommended to map the Google Workspace \"Primary Email\" attribute   to the Zabbix \"Username\" field. This ensures seamless user login using their   Google Workspace email addresses.</li> <li>Furthermore, mapping relevant Google Workspace group attributes allows for granular   control over Zabbix user access. For instance, specific Google Workspace groups   can be authorized to access particular Zabbix resources or functionalities.</li> </ul> <p>Group Authorization:</p> <ul> <li>Within the Google Workspace application settings, define the groups that are   authorized to utilize SAML authentication with Zabbix.</li> <li>This configuration enables the administrator to control which users can use   SAML to log into Zabbix.</li> <li>In Zabbix, you will also need to create matching user groups and configure   the authentication to use those groups.</li> </ul> <p>Configuration Example (Conceptual):</p> <ul> <li>Google Workspace Attribute: \"Primary Email\" -&gt; Zabbix Attribute: \"Username\"</li> <li>Google Workspace Attribute: \"Group Membership\" -&gt; Zabbix Attribute: \"User Group\"</li> </ul> <p>This attribute mapping ensures that users can log in using their familiar Google Workspace credentials and that their access privileges within Zabbix are determined by their Google Workspace group memberships.</p> <p></p> <p>2.18 SAML mappings</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#zabbix-saml-configuration","title":"Zabbix SAML Configuration","text":"<p>With the IdP certificate and attribute mappings established within Google Workspace, the final step involves configuring Zabbix to complete the SAML integration.</p> <p>Accessing SAML Settings in Zabbix:</p> <ul> <li>Navigate to User Management: Log in to the Zabbix web interface as an administrator.</li> <li>Access Authentication Settings: Go to \"Users\" -&gt; \"Authentication\" in the   left-hand menu.</li> <li>Select SAML Settings: Choose the \"SAML settings\" tab.</li> </ul> <p>Configuring SAML Parameters:</p> <p>Within the \"SAML settings\" tab, the following parameters must be configured:</p> <ul> <li>IdP Entity ID: This value uniquely identifies the Identity Provider   (Google Workspace in this case). It can be retrieved from the Google Workspace   SAML configuration metadata.</li> <li>SSO Service URL: This URL specifies the endpoint where Zabbix should send   authentication requests to Google Workspace. This URL is also found within the   Google Workspace SAML configuration metadata.</li> <li>Retrieving Metadata: To obtain the IdP entity ID and SSO service URL, within     the Google Workspace SAML application configuration, select the option to <code>Download metadata</code>. This XML file contains the necessary values.</li> <li>Username Attribute: Set this to \"username.\" This specifies the attribute   within the SAML assertion that Zabbix should use to identify the user.</li> <li>SP Entity ID: This value uniquely identifies the Zabbix Service Provider.   It should be a URL or URI that matches the Zabbix server's hostname.</li> <li>Sign: Select <code>Assertions</code>. This configures Zabbix to require that the SAML   assertions from Google Workspace are digitally signed, ensuring their integrity.</li> </ul> <p>Example Configuration (Conceptual)</p> <ul> <li>IdP entity ID: https://accounts.google.com/o/saml2?idpid=your_idp_id</li> <li>SSO service URL: https://accounts.google.com/o/saml2/idp/SSO?idpid=your_idp_id&amp;SAMLRequest=your_request</li> <li>Username attribute: username</li> <li>SP entity ID: https://your_zabbix_server/zabbix</li> <li>Sign: Assertions</li> </ul> <p></p> <p>2.19 SAML config</p> <p>Additional Configuration Options:</p> <p>The Zabbix documentation provides a comprehensive overview of additional SAML configuration options. Consult the official Zabbix documentation for advanced settings, such as attribute mapping customization, session timeouts, and error handling configurations.</p> <p>Verification and Testing:</p> <p>After configuring the SAML settings, it is crucial to thoroughly test the integration. Attempt to log in to Zabbix using your Google Workspace credentials. Verify that user attributes are correctly mapped and that group-based access control is functioning as expected.</p> <p>Troubleshooting:</p> <p>If authentication fails, review the Zabbix server logs and the Google Workspace audit logs for potential error messages. Ensure that the certificate paths are correct, the attribute mappings are accurate, and the network connectivity between Zabbix and Google Workspace is stable.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#saml-media-type-mappings","title":"SAML Media Type mappings","text":"<p>After successfully configuring SAML authentication, the final step is to integrate media type mappings directly within the SAML settings. This ensures that media delivery is dynamically determined based on SAML attributes.</p> <p>Mapping Media Types within SAML Configuration:</p> <ul> <li>Navigate to SAML Settings: In the Zabbix web interface, go to \"Users\" -&gt;   \"Authentication\" and select the \"SAML settings\" tab.</li> <li>Locate Media Mapping Section: Within the SAML settings, look for the section   related to media type mapping. This section might be labeled \"Media mappings\"   or similar.</li> <li>Add Media Mapping: Click \"Add\" to create a new media type mapping.</li> <li>Select Media Type: Choose the desired media type, such as \"Gmail relay.\"</li> <li>Specify Attribute: In the attribute field, enter the SAML attribute that   contains the user's email address (typically \"username,\" aligning with the   primary email attribute mapping).</li> <li>Configure Active Period : Specify the active period for this media type.   This allows for time-based control of notifications.</li> <li>Configure Severity Levels: Configure the severity levels for which this   media type should be used.</li> </ul> <p>Example Configuration (Conceptual):</p> <ul> <li>Media Type: Gmail relay</li> <li>Attribute: username</li> <li>Active Period: 08:00-17:00 (Monday-Friday)</li> <li>Severity Levels: High, Disaster</li> </ul> <p>Rationale:</p> <p>By mapping media types directly within the SAML configuration, Zabbix can dynamically determine the appropriate media delivery method based on the SAML attributes received from the IdP. This eliminates the need for manual media configuration within individual user profiles when SAML authentication is in use.</p> <p>Key Considerations:</p> <ul> <li>Ensure that the SAML attribute used for media mapping accurately corresponds to   the user's email address.</li> <li>Verify that the chosen media type is correctly configured within Zabbix.</li> <li>Consult the Zabbix documentation for specific information about the SAML media   mapping functionality, as the exact configuration options may vary depending on   the Zabbix version.</li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#final-configuration-frontend-configuration-adjustments","title":"Final Configuration: Frontend Configuration Adjustments","text":"<p>After configuring the SAML settings within the Zabbix backend and Google Workspace, the final step involves adjusting the Zabbix frontend configuration. This ensures that the frontend correctly handles SAML authentication requests.</p> <p>Modifying <code>zabbix.conf.php</code>:</p> <ul> <li> <p>Locate Configuration File: Access the Zabbix frontend configuration file,   typically located at /etc/zabbix/web/zabbix.conf.php.</p> </li> <li> <p>Edit Configuration: Open the zabbix.conf.php file using a text editor with   root or administrative privileges.</p> </li> <li> <p>Configure SAML Settings: Within the file, locate or add the following   configuration directives:</p> </li> </ul> <p><code>php // Uncomment to override the default paths to SP private key, SP and IdP X.509 certificates, // and to set extra settings. $SSO['SP_KEY']                  = 'conf/certs/sp.key'; $SSO['SP_CERT']                 = 'conf/certs/sp.crt'; $SSO['IDP_CERT']                = 'conf/certs/idp.crt'; //$SSO['SETTINGS']              = [];</code></p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#ms-cloud","title":"MS Cloud","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#okta","title":"Okta","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/saml</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/user-groups/","title":"User Groups","text":"<p>In any enterprise monitoring platform, establishing role-based access control (RBAC) is critical for maintaining both security and clarity of operational responsibility. For Zabbix, this control is built upon the fundamental concept of User Groups.</p> <p>In Zabbix 8.0, user groups serve as the primary mechanism for assigning permissions and structuring access to the monitored data and configuration entities. This chapter details the function of user groups, guides you through their configuration, and outlines best practices for applying them in a robust, real world deployment.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-role-of-a-user-group","title":"The Role of a User Group","text":"<p>A User Group in Zabbix is a logical collection of individual user accounts. Rather than managing permissions for hundreds of users individually, Zabbix requires that users be assigned to one or more groups. Access rights, such as the ability to view host groups, configure templates, or see specific problem tags are then granted at the group level.</p> <p>This group centric architecture provides several major benefits:</p> <ul> <li>Simplified Management: Access rights are managed by role (e.g., \"Network Engineers,\"   \"Database Administrators\") instead of by individual user.</li> <li>Consistency: Ensures that all users within the same role possess a consistent,   standardized set of permissions.</li> <li>Segregation of Duties: Enables clear separation between viewing (read-only)   and configuration (read-write) access.</li> </ul> <p>Technical Definition: User groups allow grouping users for both organizational purposes and for assigning   permissions to data. Permissions to viewing and configuring data of host groups   and template groups are assigned to user groups, not individual users. A user   can belong to any number of groups.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#configuring-a-user-group","title":"Configuring a User Group","text":"<p>In Zabbix, user groups are defined and maintained solely via the web frontend. The procedure has remained largely unchanged between version 8.0 and previous generations, ensuring a familiar configuration experience for administrators.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#group-creation-and-general-attributes","title":"Group Creation and General Attributes","text":"<ol> <li>Navigate to Administration \u2192  User groups.</li> <li>Click Create user group (or select an existing group to modify).</li> <li>The configuration form is divided into four critical tabs: User group,    Template permissions, Host permissions, and Problem tag filter.</li> </ol> <p>2.20 user group menu</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-user-group-tab","title":"The <code>User group</code> Tab","text":"<p>This initial tab defines the group's general properties and its membership:</p> <ul> <li>Group name: A unique, descriptive identifier (e.g., <code>NOC-RO</code>, <code>System-Admins-RW</code>).</li> <li>Users: Add existing users to this group. A user can be a member of multiple   groups.</li> <li>Frontend access: Controls the authentication method for group members. Options   include <code>System default</code>, <code>Internal</code>, <code>LDAP</code>, or <code>Disabled</code> (useful for API-only   accounts or for temporarily locking frontend access for a role).</li> <li>LDAP server: If <code>LDAP</code> access is chosen, select the specific LDAP server   configuration to be used for members of this group.</li> <li>Multi-factor authentication (MFA): Select the method to be enforced for the   group. If a user is a member of multiple groups, the most secure MFA setting   will typically apply.</li> <li>Enabled: The master switch to activate or deactivate the group and its members.</li> <li>Debug mode: A powerful, optional setting that enables detailed debug logging   for all group members in the Zabbix frontend.</li> </ul> The Debug User Group <p>Zabbix includes a dedicated <code>Debug</code> user group out-of-the-box. Instead of activating the debug option for an existing production group, it is cleaner practice to simply add the required user to the pre-existing <code>Debug</code> group.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#permission-tabs-host-groups-and-template-groups","title":"Permission Tabs: Host Groups and Template Groups","text":"<p>Permissions are configured by assigning access levels to Host Groups and Template Groups. These entities act as containers, meaning the permissions assigned to the group apply to all nested groups and all entities within them.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#template-permissions-tab","title":"Template Permissions Tab","text":"<p>This section controls access to the configuration elements of templates (items, triggers, graphs, etc.) via their Template Groups.</p> <p>For each assigned Template Group, one of the following permissions must be selected:</p> <ul> <li>Read-only: Users can view the template configuration and see data derived   from it, but they cannot modify or link the template.</li> <li>Read-write: Users can view, modify, and link/unlink the template and its   entities (items, triggers, etc.).</li> <li>Deny: Explicitly blocks all access.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#host-permissions-tab","title":"Host Permissions Tab","text":"<p>This tab works identically to the Template Permissions tab but applies the access levels to Host Groups and the hosts contained within them.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#problem-tag-filters-granular-alert-access","title":"Problem Tag Filters: Granular Alert Access","text":"<p>The final configuration tab, Problem tag filter, allows for fine-grained control over which problems (alerts) a user group can see.</p> <p>This is invaluable for enterprise environments where users should only be alerted to issues relevant to their domain. For instance, a Database Administrator should not be distracted by network switch problems.</p> <p>Filters are applied to specific host groups and can be configured to display:</p> <ul> <li>All tags for the specified hosts.</li> <li>Only problems matching specific tag name/value pairs.</li> </ul> <p>When a user is a member of multiple groups, the tag filters apply with OR logic. If any of the user's groups allows visibility of a specific problem based on its tags, the user will see it.</p> Example: Database Administrator Filter <p>To ensure a Database Administrator group only sees relevant issues, the problem tag filter would be configured to specify: - Tag name: <code>service</code> - Value: <code>mysql</code></p> <p>This ensures the user only sees problems tagged with <code>service:mysql</code> on the host groups they have permission to view.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#template-permissions-frontend-behavior-and-editing-limitations","title":"Template Permissions \u2014 Frontend Behavior and Editing Limitations","text":"<p>The behavior of the Data collection \u2192 Templates view and host configuration screens is strictly tied to the user\u2019s permission level on template groups. Zabbix intentionally hides templates from users who have only Read-only access. This is by design, as described in https://support.zabbix.com/browse/ZBXNEXT-1070</p> Action or Screen Element Read-only Read-write Description / Impact View Data collection \u2192 Templates \u274c \u2705 Users with Read-only access do not see any templates. Template groups are only visible to users with Read-write rights. (ZBXNEXT-1070) Open template configuration \u274c \u2705 Not available for Read-only users \u2014 templates are hidden entirely","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-rule-of-precedence-deny-always-wins","title":"The Rule of Precedence: Deny Always Wins","text":"<p>A user's effective permission is the result of combining the rights from all groups they belong to. Zabbix resolves these overlapping permissions by applying a simple, strict hierarchy based on the most restrictive level, unless a <code>Deny</code> is present.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#hierarchy-of-precedence","title":"Hierarchy of Precedence","text":"<p>The order of precedence is absolute: Deny is the highest, followed by Read-write, and finally Read-only.</p> <pre><code>flowchart TB\n    A[\"Deny (highest precedence)\"]:::deny\n    B[\"Read-write (overrides Read-only)\"]:::rw\n    C[\"Read-only (lowest precedence)\"]:::ro\n\n    A --&gt; B\n    B --&gt; C\n\n    classDef deny fill:#f87171,stroke:#7f1d1d,stroke-width:2px,color:white;\n    classDef rw fill:#60a5fa,stroke:#1e3a8a,stroke-width:2px,color:white;\n    classDef ro fill:#a7f3d0,stroke:#065f46,stroke-width:2px,color:black;\n</code></pre> <p>This precedence can be summarized by two core rules:</p> <ol> <li>Deny Always Overrides: If any group grants Deny access to a host or    template group, that user will not have access, regardless of any other    <code>Read-only</code> or <code>Read-write</code> permissions.</li> <li>Most Permissive Wins (Otherwise): If no <code>Deny</code> is present, the most permissive    right applies. Read-write always overrides Read-only.</li> </ol> Scenario Group A Group B Effective Permission Rationale RW Over RO Read-only Read-write Read-write The most permissive right wins when Deny is absent. Deny Over RO Read-only Deny Deny Deny always takes precedence and blocks all access. Deny Over RW Read-write Deny Deny The most restrictive right (Deny) overrides the most permissive.","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#permissions-in-the-update-problem-dialog","title":"Permissions in the \"Update Problem\" Dialog","text":"<p>In Zabbix 8.0, the actions available in the Monitoring \u2192 Problems view (via the Update problem dialog) are controlled by two distinct mechanisms working in tandem:</p> <ol> <li>Host/Template Permissions: Governs basic access to the problem and whether    configuration-level changes can be made.</li> <li>User Role Capabilities: Governs which specific administrative actions (like    acknowledging, changing severity, or closing) are enabled.</li> </ol> <p>The table below clarifies the minimum required permissions to perform actions on an active problem:</p> Action in \u201cUpdate problem\u201d dialog Required Host Permission Required Template Permission Required Role Capability / Notes Message (add comment) Read-only or Read-write Same level as host Requires the role capability Acknowledge problems. Acknowledge Read-only or Read-write Same level as host Requires Acknowledge problems. Read-only access is sufficient. Change severity Read-write required Read-write if template trigger Requires the Change problem severity capability. Suppress / Unsuppress Read-write required Read-write if template trigger Requires the Suppress problems capability. Convert to cause Read-write required Read-write if template trigger Requires Manage problem correlations capability. Close problem Read-write required Read-write if template trigger Requires Close problems manually capability.","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#best-practices-for-enterprise-access-control","title":"Best Practices for Enterprise Access Control","text":"<p>Building a maintainable, secure Zabbix environment requires discipline in defining groups and permissions.</p> <ol> <li>Adopt Role-Based Naming: Use clear, standardized names that reflect the    user's role and their access level, such as <code>Ops-RW</code> (Operations Read/Write)    or <code>NOC-RO</code> (NOC Read-Only).</li> <li>Grant Access via Groups Only: Never assign permissions directly to an individual    user; always rely on group membership. This ensures auditability and maintainability.</li> <li>Principle of Least Privilege: Start with the most restrictive access (Read-only)    and only escalate to Read-write when configuration-level changes are an    absolute requirement of the user's role.</li> <li>Align with Organizational Structure: Ensure your Host Groups and Template    Groups mirror your organization's teams or asset categories (e.g., <code>EU-Network</code>,    <code>US-Database</code>, <code>Finance-Templates</code>). This makes permission assignment intuitive.</li> <li>Regular Review and Audit: Periodically review group memberships and permissions.    A user's role may change, and their access in Zabbix must be adjusted accordingly.</li> <li>Test Restricted Views: After creating a group, always log in as a test user    belonging to that group to verify that dashboards, widgets, and configuration    pages display the correct restricted view.</li> </ol>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#example-user-permissions","title":"Example : User permissions","text":"<p>This exercise will demonstrate how Zabbix calculates a user's effective permissions when they belong to multiple User Groups, focusing exclusively on the core access levels: Read-only, Read-write, and Deny.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#our-scenario","title":"Our Scenario","text":"<p>You are managing access rights for a large Zabbix deployment. You need to grant general viewing access to all Linux servers but specifically prevent a junior team from even seeing, let alone modifying, your highly critical database servers.</p> <p>You will have to configure two overlapping User Groups to demonstrate the precedence rules:</p> <ul> <li>Group A (Junior Monitoring): Grants general Read-only access to a wide host scope.</li> <li>Group B (Critical Exclusion): Applies an explicit Deny to a specific, critical   host subset.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#host-group-preparation","title":"Host Group Preparation","text":"<p>Ensure the following Host Groups exist in your Zabbix environment:</p> <ul> <li>HG_All_Linux_Servers (The wide scope of hosts)</li> <li>HG_Critical_Databases (A subset of servers that is also within HG_All_Linux_Servers)</li> </ul> <p>You can create them under <code>Data collection</code> \u2192 <code>Host groups</code>.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#configuring-the-user-groups","title":"Configuring the User Groups","text":"<ul> <li>Create Group A: 'Junior Monitoring'<ul> <li>Navigate to Users \u2192 User groups.</li> <li>Create a new group named 'Junior Monitoring'.</li> <li>In the Host permissions tab, assign the following right:</li> <li>HG_All_Linux_Servers: Read-only (Read)</li> <li>HG_Critical_Databases: Read-only (Read)</li> </ul> </li> </ul> <p> 2.21 Junior monitoring</p> <ul> <li>Create Group B: 'Critical Exclusion'<ul> <li>Create a second group named 'Critical Exclusion'.</li> <li>In the Host permissions tab, assign the following right:</li> <li>HG_Critical_Databases: Deny</li> </ul> </li> </ul> <p> ch02.22 Critical exclusion</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#creating-the-test-user","title":"Creating the Test User","text":"<p>We will create the user first, then assign them to the groups.</p> <ul> <li>Navigate to User Creation: Go to Users \u2192 Users in the Zabbix frontend.</li> <li>Click Create user.</li> <li>Details:<ul> <li>Username: test_junior</li> <li>Name &amp; Surname: (Optional)</li> <li>Password: Set a strong password and confirm it.</li> <li>Language &amp; Theme: Set as desired.</li> <li>Permissions: Select role <code>User role</code> as this has the type User (This is important,   as 'Super Admin' bypasses all group restrictions).</li> <li>Add the user to both group <code>Junior Monitoring</code> and <code>Critical Exclusion</code>.</li> </ul> </li> <li>Save: Click Add.</li> </ul> <p> ch02.23 test user</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#create-the-hosts","title":"Create the hosts","text":"<p>We will create 2 host a linux server and a db server.</p> <ul> <li>Navigate to <code>Data collection</code> \u2192 <code>Hosts</code>.</li> <li>Click on create  host.</li> <li>Details:<ul> <li>Host name: Linux server</li> <li>Templates: Linux by Zabbix agent</li> <li>Host groups: HG_All_Linux_Servers</li> <li>Interfaces: Agent with IP 127.0.0.1</li> </ul> </li> <li>Save: Click Add.</li> </ul> <p> ch02.24 Add hosts</p> <p>Add a DB server exact as above but change :</p> <ul> <li>Host name: DB server</li> <li>Host groups: HG_Critical_Databases</li> <li>Save: Click Add.</li> </ul> <p>This should work as long as you have your zabbix agent installed reporting back on <code>127.0.0.1</code>. This is how it's configured when you first setup the Zabbix server with an agent.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#test-the-outcome","title":"Test the Outcome","text":"<p>Logout as the <code>Super admin</code> user and log back in as user <code>test_junior</code>.</p> <p>When we now  navigate to <code>Monitoring</code> \u2192 <code>Hosts</code>, we see that only the <code>Linux server</code> is visible in the list of hosts. When we click on <code>Select</code> behind <code>Host groups</code> we will only be able to see the group <code>HG_All_Linux_Servers</code>.</p> <p>This table outlines the combined, effective rights for the user <code>test_junior</code> (who is a member of both User Groups).</p> Host Group (HG) Permission via 'Junior Monitoring' Permission via 'Critical Exclusion' Effective Permission Outcome <code>HG_All_Linux_Servers</code> Read-only No Explicit Rule Read-only Access to view data is Allowed. <code>HG_Critical_Databases</code> Read-only Deny Deny Access is Blocked (host is hidden).","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#conclusion","title":"Conclusion","text":"<p>Because test_junior belongs to a group that explicitly denies access to the Critical Databases, the host is hidden entirely, proving that Deny Always Wins regardless of other permissions. So we can conclude that user groups form the essential foundation of access control in Zabbix 8.0. They define what each user can see and configure (via host/template permissions).</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#questions","title":"Questions","text":"<ul> <li>If a user only has Read-only permissions assigned to a Template Group, will they   be able to see those templates listed under Data collection \u2192 Templates?</li> <li>Scenario: A user, Bob, is a member of two User Groups: 'NOC Viewers' (which   has Read-only access to HG_Routers) and 'Tier 2 Techs' (which has Read-write   access to the same HG_Routers).    Question: Can Bob modify the configuration of the routers in Zabbix, or is he   limited to viewing data? Explain your answer based on Zabbix's precedence rules.</li> <li>Scenario: A user, Alice, is a member of two User Groups: 'Ops Team' (which has   Read-write access to the Host Group HG_Webservers) and 'Security Lockdown' (which   has Deny access to the exact same HG_Webservers).   Question: What are Alice's effective permissions for the hosts in HG_Webservers?   Can she view or modify them, and why?</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/users_and_usergroups/usergroup</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/users_and_usergroups/permissions</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/","title":"Active and Passive proxies","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#active-proxies","title":"Active proxies","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple to setup. The only thing we need to have for now is a working Zabbix installation. The underlying OS is not important.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#zabbix-gui-configuration","title":"Zabbix GUI configuration","text":"<p>There are 2 things we need to to when we like to setup a Zabbix proxy and one of those steps is adding the proxy in the frontend of Zabbix. So from the menu let's select <code>Administration</code> =&gt; <code>Proxies</code> and click in the upper right corner on <code>Create proxy</code>.</p> <p></p> <p>3.3 Create proxy</p> <p>Once pressed a new modal form will pop-up where we need to fill in some information. For active proxies we only need to enter the <code>Proxy name</code> field. Here we will enter <code>ProxyA</code> to remind us this will be an active proxy. Don't worry about the other fields we will cover them later. In the <code>Description</code> field you could enter some text to make it even more clear that this is an active proxy.</p> Note <p>For Zabbix active proxies, you only need to specify the hostname during configuration. This hostname acts as the unique identifier that the Zabbix server uses to distinguish between different active proxies and manage their data correctly.</p> <p></p> <p>3.4 New proxy</p> <p>Our next step involves installing the proxy binaries on our OS. If you don't remember how to this or aren't sure then let's have a look at <code>Chapter 01</code> =&gt; <code>Basic Installation</code>.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#installing-the-proxy","title":"Installing the proxy","text":"<p>Next up, we need to get the Zabbix proxy software onto your system. If you're not sure how to do this or need a reminder, take a quick peek at <code>Chapter 1</code>, called <code>Basic Installation.</code> It walks you through the whole process.</p> <p>Now that your system knows where to find the Zabbix software, we can actually install it. It's pretty simple, but there's one thing we need to decide upfront. Zabbix proxies need a place to store their information, and they can use one of three options: MySQL, PostgreSQL, or SQLite3.</p> <p>We will only cover SQlite as MySQL and PostgreSQL are basically already covered in <code>Chapter 1</code>, the <code>Basic installation</code>.</p> Note <p>The only thing that is a bit different when you setup a proxy with MySQL or PostgreSQL are the scripts you need to setup the DB structure. for MySQL they are located under <code>/usr/share/zabbix/sql-scripts/mysql/proxy.sql</code> for PostgreSQL they can be found at <code>/usr/share/zabbix/sql-scripts/postgresql/proxy.sql</code>. Make sure you always check the correct Zabbix documentation for your version as they have been moved to different locations over time even. https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages/rhel#proxy-installation</p> <p>Install zabbix-proxy-sqlite3</p> <p>Red Hat <pre><code>sudo dnf install zabbix-proxy-sqlite3\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-proxy-sqlite3\n</code></pre></p> Note <p>If you want to use MySQL or PostgreSQL then you can use the package <code>zabbix-proxy-mysql</code> or <code>zabbix-proxy-pgsql</code> depending on your needs.</p> <p>Now that we have installed the needed package we still have to do a few configuration changes. Let's edit our file <code>/etc/zabbix/zabbix_proxy.conf</code> with your favourite editor. There are only a few lines we need to alter. The first option we will have to check is <code>ProxyMode</code>. Since we want to configure our proxy as active it needs to have value <code>0</code> lucky for us this is the default value.</p> <p>The other option that is important is the option <code>Server</code> this is standard <code>127.0.0.1</code> and we need to replace this with the IP or DNS name of our <code>zabbix server</code>.</p> Note <p>You can fill in multiple servers here in case you have more then 1 <code>zabbix server</code> connecting to your proxy. Also the port can be added here in case your server listens on another port then the standard port 10051. Just be careful to not add the IP and DNS name for the same server as this can return double values.</p> <p>Another important option is <code>Hostname</code> remember in our frontend we gave our proxy the name <code>ProxyA</code> now we have to fill in the exact same name here for hostname. Just like a <code>zabbix agent</code> in active mode <code>Zabbix server</code> will use the name as a unique identifier.</p> <p>The last parameter that we need to set is <code>DBName</code> this is the name for our database and since we work with SQLite3 there is no need to create a database, Zabbix can handle this for us. Let's use the following configuration <code>DBName=/home/zabbix/zabbix_proxy</code>.</p> <p>Before we can start our proxy we need to create the correct folder. <code>sudo mkdir /home/zabbix</code> and add the correct rights. <code>sudo chown zabbix: /home/zabbix/</code></p> Note <p>A list of all configuration options can be found in the Zabbix documentation. https://www.zabbix.com/documentation/current/en/manual/appendix/config/zabbix_proxy</p> Info <p>One important new configuration parameter that was added in <code>7.0</code> is <code>ProxyBufferMode</code>. In Proxies that where installed before <code>7.0</code> the data was first written to disk in the database and then sent to the <code>Zabbix server</code>. For these installations when we upgrade this remains the default behavior after upgrading to Zabbix 7.x or higher. It's now recommended for performance reasons to use the new setting <code>hybrid</code> and to define the <code>ProxyMemoryBufferSize</code>.</p> <p>The Zabbix proxy uses a temporary space to hold data before sending it to the main server. There are two ways this works.</p> <ul> <li> <p>In 'hybrid' mode: this temporary space has a safety feature. If the proxy stops,   if the space gets full, or if the data has been there for too long, the proxy   will save everything to the database to prevent any loss. After saving, it goes   back to its normal temporary holding.</p> </li> <li> <p>In 'memory' mode: it only uses this temporary space without the extra saving   step. This is faster, but it means that if the proxy stops or the temporary space   overflows, any data that hasn't been sent yet will be lost.</p> </li> </ul> <p>Once you have made all the changes you need in the config file besides the once   we have covered we only need to enable the service and start our proxy.   Of course don't forget to open the firewall port <code>10051</code> on your <code>Zabbix server</code>   side as this is an active proxy.</p> enable and start the proxy service <p>Red Hat &amp; Ubuntu   <pre><code>sudo systemctl enable zabbix-proxy --now\n</code></pre></p> <p>If all goes well we can check the log file from our proxy and we will see that Zabbix has created the database by itself.</p> <p><code>sudo tail -f /var/log/zabbix/zabbix_proxy.log</code></p> <pre><code> 11134:20250519:152232.419 Starting Zabbix Proxy (active) [Zabbix proxy]. Zabbix 7.4.0beta2 (revision 7cd11a01d42).\n 11134:20250519:152232.419 **** Enabled features ****\n 11134:20250519:152232.419 SNMP monitoring:       YES\n 11134:20250519:152232.419 IPMI monitoring:       YES\n 11134:20250519:152232.419 Web monitoring:        YES\n 11134:20250519:152232.419 VMware monitoring:     YES\n 11134:20250519:152232.419 ODBC:                  YES\n 11134:20250519:152232.419 SSH support:           YES\n 11134:20250519:152232.419 IPv6 support:          YES\n 11134:20250519:152232.419 TLS support:           YES\n 11134:20250519:152232.419 **************************\n 11134:20250519:152232.419 using configuration file: /etc/zabbix/zabbix_proxy.conf\n 11134:20250519:152232.419 cannot open database file \"/home/zabbix/zabbix_proxy\": [2] No such file or directory\n 11134:20250519:152232.419 creating database ...\n 11134:20250519:152232.478 current database version (mandatory/optional): 07030032/07030032\n 11134:20250519:152232.478 required mandatory version: 07030032\n</code></pre> <p>Going back to our frontend once everything is properly configured and started on our proxy side we should be able to see in the frontend that our active proxy is online. Zabbix will also show the version of our proxy and the last seen age.</p> <p>You are now ready. Your proxy will behave like the Zabbix server from now on all hosts will need to connect to the proxy with their config instead of the <code>Zabbix server</code>.</p> <p></p> <p>3.5 Active proxy configured</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#passive-proxy","title":"Passive Proxy","text":"<p>Just like with the setup of our active proxy we need a working Zabbix server and a extra VM with Ubuntu or Rocky so we can install a proxy.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#zabbix-gui-configuration_1","title":"Zabbix GUI configuration","text":"<p>There are 2 things we need to to when we like to setup a Zabbix proxy and one of those steps is adding the proxy in the frontend of Zabbix. So from the menu let's select <code>Administration</code> =&gt; <code>Proxies</code> and click in the upper right corner on <code>Create proxy</code>.</p> <p></p> <p>3.6 Create proxy</p> <p>Once pressed a new modal form will pop-up where we need to fill in some information. For active proxies we only need to enter the <code>Proxy name</code> field. Here we will enter <code>ProxyP</code> to remind us this will be a passive proxy. For the passive proxy we also need to specify the <code>Interface</code> field. Here we add the IP of the host where our proxy runs on. You also notice that we use the same port <code>10051</code> as the <code>Zabbix server</code> to communicate with our proxy. Don't worry about the other fields we will cover them later. In the <code>Description</code> field you could enter some text to make it even more clear that this is a passive proxy.</p> <p></p> <p>3.7 New passive proxy</p> <p>Our next step involves installing the proxy binaries on our OS. If you don't remember how to this or aren't sure then let's have a look at <code>Chapter 01</code> =&gt; <code>Basic Installation</code>.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#installing-the-proxy_1","title":"Installing the proxy","text":"<p>Next up, we need to get the Zabbix proxy software onto your system. If you're not sure how to do this or need a reminder, take a quick peek at <code>Chapter 1</code>, called <code>Basic Installation.</code> It walks you through the whole process.</p> <p>Now that your system knows where to find the Zabbix software, we can actually install it. It's pretty simple, but there's one thing we need to decide upfront. Zabbix proxies need a place to store their information, and they can use one of three options: MySQL, PostgreSQL, or SQLite3.</p> <p>We will only cover SQlite as MySQL and PostgreSQL are basically already covered in <code>Chapter 1</code>, the <code>Basic installation</code>.</p> Note <p>The only thing that is a bit different when you setup a proxy with MySQL or PostgreSQL are the scripts you need to setup the DB structure. for MySQL they are located under <code>/usr/share/zabbix/sql-scripts/mysql/proxy.sql</code> for PostgreSQL they can be found at <code>/usr/share/zabbix/sql-scripts/postgresql/proxy.sql</code>. Make sure you always check the correct Zabbix documentation for your version as they have been moved to different locations over time even. https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages/rhel#proxy-installation</p> <p>Install zabbix-proxy-sqlite3</p> <p>Red Hat <pre><code>sudo dnf install zabbix-proxy-sqlite3\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-proxy-sqlite3\n</code></pre></p> Note <p>If you want to use MySQL or PostgreSQL then you can use the package <code>zabbix-proxy-mysql</code> or <code>zabbix-proxy-pgsql</code> depending on your needs.</p> <p>Now that we have installed the needed package we still have to do a few configuration changes. Let's edit our file <code>/etc/zabbix/zabbix_proxy.conf</code> with your favourite editor. There are only a few lines we need to alter. The first option we will have to check is <code>ProxyMode</code>. Since we want to configure our proxy as passive it needs to have value <code>1</code>. Note that the default value is <code>0</code> for Active.</p> <p>The other option that is important is the option <code>Server</code> this is standard <code>127.0.0.1</code> and we need to replace this with the IP or DNS name of our <code>zabbix server</code>.</p> Note <p>You can fill in multiple servers here in case you have more then 1 <code>zabbix server</code> connecting to your proxy. Also the port can be added here in case your server listens on another port then the standard port 10051. Just be careful to not add the IP and DNS name for the same server as this can return double values</p> <p>Another important option is <code>Hostname</code> remember in our frontend we gave our proxy the name <code>ProxyP</code> now we have to fill in the exact same name here for hostname.</p> <p>The last parameter that we need to set is <code>DBName</code> this is the name for our database and since we work with SQLite3 there is no need to create a database, Zabbix can handle this for us. Let use the following configuration <code>DBName=/home/zabbix/zabbix_proxyP</code>.</p> <p>Before we can start our proxy we need to create the correct folder. <code>sudo mkdir /home/zabbix</code> and add the correct rights. <code>sudo chown zabbix: /home/zabbix/</code></p> Info <p>One important new configuration parameter that was added in <code>7.0</code> is <code>ProxyBufferMode</code>. In Proxies that where installed before <code>7.0</code> the data was first written to disk in the database and then sent to the <code>Zabbix server</code>. For these installations when we upgrade this remains the default behavior after upgrading to Zabbix 7.x or higher. It's now recommended for performance reasons to use the new setting <code>hybrid</code> and to define the <code>ProxyMemoryBufferSize</code>.</p> <p>The Zabbix proxy uses a temporary space to hold data before sending it to the main server. There are two ways this works.</p> <ul> <li> <p>In 'hybrid' mode: this temporary space has a safety feature. If the proxy stops,   if the space gets full, or if the data has been there for too long, the proxy   will save everything to the database to prevent any loss. After saving, it goes   back to its normal temporary holding.</p> </li> <li> <p>In 'memory' mode: it only uses this temporary space without the extra saving   step. This is faster, but it means that if the proxy stops or the temporary space   overflows, any data that hasn't been sent yet will be lost.</p> </li> </ul> <p>Once you have made all the changes you need in the config file besides the once   we have covered we only need to enable the service and start our proxy.</p> <p>enable and start the proxy service</p> <p>Red Hat &amp; Ubuntu <pre><code>sudo systemctl enable zabbix-proxy --now\n</code></pre></p> <p>If all goes well we can check the log file from our proxy and we will see that Zabbix has created the database by itself.</p> <pre><code>``` bash\nsudo tail -f /var/log/zabbix/zabbix_proxy.log\n```\n\n``` bash\n11134:20250519:152232.419 Starting Zabbix Proxy (passive) [ProyP]. Zabbix \\\n7.4.0beta2 (revision 7cd11a01d42).\n11134:20250519:152232.419 **** Enabled features ****\n11134:20250519:152232.419 SNMP monitoring:       YES\n11134:20250519:152232.419 IPMI monitoring:       YES\n11134:20250519:152232.419 Web monitoring:        YES\n11134:20250519:152232.419 VMware monitoring:     YES\n11134:20250519:152232.419 ODBC:                  YES\n11134:20250519:152232.419 SSH support:           YES\n11134:20250519:152232.419 IPv6 support:          YES\n11134:20250519:152232.419 TLS support:           YES\n11134:20250519:152232.419 **************************\n11134:20250519:152232.419 using configuration file: /etc/zabbix/zabbix_proxy.conf\n11134:20250519:152232.419 cannot open database file \"/home/zabbix/zabbix_proxy\": [2] No such file or directory\n11134:20250519:152232.419 creating database ...\n11134:20250519:152232.478 current database version (mandatory/optional): 07030032/07030032\n11134:20250519:152232.478 required mandatory version: 07030032\n```\n</code></pre> <p>However if we go to our frontend nothing seems to be working at all even we have configured everything correct on our proxy.</p> <p></p> <p>3.8 Proxy not working</p> <p>The explanation is rather easy as we run a passive proxy, the <code>Zabbix server</code> needs to poll our proxy. But we didn't configured our Server yet. So next step is to add the needed proxy pollers in our server config file. Use your preferred editor to open the <code>zabbix server</code> configuration file.</p> <p>/etc/zabbix/zabbix_server.conf</p> <p>Look for the option <code>StartproxyPollers</code> and remove the <code>#</code> sign in front and give it value 2. Save the file and exit. Now we have to restart the zabbix server with <code>systemctl restart zabbix-server</code></p> <p>If you look back in the frontend we see that it's still not working and this makes sense as we still need to open the firewall on our proxy.</p> <p>Open firewall port 10051/tcp</p> <p>Red Hat <pre><code>sudo firewall-cmd --add-port=10051/tcp --permanent`\nsudo firewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>If we now look at our proxy interface in the frontend we will see that our <code>passive proxy</code> becomes available. If it's not green give it a few seconds or check all steps again and verify your log files.</p> <p></p> <p>3.8 Proxy working</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#conclusion","title":"Conclusion","text":"<p>This chapter has demonstrated the indispensable role of Zabbix proxies in building robust, scalable, and distributed monitoring infrastructures. We've explored the fundamental distinction between <code>active</code> and <code>passive proxy</code> modes, highlighting how each serves different deployment scenarios and network topologies. Understanding their individual strengths, from simplified firewall configurations with <code>active proxies</code> to the server-initiated control of <code>passive proxies</code>, is crucial for optimal system design.</p> <p>We delved into the comprehensive settings that govern proxy behavior, emphasizing how proper configuration of parameters like agent polling intervals and data senders, directly impacts performance and data accuracy. The evolution of data storage mechanisms within the proxy, from purely memory-based approaches to the flexible options of disk and hybrid storage, empowers administrators to finely tune resource utilization and data persistence based on their specific needs and the volume of monitored data.</p> <p>Finally, we examined the critical advancements in configuration synchronization, particularly the significant improvements introduced with Zabbix 7.0. The shift towards more efficient and streamlined config sync processes, moving beyond the limitations of earlier versions, underscores Zabbix's continuous commitment to enhancing operational efficiency and simplifying large-scale deployments.</p> <p>In essence, Zabbix proxies are far more than simple data forwarders; they are intelligent intermediaries that offload significant processing from the central Zabbix server, reduce network traffic, and enhance the resilience of your monitoring solution. By carefully selecting the appropriate proxy type, meticulously configuring its settings, and leveraging the latest features in data storage and configuration management, you can unlock the full potential of Zabbix to monitor even the most complex and geographically dispersed environments with unparalleled efficiency and reliability. The knowledge gained in this chapter will be instrumental in designing and maintaining a Zabbix infrastructure that is not only robust today but also adaptable to future monitoring challenges.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#questions","title":"Questions","text":"<ul> <li>What is the fundamental difference between an active proxy and a passive proxy   in terms of who initiates the connection?</li> </ul>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/chapter/","title":"Proxies and the Web services component","text":"<p>Proxies are often regarded as an advanced topic in Zabbix, but in reality, they are a fundamental part of many installations and one of the first components we set up for numerous customers. In this chapter, we'll make proxies the third subject we cover, encouraging you to consider them from the very beginning of your Zabbix journey.</p> <p>We'll start with a basic proxy setup, providing straightforward steps to get you up and running quickly. Then, we'll take a deep dive into the mechanics of proxies how they operate within the Zabbix ecosystem, their benefits, and the critical role they play in distributing monitoring load and enhancing system scalability.</p> <p>Understanding proxies from the start can significantly improve your architecture, especially in distributed or large scale environments. Whether you're new to Zabbix or looking to refine your existing setup, this chapter will offer valuable insights into why proxies should be an integral part of your monitoring strategy from the start.</p> <p>By the end, you'll not only know how to set up a basic proxy but also have a clear understanding of their underlying workings and strategic advantages, ensuring you make informed decisions as you scale your Zabbix installation.</p>"},{"location":"ch03-zabbix-proxies/proxies-as-container/","title":"Running Proxies as containers","text":"<p>As discussed in the previous section, Zabbix proxies offer a lightweight and efficient solution for distributed monitoring. Leveraging SQLite as their backend database, they are inherently flexible and portable, making them well-suited for deployment in containerized environments. This chapter provides a step-by-step guide on deploying a Zabbix proxy within a container, outlining configuration options and best practices for optimal performance and maintainability.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#setting-up-containers","title":"Setting up containers","text":"<p>We will begin by demonstrating how to set up containerized environments on Red Hat-based systems using Podman. Podman is the recommended container engine on Red Hat distributions and offers several advantages over Docker.</p> <p>Firstly, Podman enhances security by supporting rootless containers, allowing containers to run under non-privileged user accounts. Secondly, it integrates seamlessly with SELinux, enabling robust access control and policy enforcement. Thirdly, Podman works natively with systemd, which facilitates container lifecycle management through systemd units and quadlets.</p> <p>For this setup, you will need a virtual machine (VM) where we will install Podman and deploy the Zabbix proxy container. This container will then be configured to communicate with your Zabbix server.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#add-the-proxy-to-the-zabbix-frontend","title":"Add the proxy to the zabbix frontend","text":"<p>3.9 Add proxy to frontend</p> <p>To keep the configuration straightforward, we will deploy an active Zabbix proxy. In this case, only two parameters need to be configured: the proxy's hostname (as defined in the Zabbix frontend) and the proxy\u2019s IP address for communication with the Zabbix server.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#create-the-podman-setup","title":"Create the podman setup","text":"<p>Next, we begin configuring Podman on the host system where the Zabbix proxy container will be installed and managed.</p> Install podman and needed tools <pre><code>Red Hat\ndnf install podman\ndnf install policycoreutils-python-utils\nuseradd podman\nsu - podman\n\nUbuntu\nsudo adduser podman\nsudo su - podman\n</code></pre> <p>Still as user podman create the following folders</p> Run on both RedHat and Ubuntu <pre><code>mkdir -p ~/.local/share/containers\nmkdir -p ~/.config/containers/systemd/\n</code></pre> <p>Once done become to user <code>root</code> and execute the following commands.</p> Only if your system uses SELinux <pre><code>semanage fcontext -a -e /var/lib/containers /home/podman/.local/share/containers\n</code></pre> <p>This command adds a SELinux file context mapping by creating an equivalence (-e) between the default container storage directory /var/lib/containers and the user\u2019s Podman container storage path /home/podman/.local/share/containers. Essentially, it tells SELinux to treat files in the user's container storage the same way it treats files in the default system container storage, ensuring proper access permissions under SELinux policy.</p> Only if your system uses SELinux <pre><code>restorecon -R -v /home/podman/.local/share/containers\n</code></pre> <p>After defining new SELinux contexts, this command recursively (-R) applies the correct SELinux security contexts to the files in the specified directory. The -v flag enables verbose output, showing what changes are made. This ensures that all files in the container storage directory have the correct SELinux labels as defined by the previous semanage commands.</p> On both RedHat and Ubuntu <pre><code>loginctl enable-linger podman\n</code></pre> <p>This command enables \u201clinger\u201d for the user podman. Linger allows user services (such as containers managed by systemd) to continue running even when the user is not actively logged in. This is useful for running Podman containers in the background and ensures that containerized proxies or other services remain active after logout or system reboots.</p> On both RedHat and Ubuntu <pre><code>echo export XDG_RUNTIME_DIR=\"/run/user/$(id -u podman)\" &gt;&gt; ~/.bash_profile\n</code></pre> <p>This line ensures that the XDG_RUNTIME_DIR environment variable is correctly set for the podman user. This variable points to the location where user-specific runtime files are stored, including the systemd user session bus. Setting it is essential for enabling systemctl --user to function properly with Podman-managed containers.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#prepare-the-proxy-config","title":"Prepare the Proxy config","text":"<p>The next step is to create a .container unit file for our Quadlet setup. This file should be placed in the directory ~/.config/containers/systemd/. For example, we will create a file named <code>zabbix-proxy-sqlite.container</code>, which will define the configuration for running the Zabbix proxy container under systemd using Podman.</p> On both RedHat and Ubuntu <pre><code>su - podman\nvi ~/.config/containers/systemd/zabbix-proxy-sqlite.container\n</code></pre> <pre><code>[Unit]\nDescription=ZabbixProxy\n\n[Container]\nImage=docker.io/zabbix/zabbix-proxy-sqlite3:7.0-centos-latest\nContainerName=ZabbixProxySqlite-Quadlet\nAutoUpdate=registry\nEnvironmentFile=ZabbixProxy.env\nPublishPort=10051:10051\n\n[Service]\nRestart=always\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>The container image for the Zabbix proxy using SQLite can be sourced from Docker Hub. Specifically, we will use the image tagged 7.0-centos-latest, which is maintained by the official Zabbix project. This image can be found at:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/tags?name=centos</p> <p>A complete list of available image tags, including different versions and operating system bases, is available on the image\u2019s main page:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</p> <p>For our purposes, the 7.0-centos-latest tag provides a CentOS-based container image that is well-suited for LTS environments, and it includes all necessary components to run the Zabbix proxy with SQLite.</p> <p>In addition to the .container unit file, we also need to create an environment file that defines the configuration variables for the container. This file must reside in the same directory as the .container file <code>~/.config/containers/systemd/</code> and should be named <code>ZabbixProxy.env</code>, as referenced in our .container configuration.</p> <p>This environment file allows us to override default container settings by specifying environment variables used during container runtime. The list of supported variables and their functions is clearly documented on the container's Docker Hub page:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</p> <p>These variables allow you to configure key parameters such as the proxy mode, server address, hostname, database settings, and logging options, providing a flexible and declarative way to tailor the proxy\u2019s behavior to your environment.</p> <p>Let's create the file <code>~/.config/containers/systemd/ZabbixProxy.env</code> and add the following content.</p> On both RedHat and Ubuntu <pre><code># Zabbix proxy hostname as it appears in the Zabbix frontend\nZBX_HOSTNAME=ProxyA\n\n# IP address or DNS name of the Zabbix server\nZBX_SERVER_HOST=&lt;DNS or IP&gt;\n\n# Proxy mode: 0 = active, 1 = passive\nZBX_PROXYMODE=0\n</code></pre> <p>With our configuration complete, the final step is to reload the systemd user daemon so it recognizes the new Quadlet unit. This can be done using the following command:</p> On both RedHat and Ubuntu run : <pre><code>systemctl --user daemon-reload\n</code></pre> <p>If everything is set up correctly, systemd will automatically generate a service unit for the container based on the <code>.container</code> file. You can verify that the unit has been registered by running:</p> On both RedHat and Ubuntu <pre><code>systemctl --user list-unit-files | grep zabbix\n</code></pre> <p>You should see output similar to:</p> On both RedHat and Ubuntu <pre><code>zabbix-proxy-sqlite.service             generated\n</code></pre> <p>To start the container, use the following command (replacing the service name if you used a different one):</p> On both RedHat and Ubuntu <pre><code>systemctl --user start zabbix-proxy-sqlite.service\n</code></pre> <p>To verify that the container started correctly, you can inspect the running containers with:</p> On both RedHat and Ubuntu <pre><code>podman ps\n</code></pre> <p>This will return output like the example below:</p> On both RedHat and Ubuntu <pre><code>CONTAINER ID  IMAGE                                               COMMAND               CREATED       STATUS       PORTS                     NAMES\nb5716f8f379d  docker.io/zabbix/zabbix-proxy-sqlite3:7.0-centos-latest /usr/sbin/zabbix_...  2 hours ago   Up 2 hours   0.0.0.0:10051-&gt;10051/tcp  ZabbixProxySqlite-Quadlet\n</code></pre> <p>Take note of the <code>CONTAINER ID</code>\u2014in this example, it is <code>b5716f8f379d</code>. You can then retrieve the container's logs using:</p> On both RedHat and Ubuntu <pre><code>podman logs b5716f8f379d\n</code></pre> <p>This command will return the startup and runtime logs for the container, which are helpful for troubleshooting and verifying that the Zabbix proxy has started correctly.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-our-containers","title":"Upgrading our containers","text":"<p>At some point, you may be asking yourself: How do I upgrade my Zabbix containers? Fortunately, container upgrades are a straightforward process that can be handled either manually or through automation, depending on your deployment strategy.</p> <p>Throughout this book, we've been using the image tag <code>7.0-centos-latest</code>, which always pulls the most up-to-date CentOS-based Zabbix 7.0 image available at the time. This approach ensures you are running the latest fixes and improvements without specifying an exact version.</p> <p>Alternatively, you can opt for version specific tags such as <code>centos-7.0.13</code>, which allow you to maintain strict control over the version deployed. This can be helpful in environments where consistency and reproducibility are critical.</p> <p>In the following sections, we will explore both approaches: using the <code>latest</code> tag for automated updates and specifying fixed versions for controlled environments.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-manually","title":"Upgrading manually","text":"<p>If you're running your Zabbix container using a floating tag such as :latest or :trunk-centos, upgrading is a simple and efficient process. These tags always point to the most recent image available in the repository.</p> To upgrade: <p>Pull the latest image using Podman. <pre><code>podman pull zabbix/zabbix-proxy-sqlite3:7.0-centos-latest\n</code></pre> Restart the systemd service associated with the container.</p> <pre><code>systemctl --user restart zabbix-proxy-sqlite.service\n</code></pre> <p>Thanks to our Quadlet integration, systemd will handle the rest automatically: The currently running container will be stopped. A new container instance will be started using the freshly pulled image. All configuration options defined in the associated .container file will be reapplied. This approach allows for quick updates with minimal effort, while still preserving consistent configuration management through systemd.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-when-using-a-fixed-image-tag","title":"Upgrading When Using a Fixed Image Tag","text":"<p>If your container is configured to use a fixed image tag (e.g., <code>7.0.13-centos</code>) rather than a floating tag like <code>:latest</code> or <code>:trunk</code>, the upgrade process involves one additional step: manually updating the tag in your <code>.container</code> file.</p> <p>For example, if you're running a user-level Quadlet container and your configuration file is located at:</p> <pre><code>~/.config/containers/systemd/zabbix-proxy-sqlite.container\n</code></pre> <p>You'll need to edit this file and update the <code>Image=</code> line. For instance, change:</p> <pre><code>Image=docker.io/zabbix/zabbix-proxy-sqlite3:7.0.13-centos\n</code></pre> <p>to:</p> <pre><code>Image=docker.io/zabbix/zabbix-proxy-sqlite3:7.0.14-centos\n</code></pre> <p>Once the file has been updated, apply the changes by running:</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user restart zabbix-proxy-sqlite.service\n</code></pre> <p>This tells systemd to reload the modified unit file and restart the container with the updated image. Since you're using a fixed tag, this upgrade process gives you full control over when and how new versions are introduced.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-automatically","title":"Upgrading automatically","text":"<p>When using floating tags like <code>:latest</code> or <code>:trunk-centos</code> for your Zabbix container images, Podman Quadlet supports automated upgrades by combining them with the <code>AutoUpdate=registry</code> directive in your <code>.container</code> file.</p> <p>This setup ensures your container is automatically refreshed whenever a new image is available in the remote registry without requiring manual intervention.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#example-configuration","title":"Example Configuration","text":"<pre><code>[Container]\nImage=docker.io/zabbix/zabbix-proxy-sqlite3:trunk-centos\nAutoUpdate=registry\n...\n</code></pre> <p>In this example, the <code>Image</code> points to the <code>trunk-centos</code> tag, and <code>AutoUpdate=registry</code> tells Podman to periodically check the container registry for updates to this tag.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#how-the-auto-update-process-works","title":"How the Auto-Update Process Works","text":"<p>Once configured, the following steps are handled automatically:</p> <ol> <li> <p>Image Check    The systemd service <code>podman-auto-update</code> is triggered by a timer (usually daily).    It compares the current image digest with the remote image's digest for the    same tag.</p> </li> <li> <p>Image Update    If a new version is detected:</p> </li> <li> <p>The updated image is pulled from the registry.</p> </li> <li>The currently running container is stopped and removed.</li> <li> <p>A new container is created from the updated image.</p> </li> <li> <p>Configuration Reuse    The new container is launched using the exact same configuration defined in    your <code>.container</code> file, including environment variables, volume mounts, ports,    and networking.</p> </li> </ol> <p>This approach provides a clean, repeatable way to keep your Zabbix proxy (or other components) current without direct user intervention.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#enabling-the-auto-update-timer","title":"Enabling the Auto-Update Timer","text":"<p>To ensure that updates are applied regularly, you must enable the Podman auto-update timer.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#for-system-wide-services","title":"For System-Wide Services","text":"<pre><code>sudo systemctl enable --now podman-auto-update.timer\n</code></pre>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#for-user-level-services","title":"For User-Level Services","text":"<pre><code>systemctl --user enable --now podman-auto-update.timer\n</code></pre> <p>This activates a systemd timer that periodically invokes <code>podman-auto-update.service</code>.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#when-to-use-this-approach","title":"When to Use This Approach","text":"<p><code>AutoUpdate=registry</code> is particularly useful in the following scenarios:</p> <ul> <li>Development or staging environments, where running the latest version is   beneficial.</li> <li>Non-critical Zabbix components, such as test proxies or lab deployments.</li> <li>When you prefer a hands-off update strategy, and image stability is trusted.</li> </ul> Note <p>This setup is not recommended for production environments without a proper rollback plan. Floating tags like <code>:latest</code> or <code>:trunk-centos</code> can introduce breaking changes unexpectedly. For production use, fixed version tags (e.g. <code>7.0.13-centos</code>) offer greater stability and control.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#conclusion","title":"Conclusion","text":"<p>In this chapter, we deployed a Zabbix active proxy using Podman and systemd Quadlets on a Red Hat-based system. We configured SELinux, enabled user lingering, and created both <code>.container</code> and <code>.env</code> files to define proxy behavior. Using Podman in rootless mode ensures improved security and system integration. Systemd management makes the container easy to control and monitor. This setup offers a lightweight, flexible, and secure approach to deploying Zabbix proxies. It is ideal for modern environments, especially when using containers or virtualisation. With the proxy running, you're ready to extend Zabbix monitoring to remote locations efficiently.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#questions","title":"Questions","text":"<ul> <li>What are the main advantages of using Podman over Docker for running containers   on Red Hat-based systems?</li> <li>Why is the loginctl enable-linger command important when using systemd with rootless   Podman containers?</li> <li>What is the purpose of the .env file in the context of a Quadlet-managed container?</li> <li>How do SELinux policies affect Podman container execution, and how can you configure   them correctly?</li> <li>How can you verify that your Zabbix proxy container started successfully?</li> <li>What is the difference between an active and passive Zabbix proxy?</li> </ul>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</li> <li>https://podman.io/</li> <li>https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html</li> <li>https://blog.zabbix.com/podman-container-monitoring-with-prometheus-exporter-part-1/30513/</li> </ul>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxy-basics/","title":"Proxy basics","text":"<p>In this chapter we will cover the basic needs for our proxies. We won't pay attention to active or passive proxies yet this is something we cover later in the next chapters.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-requirements","title":"Proxy requirements","text":"<p>If you like to setup a few proxies for test or in your environment you will need a few Linux hosts to install the Proxies on. Proxies are also available in containers so a full VM is not needed. However here we will use a VM so we can show you how to install a proxy. Don't worry we will cover containers as well. When it comes to proxies they are very lightweight however since Zabbix 4.2 Proxies are able to do Item value preprocessing and this can use a lot of CPU power. So the number of CPUs and memory will depends on how many machines you will monitor and how many preprocessing rules you have on your hosts.</p> <p>So in short a Zabbix proxy can be used to:</p> <ul> <li>Monitor remote locations</li> <li>Monitor locations that have unreliable connections</li> <li>Offload the Zabbix server when monitoring thousands of devices</li> <li>Simplify the maintenance and management</li> </ul> Note <p>Imagine that you need to restart your Zabbix server and that all proxies start to push the data they have gathered during the downtime of the Zabbix server. This would create a huge amount of data being sent at once to the Zabbix server and bring it to its knees in no time. Since Zabbix 6 Zabbix has added protection for overload. When Zabbix server history cache is full the history cache write access is being throttled. Zabbix server will stop accepting data from proxies when history cache usage reaches 80%. Instead those proxies will be put on a throttling list. This will continue until the cache usage falls down to 60%. Now server will start accepting data from proxies one by one, defined by the throttling list. This means the first proxy that attempted to upload data during the throttling period will be served first and until it's done the server will not accept data from other proxies.</p> <p>This table gives you an overview of how and when throttling works in Zabbix.</p> History write cache usage Zabbix server mode Zabbix server action Reaches 80% Wait Stops accepting proxy data, but maintains a throttling list (prioritized list of proxies to be contacted later). Drops to 60% Throttled Starts processing throttling list, but still not accepting proxy data. Drops to 20% Normal Drops the throttling list and starts accepting proxy data normally.","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#active-versus-passive-proxy","title":"Active versus Passive proxy","text":"<p>Zabbix proxies have been available since Zabbix 1.6, at that time they where available only as what we know today as <code>Active proxies</code>. Active means that the proxy will initiate the connection by itself to the Zabbix Server. Since version 1.8.3 passive proxies where introduced. This allowed the server to connect to the proxy. As mentioned before Zabbix agents can be both active and passive however proxies cannot be both so we have to choose the way of the communication when we install a proxy. Just remember that choosing the proxy mode <code>active</code> or <code>passive</code> has no impact on how Zabbix agents can communicate with our proxy. It's perfectly fine to have an <code>active proxy</code> and a <code>passive agent</code> working together.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#active-proxy","title":"Active proxy","text":"<p>A proxy in active mode will be the one in control of all the settings like the when it looks for new configuration changes and pushes new data to the server. In a standard setup the active proxy will sent it's data every second to the <code>Zabbix server</code> reload it's config every 10 seconds.</p> <p>The most important options for an active proxy that we need to remember are changed in the <code>Zabbix proxy</code> configuration file only.</p> <ul> <li>ProxyMode: 0</li> <li>Server: IP or DNS of the Zabbix server</li> <li>Hostname: Proxy name this needs to be exact the same as configured in the   frontend.</li> <li>ProxyOfflineBuffer: How long we like to keep data in the DB (in hours) if   we can' contact the <code>Zabbix server</code>.</li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> <li>ProxyConfigFrequency: Replaces ConfigFrequency and defines how often we   request configuration updates (every 10 seconds) from the <code>Zabbix server</code>.</li> <li>DataSenderFrequency: How often data is sent to <code>Zabbix server</code> (every second)</li> </ul> <p>When it comes to configuring the needed resources for the <code>Active proxy</code> we have to realise that the proxy can use up to 2 trapper items on the <code>Zabbix server</code> when it tries to connect. One will be used to sent the actual data and the other trapper will be used to retrieve new configuration changes. So it's best practice to configure 2 trappers per <code>Active proxy</code> on the server side.</p> <p></p> <p>3.1 Active proxy communication</p> Info <p>Before Zabbix 7.0 a proxy would reload it's configuration once every 3600 seconds. This has been changed since Zabbix 7.0 as they way proxies handle updates have been optimized.</p> Warning <p>Before you continue with the setup of your active or passive proxy make sure your OS is properly configure like explained in our chapter <code>Getting Started</code> =&gt; <code>System Requirements</code>. As it's very important to have your firewall and time server properly configured.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#passive-proxy","title":"Passive proxy","text":"<p>A proxy in passive mode will have all settings controlled by the <code>Zabbix server</code>.</p> <p>The most important options for a passive proxy that we need to remember are changed in the <code>Zabbix server</code> configuration file and the <code>Zabbix proxy</code> as it is the server that controls when and how proxy data is requested by making use of pollers.</p> <p>The most important setting we can find back in the <code>proxy</code> configuration file are:</p> <ul> <li>ProxyMode:1 (passive)</li> <li>Server: IP or DNS of the <code>Zabbix server</code></li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> </ul> <p>And finally the config settings we need to change on our <code>Zabbix server</code>:</p> <ul> <li>StartProxyPollers: The number of pollers to contact proxies</li> <li>ProxyConfigFrequency: Replaces ConfigFrequency and defines how often   <code>Zabbix server</code> will sent configuration changes to our proxies.</li> <li>ProxyDataFrequency: How often <code>Zabbix server</code> will request data from our proxies.</li> </ul> <p></p> <p>3.2 Passive proxy communication</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-configuration-changes","title":"Proxy configuration changes","text":"<p>Before Zabbix 7.0, a full configuration synchronization was performed by proxies every 3600 seconds (1 hour) by default. With the introduction of Zabbix 7.0, this behavior changed significantly. Now, configuration synchronization occurs much more frequently, every 10 seconds by default, but it's an incremental update. This means that instead of transferring the entire configuration, only the modified entities are synchronized, greatly improving efficiency and reducing network overhead.</p> <p>Upon initial proxy startup, a full configuration synchronization is still performed. Subsequently, both the server and the proxy maintain a revision of the configuration. When a change is made on the server, only the differences, based on these revision numbers, are applied to the proxy's configuration, rather than a complete replacement of the entire configuration as in older versions. This incremental approach allows for near real-time propagation of configuration changes while minimizing resource consumption.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-runtime-control-options","title":"Proxy runtime control options","text":"<p>Just like the <code>Zabbix server</code> our proxy supports runtime control options always check latest options with the --help option. But here is a short overview of options available to use.</p> <ul> <li>zabbix_proxy --runtime-control housekeeper_execute</li> <li>zabbix_proxy --runtime-control log_level_increase=target</li> <li>zabbix_proxy --runtime-control log_level_decrease=target</li> <li>zabbix_proxy --runtime-control snmp_cache_reload</li> <li>zabbix_proxy --runtime-control diaginfo=section</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-firewall","title":"Proxy firewall","text":"<p>Our proxies work like small <code>Zabbix servers</code> so when it comes to the ports to connect to agents, SNMP, ... nothing changes all ports need to be configured same as on your server.</p> <p>When it comes to port for the proxy it depends on our proxy being <code>active</code> or <code>passive</code>.</p> <ul> <li>Active Proxy: Zabbix server needs to have port <code>10051/tcp</code> open so proxy can   connect.</li> <li>Passive Proxy: Needs to have port <code>10051/tcp</code> open on the proxy so that the   <code>server</code> can connect to the proxy.</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-groups/","title":"Proxy groups","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/web-services/","title":"Web services","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/browser/","title":"Browser item","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#conclusion","title":"Conclusion","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#questions","title":"Questions","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#useful-urls","title":"Useful URLs","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/calculated/","title":"Calculated items","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/chapter/","title":"Collecting data with your Zabbix environment","text":"<p>In this chapter, we'll take a detailed journey through Zabbix data flow, showing how to progress from an empty setup to a fully functioning system capable of sending timely notifications. We\u2019ll break down each step, giving you a clear understanding of how data moves through Zabbix.</p> <p>We'll then explore the various protocols used in Zabbix, how they function, their compatibility with different components, and how to configure them effectively. This will provide you with a comprehensive overview of the communication backbone that powers Zabbix monitoring capabilities.</p> <p>Next, we'll cover the essentials like hosts, host groups, host interfaces, and items, ensuring you understand their roles and how to set them up correctly. </p> <p>For now, we'll hold off on custom scripts and external check items, focusing instead on the core elements. When we touch on active agents, we'll reference the chapter on auto-registration, guiding you to more detailed discussions on that topic later.</p> <p>By the end of this chapter, you'll have a strong grasp of Zabbix data flow and the protocols that enable seamless monitoring and notifications, preparing you for more advanced configurations and integrations.</p>"},{"location":"ch04-zabbix-collecting-data/database-agent/","title":"Database checks via agent","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/","title":"Database checks via odbc","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/dataflow/","title":"Dataflow","text":"<p>The Zabbix dataflow is a concept that is meant to guide us through the various different stages of building up our monitoring system. In the end, when building a Zabbix environment we want to achieve a few things:</p> <ul> <li>Collected metrics are stored, can be easily found and are visualised</li> <li>Problems are created from our data and shown in the frontend</li> <li>We take action on important problems by sending a message or executing commands</li> </ul> <p>Those three parts of the Zabbix dataflow in our Zabbix environment can be easily identified as:</p> <ul> <li>Items </li> <li>Triggers</li> <li>Actions</li> </ul> <p>But when we look at <code>Items</code> specifically, it's also possible to alter our data before storing the metrics in Zabbix. This is something we do with a process called pre-processing, which will take the collected data and change it before storing it in the Zabbix database. Our dataflow in the end then looks as such:</p> <p> 4.1 Zabbix basic dataflow</p> <p>This gives us a very basic understanding of what steps we have to go through in Zabbix to get from data being collected to alerts being sent out. Very important to us Zabbix administrators, as we need to go through these steps each time we want to end up with a certain type of monitoring.</p> <p>But, now that we have identified what parts to look at, let's dive a bit deeper into what each of those parts does. Logically, that would start with <code>Items</code> looking at the image above. But before we can start discussing <code>Items</code> there is another  concept we need to understand.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#hosts","title":"Hosts","text":"<p>To create <code>Items</code> in Zabbix, we first need to create <code>Hosts</code>. A <code>host</code> is nothing more than a container (not the Docker kind), it's something that contains <code>Items</code>, <code>Triggers</code>, <code>graphs</code>, <code>Low Level Discovery</code> rules and <code>Web scenarios</code>. All of these various different entities are contained within our Hosts.</p> <p>Often times, Zabbix users and administrators make the misconception here that a <code>host</code> always represents a physical or virtualised host. But in the end, hosts are nothing more than a representation of a <code>monitoring target</code>. A monitoring target is something we want to monitor. This can be a server in your datacenter, a virtual machine on your hypervisor, a Docker container or even just a website. Everything you want to monitor in Zabbix will need a host and the host will then contain your monitoring configuration on its entities.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#items","title":"Items","text":"<p><code>Items</code> in Zabbix are Metrics. One <code>Item</code> is usually a single metric we'd like to collect, with the exception being bulk metric collection which we will discuss later on in the book. When we want to create our <code>Items</code> we can do this on a host and we can actually create an unlimited amount of <code>Items</code> on a host.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#preprocessing","title":"Preprocessing","text":"<p>But we cannot stop there with <code>Items</code> just yet, as we also mentioned an additional part of our dataflow. It is possible to change the collected metric on an item before storing it into the Zabbix database. We do this with a process called preprocessing. </p> <p>Preprocessing is something we add onto our items when creating the configuration of such items. It is a part of the item, but not mandatory on every single item.</p> <p>General rule:</p> <ul> <li>Collect metric and store as-is in the database? No preprocessing</li> <li>Collect metric and change before storing in the database? Add preprocessing</li> </ul> <p>We will discuss this in more detail later on in the book as well.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#triggers","title":"Triggers","text":"<p>With all of the collected metrics, we can now also start to create triggers if we would want to. A trigger is Zabbix is nothing more than a bit of configuration on our host, which we will use to define thresholds using metrics collected on items. </p> <p>A trigger can be setup to use the data collected on an item in a logical expression. This logical expression will define the threshold and when data is received on the item(s) used in the logical expression the trigger can go or stay in on of two states:</p> <ul> <li>PROBLEM: When the logical expression is TRUE</li> <li>OK: When the logical expression is FALSE</li> </ul> <p>This is how we define if our data is in a good or a bad state.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#events","title":"Events","text":"<p>When we discuss triggers however, we cannot skip past the Events. Whenever a trigger changes state, for example it was in OK state and goes into the PROBLEM state, then Zabbix will create a new Event. There's three types of these events created by our triggers:</p> <ul> <li>Problem event: When the trigger goes from OK to PROBLEM</li> <li>Problem resolution event: When the trigger goes from PROBLEM to OK</li> <li>Problem update event: When someone manually updates a problem</li> </ul> <p>These problem events are what you will see in the frontend when you navigate to <code>Monitoring</code> | <code>Problems</code>, but they are also very important in the next step in the Zabbix dataflow <code>Actions</code>.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#actions","title":"Actions","text":"<p>Actions are the last step in our Zabbix dataflow and they are kind of split into two parts. An action consists of <code>Conditions</code> and <code>Operations</code>. This is going to be important in making sure the action executes on the right time (conditions) and executes the right activity (operations). </p> <p>What happens is, whenever a problem event in Zabbix is created it is sent to every single problem action in our Zabbix environment. All of these action will then check the event details like what host did it come from, with which severity, when did it start, which tags are present. These event details are then checked against the action conditions and only when the conditions match will the operations be executed. The operation can then be something like, send a message to Microsoft Teams or Telegram. But an operation could also be, execute the reboot command on this host.</p> <p>As you can imagine, the conditions will be very important to make sure that operation on that action are only executed when we specifically want it to. We do not want to for example reboot a host without the right problem being first detected.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#conclusion","title":"Conclusion","text":"<p>To summarize, all the steps in the dataflow work together to make sure that you can build the perfect Zabbix environment. When we put the entire dataflow together it looks like the image below.</p> <p> 4.2 Zabbix detailed dataflow</p> <p>Here we can see the various steps coming together.</p> <ul> <li>We have our <code>Hosts</code> container our <code>Items</code> and <code>Triggers</code>. </li> <li>Our <code>Items</code> are collecting metrics</li> <li>The <code>Triggers</code> are using data from <code>Items</code> to detected problems and create problem <code>Events</code>.</li> <li>If a problem <code>Event</code> matches the Conditions on an <code>Action</code> the Operations can be executed</li> </ul> <p>Important to note here is that if an item is collecting metrics, it doesn't necessarily need to have a trigger attached to it. The trigger expression is a separate configuration where we can choose which items we want to define thresholds on. In the end, not ever item needs to start creating problems. We can also see that we can use several items or event several items from different hosts in a single trigger.</p> <p>The same is the case for our events. Not every event will match the conditions on an action. In practice, this means that some problems will only show up in your Zabbix frontend, while other might go on to send you an alert message or even execute commands or scripts. A single event can also match the conditions on multiple actions, since we mentioned that all events are always send to all action for evaluation. This can be useful, for example if you want to split you messaging and your script execution in different action to keep things organised.</p> <p>Now that we understand the various parts of our Zabbix dataflow we can dive deeper into creating the configuration for the steps in the dataflow.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/","title":"Dependent items","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/external-checks/","title":"External checks","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/","title":"Host Interfaces","text":"<p>When we create a host in Zabbix, we have the option to create <code>Host interfaces</code>. You might have noticed this in the previous chapter already when you created a host or when you added the simple check.</p> <p>Host interfaces in Zabbix are used to define a remote monitoring target. We define the <code>IP address</code> or <code>DNS name</code> as well as the <code>Port</code> that we want our Zabbix server (or proxy) to connect to when collecting our monitoring information. There are three types of interfaces.</p> <ul> <li>Agent (or ZBX) </li> <li>SNMP</li> <li>JMX</li> <li>IPMI</li> </ul> <p>These interface types are tied directly to the items types. Meaning that when you want to monitoring the Zabbix agent (passive) you will need a ZBX (agent) type interface. If you do not have the correct interface, you will not be able to add the items for monitoring. </p> <ul> <li>Agent (or ZBX) is used by Zabbix agent items</li> <li>SNMP is used by SNMP agent and SNMP trap items</li> <li>JMX is used by JMX agent items</li> <li>IPMI is used by IPMI agent items</li> </ul> <p>Besides these matches, there are also various items like the <code>Simple check</code> items that can use all four interface types. These items will then only use the interface IP or DNS to connect to the remote monitoring target.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#agentzbx-and-jmx","title":"Agent/ZBX and JMX","text":"<p>The Zabbix agent type interface and JMX interface work quite similarly. Both interface types allow us to define four things. </p> <p> 4.9 Agent and JMX type interfaces</p> <ul> <li>IP address </li> <li>DNS name</li> <li>Connect to (IP or DNS)</li> <li>Port</li> </ul> <p>It's important to take note of the <code>Connect to</code> field here. It indicates whether we will use the <code>IP address</code> or <code>DNS name</code> field configured for this interface. Within Zabbix interfaces it is only possible to use one at the time. That means there is no failover if DNS starts to fail and as such when using DNS your monitoring will be dependent on your DNS servers.</p> Tip <p>The question often asked at this point is \"Should I use DNS or IP\". The choice in the end is up to the Zabbix administrator, but a simple rule we always follow is:</p> <p>If it's static use IP, as your monitoring will keep working even if DNS is down. If it's dynamic, use DNS as you will save yourself the administrative overhead.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#snmp","title":"SNMP","text":"<p>The SNMP interface has the most options of all four interface types. The reason for this is because the SNMP type interface allows us to specify the SNMP details like version, community and credentials.</p> <p> 4.10 SNMPv2 interface</p> <p>When selecting the <code>SNMP version</code> as either <code>SNMPv1</code> or <code>SNMPv2</code>, we are shown the <code>SNMP community</code> field. <code>SNMPv1</code> and <code>SNMPv2</code> both use unauthenticated and unencrypted connections by using a plain text <code>SNMP community</code> to initiate a connection to the SNMP monitoring target like a switch or a router. This `SNMP community is sent over the network in plain text and as such it can not be seen as fully secure authentication.</p> <p>All three SNMP versions will also show the <code>Use combined requests</code> checkbox. When selected, Zabbix will group multiple SNMP items into a single request to improve performance. For some older SNMP devices this can cause some issues and in those cases it might be needed to turn the checkbox off.</p> <p>Additionally when selecting <code>SNMPv2</code> or <code>SNMPv3</code> we are also presented with the <code>Max repetition count</code>. When Zabbix uses <code>GETBULK</code> requests it will retrieve multiple values per OID base in a single call. This option is used to reduce SNMP traffic overhead when using the <code>walk[]</code> SNMP agent item key. </p> <p> 4.11 SNMPv3 interface</p> <p>For <code>SNMPv3</code> many additional fields will be available for configuration. </p> <ul> <li>Context name Used to define a context, for example when connecting to a   single device split up in multiple virtual devices (like a virtual router)</li> <li>Security name The username we will use when authenticating to our SNMP monitoring   target</li> <li>Security level noAuthNoPriv, AuthNoPriv, AuthPriv. We can choose to do SNMPv3   without authentication and data encryption, with authentication and without data   encryption or with both authentication and data encryption.</li> <li>Authentication protocol MD5, SHA1, SHA224, SHA256, SHA384, SHA512. The encryption   strength for our authentication.</li> <li>Authentication passphrase The password for authentication.</li> <li>Privacy protocol DES, AES128, AES192, AES256, AES192C, AES256C. The encryption   strength for our data encryption.</li> <li>Privacy passphrase The password for data encryption.</li> </ul> <p>With <code>SNMPv3</code> it is important to keep security in mind. <code>SNMPv1</code> and <code>SNMPv2</code> should be considered obsolete at this point, providing potential bad actors with access to important information or worse write access to devices without authentication. <code>SNMPv3</code> with authentication and data encryption is as such always recommended. It's up to the Zabbix administrator to determine what the monitoring target supports, but higher security is better in this case. </p> <p>noAuthNoPriv utilizes the <code>SNMPv3</code> protocol without authenticating and encrypting the data.  AuthNoPriv uses encrypted authentication, but sends monitoring data plain text over the network AuthPriv is the recommended method for high security, as it uses encrypted authentication and also sends monitoring data encrypted over the network. </p> <p>When using <code>SNMPv3</code> it is also best practice to use a strong authentication protocol. MD5 and DES are both no longer recommended due to the possibility to brute force the passwords with consumer grade hardware amongst other risks. That's why SHA1 and AES128 or higher is always recommended. </p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#ipmi","title":"IPMI","text":"<p>For <code>IPMI agent</code> type items we want to add the <code>IPMI</code> type interface. We can use it to connect to <code>BMC's (Baseboard Management Controller)</code> like <code>iDRAC</code> and <code>iLo</code>. This interface is slightly different again from the previous three interfaces.</p> <p> 4.12 IPMI interface</p> <p>We have the same settings for <code>IP</code>, <code>DNS</code> and <code>Port</code> again, but in the case of IPMI we do not define credentials on the interface level. Instead these are provided on a different tab on the host configuration settings.</p> <p> 4.13 IPMI host settings</p> <p>For a host in Zabbix we can only define one IPMI use for authentication, regardless of the amount of interfaces we add. </p> <ul> <li>Authentication algorithm None, MD2, MD5, Straight, OEM, RMCP+. Determines the encryption strength.</li> <li>Privilege level Callback, User, Operator, Admin, OEM. Determines the privilege level our user should be allowed to connect with.</li> <li>Username The username to authenticate with.</li> <li>Password The password to authenticate with.</li> </ul> <p>Once again, for security purposes <code>MD2</code> and <code>MD5</code> are not recommended. As well as <code>Straight</code> which is plain text unencrypted and <code>OEM</code> which is vendor specific. If possible, try to use <code>RMCP+</code>, which in most cases is the most secure.</p> <p>For the <code>Privilege level</code> it is recommended to use either <code>Callback</code> or <code>User</code> in most scenarios. <code>Callback</code> will allow us to access alerts, <code>User</code> will also allow us to access monitoring data. If need higher privilege levels to execute commands on the <code>BMC</code> as well, this is possible. But keep in mind, write access from your monitoring system comes with additional security risks.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#interface-availability","title":"Interface availability","text":"<p>All four interface types, also come with an icon that can turn Green, Orange, Red or Grey. This color determines the interface its availability.</p> <p>... ... ...</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#conclusion","title":"Conclusion","text":"<p>When configuring your host interfaces in Zabbix, we need to match our <code>Item type</code> to our <code>Interface type</code>. When we have the correct <code>Host interface</code> configured we will be able to add the corresponding <code>Items</code> on our  host to collect data. Upon successful data collection, the interface availability icon will also turn <code>Green</code>.</p> <p>Some item types like the <code>Simple check</code> also have the possibility to use host interfaces, but do not need them. These items, although they use the interface, do not have an affect on interface availability and the availability icon.</p> <p>When configuring host interfaces with security settings, keep in mind to use the most secure option that your monitoring target supports. This will make sure your Zabbix environment is more secure, even if a bad actor would be present on your network somehow.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/","title":"Hosts","text":"<p>After reading the previous dataflow section, it is now clear we have to go through the  dataflow steps to get from collecting data to sending out alerts.  The first part of the dataflow is to create a host, so that is what we are now going to tackle in this part.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#creating-a-host","title":"Creating a host","text":"<p>As we mentioned, Hosts in Zabbix are nothing more than a container (not the Docker kind). They contain our <code>Items</code>, <code>Triggers</code>, <code>graphs</code>, <code>Low Level Discovery</code> rules and <code>Web scenarios</code>.  </p> <p>At this point, we should create our first monitoring host in Zabbix. Navigate to <code>Data collection</code> | <code>Hosts</code>  and in the top right corner click on the <code>Create host</code> button. This will open up the following modal window:</p> <p> 4.3 Empty host creation window</p> <p>There are a lot of fields we can fill in, but few are important to note here specifically. </p> <ul> <li>Host name </li> <li>Host groups</li> </ul> <p>These are the only two mandatory fields in the host creation window. If we fill these two,  we can create our host. </p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#host-name","title":"Host name","text":"<p>The <code>Host name</code> is very important. It functions as both the technical name of the host we will use in various different locations, but it is also used as the <code>Visible name</code> by default. This  means that we will work with this name to find through filters this host with its associated data.</p> <p>Make sure to select a host name that is short and descriptive. For example:</p> <ul> <li>linux-srv01-prd</li> <li>www.thezabbixbook.com</li> <li>docker-container-42</li> <li>db-srv10 - Website database</li> </ul> <p>The best practise is to keep the host name the same in Zabbix as it is configured on your monitoring target. The monitoring target, being whatever you are trying to monitor.  Whether that is a physical or virtual server, a website, a database server or  a specific database on that database server. Every host in Zabbix is a monitoring target,  i.e. something you are trying to monitor.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#visible-name","title":"Visible name","text":"<p>Now, we didn't mention it as it is not a mandatory field. Nevertheless, we need to discuss the <code>Visible name</code> field before we continue with the <code>Host groups</code>. Although not mandatory, as I mentioned, the <code>Host name</code> is automatically used as the visible name when not filled in.</p> <p>Many of us see a form style list and have the need to fill out everything there is to fill out. This should not be the case with forms like the host creation window in Zabbix. We are only trying to fill out everything we should be configuring. As such, since the visible name is not mandatory, I  do not fill it out. Unless, there is an actual need to use the field. </p> <p>The visible name was added in Zabbix as the host name and visible name fields in Zabbix use different character encoding in the Zabbix database. </p> <p><code>Host name</code> = <code>UTF8</code> and supports alphanumeric, dashes, underscores and spaces (not leading or trailing). <code>Visible name</code> = <code>UTF8_MB4</code> and supports special characters like <code>\u00e7</code> and even emojis like <code>\ud83d\udc40</code>.</p> <p>This is the main difference. When you want to use a local language for example you could do:</p> <p><code>Host name</code> = <code>sherbimi-central</code> <code>Visible name</code> = <code>sh\u00ebrbimi-\u00e7entral</code></p> <p>That way you keep your local language in the frontend, but the technical name doesn't include the  special character. Keep in mind however, that this can create confusion. You now need to remember two different names for the same host. As such, visible names are only recommended when you really need them or if you are trying to work around something. Otherwise, there is not need to use them.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#host-groups","title":"Host groups","text":"<p>In Chapter 02 of the book, we had a deep dive into setting up various different host groups to keep our Zabbix environment structured. When we create a host, we can now start using on of our created host groups. Keep in mind, to only add the host to the lowest level of the subgroups. For example when we have <code>Servers</code> and <code>Servers/Linux</code>, we will only add our host to <code>Servers/Linux</code>.</p> <p>It's also possible to create a host straight from the host creation window. To do so, simply start typing the host group name into the <code>Host groups</code> field and it will ask you if you want to create the host group.</p> <p></p> <p>4.4 Host creation - new host group</p> <p>Let's add the host <code>simple-checks</code> in the <code>Linux/Servers</code> host group.</p> Note <p>It's recommended to read the simple checks recipe from here, as it  contains useful tips on creating good items.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/http/","title":"Http","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/","title":"IPMI","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/","title":"Monitoring Java Applications with JMX","text":"<p>One of the neat features that Zabbix offers out of the box is the ability to monitor Java applications. To make this happen, Zabbix uses something called the <code>Java Gateway</code>, which communicates with Java applications via the <code>Java Management Extensions</code> JMX, for short.</p> <p><code>JMX</code> is a built-in Java technology designed specifically for monitoring and managing Java applications and the <code>Java Virtual Machine</code> (JVM). It works through components called <code>MBeans</code> (Managed Beans), which act like data sensors and control points. These MBeans can expose useful information like memory usage, thread counts, and even allow runtime configuration changes, all while the application is running.</p> <p>One of the strengths of JMX is its flexibility. It supports both local and remote access, so whether your Java app is on the same machine or halfway across the network, Zabbix can still keep an eye on it. Combined with the Java Gateway, this makes JMX a powerful and scalable option for monitoring Java-based environments with minimal setup. Also JMX was an extension but is part of JAVA SE since java 5.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#key-concepts-in-jmx-monitoring","title":"Key Concepts in JMX Monitoring","text":"<p>Before diving into JMX monitoring with Zabbix, it helps to get familiar with a few core building blocks that make it all work:</p> <p>Managed Beans (MBeans): These are the heart of JMX. MBeans are Java objects that expose useful bits of data (called attributes) and operations (as regular methods) from your application. Think of them as little control panels inside your Java app, you can read metrics, tweak settings, or trigger actions through them.</p> <p>JMX Agent: This is the engine behind the scenes. Running inside the Java Virtual Machine (JVM), the JMX agent connects everything together. It's what lets management tools (like Zabbix) interact with the MBeans.</p> <p>MBean Server: A key part of the JMX agent, the MBean server is like a central registry where MBeans are registered and managed. It keeps everything organized and accessible.</p> <p>Connectors: Want to monitor your Java app remotely? That's where connectors come in. They let external tools connect to the JMX agent over a network. So you're not limited to local monitoring.</p> <p>Adaptors: Sometimes you need JMX data to speak a different language. Adaptors convert JMX info into formats that non-Java tools can understand, like HTTP or SNMP, making integration easier with broader monitoring ecosystems.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#jmx-core-architecture","title":"JMX Core Architecture","text":"<p>To understand how Zabbix collects data from Java applications, it helps to know the basic structure of JMX itself. JMX is built on a three-layer architecture that separates how metrics are defined, how they are stored inside the JVM, and how external tools can reach them.</p> <ul> <li> <p>Instrumentation Layer: This is where the application exposes its internal   state through MBeans (Managed Beans). They can be standard, dynamic, or MXBeans,   and represent things like memory usage, thread counts, or application specific   metrics.</p> </li> <li> <p>Agent Layer: \u2013 Every JVM contains an MBeanServer, which acts as a registry   and makes these MBeans available for management. When you start a JVM with   -Dcom.sun.management.jmxremote, you are exposing this server for external access.</p> </li> <li> <p>Remote Management Layer: This is how outside tools connect to the JVM.   Connectors (such as RMI or JMXMP) and adaptors (such as HTTP or SNMP bridges)   allow Zabbix and other monitoring systems to fetch the metrics. By default,   Zabbix uses an RMI connector via the Java Gateway.</p> </li> </ul> <pre><code>flowchart LR\n    A[Application] --&gt; B[MBeans]\n    B --&gt; C[MBeanServer]\n    C --&gt; D[Connector RMI - JMXMP]\n    D --&gt; E[Zabbix Java Gateway]\n    E --&gt; F[Zabbix Server / DB]\n    F --&gt; G[Frontend]\n\n    classDef app fill:#fef3c7,stroke:#111,stroke-width:1px,color:#111;\n    classDef mbean fill:#dbeafe,stroke:#111,stroke-width:1px,color:#111;\n    classDef gateway fill:#fde68a,stroke:#111,stroke-width:1px,color:#111;\n    classDef zabbix fill:#bbf7d0,stroke:#111,stroke-width:1px,color:#111;\n\n    class A app;\n    class B,C mbean;\n    class D,E gateway;\n    class F,G zabbix;\n\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#where-does-the-zabbix-java-gateway-fit-in-this-picture","title":"Where Does the Zabbix Java Gateway Fit in this picture?","text":"<p>The Zabbix Java Gateway is an external component in the Zabbix ecosystem specifically designed to handle JMX monitoring. While it's not part of the JMX framework itself, it acts as a JMX client that connects to your Java application\u2019s JMX agent and collects data from MBeans. So, if we map it to the components we just discussed, here's how it fits: =&gt; Category: Connectors (Client-Side)</p> <p>Why? Because the Zabbix Java Gateway is essentially a remote management application that connects to the JMX agent running inside your Java app\u2019s JVM. It uses JMX's remote communication protocols (usually over RMI) to pull data from the MBean server.</p> <p>Think of it like this:</p> <ul> <li>Your Java app exposes data via MBeans.</li> <li>The JMX agent and MBean server inside the JVM make that data available.</li> <li>The Zabbix Java Gateway reaches in from the outside, asks for that data,   and passes it along to your Zabbix server.</li> </ul> <p>So, while connectors in JMX terminology usually refer to the part inside the JVM that allows remote access, the Java Gateway is the counterpart on the outside. The client that initiates those connections.</p> <pre><code>flowchart LR\n    subgraph JVM[\"Java Application (JVM)\"]\n        subgraph JMX[\"JMX Agent\"]\n            MBServer[\"MBean Server\"]\n            Connector[\"Connectors\"]\n            Adaptor[\"Adaptors\"]\n            M1[\"MBean\"]\n            M2[\"MBean\"]\n\n            MBServer --- M1\n            MBServer --- M2\n            MBServer --- Connector\n            MBServer --- Adaptor\n        end\n    end\n\n    ZS[\"Zabbix Server\"]\n    JGW[\"Zabbix Java Gateway\"]\n\n    ZS --&gt; JGW\n    JGW --&gt; Connector\n\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#setup-tomcat-to-monitor-with-zabbix","title":"Setup Tomcat to monitor with Zabbix.","text":"<p>To ensure accurate testing of JMX monitoring with Zabbix, a dedicated host is essential. Although configuration on the Zabbix server is possible, a separate machine provides a more realistic representation of a production environment. For our setup, we'll use a new virtual machine running either Rocky Linux or Ubuntu. This machine will serve as our JMX-enabled target, and we'll install and configure Tomcat on it for this purpose.</p> Setup Tomcat <p>Red hat <pre><code>dnf install tomcat\nvi /etc/sysconfig/tomcat\n</code></pre> Ubuntu <pre><code>apt install tomcat10\nvi /etc/default/tomcat10\n</code></pre> Add the following config: in Ubuntu remove the original JAVA_OPTS line or place a # in front</p> <pre><code>JAVA_OPTS=\"\\\n  -Dcom.sun.management.jmxremote=true \\\n  -Dcom.sun.management.jmxremote.port=8686 \\\n  -Dcom.sun.management.jmxremote.rmi.port=8686 \\\n  -Dcom.sun.management.jmxremote.authenticate=false \\\n  -Dcom.sun.management.jmxremote.ssl=false \\\n  -Djava.rmi.server.hostname=&lt;local ip or hostname&gt;\"\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#explanation-of-each-line","title":"Explanation of Each Line","text":"<p>Let's go over the lines we just configured. They are a set of configuration options, called JMX options, passed to the Java Virtual Machine (JVM) at startup. These options enable and configure the Java Management Extensions (JMX) agent, which allows for remote monitoring and management of the application, in this case, Apache Tomcat.</p> <ul> <li> <p><code>JAVA_OPTS=\"... \"</code>   This is a variable used by Tomcat's startup scripts to hold a collection of   command-line arguments for the Java process. The backslash (<code>\\</code>) at the end of   each line is a shell syntax feature that allows a single command or variable   to span multiple lines, making the configuration easier to read.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote=true</code>   This is the main switch to enable the JMX remote agent. By setting this to <code>true</code>,   you're telling the JVM to start the JMX management server.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.port=8686</code>   This option specifies the port number for the JMX agent to listen on for   incoming connections. In this case, it's set to <code>8686</code>.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.rmi.port=8686</code>   This sets the port for the RMI (Remote Method Invocation) server. The JMX   agent uses RMI to communicate with remote clients. In this configuration,   both the JMX agent and the RMI server are configured to use the same port,   simplifying the setup.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.authenticate=false</code>   This disables authentication for JMX connections. For production environments,   this should be set to <code>true</code> to require a username and password. Setting it to   <code>false</code> is only suitable for development or testing environments.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.ssl=false</code>   This disables Secure Sockets Layer (SSL) for JMX connections, meaning communication   is not encrypted. Like authentication, this should be set to <code>true</code> in a production   environment to secure the connection.</p> </li> <li> <p><code>-Djava.rmi.server.hostname=&lt;local ip&gt;\"</code>   This is a crucial option that tells the RMI server which IP address to announce   to clients. Clients will use this hostname to connect to the server. If this   is not explicitly set, the RMI server might use the server's internal hostname   or a loopback address (<code>127.0.0.1</code>), which would prevent external connections.   By setting it to <code>&lt;your local IP&gt;</code>, you ensure that the JMX port is bound to   the correct network interface for remote access.</p> </li> </ul> Note <pre><code>There isn't a single, universally \"standard\" port for JMX that is accepted\nacross all applications and vendors. The JMX specification itself does not\ndefine a default port, leaving it to the implementer to choose one.\n\nHowever, certain ports have become common or de facto standards within the Java\necosystem. The most frequently seen ports for JMX are in the high-number range,\ntypically:\n\n- 1099: This port is a historic default for the RMI Registry, which JMX often\n  uses for communication. While it's not strictly a JMX port, it's often\n  associated with older JMX configurations.\n\n- 8686: This port is a well-accepted and formally registered port for JMX with\n  the Internet Assigned Numbers Authority (IANA). The IANA service name for port\n  8686 is sun-as-jmxrmi. This makes it a great choice because it's officially\n  recognized and less likely to conflict with other common services.\n\nWhy Port 8686 is a Good Choice?\nPort 8686 is a User Port (1024-49151), which means it's available for registered\nservices but isn't a \"well known\" port that requires a special permission level\nto use. It's IANA registration as sun-as-jmxrmi makes it a safe and logical\nchoice for JMX monitoring, especially when you need to standardize port assignments\nacross a large infrastructure.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#setup-zabbix-to-monitor-jmx","title":"Setup Zabbix to monitor JMX","text":"<p>Now that we've set up a JMX-enabled application, we need to configure Zabbix to monitor it. Since Zabbix can't connect directly to JMX endpoints, we need an intermediary tool: the Zabbix Java Gateway.</p> <p>This gateway needs to be installed and configured on your Zabbix server or proxy, allowing a single gateway to service multiple JMX applications. The gateway operates in a passive mode, which means it polls data directly from your JMX application. The Zabbix server or proxy then polls the gateway to retrieve this data, completing the connection chain.</p> <p></p> <p>04.35 JMX Gateway</p> Install the JAVA Gateway <p>Red Hat <pre><code>dnf install zabbix-java-gateway\n</code></pre> Ubuntu <pre><code>apt install zabbix-java-gateway\n</code></pre></p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#configuring-zabbix-and-the-java-gateway","title":"Configuring Zabbix and the JAVA Gateway","text":"<p>After installing the gateway, you'll find its configuration file at <code>/etc/zabbix/zabbix_java_gateway.conf</code>. The default <code>LISTEN_IP</code> is set to 0.0.0.0, which means it listens on all network interfaces, though you can change this. The gateway listens on port 10052, a non IANA registered port, which can also be adjusted using the <code>LISTEN_PORT</code> option if needed.</p> <p>The first setting we'll change is <code>START_POLLERS</code>. We need to uncomment this line and set a value, for example, <code>START_POLLERS=5</code> to define the number of concurrent connections. The TIMEOUT option controls network operation timeouts, while <code>PROPERTIES_FILE</code> allows you to define or override additional key-value properties, such as a keystore password, without exposing them in a command line.</p> <p>For your Zabbix server, you'll need to update the configuration file at <code>/etc/zabbix/zabbix_server.conf</code>.</p> <p>You'll need to modify three key options:</p> <ul> <li> <p>JavaGateway: Uncomment this line and set its value to the IP address of   the host running your Java gateway. This will likely be your Zabbix   server itself, but it can be on a separate VM or proxy.</p> </li> <li> <p>JavaGatewayPort: This option should remain at the default <code>10052</code> unless   you've changed the port in your gateway's configuration.</p> </li> <li> <p>StartJavaPollers: Uncomment and set this option to define the number of   concurrent Java pollers the server will use. A good starting   point is to match the number you set on the gateway, for   example, 5.</p> </li> </ul> <p>After making the changes to <code>/etc/zabbix/zabbix_server.conf</code> and <code>/etc/zabbix/zabbix_java_gateway.conf</code>, you need to restart the following services:</p> <ul> <li>Zabbix Java Gateway</li> <li>Zabbix Server</li> </ul> <p>Restarting these two services applies the new configuration, allowing the server to communicate with the Java Gateway and begin polling for JMX data. Also don't forget to enable the <code>Zabbix Java Gateway</code> service.</p> Restart the services <p>RedHat and Ubuntu <pre><code>systemctl enable zabbix-java-gateway --now\nsystemclt restart zabbix-server\n</code></pre></p> <p>On the application side don't forget to open the firewall so that our <code>zabbix-java-gateway</code> can connect to our application.</p> <p>Allow JMX</p> <p>Red Hat <pre><code>firewall-cmd --add-port=8686/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 8686/tcp\n</code></pre></p> Warning <pre><code>Don't forget to place SeLinux in permissive mode before you start else the\nJAVA gateway will not work. You should fix SeLinux permissions once the setup\nis working.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#monitoring-jmx-items","title":"Monitoring JMX items","text":"<p>After having setup everything, we can now connect to our Java application's JMX port to verify everything is working.</p> <p>For this, we can use JConsole, a monitoring tool that comes with the Java Development Kit (JDK). Another great option is VisualVM, which offers a more visual and feature rich experience. You can download it from https://visualvm.github.io/download.html.</p> <p>Start your preferred application and connect to our JMX port on 8686.</p> <p></p> <p>04.36 Jconsole</p> <p>After a successful login you should be greeted with a screen like this. Were you have a tree view overview of all the Mbeans we can use to gather information from.</p> <p></p> <p>04.37 Login screen</p> <p>Before we can do this we need to create a new host in our Zabbix server. Let's go to <code>Data collection</code> - <code>Hosts</code> and click on <code>Create host</code> in the upper right corner. Use the following settings to create our host:</p> <ul> <li>Hostname : Tomcat</li> <li>Host groups: JMX</li> <li>Interfaces: JMX<ul> <li>IP address: IP of your Tomcat server</li> <li>Port : 8686 or the port you specified in your Tomcat configuration.</li> </ul> </li> </ul> <p>Press the <code>Add</code> button when ready.</p> Note <pre><code>It seems weird that we not specify the JavaGateway here but it's actually\nnormal. Zabbix knows from its configuration file where the gateway is. So we\nneed to specify the IP and the PORT of the JAVA application here that we would\nlike to monitor.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#create-our-first-item","title":"Create our first item","text":"<p>On our host Tomcat create a new item and add the following information.</p> <ul> <li>Name: requestCount</li> <li>Type: JMX Agent</li> <li>Key: jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\", \"requestCount\"]</li> <li>Type of information: Numeric(unsigned)</li> <li>Host interface: The JMX interface we just created on our host.</li> </ul> <p></p> <p>ch04.38 JMX item</p> Verifying and Saving the Item <pre><code>Before saving the configured item, use the Test button. Clicking Get value\nor Get value and test should populate the value field with data, confirming\nthat the item is functional. Once the test is successful, you can save the\nitem.\n</code></pre> <p>To understand how we constructed the item key, let's look at the process in JConsole.</p> <ol> <li> <p>Navigate to the MBeans tab and expand Catalina &gt; GlobalRequestProcessor &gt; http-nio-8080.</p> </li> <li> <p>The ObjectNAme field on the right displays the MBean's fully qualified name:    <code>Catalina:type=GlobalRequestProcessor,name=\"http-nio-8080\"</code>. This is the base    for our Zabbix item key.</p> </li> </ol> <p>The primary challenge with this specific key is that it contains double quotes (\") within the <code>name</code> attribute. Zabbix requires the entire JMX key to be enclosed in double quotes, which would conflict with the existing quotes. To resolve this, we must escape the inner double quotes with a backslash ().</p> <p>This results in the following structure for the Zabbix item key: <code>jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\"]</code>.</p> <p>This key is still incomplete. To specify the metric to be monitored, you must append an attribute name, such as maxTime, requestCount, or bytesReceived, at the end of the key, separated by a comma. <code>jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\",\"requestCount\"]</code></p> <p></p> <p>04.39 requestCount item</p> <p>The <code>java.lang.management.Memory</code> MBean provides a good example of how to handle CompositeData types in Zabbix. This MBean has an attribute called <code>HeapMemoryUsage</code>, which is not a simple value but rather an instance of <code>CompositeData</code>. This special JMX data type is used to represent complex structures.</p> <p>This means that attributes like <code>init</code>, <code>used</code>, <code>committed</code>, or <code>max</code> aren't accessed directly on the MBean itself. Instead, they are part of the <code>MemoryUsage</code> object that is returned when you query the <code>HeapMemoryUsage</code> attribute.</p> <p>To monitor a specific value from this composite object, you must specify the attribute name within the <code>CompositeData</code> structure. For example, to get the maximum heap memory usage, the Zabbix item key would be: <code>jmx[\"java.lang:type=Memory\",\"HeapMemoryUsage.max\"]</code>.</p> <p></p> <p>_04.40 HeapMemoryUsage</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#viewing-tabular-data","title":"Viewing Tabular Data","text":"<p>To view the detailed breakdown of the <code>HeapMemoryUsage</code> attribute, double click on its value in the attribute value column. This action displays the composite data in a tabular format, making it easier to see individual metrics like <code>init</code>, <code>used</code>, <code>committed</code>, and <code>max</code>.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#zabbix-jmx-item-keys","title":"Zabbix JMX Item Keys","text":"<p>Zabbix offers three primary item keys for JMX monitoring:</p> <ul> <li> <p>jmx[]: This is the standard key used for monitoring a specific JMX attribute.   It's the most common key for creating simple, direct checks.</p> </li> <li> <p>jmx.get[]: This key is used to retrieve a full object from an MBean. It is   often paired with Low Level Discovery (LLD) rules and preprocessing steps to   extract specific values from the returned data, allowing for more flexible data   collection.</p> </li> <li> <p>jmx.discovery[]: This key is specifically designed for use with Low Level   Discovery. It helps Zabbix automatically discover multiple JMX MBeans or attributes   on a monitored host, which is essential for scaling JMX monitoring across a large   number of components.</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#making-use-of-jmxget","title":"Making use of jmx.get[]","text":"<p>The <code>jmx.get[]</code> item key returns a JSON array containing a list of MBean objects or their attributes. Unlike <code>jmx.discovery[]</code>, it does not automatically define LLD macros. Instead, it is particularly useful when you need to retrieve a structured set of data and then process it using JSONPath in a dependent item or a low level discovery rule.</p> <p>While <code>jmx.get[]</code> is commonly used for Low Level Discovery (LLD), it is also highly effective for creating dependent items without using a full discovery rule. This allows you to collect multiple related metrics from a single request to the JMX agent, which is more efficient.</p> <p>For instance, the key <code>jmx.get[attributes,\"*:type=GarbageCollector,name=PS MarkSweep\"]</code> would return a comprehensive payload with all attributes of the specified garbage collector.</p> <pre><code>[\n  {\n    \"name\": \"CollectionCount\",\n    \"description\": \"java.lang:type=GarbageCollector,name=PS MarkSweep,CollectionCount\",\n    \"type\": \"java.lang.Long\",\n    \"value\": \"0\",\n    \"object\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\"\n  },\n  ...\n  ...\n  ...\n  ...\n  {\n    \"name\": \"ObjectName\",\n    \"description\": \"java.lang:type=GarbageCollector,name=PS MarkSweep,ObjectName\",\n    \"type\": \"javax.management.ObjectName\",\n    \"value\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\",\n    \"object\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\"\n  }\n]\n</code></pre> <p>This JSON output can then be used as the master item for multiple dependent items, each with a preprocessing step to extract a specific value (e.g., <code>CollectionCount</code> or <code>CollectionTime</code>) using a JSONPath expression. This technique is a powerful way to reduce the load on both the JMX agent and the Zabbix server by making a single call to collect multiple metrics.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#performance-considerations-for-jmx-monitoring","title":"Performance Considerations for JMX Monitoring","text":"<p>JMX monitoring is powerful but comes with higher overhead compared to traditional Zabbix agent checks. To ensure your monitoring remains efficient and doesn't impact either your Zabbix infrastructure or the monitored JVMs, keep the following points in mind.</p> <p>Zabbix communicates with the Java Gateway synchronously:</p> <ul> <li>The Zabbix server sends a request for a JMX item.</li> <li>The Java Gateway connects to the target JVM and retrieves the data.</li> <li>Only when the response comes back does the Zabbix server proceed with that item's   check. This means that if JMX queries are slow (due to network, JVM GC pauses, or overloaded gateways), your monitoring queue can back up.</li> </ul> <p>To optimize performance:</p> <ul> <li>The Java Gateway bundles multiple requests for the same host and processes them   in a single JVM connection.</li> <li>This reduces the overhead of repeatedly opening/closing JMX connections.</li> <li> <p>For example, if you monitor 20 JVM attributes on the same Tomcat, the gateway   will collect them in fewer, larger batches instead of 20 separate calls.</p> </li> <li> <p>Once a JMX connection to a JVM is established, the gateway keeps it alive and   reuses it for subsequent checks.</p> </li> <li>This avoids expensive RMI connection setup for   every metric.</li> <li>If the JVM restarts or the connection drops, the gateway will re-establish it automatically.</li> </ul> <p>Two important parameters in zabbix_server.conf and zabbix_java_gateway.conf directly affect JMX performance:</p> <ul> <li>StartJavaPollers (on Zabbix Server)<ul> <li>Defines how many parallel JMX pollers the server can use.</li> <li>Too few pollers \u2192 JMX checks queue up and fall behind.</li> <li>Too many pollers \u2192 high load on Java Gateway and JVMs.</li> </ul> </li> <li>StartPollers (general pollers)   Balance with Java pollers so your server can handle both JMX and regular agent   checks without bottlenecks.</li> <li> <p>Rule of thumb: start small (Ex: 5\u201310 Java pollers) and increase gradually while   monitoring load.</p> </li> <li> <p>Don't enable all MBeans just because you can.</p> </li> <li>Focus on actionable JVM metrics (heap, non-heap, GC, threads, JDBC pools) and   a few application-specific MBeans that map to real-world performance.</li> <li>Too many JMX items not only stress the JVM but also flood your Zabbix database   with unnecessary history data.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#monitoring-jmx-through-jolokia","title":"Monitoring JMX through Jolokia","text":"<p>While Zabbix can natively collect JMX data using the Zabbix Java Gateway, an alternative worth considering is Jolokia \u2014 a lightweight JMX-to-HTTP bridge.</p> <p>Jolokia exposes JMX MBeans over a simple REST/JSON interface, which means you can collect Java metrics using Zabbix's HTTP Agent items instead of the Java Gateway. The result is often lower overhead, easier network configuration, and greater flexibility.</p> <p>Why Jolokia?</p> <ul> <li>No Gateway Needed. Jolokia runs as a Java agent, servlet, or OSGi bundle directly   inside the JVM.</li> <li>Efficient Data Collection. You can request multiple attributes in a single HTTP   call and split them into dependent items using JSONPath preprocessing.</li> <li>Firewall-Friendly. Works over standard HTTP(S) ports, avoiding the complexity   of RMI and port ranges.</li> <li>Secure, it supports HTTPS, authentication, and access control policies out of   the box.</li> </ul> <p>Example:</p> <pre><code>curl -s http://localhost:8778/jolokia/read/java.lang:type=Memory,java.lang:type=Threading\n</code></pre> <p>In Zabbix:</p> <p>Create an HTTP Agent master item pointing to the Jolokia endpoint. Add dependent items to extract individual values, e.g.:</p> <pre><code>$.value['java.lang:type=Memory']['HeapMemoryUsage']['used']\n$.value['java.lang:type=Threading']['ThreadCount']\n</code></pre> <p>This approach allows you to collect dozens of metrics with a single network request.</p> When to use it ? <p>Choose Jolokia if you prefer a stateless, agent-based setup or need to monitor many JVMs without maintaining a central Java Gateway. Stick with the Zabbix Java Gateway if you rely on built-in templates or want a fully integrated, out of the box JMX experience.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#conclusion","title":"Conclusion","text":"<p>Zabbix handles JMX monitoring synchronously, but optimizes performance with request bundling and connection reuse. By tuning pollers, using reasonable update intervals, and selecting only the most valuable metrics, you can scale JMX monitoring without overloading your monitoring system or your Java applications.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#questions","title":"Questions","text":"<ul> <li>Explain how the Zabbix Java Gateway fits into the overall JMX architecture.   Why is it needed?</li> <li>In Zabbix, what is the difference between the item keys jmx[], jmx.get[] and   jmx.discovery[]? Give an example use case for each.</li> <li>Reflect: In your environment, what Java-applications would benefit most from   JMX monitoring? What metrics would you pick first, and why?</li> <li>What are security considerations when enabling remote JMX monitoring in production?   What could go wrong if you leave flags like authenticate=false and ssl=false in   a live environment?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.youtube.com/watch?v=aKGYa6Y9r60&amp;t=87s</li> <li>https://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/jmx_monitoring</li> <li>https://jolokia.org/</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/","title":"Preprocessing","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/script/","title":"Script item","text":"<p>Zabbix offers several item types for gathering data, but sometimes you need logic, multiple API calls, or data manipulation that's too complex for simple preprocessing. Script items fill that gap, they run JavaScript directly on the Zabbix Server or Proxy and can fetch, process, and return data exactly how you need it.</p> <p>In this chapter, we'll explore what script items can do through two working examples:</p> <ol> <li>Checking GitHub repository stars via public API</li> <li>Querying the public weather page Open-Meteo</li> </ol>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#understanding-script-items","title":"Understanding Script items","text":"<p>Script items execute JavaScript in the Zabbix backend using the built-in Duktape engine.</p> <p>They're ideal when you need:</p> <ul> <li>HTTP or API calls that return JSON/XML data</li> <li>Conditional logic or loops</li> <li>Chained API requests (login + data fetch)</li> <li>Monitoring without deploying an agent</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#common-javascript-objects","title":"Common JavaScript objects","text":"<p>Zabbix provides several JavaScript objects for script items:</p> Object Purpose <code>HttpRequest</code> Perform HTTP(S) requests <code>Zabbix.log(level, message)</code> Log messages (level 4=debug, 3=info, etc.) <code>JSON.parse()</code> / <code>JSON.stringify()</code> Handle JSON data <code>parameters.&lt;name&gt;</code> Access item parameters defined in the UI <p>Limits: up to 10 <code>HttpRequest</code> objects per run; typical timeout \u2264 30 seconds (depending on item settings).</p> <p>The complete list of objects can be found in the official Zabbix documentation: https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing/javascript/javascript_objects</p> <p>Let's create some example scripts so that you get a better understanding of how it works.</p> <p>Create a new host in <code>Data collection</code> -&gt; <code>Hosts</code>.</p> <ul> <li>Host name: javascript</li> <li>Host groups: JS Servers</li> </ul> <p>Actually name and group are not important at all in this case :) When done create an item on the host.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-1-query-a-public-api-github-repository-stars","title":"Example 1 \u2013 Query a public API (GitHub repository stars)","text":"<p>This item will return the current number of stars for a given GitHub repository using the REST API.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#item-setup","title":"Item setup","text":"Field Value Name Query Github Repository Type Script Key github.repo.stars Type of information Numeric (unsigned) Unit Stars Update interval 1h Timeout 5s Parameters owner = <code>zabbix</code> repo = <code>zabbix</code> token = <code>&lt;optional Github token&gt;</code> <p>Note: GitHub\u2019s API enforces rate limits for unauthenticated requests (\u224860/hour per IP). Add a personal access token for higher limits.</p> <p>Add the following code in the script box of the item.</p> <pre><code>// Parameters (item \u2192 Parameters):\n//   owner = zabbix\n//   repo  = zabbix\n//   token = &lt;optional PAT&gt;\n\n// Parse parameters from `value` (JSON string)\nvar p = {};\ntry {\n  p = JSON.parse(value);   // { owner, repo, token }\n} catch (e) {\n  throw \"Parameter JSON parse failed: \" + e;\n}\n\nvar owner = p.owner;\nvar repo  = p.repo;\nvar token = p.token || \"\";\n\nif (!owner || !repo) {\n  throw \"Missing 'owner' or 'repo' parameter\";\n}\n\nvar url = \"https://api.github.com/repos/\" + owner + \"/\" + repo;\n\nvar req = new HttpRequest();\nreq.addHeader(\"User-Agent: zabbix-script-item\"); // required by GitHub\nreq.addHeader(\"Accept: application/vnd.github+json\");\nif (token) {\n  req.addHeader(\"Authorization: Bearer \" + token);\n}\n\nvar body = req.get(url);\nvar code = req.getStatus();\nif (code !== 200) {\n  throw \"GitHub API HTTP \" + code + \" body=\" + body;\n}\n\nvar data = JSON.parse(body);\nif (typeof data.stargazers_count !== \"number\") {\n  throw \"Unexpected response: missing stargazers_count\";\n}\n\nreturn data.stargazers_count;\n</code></pre> <p></p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-trigger","title":"Example trigger","text":"<pre><code>last(/javascript/github.repo.stars)=0\n</code></pre> <p>In this case we get an alert if the script returns 0</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-2-public-weather","title":"Example 2 - Public weather","text":"<p>In this script we call Open-Meteo and ask for for information like temperature, windspeed, direction based on our longitude / latitude.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#item-setup_1","title":"Item setup","text":"Field Value Name Query Weather Open Meteo Type Script Key weather.openmeteo.json Type of information Text Update interval 1h Parameters latitude = <code>50.85</code>, longitude = <code>4.7</code> temperature_unit = <code>celsius</code> (celsius / fahrenheit) windspeed_unit = <code>kmh</code>   (kmh / ms / mph / kn) <p>Add the following code in the script box.</p> <p><pre><code>// Parameters (item \u2192 Parameters):\n//   latitude = 50.85\n//   temperaature_unit  = 4.7\n//   windspeed_unit = kmh / ms / mph / kn\n\nfunction toNumberFixLocale(s){ if(s==null)return NaN; var t=String(s).trim().replace(\",\",\".\"); return parseFloat(t); }\n\nvar p={}; try{ p=JSON.parse(value);}catch(e){ throw \"Param JSON parse failed: \"+e; }\n\nvar lat=toNumberFixLocale(p.latitude), lon=toNumberFixLocale(p.longitude);\nif(isNaN(lat)||isNaN(lon)) return JSON.stringify({ok:0,status:\"BAD_COORDS\",note:\"Use dots, e.g. 50.85 and 4.35\"});\nif(lat&lt;-90||lat&gt;90||lon&lt;-180||lon&gt;180) return JSON.stringify({ok:0,status:\"RANGE_ERROR\"});\n\nvar tUnit=(p.temperature_unit||\"celsius\").toLowerCase();\nvar wUnit=(p.windspeed_unit||\"kmh\").toLowerCase();\n\nvar url=\"https://api.open-meteo.com/v1/forecast?latitude=\"+encodeURIComponent(lat)+\"&amp;longitude=\"+encodeURIComponent(lon)+\"&amp;current_weather=true&amp;temperature_unit=\"+encodeURIComponent(tUnit)+\"&amp;windspeed_unit=\"+encodeURIComponent(wUnit)+\"&amp;timezone=auto\";\n\nvar req=new HttpRequest(); req.addHeader(\"User-Agent: zabbix-script-item\");\nvar body=req.get(url); var code=req.getStatus();\nif(code!==200) return JSON.stringify({ok:0,status:\"HTTP\",http:code,url:url,body:String(body).slice(0,180)});\n\nvar j; try{ j=JSON.parse(body);}catch(e){ return JSON.stringify({ok:0,status:\"BAD_JSON\"}); }\nvar cw=j.current_weather||j.current||null;\nif(!cw||typeof cw.temperature!==\"number\"||typeof cw.windspeed!==\"number\") return JSON.stringify({ok:0,status:\"NO_CURRENT\"});\n\nreturn JSON.stringify({ok:1,status:\"OK\",temperature:cw.temperature,windspeed:cw.windspeed,winddirection:cw.winddirection,is_day:cw.is_day,time:cw.time||\"\"});\n</code></pre> </p> <p>Next create a few dependent items that use this script as master item.</p> Field Value Name: Temperature Key: weather.temp Type of information: Float Preprocessing JSONPath: -&gt; $.temperature Field Value Name: Windspeed Key: weather.windspeed Type of information: Float Preprocessing JSONPath: -&gt; $.windspeed Field Value Name: Wind direction Key: weather.winddir Type of information: Unsigned Preprocessing JSONPath: -&gt; $.winddirection Field Value Name: Is day Key: weather.is_day Type of information: Unsigned Preprocessing JSONPath: -&gt; $.is_day <p></p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#best-practices-and-troubleshooting","title":"Best practices and troubleshooting","text":"<ul> <li>Timeouts: Keep script execution short; APIs may delay.</li> <li>Testing: Use \u201cCheck now\u201d in the item to see raw output.</li> <li>Logging: Use <code>Zabbix.log(3, \"message\")</code> for debug output (appears in server   or proxy log).</li> <li>Error handling: Always <code>throw</code> errors instead of returning strings; Zabbix   will mark the item as unsupported automatically.</li> <li>Object reuse: Each script can create up to 10 <code>HttpRequest</code> objects reuse   one when chaining API calls.</li> <li>Security: Never hard-code passwords or tokens; use macros or item parameters.</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#when-to-use-script-items","title":"When to use Script items","text":"<p>Use Script items when:</p> <ul> <li>You need logic, loops, or multiple API calls.</li> <li>You monitor remote services where agents aren't available.</li> <li>You want to prototype an integration before writing a custom plugin.</li> </ul> <p>For simple JSON transformations, preprocessing JavaScript might be enough, but Script items shine when you need full control.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#expert-techniques-for-script-items","title":"Expert techniques for Script items","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#1-debugging-things","title":"1. Debugging things","text":"<p>During development, use the internal logging API to trace script behavior:</p> <pre><code>Zabbix.log(4, \"Debug: response body = \" + body);\nZabbix.log(3, \"Info: token received successfully\");\nZabbix.log(2, \"Warning: unexpected API reply\");\n</code></pre> Tip <ul> <li>Log level <code>4</code> = debug, visible only if the server log level \u22654.</li> <li>Log level <code>3</code> = informational.</li> <li>The log lines are written to the Zabbix server or proxy log, not the frontend.</li> </ul> <p>When a script throws an error, Zabbix automatically marks the item as unsupported.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#2-using-macros-and-secret-parameters","title":"2. Using macros and secret parameters","text":"<p>Always move credentials, tokens, and sensitive values to item parameters or macros rather than hard coding them.</p> <p>For example:</p> Parameter Value <code>token</code> <code>{$GITHUB_TOKEN}</code> <p>Then define <code>{$GITHUB_TOKEN}</code> in your host or template with secret visibility. This allows you to reuse the same script safely across environments.</p> Tip <p>Manage secrets via template macros so that they are portable if you export the template. Store secrets in a vault instead of the DB.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#3-error-handling-and-fallback-logic","title":"3. Error handling and fallback logic","text":"<p>Production scripts should degrade gracefully. You can catch and handle network failures, retry, or return a fallback value:</p> <pre><code>var req = new HttpRequest();\ntry {\n  var data = req.get(parameters.url);\n  if (req.getStatus() !== 200)\n    throw \"HTTP \" + req.getStatus();\n  return JSON.parse(data).value;\n}\ncatch (e) {\n  Zabbix.log(2, \"Request failed: \" + e);\n  return 0;  // Fallback value for triggers\n}\n</code></pre> <p>This script catches any errors (network failure, bad JSON, missing .value, etc.): Logs the error at severity level 2 (Warning) into the Zabbix server log. It returns a numeric 0 instead of throwing errors, so the item remains supported.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#4-caching-between-executions","title":"4. Caching between executions","text":"<p>Script items don't keep memory between runs, but you can reuse data efficiently by combining one master Script or trapper item that stores the full JSON response with several dependent items that extract individual fields. This isn't true caching inside JavaScript. It's data reuse via Zabbix history, avoiding repeated API calls.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#5-parallelization-and-performance-considerations","title":"5. Parallelization and performance considerations","text":"<p>Each Script item consumes one poller slot. If you have dozens of Script items that do API calls, consider:</p> <ul> <li>Running them on a proxy close to the data source (reduces latency).</li> <li>Adjusting <code>StartPollers</code> and <code>Timeout</code> in <code>zabbix_server.conf</code>.</li> <li>Avoiding heavy JSON parsing or unnecessary loops.</li> <li>Using asynchronous APIs only when truly needed. Duktape executes synchronously.</li> </ul> <p>A single bad Script item can block a poller for its entire timeout period, so always test and tune.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#6-returning-structured-data","title":"6. Returning structured data","text":"<p>Script items can return JSON strings which can then be used in dependent items. Example: returning a JSON object containing multiple metrics.</p> <pre><code>return JSON.stringify({\n  cpu_usage: 25,\n  mem_usage: 67,\n  disk_free: 18234\n});\n</code></pre> <p>Then create dependent items with JSONPath like:</p> <pre><code>$.cpu_usage\n$.mem_usage\n$.disk_free\n</code></pre> <p>This allows one Script item to feed many dependent metrics. A professional optimization pattern.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#7-combining-script-items-with-preprocessing-javascript","title":"7. Combining script items with preprocessing JavaScript","text":"<p>Advanced users often pair a Script item that performs heavy retrieval with preprocessing JavaScript that performs lightweight normalization.</p> <p>Example:</p> <ul> <li>Script item fetches a full JSON payload from an API.</li> <li>Dependent item extracts a numeric value using preprocessing JavaScript:</li> </ul> <pre><code>var obj = JSON.parse(value);\nreturn obj.metrics.cpu;\n</code></pre> <p>This separates responsibilities and makes troubleshooting easier.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#8-controlling-execution-context","title":"8. Controlling execution context","text":"<p>Script items always run on the poller process of either the Zabbix server or proxy. Understanding this helps when debugging:</p> <ul> <li>If an item runs on a proxy, it has network access only from the proxy\u2019s location.</li> <li>You can force execution on a proxy by assigning the host to that proxy.</li> <li>Logs for script execution appear in the respective poller\u2019s log file.</li> </ul> Info <p>There is a small exception when it comes to the use of the poller process. If you make use of the test button to test the item then the check will not user the poller but the task manager process.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#9-best-practice-checklist","title":"9. Best practice checklist","text":"<ul> <li>\u2705 Keep scripts short (&lt;200 lines).</li> <li>\u2705 Always handle HTTP status codes and JSON errors.</li> <li>\u2705 Use parameters or macros for configuration.</li> <li>\u2705 Log at <code>Zabbix.log(3, ...)</code> for operations and <code>Zabbix.log(4, ...)</code> for debugging.</li> <li>\u2705 Reuse a single <code>HttpRequest</code> object per script.</li> <li>\u2705 Test interactively in the frontend with \u201cCheck now\u201d.</li> <li>\u2705 Document the purpose and return type at the top of each script.</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#12-summary","title":"12. Summary","text":"<p>By mastering Script items, you've reached the expert level of Zabbix data collection. You now understand not just how to fetch and return data, but how to:</p> <ul> <li>Debug effectively</li> <li>Secure your credentials</li> <li>Handle API errors gracefully</li> <li>Optimize poller usage</li> <li>Reuse scripts for multiple metrics</li> </ul> <p>These skills let you integrate Zabbix with virtually any system.</p> Note <p>When a Script item is executed, Zabbix starts a Duktape JavaScript interpreter inside the server or proxy process. For each check run, Zabbix injects a few built-in variables into the script\u2019s environment the most important one is <code>value</code>.</p> <p><code>value</code> is a JSON string that contains all item parameters you defined under Parameters \u2192 Name / Value.</p> <p>Inside the script, you must parse it first:</p> <p><code>var p = JSON.parse(value);</code></p> <p>You can then access the parameters by name:</p> <p><code>var host = p.host;</code> <code>var port = p.port;</code></p> <p>If you try to reference a <code>parameters</code> object (as seen in some very old examples), you will get : <code>ReferenceError: identifier 'parameters' undefined</code> because the Duktape runtime does not inject such a variable anymore. All parameters are passed inside the value JSON string.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#conclusion","title":"Conclusion","text":"<p>Script items make Zabbix remarkably flexible \u2014 they let you collect data from any API or service with just a few lines of JavaScript. While the built-in Duktape engine is synchronous and minimal, meaning no true parallelism or advanced JS features, it\u2019s more than enough for lightweight automation and integrations.</p> <p>The key to using Script items effectively is efficiency: fetch once, reuse results through dependent items, and keep scripts small and predictable. When heavier or high-frequency polling is needed, move it closer to the data source with proxies or external collectors.</p> <p>With those principles in mind, Script items become your gateway between Zabbix and the modern API world \u2014 simple, powerful, and entirely scriptable.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#questions","title":"Questions","text":"<ul> <li>What makes Script items different from external checks or user parameters in Zabbix?</li> <li>How are Script item parameters passed to the JavaScript environment in modern   Zabbix versions?</li> <li>Why does using JSON.parse(value) make your scripts more portable?</li> <li>How can you avoid making multiple API calls when several metrics come from the   same endpoint?</li> <li>Why are global macros usually not a good choice for secrets in exported templates?</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing/javascript/javascript_objects</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/script</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/simple-checks/","title":"Simple checks","text":"<p>What would a Zabbix book be without setting up the actual monitoring itself, because in  the end a monitoring system is all about collecting data through various different protocols. </p> <p>Simple checks are one (or actually several) of such protocols. Zabbix has a bunch of built-in  checks we can do, executed from the Zabbix server or proxy towards our monitoring targets. The simple  checks contain protocol checks such as <code>ICMP Ping</code>, <code>TCP/UDP</code> but also built in <code>VMware</code> monitoring.</p> <p>Without further ado, let's set up our first items. Please keep in mind that we will be building everything on a host level for now. Check out Chapter 06 to learn how to do this properly on a template.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#building-the-item","title":"Building the item","text":"<p>We shall start with a simple ICMP Ping check. If you haven't already, at <code>Data collection</code> | <code>Hosts</code> let's create the host <code>simple-checks</code> in the host group <code>Servers/Linux</code>. Then, for this new host navigate to <code>Items</code>. You should see a <code>Create item</code> button in the top right corner. Click on this button and lets have a look at the item creation modal popup window:</p> <p></p> <p>4.5 Empty Item creation window</p> <p>Make sure to change the <code>Type</code> to <code>Simple check</code> to get a similar result. We can see there are only two fields (that aren't selectors) mandatory. These, we have to fill in to make our item work.</p> <ul> <li>Name </li> <li>Key</li> </ul>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#item-name","title":"Item Name","text":"<p>The <code>Item name</code> in Zabbix is a very important field for all of our items. This is going to be the first thing you see when looking for you configuration, but also the main identifier when you'll search the visualisation pages (like <code>Latest data</code>) for this item. </p> <p>Item names do not have to be unique (although it is recommended), as it will be the <code>Item key</code> that will make sure this item is distinguishable as a unique entity. So what is the best practise here? </p> <ul> <li>Item names should be short and descriptive</li> <li>Item names should contain prefixes where useful</li> <li>Item names should contain suffixes where useful</li> </ul> <p>Some examples of good item names: - Use <code>Memory utilization</code> not <code>The memory util of this host</code>. Keep it short and descriptive - Use <code>CPU load</code> or if you have multiple use a suffix <code>CPU load 1m</code> and <code>CPU load 5m</code> for example - Use prefixes like <code>Interface eth0: Bits incoming</code> and <code>Interface eth1: Bits incoming</code> for similar items on different entities</p> <p>Using those techniques, we can create items that are easy to find and most importantly that your Zabbix users will want to read. After all, you can count on IT engineers to not read well, especially in a troubleshooting while everything is down scenario. Keeping things simple will also make sure your monitoring system will be a pleasure to be used or at least people won't avoid using your monitoring.</p> <p>My final and favourite tip is: Remember: Zabbix uses alphabetical sorting in a lot of places. Why is this important, well let's look at the <code>Monitoring</code> | <code>Latest data</code> page with a host using a  default template:</p> <p> 4.6 Latest data Memory and CPU items sorting</p> <p>If this template had used CPU and Memory as a prefix for all respective items. Then this page would have nicely sorted them together. While right now, there are CPU items right between the memory related items. It creates a bit of a mess, making Zabbix harder to read. </p> <p>If you want to spend (waste?) 30 minutes of your time hearing all about sorting data in various different places in Zabbix. The following video is highly recommended: https://www.youtube.com/watch?v=5etxbNPrygU</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#item-key","title":"Item Key","text":"<p>Next up is the item key, an important part of setting up your Zabbix item as it will serve as the uniqueness criteria for the creation of this entity. There are two types of item keys:</p> <ul> <li>Built in</li> <li>User defined</li> </ul> <p>The built in item keys is what we will use to create our simple check in a while. The user defined item key is what we will use on items types like <code>SNMP</code> and <code>Script</code>. The main difference is that built in item keys are defined by Zabbix and attach to a specific monitoring function. The user defined item keys are just there to serve as the uniqueness criteria, while a different field in the item form will determine the monitoring function.</p> <p>Item keys can also be of a <code>Flexible</code> or <code>Non-flexible</code> kind. Flexible meaning the item key accepts parameters. These parameters change the function of the built-in item keys and also count as part of the uniqueness of the item keys. For example:</p> <ul> <li>agent.version a <code>Zabbix agent</code> item key doesn't accept parameters and only serves one purpose. To get the version of the Zabbix agent installed.</li> <li>net.tcp.service[service,,] a <code>Simple check</code> item key that accepts 3 parameters, each parameter divided by a comma(<code>,</code>). Optional parameters are marked by the <code>&lt;&gt;</code> signs, whereas mandatory parameters have no pre/suffix.","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#icmp-ping","title":"ICMP Ping","text":"<p>With all of this in mind, let's finish the creation our ICMP Ping item. First, we will give our new item a name. Since this is a simple ICMP Ping to the host lets go for:</p> <ul> <li>Name = <code>ICMP Ping</code></li> </ul> <p>For the key, we will have to use the built-in key <code>icmpping[&lt;target&gt;,&lt;packets&gt;,&lt;interval&gt;,&lt;size&gt;,&lt;timeout&gt;,&lt;options&gt;]</code>. This key accepts 6 parameters, all of which are optional. However, when we do not select an interface on an <code>icmpping</code> item, we need to fill in at least <code>icmpping[&lt;target&gt;]</code> for it to work. Normally <code>icmpping</code> can use the interface IP or DNS, but since we will discuss the <code>Host interfaces</code> later in this chapter, let's use the parameter instead.</p> <ul> <li>Key = <code>icmpping[127.0.0.1]</code></li> </ul> <p>The item will now look like this:</p> <p> 4.7 ICMP Ping item</p> <p>It's also best practise to add a tag with the name <code>component</code> to every item we create. Let's switch to the <code>Tags</code> tab on the item creation window, and create the tag <code>component:system</code>.</p> <p> 4.8 ICMP Ping item tags</p> <p>Zabbix utilises the fping utility, installed on the Zabbix server and/or proxy, to execute ICMP Ping checks. By default, Zabbix adds a repository containing the tool and installs the dependency. If you have a slightly different setup, make sure this utility is installed on your system and that the following two parameters are configured in the Zabbix server/proxy configuration file:</p> <p>!!! Define Fping paths\"</p> <pre><code>```\nFpingLocation=/usr/sbin/fping\n\nFping6Location=/usr/sbin/fping6\n```\n</code></pre>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#tcpudp-ports","title":"TCP/UDP Ports","text":"<p>Another useful simple check you can create is the TCP (and UDP) port check. With these 4 item keys  we can monitor the availability and performance of TCP and UDP ports. There are 4 built-in keys available for these checks:</p> <ul> <li>net.tcp.service[service,,] <li>net.tcp.service.perf[service,,] <li>net.udp.service[service,,] <li>net.udp.service.perf[service,,] <p>Granted, the <code>net.udp.service</code> item keys only monitor the availability and performance of the NTP protocol due to the \"take it our leave it\" nature of UDP. But, the <code>net.tcp.service</code> item keys are useful for monitoring every single TCP port available.</p> <p>We fill in the <code>service</code> parameter with <code>tcp</code> and the we use <code>ip</code> (or a host interface) and <code>port</code> to define which TCP port to check. Zabbix will connect to the port and tell us the up/down status or the connection speed if we use <code>net.tcp.service.perf</code>. If we fill in the <code>service</code> parameter with <code>ssh, ldap, smtp, ftp, pop, nntp, imap, tcp, https, telnet</code> it will use the correct (default) port automatically, as well as do an additional check to make sure the port is actually being used by that service.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#conclusion","title":"Conclusion","text":"<p>The simple checks are mainly used for ICMP ping and Port checks, which means they are quite useful for almost every host. It's always a good idea to do some basic network availability checks on your hosts.</p> <p>Keep in mind that Zabbix will apply alphabetical sorting in many places when you create things like items. Keeping things structured in your environment means that you and your colleagues will have an easier time using your monitoring and observability platform.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#useful-urls","title":"Useful URLs","text":"<p>https://www.youtube.com/watch?v=5etxbNPrygU</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/","title":"SNMP Polling","text":"<p>In the previous chapter, we explored monitoring strategies that relied on both active and passive Zabbix agents. This chapter introduces an alternative approach monitoring via SNMP (Simple Network Management Protocol) which does not require the installation of a Zabbix agent on the monitored device. This method is especially useful in environments where agent based monitoring is impractical, restricted or simply not allowed.</p> <p>Simple Network Management Protocol (SNMP) is a widely adopted protocol designed for monitoring and managing devices on IP networks. Despite the word \"management\" in its name, SNMP is predominantly employed for monitoring purposes. Its widespread support across networking hardware and embedded systems has made it a cornerstone of modern network visibility solutions.</p> <p>Originally developed in the late 1980s, SNMP has undergone several revisions. Early versions, such as SNMPv1 and SNMPv2c, were hampered by significant security limitations. As a result, while SNMP includes functionality for remote device configuration, its use has remained largely to status monitoring rather than active management of devices.</p> <p>SNMP is especially valuable for monitoring resource constrained or embedded devices that lack the capacity to run a full monitoring agent.</p> <p>Common examples include:</p> <ul> <li>Printers</li> <li>Network switches, routers, and firewalls</li> <li>Uninterruptible Power Supplies (UPSs)</li> <li>NAS (Network-Attached Storage) appliances</li> <li>Environmental sensors (e.g., temperature, humidity sensors)</li> </ul> <p>These devices often provide built-in SNMP support, making them accessible for monitoring with minimal configuration. Additionally, SNMP can be employed on standard servers where installing or maintaining a Zabbix agent is either impractical or not permitted. This could be due to administrative policies, software compatibility or security concerns, or simply a desire to reduce system footprint.</p> <p>Recognizing the ubiquity of SNMP, Zabbix provides native SNMP support. This capability is powered by the open-source Net-SNMP suite, available at http://net-snmp.sourceforge.net. The integration allows Zabbix to retrieve metrics from SNMP-enabled devices using industry standard mechanisms.</p> <p>In this chapter, we will cover the following:</p> <ul> <li>An introduction to the Net-SNMP toolkit and its core utilities.</li> <li>How to integrate MIB (Management Information Base) files into Zabbix, enabling   the platform to interpret SNMP data correctly.</li> <li>The process of SNMP polling within Zabbix, including how to define SNMP-based   items and retrieve data from devices.</li> </ul> <p>This chapter serves as the foundation for SNMP-based monitoring in Zabbix. While we begin with the essentials such as polling, MIB usage, and SNMP item configuration this is just the start.</p> <p>Later in this book, we will build upon this knowledge by exploring Low-Level Discovery (LLD) mechanisms using SNMP. LLD allows Zabbix to automatically detect and create monitoring items for dynamic or repetitive structures, such as network interfaces, power supplies, ...</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-a-mib","title":"What is a MIB?","text":"<p>Imagine you have a house full of smart devices: a smart thermostat, a smart lamp, and a smart doorbell. All these devices keep track of various types of information. The thermostat has the indoor temperature and battery status, the lamp has its brightness and color, and the doorbell has a log of who has been at the door.</p> <p>A MIB (Management Information Base) is the \"table of contents\" or \"catalog\" of all this information on a network device. Every SNMP enabled device has its own MIB, which is structured and organized. Without a MIB, your Zabbix server wouldn't know what data is available to monitor. The MIB specifies exactly which metrics the device can share.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-an-oid","title":"What is an OID?","text":"<p>To retrieve a specific piece of information from that catalog, you need an address. An OID (Object Identifier) is that address.</p> <p>You can think of an OID as a GPS coordinate or a book's unique ISBN number. It's a hierarchical sequence of numbers (for example, 1.3.6.1.2.1.1.3.0) that leads you to one specific piece of information, such as a device's uptime or the number of network errors on a particular port.</p> <p>The OID is the exact path to the data within the MIB. Zabbix uses these OIDs to know what to request from the device. You configure Zabbix to say: \"Request the value of this specific OID,\" and the device returns the requested value.</p> <p>In short:</p> <ul> <li>The MIB is the library catalog that describes the structure of all available   data.</li> <li>The OID is the specific address that leads you to the book (the data) you're   looking for.</li> </ul> <p>When Zabbix wants to monitor a device via SNMP, it uses an OID to send an SNMP request. The agent on the device searches its MIB for the data corresponding to that OID and sends the value back to Zabbix. This is the foundation of SNMP based monitoring.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-the-oid-tree-structure","title":"What Is the OID Tree Structure?","text":"<p>The OID (Object Identifier) structure is a hierarchical tree, much like a family tree or a computer's folder structure. This tree is standardized globally. Each point on the tree, from the root to the \"leaves,\" is represented by a number.</p> <p>The tree starts at the root, with a few main branches managed by international organizations. The most common branch for network management and SNMP often begins with <code>1.3.6.1</code>. Let's break down this OID to see how the structure works:</p> <ul> <li>1: This branch is managed by ISO (International Organization for Standardization).</li> <li>1.3: This branch is for <code>identified-organization</code>.</li> <li>1.3.6: This is the branch for the U.S. Department of Defense (DoD).</li> <li>1.3.6.1: This is the internet branch, managed by the IETF (Internet   Engineering Task Force).</li> <li>... and so on.</li> </ul> <p>Every branch in this tree is responsible for managing the numbers below it. Companies like Cisco or projects like Net-SNMP get their own unique number under a specific branch, most commonly under <code>1.3.6.1.4.1</code>, which is reserved for private enterprises.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#how-to-use-the-oid-tree","title":"How to Use the OID Tree","text":"<p>For Zabbix, the OID tree is essential for understanding what data is available on a device. Instead of remembering long, unreadable strings of numbers, MIB (Management Information Base) files use text labels to translate the numbers into human-readable names.</p> <p>Example:</p> <ul> <li>The OID for a device's system description is: <code>1.3.6.1.2.1.1.1.0</code>.</li> <li>An MIB file translates this to: <code>sysDescr.0</code>.</li> </ul> <p>You can use the OID tree to:</p> <ol> <li>Look up data manually: You can browse MIB files or online OID databases to    find the exact OID for the metric you want to monitor.</li> <li>Use SNMP commands: With commands like <code>snmpwalk</code>, <code>snmpget</code>, or <code>snmpstatus</code>,    you can use the numeric OIDs or the readable names (if MIBs are loaded) to    request data from a device.</li> <li>Configure LLD (Low-Level Discovery): Zabbix uses OID sub-trees to automatically    create monitoring items for dynamic components, such as network interfaces or    disk partitions.</li> </ol>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#net-snmp","title":"Net-SNMP","text":"<p>The Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring and managing networked devices. It operates primarily over UDP port 161, though in certain cases, SNMP agents or proxies may also support TCP port 161 for enhanced reliability or integration with specific tools. SNMP allows administrators to query information or trigger actions on remote devices using structured data identified by Object Identifiers (OIDs).</p> <p>To begin working with SNMP in a lab or testing environment, you may choose between two approaches:</p> <ul> <li>Use an existing SNMP capable device already present in your network infrastructure.</li> <li>Deploy a lightweight SNMP agent on a general-purpose server, such as your Zabbix   server or a dedicated virtual machine.</li> </ul> <p>In this chapter, we will walk through the installation and configuration of a basic SNMP agent on a Rocky or Ubuntu based Zabbix server. However, the same setup can be applied to any compatible Linux system.</p> <p>Note: If you're using a device already present on your network, ensure:</p> <ul> <li>You have network access to the device (verify routing and firewall settings).</li> <li>SNMP access is allowed from your Zabbix server\u2019s IP address.</li> <li>The correct community string is configured, and your IP is included in the SNMP   access control rules of the device.</li> </ul> <p>Dataflow between Zabbix and the SNMP device.</p> <pre><code>graph TD\n    A[Zabbix Server] --&gt;|SNMP Request on port 161/UDP| B(Router, Switch, Printer, ...);\n    B --&gt;|SNMP Agent| C{\"Management Information Base (MIB)\"};\n    C --&gt;|Read data via OID's| B;\n    B --&gt;|SNMP Response| A\n</code></pre> <p>4.28 Overview</p> <p>Before we start lets go over a few tools that we will use and explain what they exactly do.</p> <ul> <li>snmpget: Retrieves the value of a single, specific OID.</li> <li>snmpwalk: Walks an entire OID subtree and displays all of its values.</li> <li>snmpstatus: Provides a summary of a device's basic status.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#testing-an-snmp-device-where-to-start","title":"Testing an SNMP Device: Where to Start?","text":"<p>When you're looking to test an SNMP device, it's crucial to understand the available SNMP versions and which ones you should prioritize. Currently, there are three commonly used versions: SNMPv1, SNMPv2c, and SNMPv3.</p> <ul> <li>SNMPv1: This is the oldest version and should generally be avoided unless   absolutely necessary. It's quite limited in functionality and has serious security   vulnerabilities.</li> <li>SNMPv2c: Still the most prevalent version today, SNMPv2c offers improvements   over v1, especially in data retrieval and performance. It's relatively straightforward   to configure and use.</li> <li>SNMPv3: This version is rapidly gaining popularity and is considered the most   secure and advanced option. It provides encryption, authentication, and user   management, which are essential for secure networks.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#your-first-test-attempt-snmpv2c-and-the-public-community-string","title":"Your First Test Attempt: SNMPv2c and the 'public' Community String","text":"<p>To begin your testing, we recommend trying to connect to your device using SNMPv2c and the standard community string 'public'. Many devices ship with these default settings, though it's certainly insecure for production environments.</p> <p>You can use the <code>snmpstatus</code> command for this. Here\u2019s an example of how you might do this in your terminal:</p> <pre><code>   snmpstatus -v 2c -c public [IP-address_of_the_device]\n</code></pre> <p>Replace <code>[IP-address_of_the_device]</code> with the actual IP address or hostname of the device you wish to test.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-if-you-get-no-information-back","title":"What if You Get No Information Back?","text":"<p>If you don't receive any information after this attempt, don't panic. It simply means the default settings likely don't apply to your device, or there might be a network related issue. You'll need to dig deeper into your device's configuration or troubleshoot your network.</p> <p>First, check the device's configuration:</p> <ol> <li>SNMP Version: Which SNMP version (v1, v2c, or v3) is configured and enabled?</li> <li>Community String (for v1/v2c): If your device uses SNMPv1 or SNMPv2c, what    is the configured community string (similar to a password) for read-only and    potentially read- write access? It's rarely 'public' in a properly configured    environment.</li> <li>Username, Authentication, and Privacy (for v3): If your device uses SNMPv3,    you'll need more specific information:</li> <li>Username: What username has been created for SNMPv3?</li> <li>Authentication Protocol and Password: Which authentication protocol (e.g.,      MD5, SHA) is used, and what is its corresponding password?</li> <li>Privacy Protocol and Password: Which encryption protocol (e.g., DES, AES)      is used, and what is its corresponding password?</li> </ol> <p>Next, consider potential network issues:</p> <p>Even if your device is correctly configured, network obstacles can prevent SNMP communication. Check for:</p> <ul> <li>Firewall Blocking: A firewall (either on your testing machine, the network,   or the SNMP device itself) might be blocking the UDP port 161, which SNMP typically   uses. Ensure the necessary ports are open.</li> <li>ACL Settings on the Device: The SNMP device itself might have Access Control   List (ACL) settings configured to restrict access only to specific IP addresses.   Verify that your testing machine's IP address is permitted.</li> <li>Network Connectivity: Basic network issues like incorrect IP addresses, subnet   masks, or routing problems can also prevent communication. Ensure there's a clear   network path between your testing machine and the SNMP device.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#snmpv3-security-levels","title":"SNMPv3 Security Levels","text":"<p>SNMPv3 offers significant security enhancements over older, unsecured versions (SNMPv1 and SNMPv2c). The protocol has three security levels:</p> <ul> <li> <p>noAuthNoPriv (Authentication and encryption off): This is the least secure   level. There's no authentication and no encryption. It's similar to SNMPv1   and SNMPv2c and offers no protection. It should only be used in strictly   controlled lab environments where security is not a concern.</p> </li> <li> <p>authNoPriv (Authentication on, encryption off): This level authenticates   the user, which guarantees data integrity. It verifies that messages come from   a trusted source and haven't been tampered with. However, the data isn't   encrypted, so it remains readable if the traffic is intercepted. This level   is suitable for non-sensitive data in a relatively secure network. Authentication   protocols used here are typically MD5 or SHA.</p> </li> <li> <p>authPriv (Authentication and encryption on): This is the most secure and   recommended level. It provides both authentication and data encryption.   Authentication ensures the integrity and origin of the message, while encryption   makes the data unreadable to third parties. This is essential for monitoring   sensitive information or when communicating over unsecured networks. Encryption   protocols used include DES, 3DES, and AES.</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#examples-of-snmpv3-commands","title":"Examples of SNMPv3 Commands","text":"<p>Once you have the necessary information (and have ruled out network issues), you can try connecting with SNMPv3. Here are some examples of how you might use <code>snmpstatus</code> with SNMPv3 (depending on your configuration):</p> <ul> <li>Authentication only (no encryption):</li> </ul> <pre><code>   snmpstatus -v 3 -l authNoPriv -u [username] -a [authentication_protocol] -A [authentication_password]\n   [IP-address_of_the_device]\n</code></pre> <p>(Replace <code>[authentication_protocol]</code> with <code>MD5</code> or <code>SHA</code>)</p> <ul> <li>Authentication and Encryption:</li> </ul> <pre><code>   snmpstatus -v 3 -l authPriv -u [username] -a [authentication_protocol] -A [authentication_password]\n   -x [privacy_protocol] -X [privacy_wachtwoord] [IP-address_of_the_device]\n</code></pre> <p>(Replace <code>[authentication_protocol]</code> with <code>MD5</code> or <code>SHA</code> and <code>[privacy_protocol]</code>   with <code>DES</code> or <code>AES</code>)</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#a-note-on-snmpv1-avoid-if-possible","title":"A Note on SNMPv1: Avoid if Possible","text":"<p>While you can technically test with SNMPv1, we strongly advise against using it in production. SNMPv1 is an outdated and insecure protocol version vulnerable to various attacks. Always try to connect with v2c or v3 first. Only if you are absolutely certain that the device exclusively supports SNMPv1 and you have no other option, you can try using it:</p> <pre><code>    snmpstatus -v 1 -c [community_string] [IP-address_of_the_device]\n</code></pre> <p>However, remember that using SNMPv1 in a production environment poses a significant security risk.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#understanding-the-output-of-snmpstatus","title":"Understanding the Output of snmpstatus","text":"<p>Let's take a look at an example output from the <code>snmpstatus</code> command. Remember this is just an example output it will differ from your result.</p> <pre><code>    snmpstatus -v2c -c public 127.0.0.1\n    [UDP: [127.0.0.1]:161-&gt;[0.0.0.0]:33310]=&gt;[Linux localhost.localdomain 5.14.0-570.28.1.el9_6.aarch64\n    #1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64] Up: 1:24:36.58\n    Interfaces: 2, Recv/Trans packets: 355763/355129 | IP: 37414/35988\n</code></pre> <p>This output provides a concise summary of the device's status, indicating a successful SNMP query. Let's break down what each part means:</p> <ol> <li> <p><code>snmpstatus -v2c -c public 127.0.0.1</code>:</p> <ul> <li><code>-v2c</code>: Specifies that SNMP version 2c was used.</li> <li><code>-c public</code>: Indicates that the community string \"public\" was used for authentication.</li> <li><code>127.0.0.1</code>: This is the target IP address, in this case, the localhost (the   machine on which the command was run).</li> </ul> </li> <li> <p><code>[UDP: [127.0.0.1]:161-&gt;[0.0.0.0]:33310]</code>:</p> <ul> <li>This section describes the communication path.</li> <li><code>UDP</code>: Confirms that the User Datagram Protocol was used, which is standard   for SNMP.</li> <li><code>[127.0.0.1]:161</code>: This is the source of the SNMP request and the standard   SNMP port (161) on which the SNMP agent listens.</li> <li><code>-&gt;[0.0.0.0]:33310</code>: This indicates the destination of the response. <code>0.0.0.0</code>   is a placeholder for \"any address,\" and <code>33310</code> is a high-numbered ephemeral   port used by the client to receive the response.</li> </ul> </li> <li> <p><code>[Linux localhost.localdomain 5.14.0-570.28.1.el9_6.aarch64 #1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64]</code>:</p> <ul> <li>This is crucial information about the queried device itself.</li> <li><code>Linux localhost.localdomain</code>: Identifies the operating system as Linux, with the hostname <code>localhost.localdomain</code>.</li> <li><code>5.14.0-570.28.1.el9_6.aarch64</code>: This is the kernel version and architecture</li> <li><code>#1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64</code>: Provides further kernel build details, including the build date and time.</li> </ul> </li> <li> <p><code>Up: 1:24:36.58</code>:</p> <ul> <li>This indicates the uptime of the device. The system has been running for   1 day, 24 hours, 36 minutes, and 58 seconds.</li> </ul> </li> <li> <p><code>Interfaces: 2, Recv/Trans packets: 355763/355129 | IP: 37414/35988</code>:</p> <ul> <li><code>Interfaces: 2</code>: This tells us that the device has detected 2 network interfaces.</li> <li><code>Recv/Trans packets: 355763/355129</code>: These numbers represent the total   number of packets received and transmitted across all network interfaces   on the device since it was last booted.</li> <li><code>IP: 37414/35988</code>: These figures likely represent the number of IP datagrams   received and sent specifically by the IP layer on the device. This provides   a more specific metric of IP traffic compared to the total packet count   which includes other layer 2 protocols.</li> </ul> </li> </ol> <p>In summary, this output from <code>snmpstatus</code> quickly provides a clear overview of a Linux system's basic health and network activity, confirming that the SNMP agent is reachable and responding with the requested information using SNMPv2c.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#installing-snmp-agent-on-a-linux-host","title":"Installing SNMP Agent on a Linux Host","text":"<p>Now that we know a bit more about SNMP it's time to start playing next we will install the SNMP agent and utilities on our Zabbix server to do some testing. Or another compatible system if you prefer.</p> <p>Follow the steps below to get the SNMP agent installed.</p> <ol> <li>Install Required Packages</li> </ol> <p>Update the package list</p> <p>Red Hat <pre><code>sudo dnf update\n</code></pre></p> <p>Ubuntu: <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Install Net-SNMP agent and utilities</p> <p>Red Hat <pre><code>sudo dnf install net-snmp net-snmp-utils\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install snmp snmpd\n</code></pre></p> <ol> <li>Configure the SNMP Agent    First, create a clean configuration file for the SNMP daemon:</li> </ol> <pre><code>    sudo vi /etc/snmp/snmpd.conf\n</code></pre> <p>Paste the following example configuration, which is optimized for SNMP-based discovery and testing in Zabbix:</p> <pre><code>tee /etc/snmp/snmpd.conf &lt;&lt;EOF\n# --------------------------------------------------------------------------\n# BASIC ACCESS CONTROL\n# --------------------------------------------------------------------------\n# This defines who has access and with which community string.\n# For a LAB ENVIRONMENT, 'public' is acceptable, but EMPHASIZE THAT THIS IS UNSAFE\n# FOR PRODUCTION. In production, use SNMPv3 or restricted IP ranges.\n\n# Read-only community string 'public' for all IP addresses (WARNING: LAB USE ONLY!)\nrocommunity public\n#\n# IMPORTANT NOTE: The 'public' community string is the default and most well-known community string.\n# Using this in a production environment is EXTREMELY INSECURE and makes your device vulnerable.\n# Anyone who knows your device's IP address can query basic information about your system.\n# USE THIS ONLY AND EXCLUSIVELY IN STRICTLY ISOLATED TEST OR LAB ENVIRONMENTS!\n# For production environments:\n# - Use a unique, complex community string (e.g., rocommunity YourSuperSecretString)\n# - STRONGLY CONSIDER implementing SNMPv3 for superior security (authentication and encryption).\n#\n\n# BETTER FOR LAB (or production with restrictions):\n# rocommunity my_secure_community_string 192.168.56.0/24\n# Replace '192.168.56.0/24' with the subnet where your Zabbix Server is located.\n\n\n# ============================================\n# SNMPv3 Configuration (Recommended for Production, but here with examples)\n# ============================================\n#\n# This section defines users for SNMPv3, each with a different security level.\n# In a production environment, you would typically ONLY use the 'authPriv' option\n# with strong, unique passwords. This setup is useful for lab and testing purposes.\n\n# --- 1. SNMPv3 User with Authentication and Privacy (authPriv) ---\n# THIS IS THE MOST SECURE AND RECOMMENDED SECURITY LEVEL FOR PRODUCTION.\n# It requires both correct authentication and encryption of the traffic.\n#\n# Syntax: createUser USERNAME AUTH_PROTOCOL \"AUTH_PASS\" PRIV_PROTOCOL \"PRIV_PASS\"\n# Example: createUser mysecureuser SHA \"StrongAuthP@ss1\" AES \"SuperPrivP@ss2\"\n\ncreateUser secureuser SHA \"AuthP@ssSec#1\" AES \"PrivP@ssSec#2\"\nrouser secureuser authPriv\n\n# --- 2. SNMPv3 User with Authentication Only (authNoPriv) ---\n# This level requires authentication, but the data is NOT encrypted.\n# The content of SNMP packets can be read if traffic is intercepted.\n# NOT RECOMMENDED FOR SENSITIVE DATA OR PRODUCTION ENVIRONMENTS.\n#\n# Syntax: createUser USERNAME AUTH_PROTOCOL \"AUTH_PASS\"\n# Example: createUser authonlyuser SHA \"AuthOnlyP@ss3\"\n\ncreateUser authonlyuser SHA \"AuthOnlyP@ss3\"\nrouser authonlyuser authNoPriv\n\n# --- 3. SNMPv3 User with \u001b[48;32;186;960;2604tNo Authentication and No Privacy (noAuthNoPriv) ---\n# THIS IS THE LEAST SECURE LEVEL AND SHOULD NEVER BE USED IN PRODUCTION!\n# It offers NO SECURITY WHATSOEVER. It's purely for very specific test scenarios\n# where security is not a concern.\n#\n# Syntax: createUser USERNAME\n# Example: createUser insecureuser\n\ncreateUser insecureuser\nrouser insecureuser noAuthNoPriv\n\n#\n# IMPORTANT SECURITY NOTES FOR ALL SNMPv3 USERS:\n# - Replace the example usernames and passwords with your OWN strong, unique values.\n# - Passwords must be a MINIMUM of 8 characters long.\n# - The passwords for AUTH and PRIV (with authPriv) do not have to be the same.\n# - Restrict access to specific IP addresses (e.g., 'rouser USERNAME authPriv 192.168.1.0/24')\n#   if you want to further tighten access.\n#\n\n\n# --------------------------------------------------------------------------\n# SYSTEM INFORMATION (OPTIONAL)\n# --------------------------------------------------------------------------\n# This information is generally available via SNMP and useful for identification.\nsyslocation  \"Rocky Linux Zabbix SNMP Lab Server\"\nsyscontact   \"Your Name &lt;your.email@example.com&gt;\"\nsysname      \"RockySNMPHost01\" # Often overridden by hostname, but can be specific\n\n# --------------------------------------------------------------------------\n# ENABLING CRUCIAL MIB MODULES FOR LLD\n# --------------------------------------------------------------------------\n# 'view' statements determine which parts of the MIB tree are visible.\n# 'systemview' is a standard view. We ensure that the most useful OID trees\n# for Zabbix LLD are included here.\n\n# Standard System MIBs (uptime, description, etc.)\nview systemview included .1.3.6.1.2.1.1    # SNMPv2-MIB::sysDescr, sysUptime, etc.\n\n# HOST-RESOURCES-MIB: ESSENTIAL FOR LLD OF HARDWARE/OS COMPONENTS\n# This MIB contains information about storage (filesystems), processors,\n# installed software, running processes, etc.\nview systemview included .1.3.6.1.2.1.25\n\n# IF-MIB: ESSENTIAL FOR LLD OF NETWORK INTERFACES\n# Contains detailed information about network interfaces.\nview systemview included .1.3.6.1.2.1.2\n\n# Other useful MIBs (often standard or optional)\nview systemview included .1.3.6.1.2.1.4\nview systemview included .1.3.6.1.2.1.6\nview systemview included .1.3.6.1.2.1.7\n\n# --------------------------------------------------------------------------\n# EXTENDING SNMPD WITH EXEC COMMANDS (OPTIONAL FOR CUSTOM LLD)\n# --------------------------------------------------------------------------\n# This allows you to make the output of shell commands or scripts available via SNMP.\n# This is ideal for monitoring things not natively available via SNMP.\n# Example: Monitor the number of logged-in users (not LLD, but demonstrates the principle)\n# exec activeUsers /usr/bin/who | wc -l\n\n# Example: A script that generates LLD-like output\n# imagine /opt/scripts/docker_lld.sh returns JSON that Zabbix can parse\n# exec dockerContainers /opt/scripts/docker_lld.sh\n# This requires a custom LLD parser in Zabbix. For an introduction, this\n# might be a bit too advanced, but it's good to mention as a possibility.\n\n# --------------------------------------------------------------------------\n# SYSLOGGING\n# --------------------------------------------------------------------------\n# For logging snmpd activities (useful for debugging)\ndontLogTCPWrappers no\nEOF\n</code></pre> <p>Let's do some practical tests with this setup we just created. Start the SNMP Service and Configure the Firewall</p> <pre><code># Start the SNMP daemon\nsudo systemctl start snmpd\n</code></pre> <pre><code># Enable it to start on boot\nsudo systemctl enable snmpd\n</code></pre> <pre><code># Check that the service is running\nsudo systemctl status snmpd\nIf your system uses firewalld, ensure that SNMP traffic is allowed:\n</code></pre> <pre><code># Add SNMP to permanent firewall rules\nsudo firewall-cmd --add-service=snmp --permanent\n</code></pre> <pre><code># Reload the firewall configuration\nsudo firewall-cmd --reload\n</code></pre> <pre><code># Confirm that SNMP is listed\nsudo firewall-cmd --list-services --permanent\n</code></pre> <pre><code>Verifying SNMP Functionality\nFrom your Zabbix server or any SNMP client system with net-snmp-utils installed:\n\n# Repace &lt;IP_ADDRESS&gt; wit the IP of the client where you installed the SNMP\n# config. If localhost you can use 127.0.0.1.\n\n# General system info (sysDescr, sysUptime, etc.)\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.1\n\n# List interface names (useful for interface LLD)\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.2.2.1.2\n\n# List filesystem descriptions\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.25.2.3.1.3\n\n# Get CPU load per processor core\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.25.3.3.1.2\n</code></pre> Note <p>For SNMPv3 we can do the same. You could adapt the configuration file or just go with what we have prepared already in the snmpd.conf file.</p> <pre><code>vi /etc/snmp/snmpd.conf\n\n# Look for the following lines and adapt them as you like.\n\ncreateUser authonlyuser SHA \"AuthOnlyP@ss3\"\nrouser authonlyuser authNoPriv\n\ncreateUser secureuser SHA \"AuthP@ssSec#1\" AES \"PrivP@ssSec#2\"\nrouser secureuser authPriv\n\ncreateUser insecureuser\nrouser insecureuser noAuthNoPriv\n</code></pre> <p>After you have adapted your config don't forget to restart the snmpd service</p> <pre><code>systemctl restart snmpd\n</code></pre> <p>You should now be able to test your items with SNMPv3 Let me give you an example command for noAuthNoPriv,authNoPriv and the most secure authPriv. This should work out of the box with what is already configured in our <code>snmpd.conf</code> file.</p> <pre><code>snmpwalk -v3 -l noAuthNoPriv -u insecureuser 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\nsnmpwalk -v3 -l authNoPriv -u authonlyuser -a SHA -A AuthOnlyP@ss3 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\nsnmpwalk -v3 -l authPriv -u secureuser -a SHA -A AuthP@ssSec#1 -x AES -X PrivP@ssSec#2 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\n</code></pre> Note <p>If you change the config file and adapt the passwords and for some reason they do not get accepted do not worry just restart the service again it things still don't work you can remove the persistent key file sudo rm /var/lib/net-snmp/snmpd.conf It's quite brutal but in our test environment it will help you out.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#snmp-monitoring-in-zabbix","title":"SNMP Monitoring in Zabbix","text":"<p>Now that we have covered how SNMP works, it's time to put that knowledge into practice. We'll start up our Zabbix instance and begin monitoring, but first, it's crucial to understand the two different methods Zabbix offers for retrieving SNMP information from a device.</p> <p>Warning</p> <pre><code>The RFC3411 Specs specify that an EngineID needs to be unique this is very\nimportant for monitoring. You will see errors like Bad parse of ASN.1 if you\nhave a conflict.\n\nWithin an administrative domain, an snmpEngineID is the unique and\nunambiguous identifier of an SNMP engine.  Since there is a one-to-\none association between SNMP engines and SNMP entities, it also\nuniquely and unambiguously identifies the SNMP entity within that\nadministrative domain.  Note that it is possible for SNMP entities in\ndifferent administrative domains to have the same value for\nsnmpEngineID.  Federation of administrative domains may necessitate\nassignment of new values.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#legacy-snmp-monitoring","title":"Legacy SNMP Monitoring","text":"<p>The traditional method for SNMP monitoring is synchronous. It uses a single OID placed directly into the item's SNMP OID field. Zabbix will wait for a response before it moves on to the next check.</p> <ul> <li>OID: A single textual or numeric OID is used to retrieve a single value synchronously.   For example: <code>1.3.6.1.2.1.31.1.1.1.6.3</code>.</li> <li>The timeout for these items is governed by the <code>Timeout</code> parameter in the Zabbix   server configuration file. To make this method functional, the <code>StartPollers</code>   parameter must also be correctly configured.</li> </ul> <p>When we talk about bulk processing in legacy it can be interesting to have a look at the Zabbix documentation about this subject. https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmp#internal-workings-of-combined-processing</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#asynchronous-snmp-monitoring-recommended","title":"Asynchronous SNMP Monitoring (Recommended)","text":"<p>The newer, recommended approach is asynchronous and provides much better performance. It leverages native SNMP bulk requests (<code>GetBulkRequest-PDUs</code>).</p> <ul> <li><code>walk[OID1, OID2, ...]</code>: This retrieves a subtree of values. For   example: <code>walk[1.3.6.1.2.1.2.2.1.2,1.3.6.1.2.1.2.2.1.3]</code>.</li> <li><code>get[OID]</code>: This retrieves a single value asynchronously. For example: <code>get[1.3.6.1.2.1.31.1.1.1.6.3]</code>.</li> </ul> <p>With asynchronous monitoring, timeout settings can be configured per item. It's best to set a low timeout value to avoid long delays if a device is unreachable, as Zabbix will attempt up to 5 retries. A 3-second timeout, for instance, could result in a 15-second wait.</p> <p>All <code>walk[OID]</code> and <code>get[OID]</code> items are executed asynchronously, meaning Zabbix does not need to wait for one response before starting other checks. DNS resolution is also handled asynchronously. The maximum concurrency for these checks is 1000, defined by the <code>MaxConcurrentChecksPerPoller</code> parameter. The number of SNMP pollers dedicated to this method is set by the <code>StartSNMPPollers</code> parameter.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#synchronous-versus-asynchronous-polling","title":"Synchronous versus Asynchronous Polling","text":"<p>Zabbix can also use two different internal methods for polling:</p> <p>Synchronous Polling</p> <p>Synchronous polling means the Zabbix server queries one SNMP OID at a time and waits for the response before continuing. This is simpler and ensures accurate timing, but it can become slow when monitoring hundreds or thousands of items per second.</p> <ul> <li>Characteristics: Sequential, blocking, predictable timing</li> <li>Use case: Small environments or when timing precision is critical</li> </ul> <p>Asynchronous Polling</p> <p>Asynchronous polling sends multiple SNMP requests in parallel without waiting for each response before sending the next. This dramatically increases performance and reduces latency in large environments.</p> <ul> <li>Characteristics: Parallel, non-blocking, more efficient</li> <li>Use case: Large-scale Zabbix installations with many SNMP hosts</li> </ul> Method Direction Timing Example Pros Cons Polling (Sync) Zabbix \u2192 Device Periodic SNMP GET for CPU load Predictable, simple Slower, more traffic Polling (Async) Zabbix \u2192 Device Parallel Many SNMP GETs at once Fast, scalable More complex tuning","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-your-first-oid-in-zabbix","title":"Polling Your First OID in Zabbix","text":"<p>Let's begin by polling our first OID in Zabbix. As you may recall from a previous <code>snmpwalk</code> command, querying <code>.1.3.6.1.2.1.2.2.1.2</code> returned two results, identifying the network interfaces on the device:</p> <ul> <li><code>IF-MIB::ifDescr.1 = STRING: lo</code></li> <li><code>IF-MIB::ifDescr.2 = STRING: enp0s1</code></li> </ul> <p>To find the inbound and outbound octets for the <code>enp0s1</code> network card, we need to locate the correct OID. While a MIB file would provide a clear map of all available OIDs, this isn't always an option. A common method to discover the correct OID is to perform a broader <code>snmpwalk</code> by removing the last digit from the initial OID.</p> <pre><code>snmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.2.2.1\n</code></pre> <p>This command returns a more extensive list of MIB objects.</p> <pre><code>IF-MIB::ifIndex.1 = INTEGER: 1\nIF-MIB::ifIndex.2 = INTEGER: 2\nIF-MIB::ifDescr.1 = STRING: lo\nIF-MIB::ifDescr.2 = STRING: enp0s1\n...\nIF-MIB::ifInOctets.1 = Counter32: 697830615\nIF-MIB::ifInOctets.2 = Counter32: 49954965\n...\n</code></pre> <p>From this output, we can see that the index for our target network card, <code>enp0s1</code>, is <code>2</code>. This confirms that we can use this index to find the correct data. The output <code>IF-MIB::ifInOctets.2 = Counter32: 49954965</code> appears to be the value we need, but this is not the raw OID.</p> <p>To convert this human-readable output into a numerical OID that Zabbix can use, we can add the <code>-On</code> flag to our <code>snmpwalk</code> command, which converts the output to its numerical form.</p> <pre><code>snmpwalk -v2c -c public &lt;IP_ADDRESS&gt; IF-MIB::ifInOctets.2 -On\n</code></pre> <p>The result is the specific OID for the inbound octets on the <code>enp0s1</code> interface:</p> <pre><code>.1.3.6.1.2.1.2.2.1.10.2 = Counter32: 50050587\n</code></pre> <p>This is the OID you would use to configure an SNMP item in Zabbix to monitor the network traffic for this specific interface.</p> <p>Another useful tool that will help here is <code>snmptranslate</code> which does the same thing and also the other way back.</p> <p>snmptranslate</p> <pre><code>snmptranslate -On IF-MIB::ifInOctets.2\n.1.3.6.1.2.1.2.2.1.10.2\n\nsnmptranslate .1.3.6.1.2.1.2.2.1.10.2\nIF-MIB::ifInOctets.2\n</code></pre> <p>There is yet another tool that helps to visualise a SNMP table with the easy to remember name ... <code>snmptable</code>. This tool allows you to see the data more easy then a simple a snmp walk. To stay with our network cards have a look at this output.</p> <p>snmptable</p> <pre><code>snmptable -v 2c -c public 127.0.0.1 IF-MIB::ifTable\nSNMP table: IF-MIB::ifTable\n\n ifIndex ifDescr    ifType           ifMtu  ifSpeed    ifPhysAddress     ifAdminStatus\n   1      lo        softwareLoopback 65536  10000000                     up\n   2  enp0s1        ethernetCsmacd    1500        0    76:ae:5:aa:5f:45  up\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-a-single-snmp-item","title":"Polling a single SNMP item","text":"<p>Ok enough with the theory let's create an actual item in Zabbix. Create a new host with the name <code>SNMP Device</code> and place it in a group <code>SNMP Devices</code>. We also need to tell Zabbix where we can find our SNMP device as Zabbix is doing the polling (Or if we use a Proxy it will be the proxy.)</p> <p>So let's add a <code>SNMP Interface</code> and give it the IP of the device we would like to monitor. If you have been following our steps on the local machine you can use ip 127.0.0.1, our own server.</p> <p></p> <p>4.29 SNMP Interface</p> <p>Once our host is created and saved with the correct interface we have to create an item on the host. Click on <code>items</code> next to the host <code>SNMP Device</code>. On the top right click the box <code>Create item</code> you will be greeted with another form to fill in the item information.</p> <ul> <li>Name: In traffic enp0s1 (A short descriptive name)</li> <li>Type: SNMP Agent</li> <li>Key: snmp.in (free form short descriptive)</li> <li>Type of information: Numeric(Unsigned)</li> <li>Host interface: The SNMP interface we created on our host. If you have   more then 1 interface just select the one you need.</li> <li>SNMP OID: get[oid] to retrieve the information or only the oid but then it   will use synchronous polling.</li> <li>Units: The data is in bytes so use B.</li> </ul> <p></p> <p>04.30 SNMP Item</p> <p>Before we safe this item there is one more important step we need to do. Network items are usually counters. Meaning the device is just counting the amount of traffic that passed the interface. This means the counter will always go up as more data passes the interface over time. So we need to calculate a delta.</p> <p>For this we can use preprocessing steps so let's move to the tab <code>preprocessing</code> first before we save it.</p> <p>Add a preprocessing step with the name <code>Change per second</code></p> <p></p> <p>snmp preprocessing</p> <p>We can now safe the item and have a look at our latest data page we should have a nice graph with our data over time.</p> <p>If you decide to use the test button before you safe the item (this is always a good idea then don't forget that Zabbix needs 2 item values tot calculate the difference. ) So you will have to test the <code>Get value and test</code> button twice.</p> <p>Also don't forget to select the <code>Get value from host</code> box so Zabbix retrieves it from the host.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#how-does-change-per-second-work","title":"How does change per second work ?","text":"<p>Given a counter value sampled at two different times:</p> <ul> <li>At time ( t_1 ), the counter value is ( C_1 ).</li> <li>At time ( t_2 ), the counter value is ( C_2 ).</li> </ul> <p>The change per second (rate) is calculated as:</p> <p>$$ \\text{Rate} = \\frac{C_2 - C_1}{t_2 - t_1} $$</p> <p>where ( t_2 - t_1 ) is the time elapsed in seconds.</p> <p>If the counter rolls over (i.e., ( C_2 &lt; C_1 )), and the max counter value is ( M ), then adjust as:</p> <p>$$ \\text{Rate} = \\frac{(M - C_1) + C_2 + 1}{t_2 - t_1} $$</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-a-list-of-item","title":"Polling a list of item","text":"<p>Let's do the same for our snmp walk item. This time we will look for the information from all our interfaces. For this we need to find our correct OID first. This can be done with <code>snmptranslate</code> which will convert our table name to an OID,</p> <pre><code>snmptranslate -On IF-MIB::ifTable\n.1.3.6.1.2.1.2.2\n</code></pre> <p>This is the OID we can use in our item. Let's clone our previous item and make some changes.</p> <ul> <li>Name: ifTable (or another descriptive name)</li> <li>Key: snmp.ifTable</li> <li>Type of information:: Text</li> <li>SNMP OID: walk[.1.3.6.1.2.1.2.2]</li> </ul> <p>The rest can stay as is just remove the preprocessing step we added in earlier example as this item will return us a whole list of information.</p> <p></p> <p>04.32 SNMP Walk</p> <p>When we press the <code>Get value and test</code> button in the test item screen we get a whole list of data.</p> <pre><code>.1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n.1.3.6.1.2.1.2.2.1.2.1 = STRING: \"lo\"\n.1.3.6.1.2.1.2.2.1.2.2 = STRING: \"enp0s1\"\n.1.3.6.1.2.1.2.2.1.3.1 = INTEGER: 24\n.1.3.6.1.2.1.2.2.1.3.2 = INTEGER: 6\n.1.3.6.1.2.1.2.2.1.4.1 = INTEGER: 65536\n.1.3.6.1.2.1.2.2.1.4.2 = INTEGER: 1500\n.1.3.6.1.2.1.2.2.1.5.1 = Gauge32: 10000000\n.1.3.6.1.2.1.2.2.1.5.2 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.6.1 = STRING: \"\"\n.1.3.6.1.2.1.2.2.1.6.2 = STRING: \"76:ae:5:aa:5f:45\"\n.1.3.6.1.2.1.2.2.1.7.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.7.2 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.8.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.8.2 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.9.1 = 0\n.1.3.6.1.2.1.2.2.1.9.2 = 0\n.1.3.6.1.2.1.2.2.1.10.1 = Counter32: 69417222\n.1.3.6.1.2.1.2.2.1.10.2 = Counter32: 59215034\n.1.3.6.1.2.1.2.2.1.11.1 = Counter32: 6460587\n.1.3.6.1.2.1.2.2.1.11.2 = Counter32: 113038\n.1.3.6.1.2.1.2.2.1.12.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.12.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.13.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.13.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.14.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.14.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.15.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.15.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.16.1 = Counter32: 69417222\n.1.3.6.1.2.1.2.2.1.16.2 = Counter32: 44139841\n.1.3.6.1.2.1.2.2.1.17.1 = Counter32: 6460587\n.1.3.6.1.2.1.2.2.1.17.2 = Counter32: 97398\n.1.3.6.1.2.1.2.2.1.18.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.18.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.19.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.19.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.20.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.20.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.21.1 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.21.2 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.22.1 = OID: .0.0\n.1.3.6.1.2.1.2.2.1.22.2 = OID: .0.0\n</code></pre> <p>So we have the traffic in but we would like to find traffic out as well of course. Let's use our walk item to extract the outgoing traffic for this we need to create a dependent item.</p> <p>Go to <code>Data collection</code> - <code>Hosts</code> and click on <code>Items</code>. You should be able to see our newly created <code>ifTable</code> item and 3 dots before it's name.</p> <p>Click on those 3 dots and select <code>Create dependent item</code> from the list. Fill in the new item with the following information.</p> <ul> <li>Name: Out traffic enp0s1</li> <li>Type: dependent item</li> <li>Key: snmp.out</li> <li>Type of information: Unsigned</li> <li>Master item: Already filled in but should be our item ifTable that we made   before.</li> <li>Units: B</li> </ul> <p></p> <p>04.33 Dependent SNMP Item</p> <p>This item as is at the moment is an exact copy of our master item so we need to add some preprocessing steps first. Let's go to the tab <code>preprocessing</code> and add our first step.</p> <p>Add the step <code>SNMP walk value</code> and after it paste the OID we want <code>.1.3.6.1.2.1.2.2.1.16.1</code> and choose <code>unchanged</code>.</p> <p>find our correct OID</p> <pre><code>snmptranslate IF-MIB::ifOutOctets.1 -On\n.1.3.6.1.2.1.2.2.1.16.1\n</code></pre> <p>Remember from our previous item we need to calculate the <code>Changes per second</code> so add this as the second preprocessing step.</p> <p></p> <p>04.34 preprocessing steps</p> <p>Going now to our latest data page will show use the In and Our traffic for our network card but with data gathered in different ways. Both ways use the synchronous pollers but the last way will gather all data at once and then pre-process it.</p> <p>After you have added more items you can remove the option to keep history from your master items.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#conclusion","title":"Conclusion","text":"<p>SNMP polling remains a vital method for monitoring network devices when agents aren't an option. With Zabbix's asynchronous polling, checks can run in parallel, dramatically improving performance and lowering the load on both your server and the network. SNMPv3 should be your go-to choice, delivering authentication and encryption to secure sensitive data. The SNMP walk item type adds another advantage collecting multiple metrics in bulk with a single request, making discovery and ongoing polling faster and more efficient.</p> <p>By combining these modern features with carefully tuned polling intervals and item counts, you can create an SNMP setup that is secure, efficient, and scalable. And with asynchronous speed, SNMPv3 security, and bulk walks at your disposal, you're ready to monitor more devices, in less time, with greater confidence. Now it's time to put these capabilities to work and see just how far your monitoring can go.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#questions","title":"Questions","text":"<ul> <li>Why is it better use SNMPv3 instead of v2c or v1 ?</li> <li>Do I need to configure pollers for SNMP ? If so which pollers ?</li> <li>Can I still use the old style to monitor SNMP ? Should I start using get[]   and walk[] instead ?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmp</li> <li>https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol</li> <li>https://datatracker.ietf.org/doc/html/rfc3410</li> <li>https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/</li> <li>https://datatracker.ietf.org/doc/html/rfc3411#section-3.1.1.1</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/","title":"SNMP Trapping","text":"<p>SNMP traps are one of the most powerful features in Zabbix network monitoring. Unlike traditional SNMP polling, which periodically queries devices for status updates, SNMP traps deliver real-time alerts directly from network equipment the moment an event occurs, no waiting for the next polling cycle.</p> <p>In this chapter, you'll learn how to set up SNMP trap handling in Zabbix, from installing and configuring snmptrapd to integrating it with the Zabbix server. You'll also discover how to analyse, filter, and map incoming traps using regular expressions, and how to link them with triggers and notifications for instant visibility into network issues.</p> <p>Whether you're monitoring switches, routers, UPS systems, or firewalls, mastering SNMP traps in Zabbix gives you faster event detection, reduced network load, and deeper operational insight.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#traps-versus-polling","title":"Traps versus Polling","text":"<p>In Zabbix, SNMP (Simple Network Management Protocol) is one of the most common methods for monitoring network devices such as switches, routers, firewalls, and UPS systems. There are two main ways Zabbix can receive information from an SNMP-enabled device:</p> <ul> <li>Polling (active monitoring) See our topic SNMP Polling in Chapter 4.</li> <li>Traps (passive monitoring)</li> </ul> <p>To understand the differences between trapping and polling and understand the advantages and disadvantages lets have a quick overview:</p> <ul> <li>With SNMP polling, the Zabbix server or proxy periodically queries the device for specific values using SNMP GET requests. For example, CPU load, interface status, temperature ... The device responds with the current data, and Zabbix stores it in the database.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#polling","title":"Polling","text":"<p>Polling is a client initiated and scheduled process. It is predictable, reliable, and suitable for continuous metrics that change over time.</p> <p>Advantages:</p> <ul> <li>Easy to control frequency and timing.</li> <li>Works even if the device doesn't support traps.</li> <li>Historical trend data is consistent.</li> </ul> <p>Disadvantages:</p> <ul> <li>Generates more network traffic on large infrastructures.</li> <li>Delays between polls mean slower event detection.</li> <li>If a device goes down, Zabbix won't notice until the next polling cycle. (This can be detected by using the nodata function or using \"SNMP agent availability\" item but not for individual items unless every items has the nodata function and this is also a bad idea.)</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#trapping","title":"Trapping","text":"<p>SNMP traps work the opposite way. The device itself sends a message (trap) to the Zabbix system when an event occurs. For example, a power failure, link down, or temperature alarm. Zabbix listens for incoming traps via the snmptrapd daemon and processes them through its SNMP trap item type.</p> <p>Traps are event driven and asynchronous, meaning they are sent immediately when something happens. No waiting or polling required.</p> <p>Advantages:</p> <ul> <li>Instant notification of important events.</li> <li>Reduces network load (no regular queries).</li> <li>Ideal for devices that push alerts rather than respond to queries.</li> </ul> <p>Disadvantages:</p> <ul> <li>Requires external configuration (snmptrapd, scripts, log parsing).</li> <li>Not all devices send traps for all events.</li> <li>If traps are missed or misconfigured, data is lost. (Traps use UDP)</li> </ul> Method Direction Timing Example Pros Cons Polling (Sync) Zabbix \u2192 Device Periodic SNMP GET for CPU load Predictable, simple Slower, more traffic Polling (Async) Zabbix \u2192 Device Parallel Many SNMP GETs at once Fast, scalable More complex tuning Traps Device \u2192 Zabbix Event-driven Interface down trap Instant alerts, low load Requires trap daemon, can miss events","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-traps-flow-in-zabbix","title":"SNMP Traps flow in Zabbix","text":"<pre><code>flowchart TB\n    %% --- Traps section (top) ---\n    subgraph TRAPS[Traps]\n        direction TB\n        TITLET[\"SNMP TrapsAcrive Monitoring\"]\n        WIDE[\"                                                                 \"]\n        DEV2[Network Device]\n        TRAPD[snmptrapd Daemon]\n        HANDLER[SNMPTT or perl script]\n        ZBXT[Zabbix Server or Proxy]\n        DBT[Zabbix Database]\n        UI2[Zabbix Frontend]\n        USER2[User]\n\n        TITLET --&gt; DEV2\n        DEV2 --&gt;|SNMP Trap UDP 162| TRAPD\n        TRAPD --&gt;|Handler Script| HANDLER\n        HANDLER --&gt;|Trap Log| ZBXT\n        ZBXT --&gt; DBT\n        DBT --&gt; UI2\n        UI2 --&gt;|Displays event| USER2\n    end\n\n    %% --- Invisible connector to force vertical stacking ---\n    TRAPS -.-&gt; POLLING\n\n    %% --- Polling section (bottom) ---\n    subgraph POLLING[Polling]\n        direction LR\n        TITLEP[\"SNMP PollingPassive Monitoring\"]\n        ZBX[Zabbix Server or Proxy]\n        DEV[Network Device]\n        TITLEP --&gt; ZBX\n        ZBX --&gt;|SNMP GET UDP 161| DEV\n        DEV --&gt;|SNMP Response| ZBX\n        ZBX --&gt; DBP[Zabbix Database]\n        DBP --&gt; UI1[Zabbix Frontend]\n        UI1 --&gt;|Displays polled data| USER1[User]\n    end\n\n    %% --- Styling ---\n    style POLLING fill:#f0fff0,stroke:#3a3,stroke-width:1px\n    style TRAPS fill:#f0f8ff,stroke:#339,stroke-width:1px\n    style WIDE fill:none,stroke:none\n    style TITLEP fill:transparent,stroke:transparent\n    style TITLET fill:transparent,stroke:transparent\n    style ZBX fill:#e0ffe0,stroke:#3a3\n    style DEV fill:#ffefd5,stroke:#c96\n    style DEV2 fill:#ffefd5,stroke:#c96\n    style TRAPD fill:#f9f9f9,stroke:#777\n    style HANDLER fill:#f0f8ff,stroke:#339\n    style ZBXT fill:#e0ffe0,stroke:#3a3\n    style DBP fill:#fffbe0,stroke:#996\n    style DBT fill:#fffbe0,stroke:#996\n    style UI1 fill:#e8e8ff,stroke:#669\n    style UI2 fill:#e8e8ff,stroke:#669\n    style USER1 fill:#fff0f0,stroke:#c33\n    style USER2 fill:#fff0f0,stroke:#c33\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-trap-flow-active-monitoring","title":"SNMP Trap Flow (Active Monitoring)","text":"<p>In an SNMP Trap setup, communication is device initiated. Meaning the network device sends an event message to Zabbix the moment something happens. This is called active monitoring because Zabbix doesn't need to query the device periodically.</p> <p>Step-by-step flow:</p> <ul> <li> <p>Network Device: When an event occurs (for example, a power failure, interface down, or temperature alarm), the device immediately sends an SNMP Trap to the configured destination on UDP port 162.</p> </li> <li> <p>snmptrapd Daemon: The Net-SNMP daemon snmptrapd  listens for incoming traps. It acts as a relay between the device and Zabbix, executing a handler script whenever a trap is received.</p> </li> <li> <p>Trap Handler / Log File: The handler script (often zabbix_trap_receiver.pl or SNMPTT) processes the trap and writes it into a log file, usually \"/var/log/snmptrap/snmptrap.log.\" This file contains the raw trap data including timestamps, source IPs, and OIDs.</p> </li> <li> <p>Zabbix Server or Proxy: The Zabbix component (server or proxy) monitors the trap log for new entries and matches them against configured SNMP trap items. These items use regular expressions or string filters to extract relevant data.</p> </li> <li> <p>Zabbix Database: Once processed, the trap information is stored in the database like any other item value.</p> </li> <li> <p>Zabbix Frontend: The event becomes visible in the Zabbix frontend almost instantly showing up in Latest Data, Problems, or triggering actions and notifications based on your configuration.</p> </li> </ul> Note <p>SNMP traps deliver real-time alerts without polling overhead, making them ideal for event driven devices like UPSs, firewalls, or network switches.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-polling-flow-passive-monitoring","title":"SNMP Polling Flow (Passive Monitoring)","text":"<p>In contrast, SNMP Polling is Zabbix initiated. This is called passive monitoring because the Zabbix server (or proxy)  queries the device at a set interval to retrieve values.</p> <p>Step-by-step flow:</p> <ul> <li> <p>Zabbix Server or Proxy: Periodically sends an SNMP GET request to the device using UDP port 161. Each SNMP item in Zabbix corresponds to a specific OID (Object Identifier) that defines which metric is requested (e.g., CPU usage, interface status).</p> </li> <li> <p>Network Device: Responds to the SNMP GET request with the current value of the requested OID.</p> </li> <li> <p>Zabbix Database: The response data is stored in the database with a timestamp for trend analysis and historical graphing.</p> </li> <li> <p>Zabbix Frontend: Displays the collected values in graphs, dashboards, and triggers thresholds if defined.</p> </li> </ul> Note <p>Polling provides consistent, periodic data collection. Ideal for metrics like bandwidth usage, temperature, or CPU load. However, it may have a small delay between data updates depending on the polling interval (e.g., every 30s, 1min, etc.).</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#summary","title":"Summary","text":"Feature SNMP Traps (Active) SNMP Polling (Passive) Initiator Network Device Zabbix Direction Device \u2192 Zabbix Zabbix \u2192 Device Transport Port UDP 162 UDP 161 Frequency Event-driven (immediate) Periodic (configurable interval) Resource Usage Lower (only on events) Higher (regular queries) Data Type Event notifications Continuous metrics Best for Fault and alert notifications Performance and trend monitoring <p>Tip</p> <p>In production Zabbix environments, many administrators combine both methods: - Use SNMP polling for regular metrics (e.g., interface traffic, system uptime). - Use SNMP traps for immediate events (e.g., link down, power failure). This hybrid approach gives you both real-time alerts and historical performance data, achieving complete SNMP visibility with minimal overhead.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#setting-up-snmp-traps-with-zabbix_trap_receiver","title":"Setting up SNMP traps with zabbix_trap_receiver","text":"<p>In this section, we'll configure Zabbix to receive and process SNMP traps using the Perl script zabbix_trap_receiver.pl. SNMP traps allow network devices to actively send event information to the Zabbix server, enabling near real-time alerting without periodic polling.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#open-the-firewall-for-snmp-trap-traffic","title":"Open the Firewall for SNMP Trap Traffic","text":"<p>By default, SNMP traps are received on UDP port 162. Make sure this port is open on your Zabbix server:</p> <p>Open firewall port 162/udp</p> <p>Red Hat <pre><code>sudo firewall-cmd --add-port=162/udp --permanent\nsudo firewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 162/udp\n</code></pre></p> <p>This allows incoming traps from SNMP-enabled devices.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#install-required-snmp-packages","title":"Install Required SNMP Packages","text":"<p>The snmptrapd daemon and Perl bindings are needed for trap handling.</p> <p>Install needed packages</p> <p>Red Hat <pre><code>sudo dnf install -y net-snmp-utils net-snmp-perl net-snmp\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install snmpd snmp libsnmp-dev snmptrapd\n</code></pre></p> <p>This installs the SNMP tools, daemon, and Perl modules used by Zabbix's receiver script.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#install-zabbix_trap_receiverpl","title":"Install zabbix_trap_receiver.pl","text":"<p>Download the latest zabbix_trap_receiver.pl script from the official Zabbix source archive https://cdn.zabbix.com/zabbix/sources/stable/</p> <pre><code>sudo wget https://cdn.zabbix.com/zabbix/sources/stable/8.0/zabbix-8.0.0.tar.gz\n</code></pre> <p>Once downloaded, extract the file and copy the script to /usr/bin and make it executable:</p> <pre><code>sudo tar -xvf zabbix-8.0.0.tar.gz\nsudo cp zabbix-8.0.0/misc/snmptrap/zabbix_trap_receiver.pl /usr/bin/.\nsudo chmod +x /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>This script receives traps from snmptrapd and writes them to a log file that Zabbix can read.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#configure-snmptrapd","title":"Configure snmptrapd","text":"<p>Edit the SNMP trap daemon configuration file:</p> <pre><code>sudo vi /etc/snmp/snmptrapd.conf\n</code></pre> <p>Append the following lines:</p> <pre><code>authCommunity execute public\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#explanation","title":"Explanation:","text":"<ul> <li>authCommunity execute public allows traps from devices using the community   string public.</li> <li>The perl do line executes the Zabbix Perl handler for each incoming trap.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#edit-the-perl-script","title":"Edit the perl script","text":"<pre><code>sudo vi /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>Replace <code>$SNMPTrapperFile = '/tmp/zabbix_traps.tmp';</code> with:</p> <pre><code>$SNMPTrapperFile = '/var/log/zabbix_traps_archive/zabbix_traps.log';\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#enable-snmp-trap-support-in-zabbix","title":"Enable SNMP Trap Support in Zabbix","text":"<p>Edit the Zabbix server configuration file:</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Uncomment or add the following parameters:</p> <pre><code>StartSNMPTrapper=1\nSNMPTrapperFile=/var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> Note <ul> <li>StartSNMPTrapper=1 enables the Zabbix SNMP trapper process.</li> <li>The SNMPTrapperFile path must match exactly the path used inside zabbix_trap_receiver.pl.</li> </ul> <p>Restart the Zabbix server to apply changes:</p> <pre><code>sudo systemctl restart zabbix-server\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#enable-and-start-snmptrapd","title":"Enable and Start snmptrapd","text":"<p>Activate and start the SNMP trap daemon so it launches at boot:</p> <pre><code>sudo systemctl enable snmptrapd --now\n</code></pre> <p>This service will now listen on UDP 162 and feed incoming traps to Zabbix.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-rotate-the-trap-log-file","title":"(Optional) Rotate the Trap Log File","text":"<p>Zabbix writes all traps into a temporary log file. To prevent this file from growing indefinitely, configure log rotation.</p> <p>Create the directory:</p> <p><pre><code>sudo mkdir -p /var/log/zabbix_traps_archive\nsudo chmod 755 /var/log/zabbix_traps_archive\n</code></pre> On ubuntu only :</p> <pre><code>chown Debian-snmp: /var/log/zabbix_traps_archive/\n</code></pre> <p>Next we create a logrotate configuration file <code>/etc/logrotate.d/zabbix_traps</code>:</p> <pre><code>sudo vi /etc/logrotate.d/zabbix_traps\n</code></pre> <p>Add the following content to this file.</p> <pre><code>/var/log/zabbix_traps_archive/zabbix_traps.log {\n    weekly\n    size 10M\n    compress\n    notifempty\n    dateext\n    dateformat -%Y%m%d\n    missingok\n    olddir /var/log/zabbix_traps_archive\n    maxage 365\n    rotate 10\n}\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#conclusion","title":"Conclusion","text":"<p>You've now configured Zabbix to:</p> <ul> <li>Listen for SNMP traps on UDP 162</li> <li>Use snmptrapd and zabbix_trap_receiver.pl to capture traps</li> <li>Write traps to a Zabbix-monitored log file</li> <li>Rotate the trap log automatically</li> <li>Verify correct trap delivery and troubleshoot via SELinux if needed</li> </ul> <p>Once traps are arriving, you can create SNMP trap items in Zabbix (type SNMP trap, key snmptrap[regex]) to trigger events, alerts, and dashboards.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#setting-up-snmp-traps-with-bash-parser","title":"Setting up SNMP traps with bash parser","text":"<p>Using <code>perl</code> parser script might feel the only way to do trap parsing which is not true. <code>bash</code> script will use less dependencies and can be shortcut to get a working setup faster.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#bash-script-to-accept-the-trap","title":"Bash script to accept the trap","text":"<p>Create a file <code>/usr/bin/zabbix_trap_receiver.sh</code> with content:</p> <pre><code>#!/bin/bash\n\n# Outcome will be produced into a file\nOUT=/var/log/zabbix_traps_archive/zabbix_traps.log\n\n# Put contents of SNMP trap from stdin into a variable\nALL=$(tee)\n\n# Extract IP where trap is coming from\nHOST=$(echo \"$ALL\" | grep \"^UDP\" | grep -Eo \"[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\" | head -1)\n\n# Append SNMP trap into the log file\necho \"ZBXTRAP $HOST\n$(date)\n$ALL\" | tee --append \"$OUT\"\n</code></pre> <p>The most important part is for the message to hold keyword <code>ZBXTRAP</code> which is followed by IP address.</p> <p>tip</p> <p>The bash <code>HOST</code> variable can be redefined to extract an IP address from actual trap message, therefore giving an opportunity automatically forward and store message in appropriate host in Zabbix.</p> <p>To enable trap parser inside <code>/etc/snmp/snmptrapd.conf</code> instead of using:</p> <pre><code>perl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>use:</p> <pre><code>traphandle default /usr/bin/zabbix_trap_receiver.sh\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-and-debugging","title":"Testing and debugging","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#to-test-rotation-manually","title":"To test rotation manually","text":"<pre><code>sudo logrotate --force /etc/logrotate.d/zabbix_traps\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-snmp-trap-reception","title":"Testing SNMP Trap Reception","text":"<p>We can simulate a trap manually using the snmptrap command.</p> <pre><code>Example 1: SNMP v1 Test Trap\nsudo snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"eth0\"\n</code></pre> <pre><code>Example 2: SNMP v2c Test Trap\nsudo snmptrap -v 2c -c public localhost '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>While using \"zabbix_trap_receiver.pl\" as a parser, the perl dependencies will be validated only at the runtime when receiving the actual message. It can be handy to see if the status of service is still healthy. Running the \"status\" for the systemd service automatically prints the most recent log lines of snmptrapd.</p> <pre><code>sudo systemctl status snmptrapd\n</code></pre> <p>For troubleshooting efficiency:</p> <ul> <li> <p>Wrong order is: restart service, run status, send trap</p> </li> <li> <p>Correct order is: restart service, send trap, run status</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-snmp-trap-reception-without-upd-channel","title":"Testing SNMP Trap reception without UPD channel","text":"<p>This method helps to simulate an SNMP trap message even if device currently cannot send one.</p> <pre><code>echo \"ZBXTRAP 127.0.0.1\n$(date)\nline two\nline three\" | sudo tee --append /var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> <p>The most important part is having keyword \"ZBXTRAP\" (all caps) followed by the IP address. The IP must belong to an existing SNMP interface behind  Zabbix proxy/server.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#validate-if-proxyserver-runs-a-correct-mapping","title":"Validate if proxy/server runs a correct mapping","text":"<p>If the host is not yet made in frontend, that is perfect opportunity to validate if Zabbix proxy/server service has recognised the mapping with a zabbix_traps.log file.</p> <p>Every time the trap message is sent (and the device is not yet registered in GUI),  it should print a line about \"unmatched trap received from\"</p> <p>Send a test trap</p> <pre><code>sudo snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"eth0\"\n</code></pre> <p>Check immediately</p> <pre><code>date\ngrep \"unmatched trap received from\" /var/log/zabbix/zabbix_proxy.log\n</code></pre> <p>If the line appear, it's a solid indication the settings about StartSNMPTrapper and SNMPTrapperFile is configured correctly.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#selinux-considerations","title":"SELinux considerations","text":"<p>If SELinux is enabled and traps are not being processed, check for denied actions: <pre><code>sudo ausearch -m AVC,USER_AVC -ts recent\n</code></pre></p> <p>Adjust SELinux policies or create exceptions for /usr/bin/zabbix_trap_receiver.pl and the trap log directory as needed.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-snmpv3-trap-configuration","title":"(Optional) SNMPv3 Trap Configuration","text":"<p>If using SNMPv3 for secure traps, you can define users directly in snmptrapd.conf:</p> <pre><code>createUser -e &lt;engineid&gt; &lt;user&gt; SHA &lt;key&gt; AES &lt;key&gt;\nauthUser log,execute &lt;user&gt;\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This adds authentication and encryption for trap communication.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#desperate-snmptrapdconf-for-snmpv2","title":"Desperate snmptrapd.conf for SNMPv2","text":"<p>If community names for SNMPv2 traps are not known and deadlines are approaching, we can allow every SNMP trap message to come in by ignoring all community names.</p> <p>Add at the beginning of existing configuration file add:</p> <pre><code>disableAuthorization yes \n</code></pre> <p>For example with a bash parser it's enough to have only 2 active lines to make it functional and have confidence that trap receiving is working.</p> <pre><code>echo \"\n# Allow everyone to register a message\ndisableAuthorization yes\n\n# Forward message to parser script\ntraphandle default /usr/bin/zabbix_trap_receiver.sh\n\" | sudo tee /etc/snmp/snmptrapd.conf\n</code></pre> <p>This is only applicable to SNMPv2 traps. This will not work with SNMPv3 traps.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#trap-mapping-and-preprocessing","title":"Trap mapping and preprocessing","text":"<p>With SNMP traps now configured and the trap receiver operational, the next step is to create a host in the Zabbix frontend so we can link incoming traps to a specific monitored device.</p> <p>In the Zabbix web interface, navigate to: Data collection \u2192 Hosts, and click Create host.</p> <ul> <li>Hostname : Network Switch 01</li> <li>Host groups : SNMP Devices</li> <li>Interfaces : SNMP with IP 127.0.0.1</li> </ul> <p></p> <p>In Zabbix, the macro {$SNMP_COMMUNITY} is often defined globally under Administration \u2192 Macros. This global macro provides a default SNMP community string used by all hosts that rely on SNMP for polling or trap-based communication.</p> <p>However, a better approach, especially in larger or more secure environments is to define a unique SNMP community per device and override the global macro at the host level. This allows for more granular access control and simplifies troubleshooting when multiple community strings are used across the network.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#sending-a-test-trap","title":"Sending a Test Trap","text":"<p>With the host and trap receiver configured, we can now simulate a link down event from our device by sending an SNMP trap manually from the command line:</p> <p>On the command line we can now sent a trap to mimic a Link down on our device. <code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.6.3.1.1.5.3</code></p> <p>This command sends a version 2c SNMP trap using the community string public to the local Zabbix trap receiver, emulating a linkDown event defined by OID 1.3.6.1.6.3.1.1.5.3.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#verifying-trap-reception","title":"Verifying Trap Reception","text":"<p>After sending the test trap, open the Zabbix frontend and navigate to: <code>Monitoring</code> \u2192 <code>Latest data</code></p> <p>Select the host <code>Network Switch 01</code>. If everything is configured correctly, you should now see data populated in your SNMP trap item, confirming that Zabbix successfully received and processed the trap.</p> <pre><code>2025-10-13T21:10:58+0200 PDU INFO:\n  errorindex                     0\n  notificationtype               TRAP\n  messageid                      0\n  transactionid                  2\n  receivedfrom                   UDP: [127.0.0.1]:50483-&gt;[127.0.0.1]:162\n  community                      public\n  requestid                      57240481\n  version                        1\n  errorstatus                    0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (227697) 0:37:56.97\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkDown\n</code></pre> <p>Sending a More Realistic Trap Example</p> <p>In a real production environment, SNMP traps usually include additional variable bindings (varbinds) that describe the state of the affected interface or component. To better simulate a real-world scenario, we can extend our previous test command to include this extra information.</p> <p>Run the following command on the Zabbix server:</p> <p><pre><code>snmptrap -v 2c -c public 127.0.0.1 '' \\\n  IF-MIB::linkDown \\\n  IF-MIB::ifIndex i 1 \\\n  IF-MIB::ifAdminStatus i 2 \\\n  IF-MIB::ifOperStatus i 2 \\\n  IF-MIB::ifName s \"Gi0/1\" \\\n  IF-MIB::ifDescr s \"GigabitEthernet0/1\"\n</code></pre> This will give use the following output:</p> <pre><code>2025-10-13T21:53:15+0200 PDU INFO:\n  errorstatus                    0\n  version                        1\n  requestid                      139495039\n  community                      public\n  transactionid                  14\n  receivedfrom                   UDP: [127.0.0.1]:35753-&gt;[127.0.0.1]:162\n  messageid                      0\n  notificationtype               TRAP\n  errorindex                     0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (481390) 1:20:13.90\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkDown\n  IF-MIB::ifIndex                type=2  value=INTEGER: 1\n  IF-MIB::ifAdminStatus          type=2  value=INTEGER: 1\n  IF-MIB::ifOperStatus           type=2  value=INTEGER: 1\n  IF-MIB::ifName                 type=4  value=STRING: \"Gi0/1\"\n  IF-MIB::ifDescr                type=4  value=STRING: \"GigabitEthernet0/1\"\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-bulletproof-solution","title":"(optional) Bulletproof solution","text":"<p>Official Zabbix SNMP templates do not require installing MIB files, targeting raw OIDs for data polling. If we continue this style for trapping too we can create a dependency free solution by enabling a \"numerical\" flag inside /etc/snmp/snmptrapd.conf</p> <pre><code>outputOption n\n</code></pre> <p>Edit the file, restart the snmptrapd service, send test trap, and check the log:</p> <pre><code>tail -99 /var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> <p>In long run</p> <p>Using a numerical traps will take much more time to design a template. More time in creating items and triggers. Due to the '.' (dot) symbol of being a special character in the regular expression world, the items keys will require to escape. This makes solution not visually pleasant. Ignoring escaping the '.' will also work 99.9% of time, but it violates the idea of bulletproof and precise solution.</p> <p>Using numerical traps can be best direction if:</p> <ul> <li> <p>There is a big passion about bulletproof solution. Creating solution with bare minimum dependencies - MIBs are never required for Zabbix proxies.</p> </li> <li> <p>Template readability is not an issue. You are only person in the monitoring department. There are no team mates.</p> </li> <li> <p>Have a lot of time to design solution</p> </li> <li> <p>You are willing to share your masterpiece with the internet. Perhaps share it at GitHub</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#creating-snmp-trap-items","title":"Creating SNMP Trap Items","text":"<p>Now that our host is configured and we've verified that traps are being received, we can create a set of items to store and process the trap data in a structured way.</p> <p>We\u2019ll start with a catch-all (fallback) item that captures every SNMP trap received for this host. Then we'll add two dependent items to extract specific values such as the administrative and operational interface status.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#creating-the-snmp-fallback-item","title":"Creating the SNMP Fallback Item","text":"<p>This item serves as the master collector for all incoming traps. Any dependent items you create later will use this as their source.</p> <p>In the Zabbix frontend, navigate to <code>Data collection</code> \u2192 <code>Hosts</code> \u2192 <code>Network Switch 01</code> \u2192 <code>Items</code> and click Create item.</p> <p>Configure the following parameters:</p> <ul> <li>Name: SNMP Trap: Fallback</li> <li>Type: SNMP trap</li> <li>Key: snmptrap.fallback</li> <li>Type of information: Text</li> </ul> <p>Next we will create 2 dependent items. One item for the ifAdminStatus and another one for the ifOperStatus. You can do this by clicking on the 3 dots before our fallback item or by just creating a new item and selecting type <code>Dependent item</code></p> <ul> <li>Name: Trap ifAdminStatus</li> <li>Type: Dependent item</li> <li>Key: trap.ifAdminStatus</li> <li>Type of information: Numeric(unsigned)</li> <li>Master item: (Select your fallback item as master item)</li> </ul> <p>Click on the <code>preprocessing</code> tab and select <code>Regular expression</code>. use <code>IF-MIB::ifAdminStatus[\\s\\S]*?INTEGER:\\s+(\\d+)</code> in the Parameters field and <code>\\1</code> in the Output box.</p> <p>Select the box <code>Custom on fail</code> and use the option <code>Discard value</code>.</p> <p></p> <p>Next we create our second item also dependent on our Fallback item.</p> <ul> <li>Name: Trap ifOperStatus</li> <li>Type: Dependent item</li> <li>Key: trap.ifAdminStatus</li> <li>Type of information: Numeric(unsigned)</li> <li>Master item: (Select your fallback item as master item)</li> </ul> <p>Again go to the <code>Preprocessing</code> tab and enter following information.</p> <p>Select <code>Regular expression</code> and for Parameters enter <code>IF-MIB::ifOperStatus[\\s\\S]*?INTEGER:\\s+(\\d+)</code> and <code>\\1</code> in the Output box.</p> <p>Again add a <code>Custom on fail</code> step and select <code>Discard value</code>.</p> <p></p> <p>We have our items now but we still are missing our trigger. Go back to your host and click on the triggers and add the following trigger.</p> <p>Name: Problem (Link down:) Severity: Warning</p> <p>Problem expression: <code>last(/Network Switch 01/trap.ifOperStatus)=2 and last(/Network Switch 01/trap.ifAdminStatus)=2</code></p> <p>Recovery expression: <code>last(/Network Switch 01/trap.ifOperStatus)=1 and last(/Network Switch 01/trap.ifAdminStatus)=1</code></p> <p></p> <p>Make sure to also select the box <code>Allow manual close.</code> This can help to close the problem in case we don't receive a TRAP.</p> <p>You should now be able to sent a trap to open and close a problem in Zabbix based on the status of the ifOperStatus and the ifAdminStatus </p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' IF-MIB::linkDown   IF-MIB::ifIndex i 1   IF-MIB::ifAdminStatus i 2   IF-MIB::ifOperStatus i 2   IF-MIB::ifName s \"Gi0/1\"   IF-MIB::ifDescr s \"GigabitEthernet0/1\"\nsnmptrap -v 2c -c public 127.0.0.1 '' IF-MIB::linkDown   IF-MIB::ifIndex i 1   IF-MIB::ifAdminStatus i 1   IF-MIB::ifOperStatus i 1   IF-MIB::ifName s \"Gi0/1\"   IF-MIB::ifDescr s \"GigabitEthernet0/1\"\n</code></pre> <p>As a bonus you can add on the host a value map and link the items with it.</p> <p></p> <p>If you don't like 2 different items and want to be more fancy you could create an dependent item like we did above and use JS instead of perl regex.</p> <p><pre><code>var s = value;\n\nfunction grab(re) {\n  var m = s.match(re);\n  return m ? m[1] : '';\n}\n\n// Extract fields from your sample payload\nvar ifName = grab(/IF-MIB::ifName[\\s\\S]*?STRING:\\s+\"([^\"]+)\"/m);\nvar admin  = grab(/IF-MIB::ifAdminStatus[\\s\\S]*?INTEGER:\\s+(\\d+)/m);\nvar oper   = grab(/IF-MIB::ifOperStatus[\\s\\S]*?INTEGER:\\s+(\\d+)/m);\n\n// Map 1/2/3 -&gt; up/down/testing\nvar map = { '1':'up', '2':'down', '3':'testing' };\nvar a = map[admin] || admin || '?';\nvar o = map[oper]  || oper  || '?';\nvar name = ifName || 'ifName=?';\n\nreturn 'interface=' + name + ' adminStatus=' + a + ' operStatus=' + o;\n</code></pre> This will return output in latest data like <code>interface=Gi0/1 adminStatus=down operStatus=down</code></p> <p>Another solution way more easy could be to create a specific item instead of falling back on the fallback item that looks exactly for a link that goes Down or Up. This can be done by creating a specific item like this:</p> <p><code>snmptrap[\"IF-MIB::link(Down|Up)\"]</code></p> <p>We could then create a trigger like: <code>str(/Network Switch 01/snmptrap[\"IF-MIB::link(Down|Up)\"],\"IF-MIB::linkDown\")=1</code> and a recovery trigger like : <code>str(/Network Switch 01/snmptrap[\"IF-MIB::link(Down|Up)\"],\"IF-MIB::linkUp\")=1</code></p> <p>As you can see the solutions are endless and SNMP traps are not so easy and probably need some tweaking before you have it all working like you want.</p> Note <p>The snmptrap.fallback is a good point to start with if you have no clue what traps to expect it can help you to discover all the traps and stay to be sure you catch all traps even if they are not configured on your host.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#deploying-bare-minimum-mib-files","title":"Deploying bare minimum MIB files","text":"<p>Gathering proper MIB files might sounds a tedious and time consuming task.</p> <p>Installing too many MIBs will cause degradation for the SNMP trap translation process and slow down the SNMP polling process.</p> <p>Here is an universal method (treat it as one option) on how to obtain bare minimum MIBs to work with most of devices. This is useful for SNMP polling too.</p> <p>The project https://github.com/netdisco/netdisco-mibs exist for 20 years and is a collection of MIBs for a lot of vendors. Dare I say: all vendors?</p> <p>To install/replace the Linux distribution stock MIB bundle:</p> <pre><code># move to /tmp\ncd /tmp\n\n# download\ncurl -kL https://github.com/netdisco/netdisco-mibs/archive/refs/heads/master.zip -o /tmp/netdisco-mibs.zip\n\n# unpack. this will create '/tmp/netdisco-mibs-master' directory\nunzip /tmp/netdisco-mibs.zip -d /tmp\n\n# remove existing/official MIBs from Linux distribution\nrm -rf /usr/share/snmp/mibs/*\n\n# install Netdisco collection. it will move all directories which start with lower case letter or digit\nfind /tmp/netdisco-mibs-master -mindepth 1 -maxdepth 1 -type d -name '[a-z0-9]*' -exec mv {} /usr/share/snmp/mibs/ \\;\n\n# list what is installed\nls -1 /usr/share/snmp/mibs\n\n# cleanup\nrm -rf /tmp/netdisco*\n</code></pre> <p>To enable bare minimum MIBs we need to enable two catalogs \"rfc\" and \"net-snmp\".</p> <p>Overwrite/replace configuration by using:</p> <pre><code>echo \"\nmibs :\nmibdirs /usr/share/snmp/mibs/rfc:/usr/share/snmp/mibs/net-snmp\nmibs +ALL\n\" | sudo tee /etc/snmp/snmp.conf\n</code></pre> <p>Fun fact</p> <p>Modifying /etc/snmp/snmp.conf file the changes are applied on the fly. No need to restart anything.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#include-another-vendor","title":"Include another vendor","text":"<p>Let's say we need to work with Cisco equipment. We can double-check if vendor is included in Netdisco bundle. Grep for case insensitive name:</p> <pre><code>ls -1 /usr/share/snmp/mibs | grep -i Cisco\n</code></pre> <p>If the vendor is in list, then include \"cisco\" directory together with \"rfc\" and \"net-snmp\" directory, like this:</p> <pre><code>echo \"\nmibs :\nmibdirs /usr/share/snmp/mibs/rfc:/usr/share/snmp/mibs/net-snmp:/usr/share/snmp/mibs/cisco\nmibs +ALL\n\" | sudo tee /etc/snmp/snmp.conf\n</code></pre> <p>Adding multiple vendors is possible but it will slow down the translation speed. Adding plus one vendor usually add at least 1s more to the translation speed.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#conclusion_1","title":"Conclusion","text":"<p>We started by setting up the trap reception environment using snmptrapd and the zabbix_trap_receiver.pl script, then integrated it into Zabbix through the SNMP Trapper process. You also learned how to open the necessary firewall ports, configure log rotation for the trap file, and verify successful reception using test traps.</p> <p>In the Zabbix frontend, we created a host representing our SNMP device, added a catch-all trap item, and built dependent items to extract key values such as ifAdminStatus and ifOperStatus. From there, we constructed a simple yet effective trigger pair that raises an alert when a linkDown trap is received and automatically resolves it when a linkUp trap arrives.</p> <p>Combine traps with SNMP polling to balance real-time alerts with long-term performance metrics.</p> <p>SNMP traps are one of the most powerful mechanisms in Zabbix for achieving proactive monitoring. When properly configured, they provide immediate visibility into the health and state of your infrastructure, allowing you to respond to issues the moment they happen, not minutes later.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#questions","title":"Questions","text":"<ul> <li>What is the key difference between SNMP polling and SNMP traps in how they collect data?</li> <li>Why are SNMP traps often described as active monitoring while SNMP polling is passive?</li> <li>What is the purpose of the zabbix_trap_receiver.pl script, and where is it defined in the SNMP configuration?</li> <li>What role does the parameter StartSNMPTrapper play in zabbix_server.conf?</li> <li>In what kind of situations would you prefer SNMP traps over polling?</li> <li>How could you use SNMP traps in combination with SNMP polling for a hybrid monitoring strategy?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmptrap</li> <li>https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/misc/snmptrap</li> <li>https://www.net-snmp.org/</li> <li>https://datatracker.ietf.org/doc/html/rfc3416</li> <li>https://datatracker.ietf.org/doc/html/rfc1905</li> <li>https://datatracker.ietf.org/doc/html/rfc1157</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/","title":"SSH / Telnet","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/","title":"Zabbix Agent Active monitoring","text":"<p>In the previous part we installed our Zabbix agent and started monitoring a host in the <code>Passive</code> mode. When we use <code>Passive</code> mode the Zabbix server or proxy will connect to the Zabbix agent and request specific item data. The item data is returned within the same TCP session. From a security aspect this means that we need to allow our Zabbix servers or proxies to connect to many different servers.</p> <p>For security reasons this might not be the best course of action. Instead let's look at the Zabbix agent in <code>Active</code> mode. In <code>Active</code> mode or Zabbix agent will be configured to initiate the connection to the Zabbix server or proxy. It will request its configuration data and receive it back in the same TCP session. After receiving its configuration it can then start sending the item data according to the configuration received. The connection as such is always initiated from the Zabbix agent side, meaning you will allow your many agents to connect to your Zabbix servers or proxies instead.</p> <p></p> <p>4.24 Zabbix Agent active hosts</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#setting-up-the-active-agent","title":"Setting up the active agent","text":"<p>It's possible to set-up a Zabbix agent to work in both passive and active mode at the same time. Sometimes, we see this as passive mode was being used but an active only check is added later. The Zabbix agent in active mode can execute all item keys, whereas the passive agent cannot execute log item keys. Another reason to prefer active mode in most cases. For clarity, in our example we will use a different linux and windows server for the active agent. We will call these hosts:</p> <ul> <li>zbx-agent-active-rocky</li> <li>zbx-agent-active-windows</li> </ul> <p>Because the Zabbix active agent will need to know where to request its configuration and where to start sending data, the setup for the active agent is quite different. The set-up process however is the same for both Linux and Windows. Let's start by editing the Zabbix agent configuration file.</p> <p>open Zabbix agent configuration file</p> <p>Linux usually:</p> <p>``` vim /etc/zabbix/zabbix_agent2.conf <pre><code>Windows usually:\n\n``` Open C:\\Program Files\\Zabbix agent\\zabbix_agent2.conf with a text editor\n</code></pre></p> <p>Once the configuration is open, there are two important parameters in the configuration file. First, let's make sure our Zabbix agent will know where to connect to.</p> <p>edit ServerActive parameter</p> <p><code>ServerActive=192.168.46.30</code></p> <p>In the example <code>192.168.46.30</code> is the IP address of our Zabbix server (or proxy). Do not forget to remove <code>127.0.0.1</code> in this case. Its important to remember that our Zabbix agent in active mode will connect to every single IP address or DNS name entered in the <code>ServerActive=</code> parameter. Unlike <code>Server=</code> which functions as an allowlist.</p> <p>Next up, our Zabbix agent needs to know which configuration data to collect. It will connect to the Zabbix server (or proxy) on the IP specified and send over its <code>Hostname=</code> parameter. By default this is set to <code>Hostname=Zabbix server</code> which is incorrect in all cases except the Zabbix server itself. Lets change the configuration.</p> <p>edit Hostname parameter</p> <p>Linux:</p> <p>``` Hostname=zbx-agent-active-rocky <pre><code>Windows\n\n``` Hostname=zbx-agent-active-windows\n</code></pre></p> <p>It is also possible to comment the <code>#Hostname=</code> parameters, in which case it will use the <code>system.hostname</code> item key to determine the hostname. This makes it easy for environments where the hostname is the same on the system as it will be in Zabbix (best practice).</p> <p>There is also the <code>HostnameItem=</code> parameter which you can use to set your own item to determine the hostname used. This can be an existing item, but also a <code>UserParameter</code> (more on those later). With this functionality, you can even execute a bash or powershell script to set a custom hostname like that.</p> <p>With this configuration set you can restart the Zabbix agent to make the changes take effect. In <code>Windows</code> restart the service, for <code>Linux</code> issue the command below.</p> <p>restart Zabbix agent</p> <p><code>systemctl restart zabbix-agent2</code></p> <p>This finalizes the configuration file changes. Now we need to configure the host in Zabbix.</p> <p></p> <p>4.25 Zabbix Agent active hosts in Zabbix</p> <p>All we need to do here is make sure to match the hostname of what we configured in the Zabbix agent configuration file. Keep in mind that the <code>Hostname</code> field has to match the <code>Hostname=</code> parameter in the configuration file. The <code>Visible name</code> field does not have effect on the active agent functioning.</p> <p>We also add the host to the correct host group and that is all for now.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#creating-active-items","title":"Creating active items","text":"<p>Now that these settings all configured we can now start to create some items on our active agent host in Zabbix frontend. Let's click on <code>Items</code> for our host and configure a new Zabbix active type items.</p> <p></p> <p>4.26 Zabbix Agent active item</p> <p>Make sure to set the item <code>Type</code> to <code>Zabbix agent (active)</code>. Most item keys will be the same between <code>Passive</code> and <code>Active</code> mode, but the <code>Type</code> needs to be set correctly.</p> <p>Also, do not forget to add the tag to this item.</p> <p></p> <p>4.27 Zabbix Agent active item tag</p> <p>Your <code>ZBX</code> icon for this host should now turn green, even in active mode.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#conclusion","title":"Conclusion","text":"<p>Zabbix agent in <code>Passive</code> and in <code>Active</code> mode are quite similar. Their main difference being their methods of communications and some different functionalities outside of their core functions being the same. One big difference we haven't mentioned yet however is timestamps. The Zabbix server or proxy communicating with a Zabbix agent in<code>Passive</code> mode adds the timestamp for a collected value at the Zabbix server or proxy side. In <code>Active</code> mode however the timestamp is added directly upon item value collection on the Zabbix agent side. This makes the Zabbix agent in <code>Active</code> mode more accurate with timestamps, but more sensitive for incorrect time settings on your monitoring targets. Keep in mind to set-up NTP when using the Zabbix agent in <code>Active</code> mode, a good idea even outside of Zabbix monitoring. The Zabbix agent in <code>Active</code> mode will always use UTC+0 and send over the timestamp in unixtime.</p> <p>Finally, let's do a bit of a comparison between the two modes.</p> Active Zabbix agent Passive Zabbix agent Timestamp Zabbix agent Zabbix server or proxy (event)log items Supported Not supported Port No port listening, connect to 10051 Listening on 10050 Hostname Has to match Can be anything Remote commands Supported Supported","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/","title":"Zabbix Agent installation and Passive monitoring","text":"<p>At this point we are familiar with the Zabbix dataflow, how to create hosts and, add interfaces and items to a host. As a system administrator or anyone else working with Linux, Unix or Windows systems usually we jump right into installing the Zabbix agent and monitoring with it. Using our previous steps however, we have laid the groundwork for building a proper monitoring solution. We have prepared our systems before monitoring, which is the most important part to avoid <code>Monitoring fatigue</code> later on.</p> Note <p><code>Monitoring fatigue</code> and <code>Alert fatigue</code> are two terms heard in monitoring and observability.</p> <p><code>Alert fatigue</code> happens in Zabbix when you configure too many (incorrect) triggers. When you flood your dashboards or even external media like Teams or Signal with too many alerts your users will not respond to them any longer.</p> <p><code>Monitoring fatigue</code> happens in Zabbix when you misconfigure things like dashboards, items, host groups, tags and other internal systems that keep things structured. The result is that you or your co-workers do not want to use your own system any longer as it does not deliver the right information easily enough.</p> <p>Now, we are ready to start monitoring an actual system.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-basics","title":"Agent basics","text":"<p>We have prepared an example setup in our Book LAB environment.</p> <p></p> <p>4.14 Zabbix Agent passive hosts</p> <p>What we can see here is a setup you might see in any datacenter or office server cabinet. We have a Zabbix server monitoring one Windows server and one Linux server directly (or through a proxy). We call Zabbix a network monitoring solution as it communicates over the network. In Zabbix we have two methods of communication.</p> <ul> <li>Passive Otherwise known as <code>polling</code>. We communicate from the Zabbix server   (or proxy) towards the monitoring target. The monitoring target is listening   on a port waiting for Zabbix to request data.</li> <li>Active Otherwise known as <code>trapping</code>. We communicate from the monitoring   target towards the Zabbix server (or proxy). The Zabbix server is listening   on a port waiting for the monitoring target to send data.</li> </ul> <p>As you can imagine there is quite a big difference between these two methods of communication. Often times it depends on the protocol which method is preferred. For example SNMP traps are always an active type of check.</p> <p>The Zabbix agent however can communicate in either <code>Active</code> or <code>Passive</code> mode. It can even do those simultaneously. Simultaneous communication can be useful when you want to use <code>Passive</code> mode for all communication, but still want to execute some items that are <code>Active</code> only. <code>Active</code> items can do everything <code>Passive</code> items can do however.</p> <p>Before we can configure either though, we will have to install our Zabbix agent first. When installing on Linux and Windows we have a choice between two different agents, <code>Zabbix agent</code> and <code>Zabbix agent 2</code>. Both of these Zabbix agents are still in active development and receive both major (LTS) and minor updates. The difference between them is in Programming language and features.</p> Zabbix agent Zabbix agent 2 Features No focus to include new features Supports everything agent 1 does + more Programming language C GoLang Extensions C Loadable Modules GoLang plugins Platforms All Linux and Windows Concurrency In sequence Concurrently Storage on outage No Sqlite Item timeouts Agent wide Per plugin","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-linux","title":"Agent installation on Linux","text":"<p>Installation on Linux can be done in one of three ways. Through direct install files like <code>.rpm</code> and <code>.deb</code>, by building from sources and through packages pulled from the repository. Installation through the packages is preferred as this means Zabbix agent will be updated when updating with commands like <code>dnf update</code> and <code>apt upgrade</code>. Keep in mind, Zabbix agent is a piece of software just like any other and as such news versions will contain security and bug fixes. Whatever installation method you choose, keep your Zabbix agent up-to-date.</p> <p>We will be using the packages on both RedHat-based and Ubuntu to install <code>Zabbix agent 2</code>. To use the packages we will add the Zabbix repository first.</p> <p>add zabbix repository</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>After adding the repository, we should be able to install <code>Zabbix agent 2</code>.</p> <p>install Zabbix agent 2 package</p> <p>Redhat</p> <pre><code>dnf install zabbix-agent2\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-agent2\n</code></pre> <p>After installation make sure to start and enable the Zabbix agent.</p> <p>start Zabbix agent 2</p> <p>Redhat</p> <pre><code>systemctl start zabbix-agent2\nsystemctl enable zabbix-agent2\n</code></pre> <p>Your agent is now installed under the <code>zabbix</code> user and ready to be configured. On a Linux based system, by default we can find all of the Zabbix configuration files in <code>/etc/zabbix/</code>. Specifically we want to edit <code>/etc/zabbix/zabbix_agent2.conf</code>.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-windows","title":"Agent installation on Windows","text":"<p>On Windows, we have two options to install our Zabbix agent. Through downloading the <code>.exe</code> file and placing the configuration files in the right location or the easy option. Downloading the <code>.msi</code> and going through the installation wizard. Whichever method you prefer, you'll first have to navigate to the Zabbix download page. We will be using the <code>.msi</code> in our example.</p> <p>https://www.zabbix.com/download_agents?os=Windows</p> <p>Here you will be presented with the choice to download either <code>Zabbix agent</code> or <code>Zabbix agent 2</code>. Choose whichever one you would like to install, but by now we recommend <code>Zabbix agent 2</code> as it is stable and includes more features.</p> <p>Once downloaded, we can open the new <code>zabbix_agent2-x.x.x-windows-amd64-openssl.msi</code> file and it will take us to the wizard window.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 1</p> <p>Step 1 is a simple welcome screen, nothing to do here except click on <code>Next</code>.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 2</p> <p>For step 2, make sure to read the <code>License Agreement</code> (or don't, we do not give legal advice). Then click <code>Next</code>.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 3</p> <p>For step 3 we have some more actions to execute. By default the Zabbix agent on Windows <code>.msi</code> installer includes <code>Zabbix sender</code> and <code>Zabbix get</code>. These are separate utilities that we do not need on every Windows server. I will not install them now, but we can always use the <code>.msi</code> to install them later. The Zabbix agent will function fine without them.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 4</p> <p>Step 4 is our most important step. Here we will already configure our Zabbix agent configuration file, straight from the <code>.msi</code> installer. Let's make sure to set the <code>Hostname</code>, <code>Zabbix server IP/DNS</code> (<code>192.168.46.6</code> in our case) and let's also set the <code>Server or proxy for active checks</code> parameter. As you can see we could also immediately configure encryption with the <code>Enable PSK</code> option, but we will do this later.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 5</p> <p>Now there is nothing left to do except press <code>Install</code> and our Zabbix agent will be both installed and configured.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-unix","title":"Agent installation on Unix","text":"<p>For Unix based systems, simply download the files on the Zabbix download page for either <code>AIX</code>, <code>FreeBSD</code>, <code>OpenBSD</code> or <code>Solaris</code>.</p> <p>https://www.zabbix.com/download_agents</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-macos","title":"Agent installation on MacOS","text":"<p>For MacOS systems, simply download the files on the Zabbix download page and run through the <code>.pkg</code> installer.</p> <p>https://www.zabbix.com/download_agents?os=macOS</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-side-configuration","title":"Agent side configuration","text":"<p>Configuring the Zabbix agent is similar for all installations. Whether you are on <code>Linux</code>, <code>Unix</code>, <code>Windows</code> or <code>MacOS</code> you will always find the <code>../zabbix_agent2.conf</code> file. The parameters in this configuration file are mostly the same, regardless of the operating system.</p> <p>For <code>Passive</code> Zabbix agent connections we have only one important parameters to configure out of the box. The <code>Server=</code> parameter. This parameter functions as an allowlist, where we can add IP addresses, IP ranges and DNS entries to a list. All of the entries in this <code>Server=</code> allowlist will be allowed to make a connection to the <code>Passive</code> Zabbix agent and collect data from it.</p> <p>Edit your configuration file to include your Zabbix server (or proxy) IP address, IP range or DNS entry.</p> <p>edit the Server= parameter</p> <pre><code>Server=127.0.0.1,192.168.46.30\n</code></pre> <p>As you can see in the example, I've left <code>127.0.0.1</code>. Although not required, this can be useful in certain situations. Through the use of a comma <code>,</code> we have indicated that both <code>127.0.0.1</code> and <code>192.168.46.30</code> are allowed to connect. If you are running Zabbix server in HA mode or if you are using Proxy Groups, make sure to include all entries for the Zabbix components that need to connect.</p> <p>After making changes to the Zabbix agent configuration file, make sure to restart the Windows service. On Linux systems use <code>sytemctl</code> to restart.</p> <p>restart Zabbix agent</p> <pre><code>systemctl restart zabbix-agent2\n</code></pre> <p>If you do not restart, the changes will not take effect.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#zabbix-side-configuration","title":"Zabbix side configuration","text":"<p>On the Zabbix server side we can now create a new host to monitor. Let's call it <code>zbx-agent-passive-rocky</code> or <code>zbx-agent-passive-windows</code> and let's add the interface.</p> <p></p> <p>4.20 Zabbix Agent passive Linux host</p> <p>For Windows it looks similar.</p> <p></p> <p>4.21 Zabbix Agent passive Windows host</p> <p>With the host added, correctly with an interface, we can now start monitoring. To do so, let's create one <code>Zabbix agent</code> item type as an example. For your new host <code>zbx-agent-passive-rocky</code> or <code>zbx-agent-passive-windows</code> in the Zabbix frontend, click on <code>Items</code> and then <code>Create item</code> in the top right corner.</p> <p>Let's create an item <code>System hostname</code>, making sure that if we have more system items alphabetical sorting will group them together. For <code>Passive</code> Zabbix agent the type <code>Zabbix agent</code> is used and we have to specific an <code>Interface</code>. We will use the item key <code>system.hostname</code>.</p> <p></p> <p>4.22 Zabbix Agent passive host item</p> <p>Do not forget to add the standard <code>Component</code> tag to the item to follow the best practise.</p> <p></p> <p>4.23 Zabbix Agent passive host item tag</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#conclusion","title":"Conclusion","text":"<p>Installing the Zabbix agent can be done with either <code>Zabbix agent</code> or <code>Zabbix agent 2</code>. By now <code>Zabbix agent 2</code> is recommended when available, but <code>Zabbix agent</code> is also still fully supported. Make sure to install the Zabbix agent through the most easily secured method and keep it updated.</p> <p>Once installed, for <code>Passive</code> communication we will use the <code>Server=</code> parameter to keep our agent secured. We do not want everyone to be able to connect to this agent, even when there might still be a firewall or two in between.</p> <p>Last but not least, keep <code>Active</code> versus <code>Passive</code> in mind. Depending on where the server is located, it might be preferred to open up ports through your firewall(s) incoming our outgoing. Usually we prefer <code>Active</code> communication, because it means we do not have to give a central server (Zabbix server and proxy) access to all our servers. But in specific cases <code>Passive</code> might be preferred.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/","title":"Zabbix Internals","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#conclusion","title":"Conclusion","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#questions","title":"Questions","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#useful-urls","title":"Useful URLs","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/","title":"Zabbix trapper","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch05-zabbix-triggers/advanced-triggers/","title":"Advanced triggers","text":"","tags":["expert"]},{"location":"ch05-zabbix-triggers/chapter/","title":"Setting up triggers","text":"<p>In this chapter, we'll explore triggers in depth, starting with the basics of setting up step triggers and progressively moving into advanced trigger configurations. You'll gain a thorough understanding of how triggers work, ensuring you can leverage them effectively to monitor your infrastructure.</p> <p>We'll take a deep dive into the mechanics of triggers, examining how they evaluate conditions and generate alerts. This section will also address the important topic of monitoring and alerting fatigue, providing strategies to fine-tune your triggers to reduce unnecessary alerts while maintaining optimal system oversight.</p> <p>By the end, you'll have the knowledge to set up both simple and complex triggers, helping you maintain a well balanced monitoring system that minimizes noise and focuses on what truly matters.</p>"},{"location":"ch05-zabbix-triggers/triggers/","title":"Triggers","text":"<p>In the previous chapter we have been hard at work to collect our data from various monitoring targets. Because of that our Zabbix environment is filled with useful and important information about our IT infrastructure. However, when you want to know something about your various different devices and applications you have to go through a mountain of data. This is where triggers come in.</p> <p>Triggers in Zabbix work as a way for us to collect a mountain worth of data, while being alerted about what's important. It allows us to set our own expressions that will define exactly when Zabbix should log and alert us about something happening with our data. The easiest example being something like a CPU going to 90% utilization.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#preparing-the-environment","title":"Preparing the environment","text":"<p>In the previous chapter we created some hosts to monitor the active Zabbix agent, which are great for some example triggers. We created this host under the hostname <code>zbx-agent-active-rocky</code> or <code>zbx-agent-active-windows</code>, either should work for the example. We also should already have an item on this host to monitor the <code>Zabbix agent ping</code> with item key <code>agent.ping</code>. Let's add one item to our <code>zbx-agent-active-*</code> host, specifically to monitor the CPU load in percentage.</p> <p></p> <p>5.1 Zabbix Agent active CPU util item</p> <p>Let's not forget to add the tag.</p> <p></p> <p>5.2 Zabbix Agent active CPU util item tag</p> <p>With this item created, we have two great examples on our Zabbix agent active host for creating some basic triggers.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#trigger-creation","title":"Trigger creation","text":"<p>Let's now create two very common triggers in our Zabbix environment. Go to <code>Data collection | Hosts</code> and navigate to either your Linux or Windows <code>zbx-agent-active-*</code> host and click on <code>Triggers</code>. In the top right corner you can now click on <code>Create trigger</code> to start.</p> <p></p> <p>5.3 Empty trigger creation form</p> <p>To start with the basics we can see the follow information at the top part of our trigger creation form.</p> <ul> <li>Name</li> <li>Event name: The name of the event and problem you will see Monitoring | Problems</li> <li>Operational data</li> <li>Severity</li> <li>Expression</li> <li>OK event generation</li> </ul>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#name","title":"Name","text":"<p>The name of the trigger is important as it will be used for the name of our events and problems created from this trigger. For example if you would navigate to <code>Monitoring | Problems</code>, the triggers you see here will probably have the same name as a trigger.</p> <p>It doesn't have to be unique, meaning we can have multiple triggers with the same name. As long as the combination of <code>Name</code> and <code>Expression</code> is unique.</p> <p>Let's fill in <code>Zabbix agent not seen for &gt;5m</code>.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#event-name","title":"Event name","text":"<p>The <code>Event name</code> is very similar to the <code>Name</code> field, as it will be used to name the events and problems created from this trigger. However, when <code>Event name</code> is used, the <code>Name</code> field will no longer form the name of events and problems. <code>Event name</code> serves as an override for the <code>Name</code> field.</p> <p>The <code>Event name</code> field allows us to create longer and used more extensive macro functionality compared to the <code>Name</code> field. This is why it can be useful in some scenarios, but it is not mandatory to use it.</p> <p>Let's leave this empty for now.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#operational-data","title":"Operational data","text":"<p>Whenever we create a trigger, once the trigger goes into a problem state it will create a problem event in the background within Zabbix. This problem event in term then creates a <code>Problem</code> in Zabbix which we can find under <code>Monitoring | Problems</code>. It's important to keep in mind that event and problem names are always static. Even when the trigger name or trigger event name is updated later, existing event and problems will not get a new name until they resolve and go into problem state again.</p> <p>This is where <code>Operational data</code> becomes useful. It can be used to show dynamic information next to your problem names. This will allow you to for example use a macro like <code>{ITEM.LASTVALUE}</code> to always show the latest item value related to this triggers item(s).</p> <p>Let's fill in <code>{ITEM.VALUE}</code> and <code>{ITEM.LASTVALUE}</code></p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#severity","title":"Severity","text":"<p>This field is mandatory, as it is a selector we have to pick something with. By default Zabbix sets it to <code>No classified</code>, which is a severity rarely used outside of Zabbix internal problems. Instead we often pick one of the other 5 severities to indicate how important a problem created from this trigger is.</p> <p>For example, <code>Informational</code> is often used to indicate something we just want to log. Specifically, often <code>Informational</code> is something we do not necessarily want to see on our dashboards or receive external alerts from. <code>Disaster</code> on the other end however is often used to indicate something that requires immediate attention. The <code>Warning</code>, <code>Average</code> and <code>High</code> severities can be used to classify anything in between. My favourite basic setup usually looks like below.</p> <ul> <li>Informational: Just for logging and not showing on dashboards</li> <li>Warning: Requires attention, shown on dashboards</li> <li>Average: Requires more immediate attention, send out email or Slack/Teams message</li> <li>High: Requires attention even out of office hours, send SMS or Signal message</li> <li>Disaster: Problem with severe implications to the business, possible higher SMS or Signal escalation</li> </ul> <p>This is of course just an example of how you could use the different severities and it will depend on your organisation and setup if this is actually implemented as such. The key here is that the severity can be used later to filter in various locations. Like dashboards for showing problems and actions for sending out alerts.</p> <p>Let's select <code>High</code> for now.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#expression","title":"Expression","text":"<p>The expression of the trigger is arguably the most important part. This is where we are going to define exactly how our trigger will detect the problem. Zabbix comes with many different functions to detect problems in an almost unlimited number of ways. But the basis is simple.</p> <p>We collect values from an <code>Item</code> using a <code>Function</code> applied to a number of values or time period (namely <code>Last of (T) Count/Time</code>). To this collect set of values we set a operator and constant (namely <code>Result</code>) to indicate what we want the result of our expression to be. This is in the end a whole lot of words to say, more simply put, we select and item to collect values from and then state what we want those values to look like to show a problem in Zabbix.</p> <p>Let's click on the <code>Add</code> button now an used the expression builder. For <code>Item</code> we select <code>Zabbix agent ping</code>, for <code>Function</code> we select <code>nodata</code>, for <code>Last of (T)</code> we set <code>5m</code> and for <code>Result</code> we set <code>= 1</code>. Then press <code>Insert</code> to automatically create the expression below.</p> <p></p> <p>5.4 Example trigger expression</p> <p>The expression is now built automatically and we do not need to write the whole syntax correctly ourselves. This trigger will now detect if <code>nodata</code> (is true <code>=1</code>) has been received on the item <code>agent.ping</code> for host <code>zbx-agent-active-rocky</code> (or <code>zbx-agent-active-windows</code> if you used that instead). It will only detect that however if <code>nodata</code> was received for more than 5 minutes (<code>,5m</code>).</p> <p>The <code>nodata</code> function used in this trigger is a bit special, as it specifically can trigger if no data was received (true <code>=1</code>) or if data was received (false <code>=0</code>) over a time period. This is what we call a time based trigger in Zabbix, whereas most other triggers only trigger when an item receives data instead. More on those later.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#ok-event-generation","title":"OK event generation","text":"<p>In the case of this trigger, <code>OK event generation</code> is set to <code>Expression</code>. This means that the trigger expression will simply use the existing problem <code>Expression</code> to detect when the trigger creates an <code>OK</code> event. With our <code>nodata</code> trigger this will be whenever data has been received again, as the no data for 5 minutes will no longer be true.</p> <p>In short:</p> <ul> <li>Trigger expression is true: Problem event is created and problem starts</li> <li>Trigger expression is false: OK event is generated and existing problem resolves</li> </ul> <p>Our trigger should now look like the image below.</p> <p></p> <p>5.5 Zabbix agent not seen for 5m trigger</p> <p>Let's not forget to also add a tag to this trigger. On triggers in Zabbix the best practice is to create a <code>Scope</code> tag to indicate what the trigger is going to be about. We usually pick on of 5 options.</p> <ul> <li>availability</li> <li>performance</li> <li>notification</li> <li>security</li> <li>capacity</li> </ul> <p></p> <p>5.6 Zabbix agent not seen for 5m trigger tag</p> <p>We can now click on the <code>Add</code> button at the bottom of the form and our trigger is done! If we stop our Zabbix agent with <code>systemctl stop zabbix-agent2</code> we should get a new problem after 5 minutes.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#another-trigger","title":"Another trigger","text":"<p>Before we stop our chapter here though, let's go through one more trigger example. We also created a new item to monitor the monitoring target CPU utilization. A perfect example for another trigger. Let's create it like the image below.</p> <p></p> <p>5.7 CPU utilization over 90% trigger</p> <p>Don't forget to add the tag <code>scope:performance</code> and then add the trigger by clicking the <code>Add</code> button at the bottom of the form.</p> <p>Breaking down this expression we can see a very similar setup as the previous trigger. But this is not a time based trigger and it will not trigger based on a simple data being received or not. Instead this trigger uses the function <code>min</code> over a time period of 3 minutes (<code>3m</code>) and with the operator and constant <code>=&gt;90</code>.</p> <p>Simply put, this trigger will be evaluated every time new data is received on the item <code>proc.cpu.util</code>. We created that item earlier, with an update interval of 1 minute (<code>1m</code>). In a time period of 3 minutes that means we could have received the following.</p> <ul> <li>95%</li> <li>80%</li> <li>99%</li> </ul> <p>In this case, the CPU utilization is spiking shortly over 90%. The problem however will not start, because we used the <code>min</code> function. Function <code>min</code> and <code>max</code> are some of the most useful function in Zabbix, as they can be used to filter spikes and drops respectively. Since we used <code>min</code> in our expression, the result will be <code>80%</code> as that is the minimum (smallest) value in our 3 minute time period. If our data looked like below however, the result would be different.</p> <ul> <li>90%</li> <li>99%</li> <li>97%</li> </ul> <p>In this case our minimum value is <code>90%</code>, which is indeed equal to or higher than 90 as stated in the expression with <code>=&gt;90</code>.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#conclusion","title":"Conclusion","text":"<p>Triggers in Zabbix can be used to detect problems and automatically resolved them based on the data received on items in Zabbix. We do not have to create triggers for all of our items in Zabbix (see Zabbix dataflow in the previous chapter), but they can be useful on important data.</p> <p>A few more tips to keep in mind when working with triggers. Make sure to keep your severities setup correctly, as this is one of the most important parameters for filtering later. They are very important to create alerting correctly later.</p> <p>It is also a good idea to keep your trigger names short and descriptive. <code>CPU utilization &gt;90%</code> is a lot easier to understand than <code>CPU utilization on the server has been over 90% for the past three minutes</code>. People are usually in a rush, especially when there is a problem with IT infrastructure. The more reading you have to do in that situation, the less likely you are to see the issue straight away.</p> <p>The best tip regarding triggers? A good trigger shows you the problem. A great trigger instantly makes you think of where to go and what to do to solve it.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch06-zabbix-templates/chapter/","title":"Building and using templates","text":"<p>A great way to guide users towards a deeper understanding of Zabbix is by initially holding off on templates and gradually introducing them much like in formal training. In this chapter, we'll start by explaining the basic usage of default templates and how to find new ones, helping you get up and running with minimal effort.</p> <p>Once you're comfortable with default templates, we\u2019ll dive into building your own templates, offering detailed instructions on customization and best practices. We\u2019ll also cover how to share your templates within the Zabbix community, fostering collaboration and knowledge exchange.</p> <p>To round off, we'll feature Tags and Macros, explaining their roles within templates and why they're most effective when understood in the context of template usage. This structured approach will ensure you grasp the full potential of templates and their associated features in Zabbix.</p> <p>By the end of this chapter, you'll be well versed in both using and creating templates, equipped to enhance your monitoring setup and contribute to the broader Zabbix ecosystem.</p>"},{"location":"ch06-zabbix-templates/templates/","title":"Working with templates","text":"<p>Templates are one of the most fundamental building blocks in Zabbix. They define what and how to monitor, and serve as reusable configuration blueprints that can be applied to any number of hosts. By grouping related items, triggers, graphs, discovery rules, and macros into a single logical entity, templates make it possible to standardize and scale monitoring efficiently.</p> <p>Zabbix 8.0 emphasizes a monolithic, self contained design. While template linking is still supported for compatibility, the recommended approach is to use standalone templates for simplicity and portability. A deliberate departure from the older inheritance based approach. used in previous versions. This design philosophy makes templates easier to export, share, and maintain, especially when managing multiple environments or distributing monitoring logic across teams.</p> Fun fact <p>In earlier releases such as Zabbix 3.0, there were only around 30\u201340 built-in templates available out of the box. In contrast, Zabbix 8.0 ships with hundreds of official templates and integrations, covering everything from operating systems and databases to cloud platforms and network devices. This dramatic growth highlights how Zabbix has evolved into a full-featured monitoring ecosystem with native support for nearly any technology stack.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-fundamentals","title":"Template Fundamentals","text":"<p>A template in Zabbix encapsulates all the elements required to monitor a specific technology or system. This can range from a simple operating system agent to a complex multi-layer application such as PostgreSQL, VMware, or Kubernetes.</p> <p>Each template can include:</p> <ul> <li>Items: definitions of data to collect (e.g., system.cpu.load, vfs.fs.size[/,free]).</li> <li>Triggers: logical expressions that evaluate collected data to identify problem   conditions.</li> <li>Graphs: visual representations of collected metrics.</li> <li>Discovery Rules: automated mechanisms to detect entities (like filesystems   or interfaces) and dynamically create item prototypes.</li> <li>Value Maps: mappings that translate raw data into human-readable text.</li> <li>Macros: reusable variables that make templates configurable and environment   agnostic.</li> <li>Tags: metadata used for filtering, correlation, and alert routing.</li> <li>Dashboards: predefined visualization layouts attached to the template.</li> </ul> <p>Templates are linked to hosts to apply these monitoring definitions. Once linked, the host immediately inherits all monitoring logic from the template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#the-monolithic-template-model","title":"The Monolithic Template Model","text":"<p>Before Zabbix 6.x, templates could be built hierarchically, using inheritance between parent and child templates. While powerful, this approach often led to dependency complexity, version mismatches, and export/import challenges.</p> <p>Starting with Zabbix 6.4 and refined in 7.x, the preferred design is monolithic templates meaning each template is self contained and does not rely on inheritance. This makes templates easier to:</p> <ul> <li>Export and share as standalone YAML files.</li> <li>Version control in Git or CI/CD environments.</li> <li>Import without dependency conflicts.</li> </ul> <p>Monolithic templates are also simpler to maintain, as all configuration elements are defined within one object, avoiding the \u201ctemplate chain\u201d problem where one missing dependency breaks the import process.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-uuids","title":"Template UUIDs","text":"<p>Starting with Zabbix 6.2, every configuration entity, including templates, is assigned a Universally Unique Identifier (UUID). This fundamentally changed how Zabbix tracks and synchronizes configuration objects across different environments.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-of-uuids","title":"Purpose of UUIDs","text":"<p>Before UUIDs were introduced, Zabbix relied on template names to identify and match templates during import/export. This created issues when two templates had identical names or when renaming templates between environments.</p> <p>UUIDs solve this problem by providing a persistent, globally unique reference for each template, independent of its name or internal database ID.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#benefits","title":"Benefits","text":"<ul> <li>Reliable synchronization: Imports and updates use the UUID, preventing duplication   and mismatched merges.</li> <li>Conflict prevention: Avoids overwriting templates with the same name.</li> <li>Version-control stability: Git-based workflows can track the same object   across environments.</li> <li>Improved automation: APIs and pipelines can safely address templates by UUID   rather than numeric IDs.</li> </ul> <p>Example YAML template:</p> <pre><code>zabbix_export:\n  version: '8.0'\n  templates:\n    - uuid: a4c1d0f2d7de4a40a8b347afeb9a88df\n      template: 'Template OS Rocky Linux'\n      groups:\n        - name: 'Templates/Operating Systems/Linux'\n      items:\n        - uuid: f0c1b836c81d4bba9419dc12bce7e411\n          name: 'System uptime'\n          key: 'system.uptime'\n          type: ZABBIX_AGENT\n</code></pre> Behavior and Persistence <p>The UUID remains constant even if the template is renamed or moved between groups. However, when a template is cloned or copied, Zabbix generates new UUIDs for the template and all of its entities. This ensures the cloned template is treated as a distinct object and does not conflict with the original during import, export, or API synchronization.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#what-happens-when-you-clone-a-template","title":"What Happens When You Clone a Template","text":"<p>When you clone or copy a template (for example, to customize it), Zabbix creates a completely new object. All nested entities like items, triggers, discovery rules, dashboards, etc. will receive new UUIDs.</p> <p>This means your cloned template is independent:</p> <ul> <li>It will not overwrite the original during imports.</li> <li>It can coexist safely even if it has a similar name.</li> <li>It is ideal for creating customized variants of official templates.</li> </ul> Note <p>If you manually remove or alter UUIDs in the YAML file, Zabbix treats it as a new object on import.</p> Best practice <p>Add a suffix or prefix such as (Custom) to distinguish cloned templates and document their origin in the template notes like: - Origin: Linux by Zabbix agent - Based on UUID: a4c1d0f2d7de4a40a8b347afeb9a88df</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-groups","title":"Template Groups","text":"<p>Template groups in Zabbix are used for <code>organization</code> and <code>access control targeting</code>. They provide a logical way to categorize templates (for example, Operating Systems, Databases, Network Devices), but they do not themselves define access rights.</p> <p>A template group itself does not carry permissions. Instead, <code>user groups</code> are granted <code>permissions</code> on <code>template groups</code>. These permissions determine whether members of a user group can view (read-only) or modify (read-write) the templates contained within those groups when working in the frontend.</p> <p>In other words:</p> <ul> <li>Template groups: organize and classify templates.</li> <li>User groups: hold the permissions that control access to those template groups.</li> </ul> <p>This model provides flexible role based access control (RBAC): administrators can manage access centrally by assigning or revoking permissions for user groups rather than editing individual templates.</p> <p>If you like to make a new template group then they can be found under <code>Data collection</code> \u2192 <code>Host groups</code> \u2192 <code>Create template group</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#permissions-and-access-control","title":"Permissions and Access Control","text":"<p>In Zabbix 8.0, access to templates is controlled by a combination of <code>user roles</code> and <code>usergroup</code> permissions.</p> <ul> <li>Roles define what actions a user can perform globally. Such as viewing problems,   acknowledging events, or modifying configuration.</li> <li>User groups: define which objects the role can act on by granting <code>Read-only   (RO)</code> or <code>Read-write (RW)</code> permissions to specific object groups (host groups,   template groups, map groups, etc.).</li> <li>Template groups are simply one of those object groups: a scope to which permissions   can be applied.</li> </ul> <p>For example, a user role may allow configuration changes, but the user will only be able to modify templates that belong to template groups where their user group has RW access.</p> <p>This separation provides precise control between what actions are allowed and where they are allowed.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#impact-of-template-permissions","title":"Impact of template permissions","text":"<p>Although template group permissions primarily govern configuration access, they can also influence operational behavior in the frontend. When users view or interact with problems, their ability to take certain actions depends both on their role and their permissions for the underlying host or template.</p> Action Read-only (RO) Read-write (RW) Acknowledge problem \u2705 \u2705 Add comment / update status \u2705 \u2705 Suppress problem \u2705 \u2705 Change problem severity \u274c \u2705 Manually close problem \u274c \u2705 Modify trigger severity \u274c \u2705 Edit or link templates \u274c \u2705 Tip <p>Read-only users can acknowledge or suppress issues but cannot change severity or manually close problems.</p> <p>As an example in Zabbix:</p> <p>Consider two distinct user groups with different roles and permissions:</p> <ul> <li>Operations (RO): Members can view hosts and problems, acknowledge or suppress   issues, but cannot change severity levels or modify triggers.</li> <li>Monitoring Admins (RW): Members can edit templates, adjust trigger logic,   and manually close problems.</li> </ul> <p>If both groups monitor hosts that use templates from Templates/Applications/Databases:</p> <ul> <li>Operations: can acknowledge and suppress problems as part of daily triage.</li> <li>Monitoring Admins: can modify or tune the underlying template configuration   when a systemic issue is detected.</li> </ul> <p>This segregation maintains stability. Operations staff can handle incidents, while admins manage definitions.</p> Note <p>Template group permissions control configuration visibility, but operational access (to data and problems) still depends on host group permissions.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#permissions-and-roles-how-access-really-works","title":"Permissions and Roles \u2013 How Access Really Works","text":"<p>Zabbix enforces permissions through user groups and roles, not through inheritance between objects. There is no automatic propagation of permissions from template groups to host groups or between templates and the hosts that use them.</p> <ul> <li>Roles determine what actions users may perform (view, edit, acknowledge,   configure, etc.).</li> <li>User groups determine where those actions may occur by assigning RO/RW/Deny   rights on object groups.</li> <li>Template groups and host groups are independent targets. A user with RW access   to a host group does not automatically gain rights to the related template group,   and vice versa.</li> </ul> <p>This clear separation ensures operational access (hosts) and configuration access (templates) remain distinct, preventing unintended modifications.</p> Note <p>Roles (user, admin and super admin) define what you can do. Usergroup permissions define where you can do it.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#best-practices-for-permissions","title":"Best Practices for Permissions","text":"<ul> <li>Separate operational and design access: Grant RO rights to operations teams   for monitoring, and RW rights to administrators maintaining templates.</li> <li>Align permissions logically: If a user group manages database hosts, grant   them RW access to both the relevant host groups and the corresponding <code>Templates/Databases</code>   group.</li> <li>Review permissions regularly: Periodically audit usergroup assignments to   ensure only authorized teams have configuration privileges.</li> <li>Use clear naming conventions for groups: Distinguish functional scopes (Templates/OS/Linux)   from organizational ones (Templates/Customers/Prod). This improves clarity when   assigning permissions in large environments.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-subgroups","title":"Template Subgroups","text":"<p>Zabbix 3.2 introduced nested template groups (subgroups), enabling a hierarchical structure similar to host groups. Subgroups allow administrators to build organized, multi-level collections of templates, which improves navigation and permission granularity.</p> <p>Subgroups are created in Zabbix by adding a <code>/</code> in the group names. For example if we want to create a group <code>Databases</code> as a subgroup of <code>Templates</code> then we only need to create the new group like this: <code>Templates/Databases</code>. However it's recommended to create <code>Templates</code> first.</p> <p>Example hierarchy:</p> <pre><code>Templates\n\u251c\u2500\u2500 Operating Systems\n\u2502   \u251c\u2500\u2500 Linux\n\u2502   \u251c\u2500\u2500 Windows\n\u2502   \u2514\u2500\u2500 Network Appliances\n\u2514\u2500\u2500 Applications\n    \u251c\u2500\u2500 Databases\n    \u2502   \u251c\u2500\u2500 PostgreSQL\n    \u2502   \u251c\u2500\u2500 MySQL\n    \u2502   \u2514\u2500\u2500 Oracle\n    \u2514\u2500\u2500 Web Servers\n</code></pre> <ul> <li>Hierarchy for organization and permissions only: Subgroups do not change how   templates link to hosts; they are purely structural.</li> <li>Automatic downward inheritance: If a user group has RW or RO access to a   parent template group, that access automatically extends to all its existing   subgroups. You can still assign explicit permissions on individual subgroups   to override inherited rights.</li> <li>Parent-creation edge case: When you create a new parent group for an already   existing subgroup (for example, creating Applications when Applications/Databases   already exists), no permissions are automatically assigned to the new parent.   Administrators must manually grant permissions on the parent group if required.</li> <li>Search and filtering benefits: The hierarchical view makes it easier to locate   and manage templates in large environments.</li> <li>Consistency with host groups: Subgroup behavior and inheritance are identical   for host groups and template groups, providing a uniform organizational model.</li> </ul> Tip <p>Use top-level groups for broad classifications (e.g., Templates/Applications) and subgroups for vendor or technology specialization. Assign RW rights at the top level for global administrators, and finer-grained access on subgroups for specialized teams.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#tags","title":"Tags","text":"<p>Tags are metadata elements used throughout Zabbix for event classification, filtering, correlation, and alert routing. They attach semantic meaning to triggers, items, or templates, helping to describe what the metric or event represents.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Tags</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-of-tags","title":"Purpose of Tags","text":"<ul> <li>Event correlation: tags are used by the event correlation engine to match   or suppress related problems.</li> <li>Alerting and automation: tags appear in actions, allowing conditional notifications   or escalations.</li> <li>Service mapping: tags link triggers and events to defined business services.</li> <li>Filtering: dashboards, reports, and API queries can filter by tag values.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#examples","title":"Examples","text":"<p>For a PostgreSQL database template: <pre><code>service: database\ncomponent: backend\n</code></pre></p> <p>For a network device template: <pre><code>vendor: cisco\ninterface: uplink\n</code></pre></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-to-consider","title":"Some good practices to consider","text":"<ul> <li>Use consistent naming for tag keys across templates (e.g., service, component,   role).</li> <li>Avoid over tagging; focus on attributes useful for filtering or alerting.</li> <li>Use lower case, underscore separated keys for uniformity.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#tag-inheritance-and-merging-behavior","title":"Tag Inheritance and Merging Behavior","text":"<p>When templates are linked to hosts and hosts or items already define their own tags \u2014 Zabbix merges all tag sources into a single event level tag set. Understanding this inheritance order is crucial for predictable alerting and correlation.</p> <pre><code>flowchart TB\n  %% --- TEMPLATED ENTITIES PATH (vertical) ---\n  subgraph TEMPLATED[\"Templated entities\"]\n    direction TB\n    TPL[\"Template tags:\nservice=database\ncomponent=backend\"]\n    H_TPL[\"Host tags (applied to templated entities):\nregion=europe\nenv=prod\"]\n    TPL_TRIG[\"Template trigger tags:\nseverity=high\"]\n    TPL_ITEM[\"Template item tags:\ncomponent=replication\"]\n    EV1[\"Event (templated trigger)\nMerged tags:\nservice=database\ncomponent=backend\ncomponent=replication\nseverity=high\nregion=europe\nenv=prod\"]\n    TPL --&gt; H_TPL --&gt; TPL_TRIG --&gt; TPL_ITEM --&gt; EV1\n  end\n\n  %% --- LOCAL ENTITIES PATH (vertical) ---\n  subgraph LOCAL[\"Local entities (on Host)\"]\n    direction TB\n    H_LOC[\"Host tags (local entities):\nsite=be-brussels\nteam=ops\"]\n    LOC_TRIG[\"Local trigger tags:\nclass=local\"]\n    LOC_ITEM[\"Local item tags:\nsensor=temp\"]\n    EV2[\"Event (local trigger)\nMerged tags:\nsite=be-brussels\nteam=ops\nclass=local\nsensor=temp\"]\n    H_LOC --&gt; LOC_TRIG --&gt; LOC_ITEM --&gt; EV2\n  end\n</code></pre> <p>Interpretation:</p> <p>Zabbix merges tags from top to bottom. Template level tags are the most general, while item level tags are the most specific. All resulting tags flow into the generated event.</p> <p>Inheritance Order explained:</p> <ol> <li>Item-level tags \u2192 applied directly to collected metrics (most specific).</li> <li>Trigger-level tags \u2192 apply to problems generated by the trigger.</li> <li>Host-level tags \u2192 inherited only by items and triggers that originate from    linked templates on that host (they do not apply automatically to locally    defined host items/triggers).</li> <li>Template-level tags \u2192 base tags from all linked templates.</li> </ol> <p>The final event inherits all tags from these levels, with duplicates automatically removed.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#conflict-handling","title":"Conflict Handling","text":"<ul> <li>If the same tag key appears multiple times with different values, all values are   kept.</li> <li>Duplicate key\u2013value pairs are deduplicated.</li> <li>Tags are additive, not overridden. Unlinking or clearing a template removes only   that template\u2019s tags from future events.</li> </ul> <p>Example :</p> Source Tag Key Tag Value Linux by Zabbix agent <code>service</code> <code>os</code> PostgreSQL by Zabbix agent 2 <code>service</code> <code>database</code> Host <code>region</code> <code>europe</code> Item <code>component</code> <code>replication</code> <p>The resulting event tags will be: <pre><code>service: os\nservice: database\nregion: europe\ncomponent: replication\n</code></pre></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-when-tagging","title":"Some good practices when tagging","text":"<ul> <li>Keep template level tags generic (e.g., service: database).</li> <li>Use host level tags for environmental context (e.g., region: europe, customer:   acme).</li> <li>Apply item/trigger-level tags for event specificity (component: disk, component:   replication).</li> <li>Regularly audit merged event tags under Monitoring \u2192 Problems \u2192 Tags to verify   inheritance behavior.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-macros","title":"Template macros","text":"<p>Macros are variables that make templates flexible and reusable. They define thresholds, credentials, or paths that can be adjusted per environment without editing template logic.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Macros</code></p> <p></p> <p>Example:</p> <pre><code>{$CPU_UTIL_MAX}=90\n{$MEMORY_WARN}=75\n</code></pre> <p>Macros can be defined globally, at the template level, host-group level, or host level, and can be overridden according to a strict precedence order.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#macro-precedence-and-conflict-resolution","title":"Macro Precedence and Conflict Resolution","text":"<p>When multiple templates linked to the same host define the same macro, Zabbix resolves conflicts by comparing template IDs.</p> <p>:warning: The macro from the template with the lowest template ID takes precedence.</p> <p>Example:</p> Template Name Template ID Macro Value Template OS Linux 10101 <code>{$CPU_UTIL_MAX}</code> 85 Template App PostgreSQL 10115 <code>{$CPU_UTIL_MAX}</code> 90 <p>\u2192 The oldest template (lowest ID) wins \u2192 {$CPU_UTIL_MAX}=85.</p> <p>Precedence Hierarchy:</p> Level Description Notes 1. Host macro Defined on host Highest priority 2. Template macro Lowest template ID wins if duplicate Applies to linked templates 3. Global macro Default fallback Lowest priority","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices","title":"Some good practices","text":"<ul> <li>Keep macro names unique within template families.</li> <li>Use host-level overrides for environment-specific adjustments.</li> <li>Document shared macros to prevent conflicts.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#value-maps","title":"Value Maps","text":"<p>Value maps convert raw numeric or coded values into meaningful, human readable text. They make dashboards, triggers, and data views more intuitive. For example, turning SNMP status codes like 1, 2, 3 into Up, Down, Unknown.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Value maps</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#scope-and-availability","title":"Scope and Availability","text":"<p>Value maps exist in two distinct scopes in Zabbix 8:</p> Scope Created In Can Be Used By Shared With Template-level value map Inside a template definition Items belonging to that same template \u274c Not accessible from other templates or hosts Host-level value map Directly on a specific host Items defined directly on that host \u274c Not accessible by other hosts or templates Note <p>There is no such thing as a global value map. Each map is strictly local to its parent template or host. To reuse a map elsewhere, you must export/import or recreate it under the new object.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#types-of-mappings","title":"Types of Mappings","text":"<p>A value map can contain one or more mapping rules, which determine how an incoming raw value is translated.</p> <p>Zabbix 8 supports the following mapping rule types:</p> Mapping Type Description Example Exact value One-to-one translation of a specific value <code>1 \u2192 Up</code>, <code>2 \u2192 Down</code>, <code>3 \u2192 Unknown</code> Range mapping Applies to any value within a range <code>0\u201349 \u2192 Normal</code>, <code>50\u201379 \u2192 Warning</code>, <code>80\u2013100 \u2192 Critical</code> Pattern (regex) Matches values by regular expression <code>^ERR.* \u2192 Error detected</code> Default value Fallback if no other rule matches <code>* \u2192 Undefined</code> <p>Mappings are evaluated from top to bottom \u2014 the first match wins.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-template-level-value-map","title":"Example: Template-Level Value Map","text":"<p>In a custom Template Network Switch, you might define:</p> Raw value Mapped text 1 Interface Up 2 Interface Down 3 Interface Testing * Unknown State <p>Items inside the template that return SNMP interface status (ifOperStatus) can reference this value map directly.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-host-level-value-map","title":"Example: Host-Level Value Map","text":"<p>For a specific host, e.g. Switch A, you might define:</p> Raw value Mapped text 1 Operational 2 Non-operational <p>Only items defined directly on Switch A (not inherited from a template) can use this map. If the same host a template is applied, that host will use the template\u2019s value map instead of the host-level one for items from the template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-for-value-maps","title":"Some good practices for value maps","text":"<ul> <li>Keep template level value maps technology specific (e.g. SNMP interface, SMART   disk status).</li> <li>Define host level maps only when customization is necessary for that device.</li> <li>Maintain consistent naming conventions (Interface Status, Disk Health) across   templates to simplify export/import.</li> <li>If multiple templates require the same mapping logic, simply define identical   value maps within each template. Zabbix does not provide cross-template sharing,   so each template must contain its own copy of the map definition.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-dashboards","title":"Template Dashboards","text":"<p>Template dashboards allow you to attach pre-designed visual dashboards directly to a template. When the template is linked to a host, Zabbix automatically creates a host-specific dashboard instance based on that template. This makes it possible to provide consistent visualizations for every host or application without manually building dashboards for each one.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#where-to-find-template-dashboards","title":"Where to Find Template Dashboards","text":"<p>Template dashboards can be accessed and edited under:</p> <p><code>Data collection \u2192 Templates \u2192 [select template] \u2192 Dashboards tab</code></p> <p>Each template may include one or more dashboards. When a host is linked to a template containing a dashboard, that dashboard appears automatically under:</p> <p><code>Monitoring \u2192 Hosts \u2192 [select host] \u2192 Dashboards tab</code></p> <p>This dashboard is generated dynamically for the selected host, showing metrics and graphs populated with that host\u2019s data.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-and-use-cases","title":"Purpose and Use Cases","text":"<p>Template dashboards are most useful for application-level or host-specific visualization. They provide a structured, ready-to-use view tailored to the technology being monitored.</p> <p>Typical Use Cases:</p> <ul> <li>Application dashboards:<ul> <li>A Template App PostgreSQL can include charts for query throughput, buffer   cache hit ratio, replication delay, and trigger problem widgets.</li> <li>When linked, each database instance automatically gains its own PostgreSQL   performance dashboard.</li> </ul> </li> <li>Operating system dashboards:<ul> <li>Template OS Linux may display CPU load, memory utilization, filesystem usage,   and system uptime widgets.</li> </ul> </li> <li>Network device dashboards:<ul> <li>Template Net Cisco SNMP could show interface bandwidth, packet errors, and   uptime.</li> </ul> </li> </ul> <p>These dashboards ensure consistent presentation and help operators quickly understand the health of any host using that template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#dashboard-components","title":"Dashboard Components","text":"<p>Template dashboards support the same widget types as user dashboards, including:</p> Category Widget Examples Purpose Data visualization Graphs, time series, top N Show trends and metric comparisons Status views Problems, Item values, SLA widgets Real-time status per host/application Service overview Business service state, SLA Map triggers to service impact Layout elements Text, maps, URL embeds Add context, documentation, or external views <p>Each widget automatically substitutes host-specific data when rendered under <code>Monitoring</code> \u2192 <code>Hosts</code> \u2192 <code>Dashboards</code>. No manual host configuration is required.</p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices_1","title":"Some Good Practices","text":"<ul> <li>Keep dashboards concise: Focus on the key health indicators of that application   or system.</li> <li>Leverage macros: Use template macros (e.g., {$PG.DBNAME}) inside widgets   to make them adaptive across instances.</li> <li>Group widgets logically: Use grid layout \u2014 metrics at top, triggers below,   historical trends on the side.</li> <li>Document context: Include a Text widget describing what each graph shows   or what thresholds mean.</li> <li>Use template dashboards: for \u201cper-instance\u201d visibility, and user dashboards   for multi-host or environment-wide overviews.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-template-app-postgresql","title":"Example: Template App PostgreSQL","text":"<p>A typical Template App PostgreSQL dashboard might include:</p> Widget Description Graph PostgreSQL transactions per second Graph Replication lag in seconds Item Value Cache hit ratio (<code>pg.stat.cache.hit</code>) Problem Widget Current trigger status for this instance Text Widget Notes: tuning guide, connection info, etc. <p>Once the template is linked to hosts db01, db02, and db03, Zabbix automatically renders three dashboards, each showing real metrics for its respective instance.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#advantages-of-template-dashboards","title":"Advantages of Template Dashboards","text":"<ul> <li>Consistency: every host or application gets the same visualization standard.</li> <li>Zero manual setup: dashboards appear automatically on linking.</li> <li>Version control: dashboards are stored inside templates and follow the same   YAML export/import flow.</li> <li>Maintainability: when you update a template dashboard, all hosts using that   template receive the new version automatically.</li> <li>Scalability: ideal for large environments \u2014 one dashboard design scales to   hundreds of hosts.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-management-operations","title":"Template Management Operations","text":"<p>Template management in Zabbix 8.0 offers multiple actions for maintaining, cloning, cleaning, and synchronizing templates efficiently.</p> <p>These operations are accessible under:</p> <p><code>Data collection \u2192 Hosts</code> on the host itself.</p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#unlink-vs-unlink-and-clear","title":"Unlink vs. Unlink and Clear","text":"<ul> <li> <p>Unlink: Detaches the template from a host but retains all inherited items,   triggers, and discovery rules on the host.</p> </li> <li> <p>Unlink and Clear: Removes the template and deletes all entities that originated   from it (items, triggers, graphs, and discoveries).</p> </li> </ul> <p>Use Unlink to preserve historical data, and Unlink and Clear when you need to remove the monitoring logic completely.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#clone","title":"Clone","text":"<p>The <code>clone</code> button creates an exact copy of an existing template, including all items, triggers, dashboards, macros, and value maps. Every entity within the clone receives a new UUID, ensuring full independence from the original.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> on the template itself.</p> <p></p> <p>Example:</p> <p><code>Template OS Linux \u2192 Clone \u2192 Template OS Rocky Linux (Custom)</code></p> Tip <p>Always rename cloned templates immediately to reflect their intended purpose or environment as we discussed before.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#delete-vs-delete-and-clear","title":"Delete vs. Delete and Clear","text":"<ul> <li>Delete: Removes the template definition but leaves all items and triggers   (now orphaned) on linked hosts.</li> <li>Delete and Clear: Deletes both the template and any entities created on   linked hosts.</li> </ul> <p>When performing cleanup or migration, Delete and Clear ensures no residual items remain in configuration cache.</p> Warning <p>Deletes happen immediately so there is no undo. Also deletes are performed on the database immediately so a large scale delete could have a serious performance impact.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#mass-update-of-templates","title":"Mass Update of Templates","text":"<p>Zabbix 8 provides a Mass update feature to modify multiple templates simultaneously. This is available via:</p> <p><code>Data collection \u2192 Templates \u2192 Mass update</code></p> <p>It\u2019s particularly useful for enforcing consistent macro values, tags, or template group structures across many templates.</p> Category Examples of Updatable Fields General Template groups, name, description, tags Macros Add, update, or remove template-level macros Discovery rules Adjust update intervals or filter expressions Dashboards Replace or refresh template dashboards Permissions Move templates between groups (changes RBAC context)","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#behavior-and-cautions","title":"Behavior and Cautions","text":"<ul> <li>Only the properties you select are overwritten.</li> <li>Existing macros or tags with identical names are replaced.</li> <li>Changes apply immediately; no rollback is available.</li> <li>When moving templates to a different group, verify that related user groups have   the proper permissions on that target group.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices_2","title":"Some Good Practices","text":"<ul> <li>Use mass update for homogeneous template sets (for example, all OS templates or   all network device templates).</li> <li>For larger or version-controlled environments, rely on YAML export/import through   Git or CI/CD to ensure traceability and change control.</li> <li>Always test mass updates on a staging instance before production rollout.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#importing-and-exporting-templates","title":"Importing and Exporting Templates","text":"<p>Templates can be imported or exported in both YAML, JSON and XML formats, although YAML is strongly preferred for readability and version control. It is also the standard now in Zabbix.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#exporting","title":"Exporting","text":"<p>Navigate to <code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Select Your Template(s)</code> \u2192 <code>Export</code>, then select <code>YAML</code>.</p> <p></p> <p>A typical export looks like:</p> <pre><code>zabbix_export:\n  version: '8.0'\n  templates:\n    - uuid: a4c1d0f2d7de4a40a8b347afeb9a88df\n      template: 'Template OS Rocky Linux'\n      groups:\n        - name: 'Templates/Operating Systems/Linux'\n      macros:\n        - macro: '{$CPU_UTIL_MAX}'\n          value: '90'\n      items:\n        - name: 'System uptime'\n          key: 'system.uptime'\n          type: ZABBIX_AGENT\n</code></pre>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#importing-templates","title":"Importing Templates","text":"<p>The import process in Zabbix 8.0  is intelligent \u2014 it compares UUIDs, detects differences, and optionally merges or removes entities. You can import templates via:</p> <p><code>Data collection \u2192 Templates \u2192 Import</code></p> <p>The button is on the upper right side of your window.</p> <p></p> <p>Zabbix supports both <code>YAML</code> <code>JSON and</code>XML`, though YAML is preferred due to its readability and UUID retention.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#import-options-and-their-effects","title":"Import Options and Their Effects","text":"<p>When importing a template, the import dialog presents several options that determine how conflicts and differences are handled:</p> Option Description Behavior Create new Import entities that do not exist yet New templates and their entities are created Update existing Update entities that already exist based on matching UUIDs Existing templates are modified to match the import file Delete missing Remove entities that exist in Zabbix but not in the import file Entities absent from the import are deleted Replace existing template Forcefully overwrite all existing definitions Full replacement, including dashboards and discovery rules","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#uuid-based-matching","title":"UUID-Based Matching","text":"<p>Starting with Zabbix 6.2, template imports rely primarily on UUIDs, not names, for matching.</p> <ul> <li>If the UUID exists, Zabbix updates that object \u2014 even if the name differs.</li> <li>If no UUID matches, Zabbix treats the object as new and creates it.</li> <li>If an object shares the same name but has a different UUID, it is treated as   a different entity \u2014 no merge occurs.</li> </ul> Tip <p>When re-importing from version-controlled YAML, always keep original UUIDs intact. Editing or regenerating them will cause duplicates rather than updates.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#diff-visualization","title":"Diff Visualization","text":"<p>Before confirming an import, Zabbix displays a visual diff screen showing what will change. This interface uses color coding to illustrate modifications at a granular level:</p> Color Meaning \ud83d\udfe9 Green Elements that will be added or new attribute values \ud83d\udfe5 Red Elements that will be removed or replaced <p>Zabbix compares entities by UUID and lists each difference per category, items, triggers, graphs, macros, value maps, discovery rules, and dashboards. Modified objects show their old values in red and new values in green, providing a clear preview of all pending changes.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#update-existing-behavior","title":"\u201cUpdate Existing\u201d Behavior","text":"<p>When Update existing is enabled:</p> <ul> <li>Entities with matching UUIDs are updated.</li> <li>Entities not in the import remain unchanged unless Delete missing is also checked.</li> <li>Template-level fields (name, groups, description, macros, dashboards) are replaced   by those from the import.</li> </ul> <p>This mode is ideal for incremental updates or synchronization with a Git-tracked source.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#delete-missing-behavior","title":"\u201cDelete Missing\u201d Behavior","text":"<p>With Delete missing enabled, Zabbix removes any element present in the database but absent in the import file:</p> <ul> <li>Items, triggers, discovery rules, graphs, dashboards, and value maps</li> <li>Orphaned macros and outdated entities</li> </ul> Warning <p>This action is destructive. It permanently removes definitions and historical associations. Use only when performing full synchronization from version-controlled sources or replacing obsolete templates.</p> <p>When both Update existing and Delete missing are checked, the import performs a full sync. The resulting template will exactly match the import file.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#error-handling","title":"Error Handling","text":"<p>Zabbix validates all entities before applying the import. If inconsistencies are found, the import halts and reports detailed errors, such as:</p> <ul> <li>Missing referenced value maps or linked templates</li> <li>Invalid macro names or syntax</li> <li>Circular template linkage</li> <li>Version mismatches between export and server</li> </ul> <p>The error list shows affected entity names, allowing quick correction and re-import.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#safe-import-workflow","title":"Safe Import Workflow","text":"<p>For production grade environments:</p> <ul> <li>Export first: always back up current templates.</li> <li>Validate syntax: use yamllint or JSON validators.<ul> <li>yamllint template.yaml</li> <li>jq empty template.json</li> </ul> </li> <li>Preview diff: check additions (green) and deletions (red).</li> <li>Test in staging: confirm behavior before production import.</li> <li>Promote via automation: use the Zabbix API (configuration.import) for reproducible   CI/CD deployments.</li> </ul> <p>???+ tip</p> <pre><code>  Automating template synchronization via API and Git ensures identical configurations\n  across multiple Zabbix servers or environments.\n</code></pre>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#conclusion","title":"Conclusion","text":"<p>Templates in Zabbix 8.0 are now fully self-contained, UUID-tracked, and automation  ready. With improved import/export handling, color-coded diffs, and fine-grained RBAC, they deliver both control and scalability.</p> <p>By following some good practices, cloning instead of editing <code>built-ins</code>, organizing templates by group and tag, tuning intervals, maintaining YAML or JSON in Git, and verifying diffs before import, administrators achieve consistent, predictable monitoring deployments.</p> <p>Templates are no longer mere configuration helpers; they are core assets in a modern observability strategy, enabling reproducible, automated, and standards driven monitoring across diverse infrastructures.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#questions","title":"Questions","text":"<ul> <li>What are the main configuration elements a Zabbix template can contain, and how do they contribute to standardizing monitoring?</li> <li>Explain what happens to UUIDs when a template is cloned.</li> <li>Why is it important to preserve UUIDs when managing templates through YAML or Git?</li> <li>Describe how tags are inherited when a template is applied to a host.</li> <li>Which tags take precedence if both the host and the template define the same key?</li> <li>Why can't a template-level value map be used by local host items?</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/templates</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/mapping</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/templates/template</li> <li>https://www.zabbix.com/documentation/current/en/manual/xml_export_import</li> <li>https://git.zabbix.com/repos?visibility=public</li> <li>https://jsonpathfinder.com/</li> <li>https://www.yamllint.com/</li> </ul>","tags":["advanced"]},{"location":"ch07-zabbix-alerts/actions/","title":"Actions","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#conclusion","title":"Conclusion","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#questions","title":"Questions","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#useful-urls","title":"Useful URLs","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/chapter/","title":"Sending out alerts with Zabbix","text":"<p>After delving into templates, it's time to return to the data flow and bring everything together by exploring integrations with powerful external services. In this chapter, we\u2019ll complete the data flow journey, showing how to extend Zabbix capabilities through seamless connections with third-party tools and platforms.</p> <p>We'll guide you through setting up integrations that enhance your monitoring system, covering various use cases from alerting to data visualization and automation. By integrating Zabbix with external services, you'll unlock new levels of functionality, making your monitoring setup more dynamic and adaptable.</p> <p>By the end, you'll have a well-rounded understanding of how to fully utilize Zabbix data flow, augmented by strategic integrations that add value to your infrastructure management.</p>"},{"location":"ch07-zabbix-alerts/media-types/","title":"Media types","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/scripts/","title":"Scripts","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#conclusion","title":"Conclusion","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#questions","title":"Questions","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#useful-urls","title":"Useful URLs","text":"","tags":["advanced","expert"]},{"location":"ch08-zabbix-lld/chapter/","title":"Using Low level discovery to automate","text":"<p>In this chapter, we'll dive into Low-Level Discovery (LLD), covering everything there is to know about this powerful feature in Zabbix. LLD automates the creation of hosts, items, triggers, and more, simplifying the management of large and dynamic environments.</p> <p>We'll also explain how to work with custom JSON in the context of LLD, showing you how to tailor discovery rules to fit your unique needs. By mastering these techniques, you'll be able to create highly adaptable monitoring setups that respond to changes in your infrastructure with minimal manual intervention.</p> <p>By the end of this chapter, you'll have a deep understanding of LLD, from basic concepts to advanced customization, enabling you to leverage its full potential in your Zabbix deployment.</p>"},{"location":"ch08-zabbix-lld/custom/","title":"Custom Low Level Discovery","text":"<p>Zabbix's Low-Level Discovery (LLD) plays a crucial role in dynamically detecting and managing monitored entities. While Zabbix provides built-in discovery rules, real-world environments often demand more flexibility and customization.</p> <p>In this chapter, we will explore custom LLD techniques, allowing you to create powerful, tailored discovery mechanisms that go beyond standard templates. You'll learn how to use scripts and custom rules to automatically detect and monitor services, network interfaces, and other dynamic components within your infrastructure.</p> <p>Whether you're monitoring cloud environments, network devices, or application-specific metrics, mastering custom LLD will help you reduce manual work, improve accuracy, and scale your monitoring effortlessly. Let\u2019s dive in!</p> Note <p>For this chapter we start with a working system with a proper configured agent in passive mode. If you have no clue how to do this go back to chapter 01.</p> <p>Zabbix Low-Level Discovery (LLD) provides a dynamic mechanism for automatically creating monitoring elements based on discovered entities within your infrastructure.</p> <p>Core Functionality :</p> <p>LLD enables Zabbix to detect changes in your environment and create corresponding items, triggers, and graphs without manual intervention. This automation is particularly valuable when monitoring elements with fluctuating quantities or identifiers.</p> <p>Discovery Targets: The discovery process can identify and monitor various system components including:</p> <ul> <li>File systems</li> <li>CPUs</li> <li>CPU cores</li> <li>Network interfaces</li> <li>SNMP OIDs</li> <li>JMX objects</li> <li>Windows services</li> <li>Systemd services</li> <li>Host interfaces</li> <li>Anything based on custom scripts</li> </ul> <p>Through LLD, administrators can implement scalable monitoring solutions that automatically adapt to infrastructure changes without requiring constant template modifications.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#implementing-low-level-discovery-in-zabbix","title":"Implementing Low-Level Discovery in Zabbix","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#the-challenge-of-manual-configuration","title":"The Challenge of Manual Configuration","text":"<p>We could manually create each item but this would be a very time-consuming task and impossible to manage in large environments. To enable automatic discovery of our items or entities, we need discovery rules.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#discovery-rules","title":"Discovery Rules","text":"<p>These rules send the necessary data to Zabbix for our discovery process. There  is no limit to the various methods we can employ, the only requirement is that the end result must be formatted in JSON. This output information is crucial as it forms the foundation for creating our items.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#prototypes-and-automation","title":"Prototypes and Automation","text":"<p>Once our discovery rule is in place, we can instruct Zabbix to automatically generate items, triggers, graphs, and even host prototypes. These function as blueprints directing Zabbix how to create those entities.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#lld-macros","title":"LLD Macros","text":"<p>To enhance flexibility, Zabbix implements LLD macros. These macros always begin with a # character before their name (e.g., {#FSNAME}). Acting as placeholders for the values of discovered entities, Zabbix replaces these macros with the actual discovered names of the items during the implementation process.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#the-zabbix-low-level-discovery-workflow","title":"The Zabbix Low-Level Discovery Workflow","text":"<p>The workflow that Zabbix follows during Low-Level Discovery consists of four distinct phases:</p> <p>Discovery Phase * Zabbix executes the discovery item according to the defined discovery rule * The item returns a JSON list of discovered entities</p> <p>Processing Phase * Zabbix parses the JSON data and extracts the necessary information</p> <p>Creation Phase * For each discovered entity, Zabbix creates items, triggers, and graphs based on   the prototypes * During this process, LLD macros are replaced with the actual discovered values</p> <p>Monitoring Phase * Zabbix monitors the created items using standard monitoring procedures</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#advantages-of-lld-implementation","title":"Advantages of LLD Implementation","text":"<p>The benefits of implementing Low-Level Discovery are substantial:</p> <ul> <li>Automation - Creation of items, triggers, graphs, and hosts becomes fully   automated</li> <li>Scalability - Enables monitoring of large numbers of hosts or items without   manual intervention</li> <li>Adaptability - Zabbix can dynamically adjust to environmental changes by    creating or removing entities as needed</li> </ul>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#learning-lld-custom-script","title":"Learning LLD custom script","text":"<p>We begin our series with LLD based on custom scripts because, while it represents one of the more complex topics, mastering this concept provides a solid foundation. Once you understand this implementation approach, the other LLD topics will be considerably easier to comprehend.</p> <p>Below is a sample JSON structure that Zabbix can interpret for Low-Level Discovery:</p> <pre><code>{\n  \"data\": [\n    {\n      \"{#FSNAME}\": \"/\",\n      \"{#FSTYPE}\": \"ext4\"\n    },\n    {\n      \"{#FSNAME}\": \"/boot\",\n      \"{#FSTYPE}\": \"ext4\"\n    },\n    {\n      \"{#FSNAME}\": \"/data\",\n      \"{#FSTYPE}\": \"xfs\"\n    }\n  ]\n}\n</code></pre> <p>Upon receiving this JSON data, Zabbix processes the discovery information to identify distinct file systems within the monitored environment. The system extracts and maps the following elements:</p> <ul> <li>File system mount points: /, /boot, and /data</li> <li>File system types: ext4 and xfs</li> </ul> <p>Zabbix automatically associates these discovered values with their corresponding LLD macros {#FSNAME} for the mount points and {#FSTYPE} for the file system types. This mapping enables dynamic creation of monitoring objects tailored to each specific file system configuration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-custom-script","title":"Creating a custom script.","text":"<p>In this example, we will develop a custom script to monitor user login activity on our systems. This script will track the number of users currently logged into each monitored host and report their login status.</p> <p>The implementation requires placing a custom script in the appropriate location on systems running Zabbix Agent (either version 1 or 2). Create the following script in the <code>/usr/bin/</code> directory on each agent installed system:</p> <p>create our script</p> <pre><code>sudo vi /usr/bin/users-discovery.sh\n</code></pre> <p>paste the following content in the file:</p> <p>users-discovery.sh</p> <pre><code>#!/bin/bash\n\n# Find all users with UID \u2265 1000 of UID = 0 from /etc/passwd, except \"nobody\"\nALL_USERS=$(awk -F: '($3 &gt;= 1000 || $3 == 0) &amp;&amp; $1 != \"nobody\" {print $1}' /etc/passwd)\n\n# Find all active users\nACTIVE_USERS=$(who | awk '{print $1}' | sort | uniq)\n\n# Begin JSON-output\necho -n '{\"data\":['\nFIRST=1\nfor USER in $ALL_USERS; do\n    # Check if the user is active\n    if echo \"$ACTIVE_USERS\" | grep -q \"^$USER$\"; then\n        ACTIVE=\"yes\"\n    else\n        ACTIVE=\"no\"\n    fi\n\n    # JSON-format\n    if [ $FIRST -eq 0 ]; then echo -n ','; fi\n    echo -n \"{\\\"{#USERNAME}\\\":\\\"$USER\\\", \\\"{#ACTIVE}\\\":\\\"$ACTIVE\\\"}\"\n    FIRST=0\ndone\necho ']}'\n</code></pre> <p>Once you have created the script don't forget to make it executable.</p> <pre><code>sudo chmod +x /usr/bin/users-discovery.sh\n</code></pre> <p>The script will be executed by the Zabbix agent and will return discovery data about user sessions in the JSON format required for Low-Level Discovery processing.</p> <p>Once deployed, this script will function as the data collection mechanism for our user monitoring solution, enabling Zabbix to dynamically discover user sessions and track login/logout activities across your infrastructure.</p> <p>User Provisioning for Testing</p> <p>Let's establish additional test user accounts on our system to ensure we have sufficient data for validating our monitoring implementation. This will provide a more comprehensive testing environment beyond the default root account and your personal user account. Feel free to add as many users as you like.</p> <p>create some users</p> <p><pre><code>sudo for user in sven brian cartman kenny; do sudo useradd $user; done\n</code></pre> Create a password for every user so that we can login on the console <pre><code>sudo passwd &lt;user&gt;\n</code></pre></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-template","title":"Creating a Template","text":"<p>It is always considered best practice to work with a template. The first step is to create a template for the LLD rules.  </p> <p>Navigate to Data collection, select Templates, and click Create template in the upper-right corner.  </p> <p>Fill in the required information, specifying at least a template name and  the template group it belongs to.</p> <p></p> <p>Once the template is created click on <code>Discovery</code> in the template between <code>Dashboards</code> and <code>Web</code>. In the upper right corner of the screen you see now a button <code>create discovery rule</code>.</p> <p>We will nog create our discovery rule that will import the <code>JSON</code> from our script. Click on the button.</p> <p>Fill in the needed information like on the screenshot :</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-template-for-lld-rules","title":"Creating a Template for LLD Rules","text":"<ul> <li>Type: Set to Zabbix agent, as the agent is configured to work in passive   mode. If the agent is properly configured for active mode, Zabbix agent (active)   can be used instead. Passive mode allows polling information from the script.  </li> <li>Key: This key acts as a reference sent to the agent, instructing it on which   script to execute.  </li> <li>Update Interval: Determines how often Zabbix executes the script. For detecting   newly created users, an interval of one hour is a reasonable setting.</li> </ul> Note <p>If you put the update interval for the discovery rule too frequent like every minute, then this will have a negative impact on the performance. In our case it's a small JSON file but most of the time it will contain much more data.</p> <p>Once everything is filled in we can save the template.</p> <p>Login to your console on the host that you would like to monitor and go to the following path. </p> <pre><code>cd `/etc/zabbix/zabbix_agent2.d/`\nor in case you are using Agent 1\ncd `/etc/zabbix/zabbix_agentd.d/`\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-the-user-parameter-configuration","title":"Creating the User Parameter Configuration","text":"<p>The next step is to create the userparameter-users.conf file in this directory. This file will define the reference key users.discovery from the LLD rule and map it to the corresponding script. By doing this, Zabbix can associate the item key with the correct script execution.</p> <pre><code>vi userparameter-users.conf\n</code></pre> <p>Add the following line in the config file and save it.</p> <pre><code>UserParameter=users.discovery,/usr/bin/users-discovery.sh\n</code></pre> Note <p>When you add a new <code>UserParameter</code> to the agent we need to restart the agent to pick up the new config or use the config option <code>-R userparameter_reload</code> on our agent this will apply the new configuration but only works on UserParameters not on other changes in the agent configuration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#saving-the-template-and-preparing-the-monitored-host","title":"Saving the Template and Preparing the Monitored Host","text":"<p>After entering all the required details, save the template to apply the configuration. Next, access the console of the host you want to monitor and navigate to the following directory.</p> Note <p>Zabbix agent has a new option since 6.0, <code>userparameter_reload</code>. This allows us to reload the config for the userparameters and makes a restart of the agent not necessary.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#testing-the-configuration","title":"Testing the Configuration","text":"<p>With the setup complete, it is time to perform some tests.  </p> <ol> <li>Navigate to Data collection and select Hosts.  </li> <li>Link the newly created template to the appropriate host in the Zabbix frontend.  </li> <li>Once the template is linked, go to the Discovery section.  </li> <li>Click on the discovery rule created earlier, Active users.  </li> <li>At the bottom of the screen, locate the Test button and click on it.  </li> <li>In the popup window, press Get value and test.  </li> </ol> <p>If everything is configured correctly, Zabbix will retrieve the expected value and store it in the database.</p> <p></p> <p>If all went well you should have received some data back in JSON like you see here,  depending on the number of users you made and what name you gave them.</p> <pre><code>{\n  \"data\": [\n    {\n      \"{#USERNAME}\": \"root\",\n      \"{#ACTIVE}\": \"yes\"\n    },\n    {\n      \"{#USERNAME}\": \"brian\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"sven\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"cartman\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"kenny\",\n      \"{#ACTIVE}\": \"no\"\n    }\n  ]\n}\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-prototype-items","title":"Creating prototype items.","text":"<p>With our Low-Level Discovery (LLD) rule in place, we are ready to create our LLD item prototype. Follow these steps to configure the item prototype correctly:</p> <ol> <li>Navigating to Item Prototype Configuration</li> <li>Open your template in Zabbix.</li> <li>Click on the Discovery tab.</li> <li>Navigate to Item Prototypes.</li> <li> <p>Click on Create Item Prototype in the upper-right corner.</p> </li> <li> <p>Configuring the Item Prototype    Several key fields must be completed for the prototype to function correctly:</p> </li> <li> <p>Name:</p> <ul> <li>Use the macro <code>{#USERNAME}</code> to create dynamically generated item names.</li> <li>Example: <code>User {#USERNAME} login status</code>.</li> </ul> </li> <li> <p>Type:</p> <ul> <li>Select <code>Zabbix agent</code> as the item type to facilitate testing.</li> </ul> </li> <li> <p>Key:</p> <ul> <li>The item key must be unique.</li> <li>Utilize macros to ensure a unique key for each item instance.</li> </ul> </li> <li> <p>Type of Information:</p> <ul> <li>Defines the format of the received data.</li> <li>Since our script returns <code>0</code> or <code>1</code>, set this to <code>Numeric</code>.</li> </ul> </li> <li> <p>Update Interval:</p> <ul> <li>Determines how frequently the item is checked.</li> <li>A reasonable interval for checking user online status is <code>1m</code> (one minute).</li> </ul> </li> </ol> <p>With these configurations, your LLD item prototype is ready for deployment.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#configuring-the-agent-to-listen-for-lld-items","title":"Configuring the Agent to Listen for LLD Items","text":"<p>Our LLD item will retrieve data from the key custom.user[{#USERNAME}], so the next step is to configure the agent to listen for this key.</p> <ul> <li>Edit the <code>userparameter-users.conf</code> file that was created earlier on the <code>Zabbix agent</code>.</li> <li>Add the following line to the configuration file:</li> </ul> <pre><code>UserParameter=custom.user[*],who | grep -c \"$1\"\n</code></pre> <ul> <li>This configuration ensures that the agent listens for requests using the   <code>custom.user[{#USERNAME}]</code> key.</li> <li>The <code>{#USERNAME}</code> macro is dynamically replaced with usernames extracted from   the discovery rule.</li> </ul> Note <p>Important: After making changes to the configuration file, restart the <code>Zabbix agent</code> or reload the configuration to apply the new settings.</p> <p>With these configurations in place, your LLD item prototype is fully set up and ready for deployment.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#testing-our-lld-items","title":"Testing our lld items","text":"<p>Before we put things in production we can of course test it. Press the <code>test</code> button at the bottom. Fill in the needed information: </p> <ul> <li>Host address : the IP or DNS name where we have our scripts configured on our agent.</li> <li>Port : the agent port. This should be 10050 unless you have changed it for some reason.</li> <li>Macros : map the macro with one of the user names you have configured on your system.</li> </ul> <p>Press <code>Get value</code> and if all goes well Zabbix will return the value 1 or 0 depending if the user is online or not.</p> <p></p> <p>Apply the template to your host and have a look at the latest data. Things should slowly start to populate.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#adding-lld-triggers","title":"Adding LLD triggers","text":"<p>Let's go back to our template to our <code>Discovery</code> and select <code>Trigger prototype</code>. Click on the top right on <code>Create trigger prototype</code>. Fill in the following fields:</p> <ul> <li>Name : <code>User {#USERNAME} is logged in</code> Again we want our information to be   more dynamic so we make use of our macros in the name of our trigger.</li> <li>Severity : We select the severity level here. <code>Information</code> seems high enough.</li> <li>Expression : We want to get a notification if someone is online you can   make use of the <code>Add</code> button or just copy : <code>last(/Discover users/custom.user[{#USERNAME}])=1</code></li> </ul> <p></p> Note <p>Copying the Expression will only work if you used the same name for the template and item key.</p> <p>You can  now log in with a user that we created before or root and have a look at our dashboard. A notification should popup soon to inform you that a user was logged in.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-lld-overrides","title":"Creating LLD overrides.","text":"<p>Having our notifications when users log in on our systems is a nice security feature but i'm more worried when a user logs in with root then when for example Brian logs in. When root logs in I would like to get the alert <code>High</code> instead of <code>Information</code>.</p> <p>This is possible in Zabbix when we make use of overrides. Overrides allow us to change the behaviour of our triggers under certain conditions.</p> <p>Go to the template to the discovery rule <code>Active users</code>. Click on the tab <code>Overrides</code>. Press on the button <code>Add</code> and fill in the needed information.</p> <ul> <li>Name : A useful name for our override in our case we call it <code>high severity for user root</code>.</li> <li>Filters : Here we filter for certain information that we find in our LLD    macros. In our case we look in the macro <code>{#USERNAME}</code> for the user <code>root</code>.</li> </ul> <p></p> <ul> <li>Operation : Here we define what needs to happen. We want to manipulate the   trigger so select for object <code>Trigger prototype</code> and select that we want to modify   the <code>Severity</code> and select <code>High</code>. This will modify the severity of our trigger   and change it to <code>High</code> if the user that is detected is the user <code>root</code>.</li> </ul> <p></p> Note <p>It can take a while before changes are applied to your host. Don't panic this is normal the discovery rule usually only updates every hour. If you like to force this just go to your discovery rule on the host, select it and press <code>Execute now</code>.</p> <p>Once everything is changed you can login on your system with the user <code>root</code> and one of the other users. As you will see both triggers will fire off but with different severity levels.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#question","title":"Question","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/","title":"Low Level Discovery with Dependent items","text":"<p>Efficiency in monitoring isn't just about automation it's also about minimizing resource usage. Low-Level Discovery (LLD) with dependent items in Zabbix offers a powerful way to reduce agent load and database overhead by collecting data once and extracting multiple metrics from it.</p> <p>Instead of creating separate item queries for each discovered entity, dependent items allow you to process a single data source such as a JSON response, log entry, or SNMP bulk data and extract relevant metrics dynamically. This approach significantly optimizes performance while maintaining full automation.</p> <p>In this chapter, we'll explore how to implement LLD with dependent items, configure preprocessing rules, and leverage this technique to make your Zabbix monitoring more efficient, scalable, and resource friendly by using a practical example.</p> <p>Let\u2019s get started!</p> Note <p>For this chapter we start with a working system with a passive Zabbix agent. You can always refer to Chapter 01 if you like to know how to setup Zabbix. It can be a good start to have a look at our previous topic <code>Custom LLD</code> to get a better understanding on how LLD works.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-our-custom-data","title":"Creating our custom data","text":"<p>Before we can implement our Low-Level Discovery (LLD) rule, we first need relevant data to work with. Consider a scenario where a print server provides a list of printers along with their status in JSON format. This structured data will serve as the foundation for our discovery process.  </p> <p>Example data</p> <pre><code>{\n  \"data\": [\n    {\n      \"name\": \"Color Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"Color Printer 2\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 2\",\n      \"status\": \"NOK\"\n    }\n  ]\n}\n</code></pre> <p>On your Zabbix server, log in and create a text file containing the example data that will serve as the master item for our Low-Level Discovery (LLD) rule.</p> <ol> <li>Access the Server: Log in to your Zabbix server via SSH or directly.</li> <li>Create the File: Run the following command to store the JSON data:</li> </ol> <p>Run the following command:</p> <pre><code>echo\n'{\n  \"data\": [\n    {\n      \"name\": \"Color Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"Color Printer 2\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 2\",\n      \"status\": \"NOK\"\n    }\n  ]\n}' | sudo tee /home/printer-status.txt &gt; /dev/null\n</code></pre> <ol> <li>Verify the File: Ensure the file is correctly created by running:</li> </ol> <p>Test the file</p> <pre><code>cat /home/printer-status.json\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#create-a-master-item","title":"Create a master item","text":"<p>We are now ready to create an item in Zabbix to get the information in to our master item. But first we need to create a host.</p> <p>Go to <code>Data collection | Hosts</code> and click <code>Create host</code>. Fill in the <code>Host name</code> and the <code>Host group</code> and create an <code>Agent interface</code>. Those are the only things we need for our host and press <code>Add</code>.</p> <p>Go to the host and click on <code>items</code> the next step will be to create our item so that we can retrieve the data from our printers.</p> <p> 8.1 Create host</p> Note <p>Remember this is just an example file we made in real life you will use probably a <code>HHTP agent</code> or a <code>Zabbix agent</code> to retrieve real life data.</p> <p>Click on top right of the page on <code>Create item</code> to create a new item so that we can retrieve our master items data.</p> <p>Once the <code>New Item</code> popup is on the screen fill in the following details:</p> <ul> <li>Name : RAW : Printer status page</li> <li>Type : Zabbix agent</li> <li>Key : vfs.file.contents[/home/printer-status.txt]</li> </ul> <p> 8.2 Create a LLD item</p> <p>Before you press <code>Add</code> let's test our item first to see if we can retrieve the data we need.</p> <p>Press <code>Test</code> at the bottom of the page a popup will come and you can press at the bottom of the page <code>Get value and test</code> or <code>Get value</code> just above. Both should work and return you the information form the txt file.</p> Note <p>When you press <code>Get value</code> it will show you the value as is retrieved from the host. <code>Get value and test</code> on the other hand will also try to execute other pre processing steps if there are any. So the output of the data could be different. Also if you use secret macros Zabbix will not resolve them you will need to fill in the correct information first by yourself.</p> <p> 8.3 Test LLD item</p> Tip <p>Keep a copy of the output somewhere you will need it in the following steps to create your LLD rule and LLD items etc ...</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#create-lld-discovery","title":"Create LLD Discovery","text":"<p>To create a discovery rule first to go <code>Discovery rules</code> on the top next to Items, Triggers and Graphs and click on <code>Create discovery rule</code>.</p> <p> 8.4 Create a discovery rule</p> <p>Before configuring our Low-Level Discovery (LLD) rule, we can test our JSON queries using tools like JSON Query Tool. If we apply the query <code>$..name</code>, it extracts all printer names, while <code>$..status</code> retrieves their statuses.</p> <p>However, referring to the Zabbix documentation, we see that starting from Zabbix 4.2, the expected JSON format for LLD has changed. The <code>data</code> object is no longer required; instead, LLD now supports a direct JSON array. This update enables features like item value preprocessing and custom JSONPath queries for macro extraction.</p> <p>While Zabbix still accepts legacy JSON structures containing a <code>data</code> object for backward compatibility, its use is discouraged. If the JSON consists of a single object with a <code>data</code> array, Zabbix will automatically extract its content using <code>$.data</code>. Additionally, LLD now allows user-defined macros with custom JSONPath expressions.  </p> <p>Due to these changes, we cannot use the filters <code>$..name</code> or <code>$..status</code> directly. Instead, we must use <code>$.name</code> and <code>$.status</code> for proper extraction. With this understanding, let's proceed with creating our LLD rule.  </p> <p>Head over to the <code>LLD macros</code> tab in our Discovery rule and map the following macros with our JSONpath filters to extract the needed info so that we can use it later in our LLD items, triggers, graphs .... .</p> <ul> <li>{#PRINTER.NAME} : Map it with <code>$.name</code>.</li> <li>{#PRINTER.STATUS} : Map it with <code>$.status</code>.</li> </ul> <p> 8.5 Create a LLD Macro</p> <p>When ready press <code>Update</code> at the bottom of the page.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-a-low-level-discovery-lld-item","title":"Creating a Low-Level Discovery (LLD) Item","text":"<p>After defining the discovery rule and mapping the data to the corresponding LLD macros, the next step is to create an LLD item. This is done through item prototypes.</p> <ol> <li>Navigate to the <code>Item prototypes</code> tab.  </li> <li>Click Create <code>item prototype</code> in the upper-right corner.  </li> <li> <p>Configure the following parameters:  </p> </li> <li> <p>Name: <code>Status from {#PRINTER.NAME}</code> </p> </li> <li>Type: <code>Dependent item</code> </li> <li>Key: <code>status.[{{#PRINTER.NAME}}]</code> </li> <li>Type of information: <code>Text</code> </li> <li>Master Item: Select the previously created raw item.  </li> </ol> <p>This setup ensures that the discovered printer statuses are correctly assigned and processed through the LLD mechanism.  </p> <p> 8.6 Create a LLD item</p> <p>Before saving the item, navigate to the <code>Preprocessing</code> tab to define the necessary preprocessing steps. These steps will ensure that the extracted data is correctly formatted for Zabbix. Configure the following preprocessing steps:</p> <ol> <li>JSONPath: $.data..[?(@.name=='{#PRINTER.NAME}')].status.first()</li> <li>Replace:  </li> <li>Convert <code>NOK</code> to <code>false</code>.  </li> <li>This step is required because Zabbix does not recognize <code>NOK</code> as a boolean      value but does recognize <code>false</code>.</li> <li>Boolean to Decimal:  </li> <li>This conversion transforms boolean values into numerical representation    (<code>1</code> for <code>OK</code>, <code>0</code> for <code>false</code>).</li> <li>Numeric values are more suitable for graphing and analysis in Zabbix.</li> <li>Type of Information:  </li> <li>Set to Numeric to ensure proper data processing and visualization.</li> </ol>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#understanding-the-jsonpath-expression","title":"Understanding the JSONPath Expression","text":"<p>To derive the correct JSONPath query, use a tool such as the <code>JSON Query Tool</code> (https://www.jsonquerytool.com/). This tool allows testing and refining JSON queries using real data retrieved from the raw item.</p> <p>The JSONPath query used in this case is:</p> <pre><code>$.data..[?(@.name=='{#PRINTER.NAME}')].status.first()\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#breakdown-of-the-jsonpath-syntax","title":"Breakdown of the JSONPath Syntax","text":"<ul> <li><code>$</code> \u2192 Refers to the root of the JSON document.</li> <li><code>.data</code> \u2192 Accesses the <code>data</code> key within the JSON structure.</li> <li><code>..</code> \u2192 The recursive descent operator, searching through all nested levels   for matching elements.</li> <li><code>[?(@.name=='{#PRINTER.NAME}')]</code> \u2192 A filter expression that:</li> <li>Uses <code>?(@.name=='Color Printer 1')</code> to match objects where the <code>name</code> field     equals <code>\"Color Printer 1\"</code>.</li> <li><code>{#PRINTER.NAME}</code> is a Zabbix macro that dynamically replaces     <code>\"Color Printer 1\"</code> with the discovered printer name.</li> <li><code>@</code> \u2192 Represents the current element being evaluated.</li> <li><code>.status</code> \u2192 Retrieves the <code>status</code> field from the filtered result.</li> <li><code>.first()</code> \u2192 Returns only the first matching <code>status</code> value instead of   an array.</li> <li>Without <code>.first()</code>, the result would be <code>[\"OK\"]</code> instead of <code>\"OK\"</code>.</li> </ul> <p>By applying these preprocessing steps, we ensure that the extracted printer status is correctly formatted and can be efficiently used for monitoring and visualization in Zabbix.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#optimizing-data-collection-and-discovery-performance","title":"Optimizing Data Collection and Discovery Performance","text":"<p>Before finalizing our configuration, we need to make an important adjustment. The current settings may negatively impact system performance due to an overly frequent update interval.</p> <p>Navigate to <code>Data collection</code>|<code>Hosts</code> and click on <code>Items</code>. Select the <code>RAW item</code> that was created in the first step.</p> <p>By default, the update interval is set to <code>1 minute</code>. This means the item is refreshed every minute, and since our LLD rule is based on this item, Zabbix will rediscover printers every minute as well. While this ensures timely updates, it is inefficient and can impact performance.</p> <p>A common best practice is to configure discovery rules to run no more than <code>once per hour</code>. However, since our <code>LLD item</code> relies on this same RAW item, an hourly interval would be too infrequent for monitoring printer status updates. To strike a balance between efficiency and real-time monitoring, we can apply a <code>preprocessing trick</code>.</p> <p>Go to the <code>Preprocessing</code> tab and add the following preprocessing step:</p> <ul> <li>Discard unchanged with heartbeat \u2192 <code>1h</code></li> </ul> <p>This ensures that the database is updated <code>only when a status change occurs</code>. If no status change is detected, <code>no new entry is written to the database</code>, reducing unnecessary writes and improving performance. However, to ensure some data is still recorded, the status will be written to the database at least <code>once per hour</code>, even if no changes occur.</p> <p>Before saving the changes, we can further optimize storage by preventing the master item from being stored in the database. Navigate back to the <code>Item</code> tab and set <code>History</code> to <code>Do not store</code>.</p> Note <p>If you change your mind and want to keep the history then our preprocessing step will at least not save it every minute but only when there are changes or once every hour.</p> <p>The RAW item is only used to feed data into the LLD discovery rule and <code>LLD items</code>. Since we do not need to retain historical data for this master item, <code>discarding it</code> saves database space and improves efficiency.</p> <p>By applying these optimizations, we ensure that our monitoring system remains efficient while still capturing necessary status updates.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-a-low-level-discovery-lld-filter","title":"Creating a Low-Level Discovery (LLD) Filter","text":"<p>Now lets have some fun and use a script that generates the output of our text file with random statuses so that we have a more close to real live environment. Create in the folder where your <code>printer-status.txt</code> file is a new file called <code>printer-demo.py</code> and paste following content in it.</p> <p>python script</p> <pre><code>#!/usr/bin/env python3\n\nimport json\nimport os\n\nSTATUS_FILE = \"printer-status.txt\"\n\n# Define printers\nprinters = [\n    {\"name\": \"Color Printer 1\", \"status\": \"OK\"},\n    {\"name\": \"Color Printer 2\", \"status\": \"OK\"},\n    {\"name\": \"B&amp;W Printer 1\", \"status\": \"OK\"},\n    {\"name\": \"B&amp;W Printer 2\", \"status\": \"NOK\"},\n    {\"name\": \"This is not a printer\", \"status\": \"NOK\"}\n]\n\n# Check if the status file exists\nif os.path.exists(STATUS_FILE):\n    # Read the existing status from the file\n    with open(STATUS_FILE, \"r\") as f:\n        output = json.load(f)\n    printers = output[\"data\"]\nelse:\n    # If no file, set initial values\n    output = {\"data\": printers}\n\n# Toggle statuses\nfor printer in printers:\n    printer[\"status\"] = \"NOK\" if printer[\"status\"] == \"OK\" else \"OK\"\n\n# Write the new status to file\nwith open(STATUS_FILE, \"w\") as f:\n    json.dump({\"data\": printers}, f, indent=2)\n\nprint(f\"Printer status updated and written to {STATUS_FILE}\")\n</code></pre> <p>Once you have created the script make it executable with <code>chmod +x printer-demo.py</code> and then run the script with the following command <code>./printer-demo.py</code>.</p> <p>If you cannot run the script then check the python environment or try to run it as <code>python printer-demo.py</code>.</p> <p>This script will change the status of our printers you can verify this in the <code>Latest data</code> page.</p> <p> 8.7 Latest data</p> <p>But hey wait as we can see there is an extra devices detected with the name <code>This is not a printer</code> and Zabbix hasn't detected any status for it .....</p> <p>That we don't have any status yet is normal remember we did a check only once per hour with our Preprocessing step so first time the data was changed the new device was detected. If the status from the device changes again zabbix will create an update for the item and a status will be processed.</p> Note <p>Low Level will work in 2 steps first step is the detection of the new devices and second step is populating the items with the correct data. Remember that we did an item interval of 1m so it can take up to 1m before our items gets a new value.</p> <p>Lets see now how we can remove the device <code>this is not a printer</code> from our list since we don't want to monitor this one.</p> <p>Let's go back to our LLD discovery rule this time to the tab Filters and add the following to the fields:</p> <ul> <li>Label : {#PRINTER.NAME} <code>does not match</code></li> <li>regular expression : <code>{$PRINTERS.NOT.TO.DETECT}</code></li> </ul> <p> 8.8 LLD Filters</p> <p>Press update and go to our Host and click on the tab <code>Macros</code>. Here we will create our macro and link it with a regular expression. Fill in the following values :</p> <ul> <li>Macro: {$PRINTERS.NOT.TO.DETECT}</li> <li>Value : ^This is not a printer$</li> </ul> <p> 8.9 LLD Filter Macros</p> <p>After executing our discovery rule and sending updated values to Zabbix, we can verify the filter's effectiveness by checking the <code>Latest data</code> view, where the excluded device no longer appears.</p> <p>When navigating to the <code>Items</code> section of our host, we'll observe that the previously discovered item for the filtered device now displays a <code>Disabled</code> status with an accompanying orange exclamation mark icon. Hovering over this icon reveals the system notification: <code>The item is not discovered anymore and has been disabled, will be deleted in 6d 23h 36m.</code></p> <p>This automatic cleanup behavior for undiscovered items follows Zabbix's default retention policy, which can be customized by modifying the <code>Keep lost resources period</code> parameter in the Discovery rule settings to align with your organization's monitoring governance requirements.</p> <p>This concludes our chapter.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#conclusion","title":"Conclusion","text":"<p>Low-Level Discovery in Zabbix represents a powerful approach to dynamic monitoring that scales efficiently with your infrastructure. Through this chapter, we've explored how the combination of LLD with dependent items and discovery filters creates a robust framework for automated monitoring that remains both comprehensive and manageable.</p> <p>By implementing dependent items within discovery rules, we've seen how to build sophisticated monitoring relationships without the performance overhead of multiple direct checks. This approach not only reduces the load on monitored systems but also simplifies the overall monitoring architecture by establishing clear parent-child relationships between metrics.</p> <p>The strategic application of LLD filters, as demonstrated in our examples, transforms raw discovery data into precisely targeted monitoring. Instead of drowning in irrelevant metrics, your Zabbix instance now focuses only on what matters to your organization's specific needs. Whether filtering by regex patterns, system types, or operational states, these filters act as the gatekeepers that maintain monitoring relevance as your environment expands.</p> <p>Perhaps most importantly, the techniques covered in this chapter enable truly scalable monitoring that grows automatically with your infrastructure. New servers, applications, or network devices are seamlessly incorporated into your monitoring framework without manual intervention, ensuring that visibility expands in lockstep with your environment.</p> <p>As you implement these concepts in your own Zabbix deployments, remember that effective monitoring is about balance and capturing sufficient detail while avoiding data overload. The combination of LLD, dependent items, and thoughtful filtering provides exactly this balance, giving you the tools to build monitoring systems that scale without sacrificing depth or precision.</p> <p>With these techniques at your disposal, your Zabbix implementation can evolve from a basic monitoring tool to an intelligent system that adapts to your changing infrastructure, providing actionable insights without constant reconfiguration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#questions","title":"Questions","text":"<ul> <li>How do LLD filters change the monitoring paradigm from \"collect everything\"   to a more targeted approach?</li> <li>How does Zabbix LLD fundamentally differ from traditional static monitoring   approaches ?</li> <li>Break down the components of the JSONPath expression $.data..[?(@.name=='{#PRINTER.NAME}')].status.first()   and explain how each part contributes to extracting the correct data.</li> <li>How would you modify the example to monitor printer ink levels in addition to   printer status?</li> </ul>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.jsonquerytool.com/</li> <li>https://regex101.com/</li> <li>https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery#filter</li> <li>https://blog.zabbix.com/lld-filtering-with-macros/24959/</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/chapter/","title":"Leveraging custom items for extending the Zabbix environment","text":"<p>In this chapter, we'll take a deep dive into extending Zabbix functionality beyond its default item options. We'll cover the script item, external checks, remote commands, user parameters, and other advanced features that allow you to customize and expand your monitoring capabilities.</p> <p>You'll learn how to use these tools to integrate custom logic, monitor external applications, and automate tasks, making Zabbix an even more powerful and flexible solution tailored to your specific needs. </p> <p>By the end, you'll have the skills to push Zabbix beyond its default configuration, unlocking new possibilities for complex and unique monitoring scenarios.</p>"},{"location":"ch09-zabbix-extending/frontend-scripts/","title":"Frontend Scripts","text":"<p>So, you're diving into the world of Zabbix frontend scripts, and you're in for  a treat! These little powerhouses unlock a whole new level of flexibility within your Zabbix environment. Imagine being able to trigger custom actions directly from your Zabbix interface \u2013 whether it's as an action operation responding to an alert, a manual intervention on a host, or a targeted response to a specific event.</p> <p>What's truly exciting is where you can weave these scripts into your daily Zabbix workflow. Picture adding custom menu items right within your Hosts, Problems, Dashboards, and even your Maps sections. This means the information and tools you need are always at your fingertips.</p> <p>Ultimately, frontend scripts empower you to extend Zabbix far beyond it's out-of-the-box capabilities. They provide that crucial extra layer of customization, allowing you to seamlessly integrate your own scripts and workflows directly into the Zabbix frontend. Get ready to harness this power and tailor Zabbix precisely to your needs!</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#creating-a-frontend-scripts","title":"Creating a frontend scripts","text":"<p>For this example, we'll work with a frontend script I developed that lets you put hosts in maintenance mode. This script makes it possible to add a convenient option in your GUI, allowing you to place hosts in maintenance with just a few clicks. You can download the script from my GitHub repository :</p> <p>https://github.com/Trikke76/Zabbix/blob/master/maintenance/zabbix-maintenance.py</p> <p>Download this script and place it in <code>/usr/bin/</code> </p> <pre><code>cd /usr/bin/\nsudo dnf install wget -y\nwget https://raw.githubusercontent.com/Trikke76/Zabbix/refs/heads/master/maintenance/zabbix-maintenance.py -P /usr/bin/\nchmod +x /usr/bin/zabbix-maintenance.py\n</code></pre> <p>Our Python script relies on an additional package that needs to be installed before running. Make sure you have this dependency set up on your system before executing the script.</p> <p>install python3-requests</p> <p>Red Hat <pre><code>dnf install python3-requests\n</code></pre> Ubuntu <pre><code>sudo apt install python3-requests\n</code></pre></p> Note <p>For the user you can use the user <code>Admin</code> or you can create a new user. but make sure this user has enough permissions to create a maintenance mode. It's best practice to create a dedicated user for this in production.</p> <p>Starting with Zabbix 7.2, token-based authentication is required when working with the API. Each user can create their own tokens, while the <code>Super admin</code> has management privileges over all tokens.</p> <p>To create a token for your Admin user:</p> <ul> <li>Navigate to <code>User settings</code></li> <li>Select the <code>API tokens</code> sections</li> </ul> <p></p> <p>9.1 User API</p> <p>After selecting <code>API tokens</code> from the menu, you'll land on the <code>API tokens</code> page. Look for the <code>Create API</code> token button in the top right corner and click it to begin the creation process.</p> <p></p> <p>9.2 Create API page</p> <p>A popup window will appear for creating your new API token. You'll need to provide a unique <code>Name</code> for your token. While there's an option to set an expiration date, we'll keep our token active indefinitely by leaving the time limit settings unchanged.</p> <p></p> <p>9.3 Create new API token</p> <p>A confirmation popup will display your newly created API token, showing the <code>Auth token</code> string generated by Zabbix. Be sure to copy or write down this token immediately, as it will no longer be visible once you click <code>Close</code>. If you lose this token, you'll need to delete it and create a new one. There's no way to retrieve or view the token again through the interface.</p> <p></p> <p>9.4 Added API token</p> <p>The next step is updating our script with the proper connection details. Edit the script and modify the variables to include your Zabbix server's correct URL and the token you just created. Pay attention to whether your server uses HTTP or HTTPS protocol. Be sure the URL in your script matches your actual server configuration.</p> <p>Replace variables</p> <p><pre><code>sudo vi /usr/bin/zabbix-maintenance.py\n</code></pre> <pre><code>ZABBIX_API_URL = \"https://zabbix-url.be/api_jsonrpc.php\"\nZABBIX_API_TOKEN = \"API TOKEN\"\n</code></pre></p> <p>Now that our script is properly configured, we need to set it up in the Zabbix interface. From the main Zabbix menu, navigate to <code>Alerts</code> and then select <code>Scripts</code> from the dropdown to access the scripts configuration area.</p> <p></p> <p>9.5 Scripts menu</p> <p>You should already see a few existing script  like <code>Ping</code>, <code>Traceroute</code>, .... that's normal those where created with the installation of Zabbix. Press the button <code>Create scripts</code> on the top right corner. A now form will popup where we will configure our maintenance script. Fill out the following fields:</p> <ul> <li>Name: Create maintenance no data collection</li> <li>Scope : Manual host action</li> <li>Menu path : Maintenance</li> <li>Type : Script </li> <li>Execute on : Zabbix proxy or server</li> <li>Commands : <code>/usr/bin/zabbix-maintenance.py create \"{HOST.HOST}\" {MANUALINPUT} no</code></li> </ul> <p>At the bottom we have a tab <code>Advanced configuration</code> Click on this and extra configuration options will appear.</p> <p>As you probably noticed we used in our <code>Command</code> the macro <code>{MANUALINPUT}</code> this will be used to gather information from a user prompt. This allows us to ask the user to fill in the time he wants to place the host in maintenance.</p> <ul> <li>Enable user input : yes</li> <li>Input prompt : How many minutes do you want to place the host in maintenance ?</li> <li>Input type : String (A dropdown box can also be used in case you have a list of options)</li> <li>Default string : 60 (but we can use anything this will just be the default answer)</li> <li>Input validation rule : <code>(\\d+)</code> (our regex in perl to only allow digits)</li> <li>Enable confirmation : yes</li> <li>Confirmation text : Are you sure ?</li> </ul> <p>If everything went well you should end up with a similar looking page :</p> <p></p> <p>9.6 Script form</p> <p>When your are ready press <code>Add</code> at the bottom of the form. Let's test our script to see if it works.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#testing-the-frontend-script","title":"Testing the frontend script","text":"<p>In Zabbix go to the menu <code>Monitoring</code> =&gt; <code>Hosts</code> and click on the host <code>Zabbix server</code> and from the <code>scripts</code> menu select <code>Maintenance</code> and click on the sub Menu <code>Create maintenance no data collection</code>. You should see a popup asking you how  many minutes you like to place the host in maintenance.</p> <p></p> <p>9.7 Create maintenance</p> <p>When we click continue however we get a popup telling us that Zabbix cannot execute the script.</p> <p></p> <p>9.8 Error executing script</p> <p>This error is normal Zabbix has an option in the configuration file of the <code>Zabbix server</code> and the proxy that blocks the execution of global scripts. </p> <p>We get a notification that <code>Zabbix</code> cannot execute the script. The config file has an option to block global executions by default in the server or proxy config activate the option \"EnableGlobalScripts=1\". Go to the <code>Zabbix server</code> configuration file with you favourite editor and enable the parameter and restart the server service. </p> <p>If all goes well this time you will see a popup telling you it was successful this time.</p> <p></p> <p>9.9 Maintenance successful</p> <p>When we look in our Zabbix menu under <code>Data collection</code> =&gt; <code>Maintenance</code> we can see that a new maintenance was created for our host with the time we had specified. This will allow us to create Maintenance windows for hosts from the frontend with only a few clicks.</p> <p>Even better we are now able to allow certain non <code>Admin</code> users to create <code>maintenance periods</code> for hosts without the need to give special access rights or create special profiles. We have in our config of our script the option to limit the use of this <code>frontend script</code> to certain <code>Host groups</code> and <code>User groups</code>.</p> Tip <p>You can now create the same script but add the option <code>yes</code> instead of <code>no</code> when it comes to data collection and you can also create a script to delete the maintenance period by just replacing <code>create</code> with <code>delete</code> and remove all options after \"{HOST.HOST}\". This way you are able to create <code>maintenance periods</code> and delete them when not needed anymore per host.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've reached the end of this journey into Zabbix frontend scripts. By now, you should have a solid understanding of how to create, implement, and manage these tools to extend Zabbix's functionality.</p> <p>We've covered a lot of ground, from the initial steps of crafting your own scripts to seamlessly integrating them into the Zabbix frontend. You've learned how to gather user input to make your scripts more dynamic and versatile, and, crucially, how to configure user and host permissions to maintain a secure and controlled Zabbix environment.</p> <p>The ability to tailor Zabbix to your specific needs with frontend scripts is a significant advantage. It allows you to automate repetitive tasks, streamline workflows, and gain deeper insights into your infrastructure. Whether you're automating routine checks, creating custom dashboards, or integrating with external systems, the knowledge you've gained here will enable you to effectively leverage Zabbix.</p> <p>Remember, the examples and techniques presented in this book provide a foundation. The true power of Zabbix frontend scripts lies in their flexibility and your ability to adapt them to your specific needs. As you continue to explore and experiment, you'll discover new ways to enhance your monitoring capabilities and optimize your Zabbix setup.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#questions","title":"Questions","text":"<ul> <li>Why are Zabbix frontend scripts useful?</li> <li>What are some ways Zabbix frontend scripts can help automate tasks?</li> <li>Why is it important to configure user and host permissions when using Zabbix frontend scripts?</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://blog.zabbix.com/setting-up-manual-ticket-creation-using-zabbix-frontend-scripts/15550/</li> <li>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/administration/scripts</li> <li>https://github.com/Trikke76/Zabbix/tree/master/maintenance</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/global-scripts/","title":"Global scripts","text":"","tags":["advanced","expert"]},{"location":"ch10-zabbix-discovery/chapter/","title":"Automating Your Monitoring with Auto Discovery and Active Agent Auto Registration","text":"<p>In this chapter, we'll explore two powerful automation features in Zabbix: auto discovery and active agent auto-registration. These tools are essential for scaling your monitoring efforts by minimizing manual configuration and ensuring new devices and services are seamlessly integrated into your Zabbix environment.</p> <p>We'll begin with auto discovery, which enables Zabbix to automatically detect and monitor new hosts and services within your network. You'll learn how to configure discovery rules, actions, and conditions to automate the onboarding process, making your monitoring more dynamic and adaptive to changes in your infrastructure.</p> <p>Next, we'll dive into active agent auto registration, which simplifies the management of Zabbix agents, especially in large or rapidly changing environments. We'll cover how to set up auto-registration rules that allow agents to register themselves with the Zabbix server, reducing administrative overhead and ensuring all relevant data is captured efficiently.</p> <p>By the end of this chapter, you'll have a thorough understanding of how to leverage auto-discovery and auto-registration to create a more automated, scalable, and efficient monitoring system.</p>"},{"location":"ch11-zabbix-visualisation/chapter/","title":"Graphs, Dashboards, Reports, Maps and other visualisation","text":"<p>In this chapter, we delve into the heart of Zabbix's visualization capabilities, where data comes to life through intuitive and powerful visual tools. From dynamic graphs that track your system's performance to comprehensive dashboards that provide at-a-glance insights, Zabbix offers a rich set of visualization features to help you understand and manage your infrastructure.</p> <p>We'll start by exploring graphs, which allow you to monitor metrics over time, helping you spot trends and anomalies with ease. Next, we'll move on to dashboards, where you can aggregate multiple widgets into a single view for a more holistic understanding of your network's health.</p> <p>Then, we'll discuss reports an essential feature for summarizing and sharing insights with your team or stakeholders. Finally, we'll cover maps, a unique visualization tool that lets you create interactive representations of your network topology, making it easier to pinpoint issues and understand relationships between different components.</p> <p>By the end of this chapter, you'll have a comprehensive understanding of how to leverage Zabbix's visualization tools to monitor, analyse, and communicate the state of your IT environment effectively.  Whether you're a seasoned administrator or just starting with Zabbix, mastering these visual tools will enhance your ability to manage complex infrastructures and ensure optimal performance.</p> <p>Let's dive into the world of Zabbix visualizations and unlock the full potential of your monitoring setup.</p>"},{"location":"ch12-zabbix-api/chapter/","title":"Zabbix API","text":"<p>The Zabbix API is a crucial part for anyone looking to expand the capabilities of their Zabbix environment, automate time-consuming tasks and get information for usage in other systems. In this chapter we will go over various of these capabilities to expand our knowledge of the Zabbix API.</p>"},{"location":"ch12-zabbix-api/self-engaging/","title":"Self-engaging","text":"<p>Welcome to Zabbix API self engaging methods. All upcoming chapters will address the tools available to allow software to re-engage with itself. It is like developing a small service(s) which runs on the top of Zabbix and do exactly the tasks we told to do. This is like simulating an extra employee in the company.</p>"},{"location":"ch12-zabbix-api/self-engaging/#api-variables","title":"API variables","text":"<p>To start to engage with Zabbix API:</p> <p>Create a dedicated service user. Go to Users =&gt; Users, click Create user, set Username api, install Groups No access to the frontend, Under Permissions tab, assign user role Super admin role which will automatically give user type Super admin.</p> <p></p> <p>12.1 Create API user</p> <p>Permissions tab:</p> <p> </p> <p>12.2 API user role and user type</p> <p>Under Users =&gt; API tokens press New API token, assign user api. We can uncheck Set expiration date and time, press Add. Copy macro to clipboard.</p> <p> </p> <p>12.3 Add token to user object</p> <p>Visit Administration =&gt; Macros and install macro. To simulate all upcoming chapters much faster, consider running token in plain text.</p> <p>Token <code>dafa06e74403ca317112cf5ddd3357b2ad2a2c5cb348665f294a53b4058cfbcf</code> must be placed:</p> <pre><code>{$ZABBIX.API.TOKEN}\n</code></pre> <p>Address <code>https://zabbix.book.the</code> of the frontend server must be used via:</p> <pre><code>{$ZABBIX.URL}\n</code></pre> <p>Later throughout chapters, we will use a reference on the API endpoint in a format of:</p> <pre><code>{$ZABBIX.URL}/api_jsonrpc.php\n</code></pre> <p>Now we can take new 2 variables and install globally:</p> <p></p> <p>12.4 User macros</p>"},{"location":"ch12-zabbix-api/self-engaging/#first-api-call","title":"First API call","text":"<p>If you feel new to Zabbix API, try this curl example from Zabbix frontend server.</p> <p>Set bash variables:</p> <pre><code>ZABBIX_API_TOKEN=\"dafa06e74403ca317112cf5ddd3357b2ad2a2c5cb348665f294a53b4058cfbcf\"\nZABBIX_URL=\"https://zabbix.book.the/api_jsonrpc.php\"\n</code></pre> <p>This snippet is tested and compatible with version 7.0/7.4: <pre><code>curl --insecure --request POST \\\n--header 'Content-Type: application/json-rpc' \\\n--header 'Authorization: Bearer '$ZABBIX_API_TOKEN \\\n--data '{\"jsonrpc\":\"2.0\",\"method\":\"proxy.get\",\"params\":{\"output\":[\"name\"]},\"id\":1}' \\\n$ZABBIX_URL\n</code></pre></p> <p>Setting Bearer token in header is available and recommended since 7.0.</p> <p>Setting a static token is available since 6.0. In version 6.0, the token is not in header, but inside JSON body like this: <pre><code>curl --insecure --request POST \\\n--header 'Content-Type: application/json-rpc' \\\n--data '{\"jsonrpc\":\"2.0\",\"method\":\"proxy.get\",\"params\":{\"output\":[\"host\"]},\"auth\":\"'\"$ZABBIX_API_TOKEN\"'\",\"id\":1}' \\\n$ZABBIX_URL\n</code></pre></p>"},{"location":"ch12-zabbix-api/self-engaging/#host-group-membership-http-agent","title":"Host group membership (HTTP agent)","text":"<p>Use case</p> <p>Every time an email arrives user would love to see all host groups the host belongs.</p> <p>Implementation</p> <p>Use {HOST.HOST} as an input for the \"host.get\" API method and find out about host group membership. Format reply in one line, store it in inventory.</p> <p>An item type \"HTTP agent\" is fastest way to run a single Zabbix API call and retrieve back result. This is possible since Zabbix 6.0 where configuring a static session token becomes possible. An upcoming solution is tested and works on version 7.0/7.4</p> <p>Create new HTTP agent item</p> Field Value Item name <code>host.get</code> Type <code>HTTP agent</code> Key <code>host.get</code> Type of information <code>Text</code> URL <code>{$ZABBIX.URL}/api_jsonrpc.php</code> Request type <code>POST</code> Request body type <code>JSON data</code> Update interval <code>1d</code> Populates host inventory field <code>Site rack location</code> <p>Request body:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"host.get\",\n    \"params\": {\n        \"output\": [\"hostgroups\"],\n        \"selectHostGroups\": \"extend\",\n        \"filter\": {\"host\":[\"{HOST.HOST}\"]}\n    },\n    \"id\": 1\n}\n</code></pre> <p>Headers</p> Field Value Authorization <code>Bearer {$ZABBIX.API.TOKEN}</code> <p></p> <p>12.5 Host get method via HTTP agent item</p> <p>Preprocessing steps</p> Name Parameters JSONPath <code>$.result[0].hostgroups[*].name</code> JavaScript <code>return JSON.parse(value).join(',');</code> <p></p> <p>12.6 Preprocessing</p> <p>Last step is to store the outcome in the inventory. Scroll down to the bottom of HTTP agent item and select an inventory field for example \"Site rack location\".</p> <p>To access suggested inventory field, we must use: <pre><code>{INVENTORY.SITE.RACK}\n</code></pre></p> <p>To include extra information inside the message template follow this lead:</p> <p></p> <p>12.7 Inventory fields in media type</p> <p>Warning</p> <p>If data collection is done by Zabbix proxy, it is possible the proxy is incapable to reach Zabbix frontend server due to limitation in firewall. Use <code>curl -kL \"https://zabbix.book.the\"</code> to test!</p>"},{"location":"ch12-zabbix-api/self-engaging/#auto-close-problem-webhook","title":"Auto close problem (Webhook)","text":"<p>Use case</p> <p>Due to reason of not being able to find a recovery expression for a trigger, need to close the event automatically after certain time.</p> <p>Implementation</p> <p>Trigger settings must support <code>Allow manual close</code>. On trigger which needs to be auto closed there must be a tag <code>auto</code> with a value <code>close</code>. An action will invoke a webhook which will use Zabbix API to close event.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p> </p> <p>12.13 Auto close problem</p> Field Value Name <code>Automatically close problem</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value eventid <code>{EVENT.ID}</code> msg <code>Auto closed by API</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script: <pre><code>var params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar eventAcknowledge = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"event.acknowledge\",\"params\":{\"eventids\":\"'+params.eventid+'\",\"action\":1,\"message\":\"'+params.msg+'\"},\"id\":1}'\n));\n\nreturn JSON.stringify(eventAcknowledge);\n</code></pre></p> <p>For the triggers which need to be closed automatically, we need to:</p> <p>1) Set <code>Allow manual close</code> checkbox ON</p> <p> </p> <p>12.8 Allow manual close</p> <p>2) Install tag <code>auto</code> with value <code>close</code></p> <p> </p> <p>12.9 Trigger tags</p> <p>Go to Alerts =&gt; Actions =&gt; Trigger actions</p> <p>Create an action which will be targetable by using tag name <code>auto</code> with a tag value <code>close</code>.</p> <p> </p> <p>12.10 Conditions for action</p> <p>It's important to not create operation step 1, but start operation with step 2:</p> <p></p> <p>12.11 A delayed operation</p> <p>The Default operation step duration field will serve the purpose to tell how long the event will be in problem state. </p> <p></p> <p>12.12 Close event later</p> <p>This solution has been tested with 7.0/7.4</p>"},{"location":"ch12-zabbix-api/self-engaging/#self-destructive-host-webhook","title":"Self destructive host (Webhook)","text":"<p>Use case</p> <p>On a big infrastructure with thousands of devices there is no human who can track which devices are deprovisioned. Need to automatically remove unhealthy devices.</p> <p>Implementation</p> <p>Problem events such as \"Zabbix agent is not available\" or \"No SNMP data collection\" sitting too long in problem state will invoke a webhook to delete the host.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p> </p> <p>12.13 Auto close problem</p> Field Value Name <code>Delete host</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value hostid <code>{HOST.ID}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// delete host via Zabbix API\nvar params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar hostDelete = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.delete\",\"params\":['+params.hostid+'],\"id\":1}'\n));\n\nreturn JSON.stringify(hostDelete);\n</code></pre> <p>To setup action, the trigger must running a tag <code>delete</code> with value <code>host</code>. The conditions can be to target tag plus value and trigger severity:</p> <p> </p> <p>12.15 Delete host target tag and tag value</p> <p>Here we are running a delayed action with a step number 31. Because default duration is 1d, the host will be deleted after 30 days.</p> <p></p> <p>12.16 Delete host operations</p>"},{"location":"ch12-zabbix-api/self-engaging/#replace-host-visible-name-script-item","title":"Replace host Visible name (Script item)","text":"<p>Use case</p> <p>Replace host \"Visible name\" with a name which is already stored in inventory</p> <p>Implementation</p> <p>The \"Script\" item, will read metadata for all hosts. Will read the Name field stored inside inventory and compare with current Visible name of host. If inventory field is empty, the visible field will not be replaced.</p> <p>This is maximum efficiency to run a single API call once per day. If nothing needs to be done, \"host.update\" API calls will not be wasted. No SQL UPDATE operations for the Zabbix database :)</p> <p>Go to Data collection =&gt; Hosts =&gt; press Create host</p> Field Value Host name <code>Update host Visible name</code> Host groups <code>Daily Zabbix API calls</code> <p>Go to Items and press Create item</p> Field Value Name <code>Visible name</code> Type <code>Script</code> Key <code>visible.name</code> Type of information <code>Text</code> Update interval <code>1d</code> <p>Parameters:</p> Field Value token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// load all parameters in memory\nvar params = JSON.parse(value);\n\n// new API call\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\n// obtain Bare minimum fields: host \"Visible name\" and inventory \"Name\"\nvar hostData = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.get\",\"params\":{\"output\":[\"hostid\",\"inventory\",\"name\",\"host\"],\"selectInventory\":[\"name\"]},\"id\":1}'\n)).result;\n\nvar listOfErrors = [];\nvar listOfSuccess = [];\n\n// iterate through host list\nfor (var h = 0; h &lt; hostData.length; h++) {\n\n    // validate if inventory \"name\" element exists\n    if (typeof hostData[h].inventory.name !== 'undefined') {\n\n        // if \"name\" field is not empty\n        if (hostData[h].inventory.name.length &gt; 0) {\n\n            // compare if inventory name is not the same as host visible name\n            if (hostData[h].inventory.name !== hostData[h].name) {\n\n                Zabbix.Log(params.debug, 'Host visible name field, host: ' + hostData[h].name + ' need to reinstall visible name');\n\n                // formulate payload for easy printing for troubleshoting\n                payload = '{\"jsonrpc\":\"2.0\",\"method\":\"host.update\",\"params\":' + JSON.stringify({\n                    'hostid':hostData[h].hostid,\n                    'name':hostData[h].inventory.name\n                    }) + ',\"id\":1}';\n\n                Zabbix.Log(params.debug, 'Host visible name field, payload: ' + payload);\n\n                try {\n                    hostUpdate = JSON.parse(request.post(params.url, payload));\n\n                    // save API errors, like name already exists:\n                    if (typeof hostUpdate.error !== 'undefined') { listOfErrors.push({'error':hostUpdate.error,'origin':hostData[h].host}) }\n\n                    // save successfull operation:\n                    if (typeof hostUpdate.result !== 'undefined') { listOfSuccess.push(hostUpdate.result) }\n\n                }\n                catch (error) {\n                    throw 'noo';\n                }\n\n            }\n\n        }\n\n    }\n\n}\n\nreturn JSON.stringify({ 'listOfSuccess': listOfSuccess, 'errors': listOfErrors });\n</code></pre> <p>Warning</p> <p>The chances of having duplicate host names are still possible. In this case, the script will continue to parse all hosts and will retry update operation. Ensure $.listOfErrors in output is an empty list.</p> <p>All together</p> <p></p> <p>12.17 Script item, host Visible name</p> <p>The item will be sit at host level and serve a purpose of cronjob</p> <p></p> <p>12.18 Script item ready</p> <p>This is tested and works with Zabbix 7.0</p>"},{"location":"ch12-zabbix-api/self-engaging/#cleanup-unused-zbx-interfaces-webhook","title":"Cleanup unused ZBX interfaces (Webhook)","text":"<p>Use case 1</p> <p>Default \"Host availability\" widget will print \"Unknown\" interfaces if none of Zabbix agent passive checks are using it. Need to remove interface to get \"Unknown\" interface number closer to 0</p> <p></p> <p>12.19 Unknown ZBX passive interfaces</p> <p>Use case 2</p> <p>Active checks by design do not require an interface. Having a defined interface will mislead the team to understand how active checks actually works.</p> <p>Use case 3</p> <p>https://cloud.zabbix.com/ is good for server monitoring with active checks. While registering new servers, the IP address of host interface is not relatable to infrastructure. Remove the interface to make setup look more clean.</p> <p>Implementation</p> <p>To bring aboard a host, run a webhook to validate if an interface is used by any passive Zabbix agent items. If it's not used, then remove interface.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p></p> <p>12.20 Remove unused ZBX interfaces</p> <p>Webhook</p> Field Value Name <code>Remove unused ZBX interfaces</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value debug <code>4</code> host <code>{HOST.HOST}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// Load all variables\nvar params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\n// Pick up hostid\nvar hostid = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.get\",\"params\":{\"output\":[\"hostid\"],\"filter\":{\"host\":[\"' + params.host + '\"]}},\"id\":1}'\n)).result[0].hostid;\n\n// Extract all passive Zabbix agent interfaces\nvar allAgentInterfaces = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.get\",\"params\":{\"output\":[\"interfaceid\",\"main\"],\"filter\":{\"type\":\"1\"},\"hostids\":\"' + hostid + '\"},\"id\":1}'\n)).result;\n\n// If any ZBX interface was found then proceed fetching all items because need to find out if any items use an interface\nif (allAgentInterfaces.length &gt; 0) {\n    // Fetch all items which are defined at host level and ask which item use passive ZBX agent interface\n    // Simple check items (like icmpping) also can use zabbix agent interface\n    var items_with_int = JSON.parse(request.post(params.url,\n        '{\"jsonrpc\":\"2.0\",\"method\":\"item.get\",\"params\":{\"output\":[\"type\",\"interfaces\"],\"hostids\":\"' + hostid + '\",\"selectInterfaces\":\"query\"},\"id\":1}'\n    )).result;\n}\n\n// Define an interface array. This is required if more than one ZBX interface exists on host level\nvar interfacesInUse = [];\n\n// Iterate through all ZBX interfaces\nfor (var zbx = 0; zbx &lt; allAgentInterfaces.length; zbx++) {\n\n    // Go through all items which is defined at host level\n    for (var int = 0; int &lt; items_with_int.length; int++) {\n\n        // There are many items which does not need interface. Specifically analyze the ones which has an interface defined\n        if (items_with_int[int].interfaces.length &gt; 0) {\n\n            // There is an interface found for the item\n            if (items_with_int[int].interfaces[0].interfaceid == allAgentInterfaces[zbx].interfaceid) {\n                // Put this item in list which use an interface\n                var row = {};\n                row[\"itemid\"] = items_with_int[int].itemid;\n                row[\"interfaceid\"] = allAgentInterfaces[zbx].interfaceid;\n                row[\"main\"] = allAgentInterfaces[zbx].main;\n                interfacesInUse.push(row);\n            }\n        }\n    }\n}\n\n// Final scan to identify if any interface is wasted\nvar needToDelete = 1;\nvar evidenceOfDeletedInterfaces = [];\nvar mainNotUsed = 0;\nfor (var defined = 0; defined &lt; allAgentInterfaces.length; defined++) {\n\n    // Scan all items\n    needToDelete = 1;\n    for (var used = 0; used &lt; interfacesInUse.length; used++) {\n        if (allAgentInterfaces[defined].interfaceid == interfacesInUse[used].interfaceid) {\n            needToDelete = 0;\n        }\n    }\n\n    // If flag was not turned off, then no items with this interface were found. No items are using this interface. Safe to delete\n    // Delete all slaves first\n    if (needToDelete == 1 &amp;&amp; allAgentInterfaces[defined].main == 0) {\n        var deleteInt = JSON.parse(request.post(params.url,\n            '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.delete\",\"params\":[\"' + allAgentInterfaces[defined].interfaceid + '\"],\"id\":1}'\n        ));\n        var row = {};\n        row[\"deleted\"] = deleteInt;\n        evidenceOfDeletedInterfaces.push(row);\n    }\n\n    if (needToDelete == 1 &amp;&amp; allAgentInterfaces[defined].main == 1) {\n        var mainNotUsed = allAgentInterfaces[defined].interfaceid;\n    }\n\n}\n\n// Delete main interface at the end\nif (mainNotUsed &gt; 0) {\n    var deleteInt = JSON.parse(request.post(params.url,\n        '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.delete\",\"params\":[\"' + mainNotUsed + '\"],\"id\":1}'\n    ));\n    var row = {};\n    row[\"deleted\"] = deleteInt;\n    evidenceOfDeletedInterfaces.push(row);\n}\n\nvar output = JSON.stringify({\n    \"allAgentInterfaces\": allAgentInterfaces,\n    \"interfacesInUse\": interfacesInUse,\n    \"evidenceOfDeletedInterfaces\": evidenceOfDeletedInterfaces\n});\n\nZabbix.Log(params.debug, 'Auto remove unused ZBX agent passive interfaces: ' + output)\n\nreturn 0;\n</code></pre> <p>To make webhook in action visit Alerts =&gt; Actions =&gt; Autoregistration actions. Press Create action. For example to auto register Linux servers, we can target a pattern \".lnx\" inside the hostname.</p> <p></p> <p>12.21 Conditions for ZBX active checks</p> <p>The operations will use newly made webhook</p> <p></p> <p>12.22 Operations of Zabbix agent autoregistration</p> <p>The complete picture is</p> <p></p> <p>12.23 Zabbix agent autoregistration completed</p>"},{"location":"ch12-zabbix-api/self-engaging/#read-log-file-from-yyyymmdd-filename-script","title":"Read log file from YYYY.MM.DD filename (Script)","text":"<p>Use case</p> <p>Requirement is to read a filename with today's pattern YYYY.MM.DD or YYYY_MM_DD or YYYYMMDD.</p> <p>Popular solution 1 - logrt</p> <p>Using \"logrt\" item key can be used to cover use case. However in case hundreds of files in directory, the CPU will have impact.</p> <p>Popular solution 2 - LLD rule</p> <p>We Zabbix LLD rule to find the files in directory. This method do not allow to store all data insize same itemid. When files are deleted from server, the items in Zabbix will get unsupported.</p> <p>Alternative solution</p> <p>We will use Zabbix API to create a global variables YYYY, MM, DD. Those will be universally available by any host, template. The \"cronjob host\" will run at least once per day and reinstall the date right after the midnight. Inside template level there will be a single/static item key which will be able to read today's log.</p> <p>Go to Data collection =&gt; Hosts =&gt; press Create host</p> Field Value Host name <code>Dude</code> Host groups <code>Cronjob</code> <p>Go to Items and press Create item</p> Field Value Name <code>Create or update global macro</code> Type <code>Script</code> Key <code>create.or.update.global.macro</code> Type of information <code>Text</code> Update interval <code>0</code> Custom intervals: Scheduling <code>h0m1s1</code> <p>Parameters:</p> Field Value 1_year <code>{$DATE:arg1.year}</code> 2_month <code>{$DATE:arg2.month}</code> 3_day <code>{$DATE:arg3.day}</code> 4_hour <code>{$DATE:arg4.hour}</code> 5_minute <code>{$DATE:arg5.minute}</code> 6_second <code>{$DATE:arg6.seconds}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>The script to create and maintain global variables:</p> <pre><code>// load all variables into memory\nvar params = JSON.parse(value),\n    now = new Date();\n\n// function to always print seconds, minutes, hours as 2 digits, even it its a 1 digit character\nfunction padLeft(value, length, char) {\n    value = String(value);\n    while (value.length &lt; length) {\n        value = char + value;\n    }\n    return value;\n}\n\n// define macros to check/create without '{$' an '}'\nvar macrosToCheck = [\n    'DATE:arg1.year',\n    'DATE:arg2.month',\n    'DATE:arg3.day',\n    'DATE:arg4.hour',\n    'DATE:arg5.minute',\n    'DATE:arg6.seconds'\n];\n\n// prepare values for replacement. order is important\nvar valuesToInsert = [\n    now.getFullYear().toString(),\n    padLeft(now.getMonth() + 1, 2, '0'),\n    padLeft(now.getDate(), 2, '0'),\n    padLeft(now.getHours(), 2, '0'),\n    padLeft(now.getMinutes(), 2, '0'),\n    padLeft(now.getSeconds(), 2, '0')\n];\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar allGlobalMacrosBefore = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.get\",\"params\":{\"output\":[\"globalmacroid\",\"macro\",\"value\"],\"globalmacro\":true},\"id\":1}'\n)).result;\n\n// prepare much compact array which holds only necessary values\nvar target = [];\nfor (var a = 0; a &lt; allGlobalMacrosBefore.length; a++) {\n    for (var b = 0; b &lt; macrosToCheck.length; b++) {\n        Zabbix.Log(4, 'macro update compare: ' + allGlobalMacrosBefore[a].macro + ' with ' + '{$' + macrosToCheck[b] + '}');\n        if (allGlobalMacrosBefore[a].macro === '{$' + macrosToCheck[b] + '}') {\n            Zabbix.Log(4, 'macro update: ' + allGlobalMacrosBefore[a].macro + ' === ' + '{$' + macrosToCheck[b] + '}');\n            target.push(allGlobalMacrosBefore[a]);\n        }\n    }\n}\n\n// check if the amount of macros to maintain match existing macro. this portion will execute if run template for the first time\nvar macroExists = 0;\nvar allCreateOperation = [];\nif (macrosToCheck.length !== target.length) {\n    // something is missing, need to find what. open every macro which is known by Zabbix\n    for (var b = 0; b &lt; macrosToCheck.length; b++) {\n        // reset the counter, so far macro has not been found\n        macroExists = 0;\n        for (var a = 0; a &lt; target.length; a++) {\n            Zabbix.Log(3, 'look for missing macro update: ' + target[a].macro + ' VS {$' + macrosToCheck[b] + '}');\n            if (target[a].macro === '{$' + macrosToCheck[b] + '}') {\n                macroExists = 1;\n                break;\n            }\n        }\n\n        // if the list was completed and macro was not found then create a new\n        if (macroExists !== 1) {\n            var createNew = JSON.parse(request.post(params.url,\n                '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.createglobal\",\"params\":{\"macro\":\"' + '{$' + macrosToCheck[b] + '}' + '\",\"value\":\"' + valuesToInsert[b] + '\"},\"id\":1}'\n            ));\n            allCreateOperation.push(createNew);\n        }\n    }\n}\n\n// prepare payload what needs to be updated\nvar dataForUpdate = [];\nfor (var m = 0; m &lt; target.length; m++) {\n    // iterate through importand macro names\n    for (var n = 0; n &lt; macrosToCheck.length; n++) {\n        // compare the macro name\n        if (target[m].macro === '{$' + macrosToCheck[n] + '}') {\n            // if value is not correct at the moment\n            Zabbix.Log(4, 'about to macro update: ' + target[m].value + ' VS ' + valuesToInsert[n]);\n            if (Number(target[m].value) !== Number(valuesToInsert[n])) {\n                var row = {}\n                row[\"globalmacroid\"] = target[m].globalmacroid;\n                row[\"value\"] = valuesToInsert[n];\n                dataForUpdate.push(row);\n            }\n        }\n    }\n}\n\nZabbix.Log(4, 'about to macro update: ' + JSON.stringify(dataForUpdate));\n\n\n// if there is anything to update (usually seconds has been changed)\nif (dataForUpdate.length &gt; 0) {\nvar allUpdateOperations = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.updateglobal\",\"params\":'+ JSON.stringify(dataForUpdate) +',\"id\":1}'\n));\n}\n\n\n// output\nreturn JSON.stringify({\n    'allCreateOperation': allCreateOperation,\n    'allUpdateOperations': allUpdateOperations\n})\n</code></pre> <p></p> <p>12.24 Create or reinstall global macros</p> <p>After running a script now, there are global variables available:</p> <p></p> <p>12.24 Global YYYY, MM, DD macros</p> <p>For log item monitoring we can use native log item key:</p> <pre><code>log[/var/log/zabbix/backup_{$DATE:arg1.year}.{$DATE:arg2.month}.{$DATE:arg3.day}.log]\n</code></pre> <p>In case need to analyze a single summary where file size is less than 16 MB, then can use:</p> <pre><code>vfs.file.contents[/var/log/backup/summary_{$DATE:arg1.year}.{$DATE:arg2.month}.{$DATE:arg3.day}.txt]\n</code></pre>"},{"location":"ch13-advanced-security/agent-security/","title":"Securing the agent","text":""},{"location":"ch13-advanced-security/chapter/","title":"Advanced set-up and security","text":"<p>In today's interconnected IT landscape, monitoring systems like Zabbix have become critical infrastructure components, offering visibility into the health and performance of entire networks. However, these powerful monitoring tools also represent potential security vulnerabilities if not properly secured. This chapter will explores the essential combination of SELinux and security best practices to harden your Zabbix deployment against modern threats.</p> <p>Security is not an optional feature but a fundamental requirement for any monitoring solution. Zabbix, with its extensive reach across your infrastructure, has access to sensitive system information and often operates with elevated privileges. Without proper security controls, a compromised monitoring system can become a launchpad for lateral movement across your network, potentially exposing critical business data and systems.</p> <p>We'll explore how SELinux's mandatory access control framework provides an additional security layer beyond traditional permissions, and how proper configuration can dramatically reduce your attack surface. You'll learn practical, implementable security measures that balance protection with functionality, ensuring your monitoring capabilities remain intact while defending against both external and internal threats.</p> <p>Whether you're a system administrator, security professional, or IT manager, understanding these security principles will help you transform your Zabbix deployment from a potential liability into a secure asset within your security architecture.</p>"},{"location":"ch13-advanced-security/partitioning-database/","title":"Partitioning a Zabbix MariaDB (MySQL) database with Perl","text":"<p>As your Zabbix environment grows, you'll eventually notice that the built-in housekeeper struggles to keep up. This happens because the Zabbix housekeeper works by scanning the database for each history or trend entry that exceeds its configured retention period and deletes them row by row. While this works for smaller setups, as the database grows your housekeeper process will reach a limit as to what it can delete in time.</p> <p>You can usually see this issue happening when the housekeeper process runs at 100% continuously and the database keeps growing larger. This indicated that the cleanup can't keep pace with incoming data.</p> <p>PostgreSQL users can use the native TimescaleDB plugin in Zabbix, which handles historical data retention more efficiently. <code>MariaDB</code> (or MySQL) doesn't have a similar built-in option.</p> <p>This is where <code>MariaDB</code> partitioning comes in.</p> Note <p>It's recommended to do partitioning right after setting up your Zabbix database. This process is a lot easier on a clean database, than it is on a database that is already is use.</p>"},{"location":"ch13-advanced-security/partitioning-database/#preparing-the-database","title":"Preparing the database","text":"<p>To begin implementing <code>MariaDB</code> partitioning, you'll need access with super privileges to your Zabbix database server. Before starting however, if you are going to partition an existing zabbix database make sure to create a backup of your database. We can do this in various ways and with various tools, but the built-in <code>mariadb-dump</code> tool will work perfectly fine.</p> <p>https://mariadb.com/kb/en/mariadb-dump/</p> <p>https://mariadb.com/kb/en/mariadb-import/</p> <p><code>Make sure to export your database backup to a different server (or disk at least).</code></p> <p>Keep in mind, data corruption can happen when performing large scale changes on your DB and as such also with partitioning.</p> <p>To prevent MariaDB running out of space, also make sure to have a generous amount of free space on your system. Running partitioning when you have no free space left can lead to a corrupted database data. Check your free space with:</p> <p>Check disk space availability</p> <pre><code>df -h\n</code></pre>"},{"location":"ch13-advanced-security/partitioning-database/#preparing-the-partitioning","title":"Preparing the partitioning","text":"<p>For existing Zabbix databases, partitioning can be a very time-consuming process. It all depends on the size of the database and the resources available to MariaDB-Server.</p> <p>This is why I always run partitioning in a <code>tmux</code> session. If <code>tmux</code> hasn't been installed onto your database server yet, do that now.</p> <p>Check disk space availability</p> <p>Red Hat-based <pre><code>dnf install tmux\n</code></pre> Debian-based <pre><code>apt install tmux\n</code></pre></p> <p>Now we can issue the tmux command to open a new tmux session:</p> <p>Open tmux session</p> <pre><code>tmux\n</code></pre> <p>This opens up an terminal session that will remain active even if our SSH session times out.</p> <p>Now, let's open up a notepad and prepare our partitions. We\u2019ll be partitioning the following tables:</p> Table name Purpose Data type history Stores numeric floating point values history_uint Stores numeric unsigned values history_str Stores text values up to 255 characters history_text Stores text values values up to 64kB history_log Stores text values up to 64kB with additional log related properties like timestamp history_bin Stores binary image data trends Stores the min/avg/max/count trends of numeric floating point data trends_uint Stores the min/avg/max/count trends of numeric unsigned data <p>We first will have first have to determine how long we want to store the information per table. MariaDB partitioning will take over the history and trend storage periods as usually configured in the Zabbix frontend. We will configure these retention periods later in the perl script.</p> <p>Let's say I want to store my history tables for <code>31 days</code> and my trend data for <code>15 months</code>. This allows me to troubleshoot in depth for a month and also audit my data for little over a year.</p> <p>Now this is where I open up a notepad and prepare my partitioning commands. Our history tables will be partitioned by day and our trends tables will be partitioned by month.</p> <p>So, let\u2019s start with our history_uint table:</p> <p>Prepare history partitioning (assuming today is May 10th 2025)</p> <pre><code>ALTER TABLE history_uint PARTITION BY RANGE ( clock)\n\n(PARTITION p2025_03_26 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-27 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_27 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-28 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_28 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-29 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_29 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-30 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_30 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-02 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-03 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-04 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-05 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-06 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-07 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-08 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-09 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-10 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-11 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-12 00:00:00\")) ENGINE = InnoDB);\n</code></pre> <p>As you can see, I only created <code>16</code> partitions here. I could have created <code>31</code>, which would have been better perhaps. <code>MariaDB</code> will now add all my older than 2025-03-26 data in that single partition. No problem, but it will take longer for my disk space to free up this bigger partitioning, after which is will only keep 1 day worth of data from that point.</p> <p>I also created a partition in the future, just to have it. The script will handle creating new partitions later for us.</p> <ul> <li>Creating less than 31 partitions: End up with 1 big partition until it is deleted</li> <li>Creating exactly 31 partitions: End up with the ideal set-up immediately, but more   to create.</li> </ul> <p>Now, create this <code>ALTER TABLE</code> commands with the partitions for all history tables. We then do the same for the trends tables:</p> <p>Prepare trends partitioning (assuming today is May 10th 2025)</p> <pre><code>ALTER TABLE trends_uint PARTITION BY RANGE ( clock)\n\n(PARTITION p2024_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-01-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-02-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-05-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-06-01 00:00:00\")) ENGINE = InnoDB);\n</code></pre> <p>As you can see, here we are partitioning by month instead of by day. Once again, I can create all partitions for 15 months, or less. That's up to us to decide. Prepared this command for all trends tables.</p> <p>Then it is time to login to MariaDB and start the partitioning. Please do not forget to use the <code>tmux</code> command as we mentioned earlier.</p> <p>Login to MariaDB</p> <p><code>mariadb -u root -p</code></p> <p>Execute the history and trends partitioning commands you prepared in your notepad one by one and make sure to wait for each to finish. As mentioned with large database, be patient. With a clean Zabbix database, this process should be near instant.</p>"},{"location":"ch13-advanced-security/partitioning-database/#setting-up-the-perl-script","title":"Setting up the Perl script","text":"<p>With the partitioning done, we still need to maintain the partitioned setup. MariaDB will not create new and delete old partitions for us automatically, we need to use a <code>perl</code> script for this. Years ago, an honorable Zabbix community member wrote a <code>perl</code> script to maintain the partitioning and the people at <code>Opensource ICT Solutions</code> have been maintaining it. You can find it on their GitHub repository:</p> <p>https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl</p> <p>Download the script from their GitHub and save it on your Zabbix database server(s) in the following folder:</p> <p>Script folder (create the folder if it doesn't exist)</p> <p><code>/usr/lib/zabbix/</code></p> <p>Then make the script executable, so we can create a cronjob later to execute it.</p> <p>Make the script executable</p> <p><code>chmod 750 /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>Now, let's make sure all the settings in the script are set-up correctly. Edit the script with your favourite editor (yes, nano is also an option).</p> <p>Edit the script</p> <p><code>vim /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>There are a few lines here we need to edit to make sure the script works. Let's start with our MariaDB login details.</p> <p>Add login details to the script</p> <pre><code>my $dsn = 'DBI:mysql:'.$db_schema.':mysql_socket=/var/lib/mysql/mysql.sock';\n\nmy $db_user_name = 'zabbix';\n\nmy $db_password = 'password';\n</code></pre> <p>Make sure to modify the credentials and socket path to reflect your own Zabbix database setup. The MariaDB username and password can, for instance, match those defined in your Zabbix server configuration file. You can also create a different user for this if preferred.</p> <p>Also, keep in mind that the MariaDB socket file can vary depending on your distribution. If the default path (/var/lib/mysql/mysql.sock) doesn't apply, update it accordingly. For example, on Ubuntu systems, the socket is often located at /var/run/mysqld/mysql.sock.</p> <p>Next up, we should edit the settings related to how long we want our data to be stored. We define that in the following block.</p> <p>Add login details to the script</p> <pre><code>my $tables = {  'history' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_log' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_str' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_text' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_uint' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_bin' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'trends' =&gt; { 'period' =&gt; 'month', 'keep_history' =&gt; '15'},\n\n                'trends_uint' =&gt; { 'period' =&gt; 'month', 'keep_history' =&gt; '15'},\n</code></pre> <p>Keep in mind that <code>history</code> is defined by day here and <code>trends</code> are defined by month.</p> <p>We also need to change the timezone to match the timezone configured on our Zabbix database server. As this was written in the the Netherlands, I will use <code>Europe/Amsterdam</code>.</p> <p>Add correct timezone</p> <p><code>my $curr_tz = 'Europe/Amsterdam';</code></p> <p>Then the last important step is to make sure that we comment or uncomment some lines in the script. The script works for both <code>MariaDB</code> and <code>MySQL</code>, as well as for older versions. It is however not smart enough to detect what to use automatically, but feel free to open up that pull request!</p> <p>The script is already out of the box configured for <code>MariaDB</code>, so we don't need to do anything.</p> <p>For the <code>MySQL 8.x</code> users comment the following <code>MariaDB</code> lines.</p> <p>Comment MariaDB</p> <pre><code># MySQL 5.6 + MariaDB\n\n    #my $sth = $dbh-&gt;prepare(qq{SELECT plugin_status FROM information_schema.plugins\n    WHERE plugin_name = 'partition'});\n\n\n    #$sth-&gt;execute();\n\n\n    #my $row = $sth-&gt;fetchrow_array();\n\n\n    #$sth-&gt;finish();\n\n    #    return 1 if $row eq 'ACTIVE';\n</code></pre> <p>And uncomment the <code>MySQL 8.x</code> lines.</p> <p>Uncomment MySQL 8.x</p> <pre><code># MySQL 8.x (NOT MariaDB!)\n\n    my $sth = $dbh-&gt;prepare(qq{select version();});\n    $sth-&gt;execute();\n    my $row = $sth-&gt;fetchrow_array();\n\n    $sth-&gt;finish();\n\n           return 1 if $row &gt;= 8;\n\n    # End of MySQL 8.x\n</code></pre> <p>Keep in mind, ONLY do this if you are using <code>MySQL 8.x</code> and later. If you are on <code>MySQL 5.6</code> or <code>MariaDB</code> do NOT change these lines.</p> <p>For Zabbix 5.4 and OLDER versions also make sure to uncomment the indicated lines. But do not do this for Zabbix 6.0 and higher though.</p> <p>Uncomment for Zabbix 5.4 and older only</p> <pre><code># Uncomment the following line for Zabbix 5.4 and earlier\n\n    # $dbh-&gt;do(\"DELETE FROM auditlog_details WHERE NOT EXISTS (SELECT NULL FROM\n    auditlog WHERE auditlog.auditid = auditlog_details.auditid)\");\n\n    }\n</code></pre> <p>For Zabbix 6.4 and OLDER versions also make sure to comment the following line. Do not do this for Zabbix 7.0 and higher though:</p> <p>Uncomment for Zabbix 6.4 and older only</p> <p><code>'history_bin' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '60'},</code></p> <p>We also need to install some Perl dependencies to make sure we can execute the script.</p> <p>Install dependencies</p> <p>Red Hat-Based <pre><code>dnf install perl-DateTime perl-Sys-Syslog\n</code></pre> Debian-based <pre><code>apt-get install libdatetime-perl liblogger-syslog-perl\n</code></pre></p> <p>If perl-DateTime isn't available on your Red Hat 7.x installation make sure to install the powertools repo.</p> <p>Install correct repository</p> <p>Red Hat 7 based <pre><code>yum config-manager --set-enabled powertools\n</code></pre></p> <p>Red Hat 9 based <pre><code>dnf config-manager --enable crb\n</code></pre></p> <p>Genuine Red Hat <pre><code>subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\n</code></pre></p> <p>Oracle Linux <pre><code>dnf config-manager --set-enabled ol8_codeready_builder\n</code></pre></p> <p>Then the last step is to add a cronjob to execute the script everyday.</p> <p>Open crontab</p> <p><code>crontab -e</code></p> <p>Add the following line to create the cronjob.</p> <p>Create cronjob</p> <p><code>55 22 * * * /usr/lib/zabbix/mysql_zbx_part.pl &gt;/dev/null 2&gt;&amp;1</code></p> <p>Execute the script manually to test.</p> <p>Manual script execution for testing</p> <p><code>perl /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>Then we can check and see if it worked.</p> <p>Check the script log</p> <p><code>journalctl -t mysql_zbx_part</code></p> <p>This will give you back a list of created and deleted partitions if you've done everything right. Make sure to check this command again tomorrow, to make sure the cronjob is working as expected.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/","title":"Partitioning PostgreSQL with TimescaleDB","text":"<p>If you're familiar with partitioning a Zabbix database using MySQL or any of the other forks like MariaDB, you're likely aware of the complexity involved, which often requires Perl scripts and manual database operations. Fortunately, PostgreSQL offers a much simpler and more streamlined approach. With the TimescaleDB extension, partitioning is fully automated. This extension is not only powerful and efficient, it is also the only method officially supported by Zabbix for database partitioning. TimescaleDB takes care of the underlying logic, freeing you from custom scripts and manual tweaks. For this reason, PostgreSQL could be the preferred and most convenient option for managing large scale Zabbix environments.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#installing-timescaledb","title":"Installing TimescaleDB","text":"<p>First, make sure to download TimescaleDB from the correct source: https://docs.timescale.com/self-hosted/latest/install/. Avoid using the version available in the standard PostgreSQL package repository, as it is outdated and not suitable for Zabbix.</p> <p>TimescaleDB comes in two editions: one released under the Apache license and the other as the Community edition. For Zabbix, the Community edition is the recommended choice. It includes all advanced features such as native compression, which are essential for efficient long term data storage and performance in larger environments.</p> Info <p>To use TimescaleDB with Zabbix, make sure PostgreSQL is installed from the official PostgreSQL community repositories, as described in our setup guide. Do not use the PostgreSQL version provided by Red Hat or its derivatives. The TimescaleDB extension is not compatible with that version, and attempting to use it will lead to failure in the configuration.</p> Note <p>Always check in the Zabbix documentation before you start what version of PostgreSQL is supported and what version of the TimescaleDB is supported that way you don't install any unsupported version that could run you into issues. https://docs.timescale.com/self-hosted/latest/install/installation-linux/#supported-platforms</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#add-the-timescaledb-repository","title":"Add the TimescaleDB repository","text":"<p>adding the repository</p> <p>Red Hat <pre><code>sudo tee /etc/yum.repos.d/timescale_timescaledb.repo &lt;&lt;EOL\n[timescale_timescaledb]\nname=timescale_timescaledb\nbaseurl=https://packagecloud.io/timescale/timescaledb/el/$(rpm -E %{rhel})/\\$basearch\nrepo_gpgcheck=1\ngpgcheck=0\nenabled=1\ngpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\nEOL\n</code></pre> Ubuntu <pre><code>echo \"deb https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main\" | sudo tee /etc/apt/sources.list.d/timescaledb.list\n</code></pre> <pre><code>wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey |\n sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg\n</code></pre></p> <p>Update your local repository list</p> <p>Red Hat <pre><code>sudo dnf update -y\n</code></pre> Ubuntu <pre><code>sudo apt update -y\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#install-timescaledb","title":"Install TimescaleDB","text":"<p>Install TimescaleDB</p> <p>Red Hat <pre><code>sudo yum install timescaledb-2-postgresql-17 postgresql17\n</code></pre> Ubuntu <pre><code>sudo apt install timescaledb-2-postgresql-17 postgresql-client-17\n</code></pre></p> Note <p>Of course, you need to match the TimescaleDB version to the version of PostgreSQL you installed. For example, if you are using PostgreSQL 14, you must install the corresponding TimescaleDB packages for version 14. The installation would look like this: <pre><code>dnf install timescaledb-2-postgresql-14 postgresql-client-14\n</code></pre> Using mismatched versions can lead to compatibility issues, so always make sure the TimescaleDB packages align with your PostgreSQL version.</p> Warning <pre><code>Be sure to install the version of TimescaleDB that is supported by Zabbix\nalso when you upgrade your OS verify that the new database version and\ntimescaledb are supported by Zabbix. It's probably best to exclude them from\nautomatic updates.\n</code></pre> <p>Check for specific versions</p> <p>Red Hat <pre><code>dnf list timescaledb-2-postgresql-17 --showduplicates\n</code></pre> Ubuntu <pre><code>apt-cache policy timescaledb-2-postgresql-17\n</code></pre></p> <p>installing a specific version and lock the version</p> <p>Red Hat <pre><code>sudo dnf install timescaledb-2-postgresql-17-2.19.3\nsudo dnf versionlock add timescaledb-2-postgresql-17\n</code></pre> Ubuntu <pre><code>sudo apt install timescaledb-2-postgresql-17=2.19.3~ubuntu24.04 timescaledb-2-loader-postgresql-17=2.19.3~ubuntu24.04\nsudo apt-mark hold timescaledb-2-postgresql-17\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#configure-timescaledb","title":"Configure TimescaleDB","text":"<p>The next step is to load the TimescaleDB extension into your PostgreSQL database and tune the configuration. There are two ways to do this: the automated way and the manual way.</p> <p>TimescaleDB provides a tuning script that analyses your system and applies recommended settings to optimize performance. On Red Hat based systems, you can run:</p> <pre><code>sudo timescaledb-tune --pg-config=/usr/pgsql/17/bin/pg_config\n</code></pre> <p>For Ubuntu and Debian based systems, simply run:</p> <pre><code>sudo timescaledb tune\n</code></pre> <p>This script will suggest configuration changes and can update your postgresql configuration file automatically. If you prefer to tune the settings manually, which is often recommended for experienced users, you will need to edit your postgresql configuration file yourself.</p> <p>At a minimum, make sure to add the following line at the end of the file:</p> <pre><code>shared_preload_libraries = 'timescaledb'\n</code></pre> <p>Let's load the library</p> <p>Red Hat <pre><code>echo \"shared_preload_libraries = 'timescaledb'\" | sudo tee -a /var/lib/pgsql/17/data/postgresql.conf\n</code></pre> <pre><code>systemctl restart postgresql-17\n</code></pre> Ubuntu <pre><code>echo \"shared_preload_libraries = 'timescaledb'\" | sudo tee -a /etc/postgresql/17/main/postgresql.conf\n</code></pre> <pre><code>sudo systemctl restart postgresql\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#configure-zabbix-for-timescaledb","title":"Configure Zabbix for timescaledb","text":"<p>Next, we connect to the Zabbix database as the user <code>zabbixsrv</code>, or whichever database user you have configured earlier, and create the TimescaleDB extension. However, before doing this, it is strongly recommended to stop the Zabbix server. This will prevent the application from interfering with the database during the process, which could otherwise cause locks or unexpected behavior.</p> <p>Stop Zabbix server</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl stop zabbix-server\n</code></pre></p> <p>Create timescaledb extension</p> <p>Red Hat and Ubuntu <pre><code>psql -Uzabbix-srv zabbix -W\n</code></pre> <pre><code>psql (17.5)\nType \"help\" for help.\n\nzabbix=&gt; CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;\n</code></pre></p> <p>Make sure the extension is installed by running <code>\\dx</code>.</p> <pre><code>zabbix=&gt; \\dx\n                                            List of installed extensions\nName     | Version |   Schema   |                                      Description\n-------------+---------+------------+---------------------------------------------------------------------------------------\n plpgsql     | 1.0     | pg_catalog | PL/pgSQL procedural language\n timescaledb | 2.19.3  | public     | Enables scalable inserts and complex queries for time-series data (Community Edition)\n(2 rows)\n\nzabbix=&gt;\n</code></pre>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#patch-zabbix-database","title":"Patch Zabbix database","text":"<p>While still connected to the Zabbix database, you can now apply the TimescaleDB patch. This patch will migrate your existing history, trends, and audit log tables to the TimescaleDB format. Depending on the amount of existing data, this process may take some time.</p> <p>Run the following command inside the database session:</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/timescaledb/schema.sql\n</code></pre> <p>The <code>schema.sql</code> script adjusts several important housekeeping parameters:</p> <ul> <li>Override item history period</li> <li>Override item trend period</li> </ul> <p>To use partitioned housekeeping for history and trends, both of these options must be enabled. However, it is also possible to enable them individually, depending on your requirements.</p> <p>In addition, the script sets two TimescaleDB specific parameters:</p> <ul> <li>Enable compression</li> <li>Compress records older than 7 days</li> </ul> <p>These settings help reduce the size of historical data and improve long term performance. Let's start our zabbix server again before we continue</p> <p>start Zabbix server</p> <p>RedHat and Ubuntu <pre><code>sudo systemctl start zabbix-server\n</code></pre></p> <p>Let's have a look at them go in our menu to Administration -&gt; Housekeeping</p> <p></p> <p>13.1 housekeeper settings</p> Warning <p><pre><code>When running the `schema.sql` script on TimescaleDB version 2.9.0 or higher,\nyou may see warning messages indicating that certain best practices are not\nbeing followed. These warnings can be safely ignored. They do not affect the\noutcome of the configuration process.\n\nAs long as everything is set up correctly, the script will complete without\nissue. You should see the following confirmation at the end:\n</code></pre> <pre><code>psql:/usr/share/zabbix/sql scripts/postgresql/timescaledb/schema.sql:112:\nNOTICE:  TimescaleDB is configured successfully\n</code></pre> <pre><code>This confirms that the TimescaleDB extension and related Zabbix settings have\nbeen applied correctly.\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#conclusion","title":"Conclusion","text":"<p>Using TimescaleDB with PostgreSQL is the only officially supported method for database partitioning in Zabbix. It replaces complex manual setups with automated, efficient handling of historical and trend data. Features like native compression and time based partitioning significantly reduce storage usage and improve query performance.</p> <p>By installing PostgreSQL from the correct repository, tuning it properly, and applying the TimescaleDB schema patch, you ensure that Zabbix can scale reliably with minimal maintenance overhead. This setup not only optimizes performance but also prepares your environment for long term growth and data retention.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#questions","title":"Questions","text":"<ul> <li>What are the key advantages of using TimescaleDB compared to partitioning with   MySQL or MariaDB?</li> <li>What might go wrong if you install PostgreSQL from the default Red Hat repositories   when planning to use TimescaleDB?</li> <li>How does enabling compression in TimescaleDB benefit your Zabbix installation?</li> </ul>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://docs.timescale.com/self-hosted/latest/configuration/</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/appendix/install/timescaledb?hl=TimescaleDB</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/","title":"Securing the frontend","text":"<p>The frontend is what we use to login into our system. The Zabbix frontend will connect to our Zabbix server and our database. But we also send information from our laptop to the frontend. It's important that when we enter our credentials that we can do this in a safe way. So it makes sense to make use of certificates and one way to do this is by making use of Self-Signed certificates.</p> <p>To give you a better understanding of why your browser will warn you when using self signed certificates, we have to know that when we request an SSL certificate from an official Certificate Authority (CA) that you submit a Certificate Signing request (CSR) to them. They in return provide you with a Signed SSL certificate. For this they make use of their root certificate and private key. Our browser comes with a copy of the root certificate (CA) from various authorities or it can access it from the OS. This is why our self signed certificates are not trusted by our browser, we don't have any CA validation. Our only workaround is to create our own root certificate and private key.</p>"},{"location":"ch13-advanced-security/securing-frontend/#understanding-the-concepts","title":"Understanding the concepts","text":""},{"location":"ch13-advanced-security/securing-frontend/#how-to-create-an-ssl-certificate","title":"How to create an SSL certificate","text":""},{"location":"ch13-advanced-security/securing-frontend/#how-ssl-works-client-server-flow","title":"How SSL works - Client - Server flow","text":"Note <p>Borrowed the designs from https://www.youtube.com/watch?v=WqgzYuHtnIM this video explains well how SSL works.</p>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-self-signed-certificates","title":"Securing the frontend with self signed Certificates","text":"<p>To configure this there are a few steps that we need to follow:</p> <pre><code>- Generate a private key for the CA ( Certificate Authority )\n- Generate a root certificate\n- Generating CA-Authenticated Certificates\n- Generate a Certificate Signing Request (CSR)\n- Generate an X509 V3 certificate extension configuration file\n- Generate the certificate using our CSR, the CA private key, the CA certificate,\n  and the config file\n- Copy the SSL certificates to our Virtual Host\n- Adapt your Nginx Zabbix config\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-private-key-for-the-ca","title":"Generate a private key for the CA","text":"<p>First step is to make a folder named SSL so we can create our certificates and safe them:</p> <pre><code>&gt;- mkdir ~/ssl\n&gt;- cd ~/ssl\n&gt;- openssl ecparam -out myCA.key -name prime256v1 -genkey\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl : The tool to use the OpenSSL library, this library provides us with    cryptographic functions and utilities.</li> <li>out myCA.key : This part of the command specifies the output file name for the    generated private key. </li> <li>name prime256v1: Name of the elliptic curve; X9.62/SECG curve over a 256 bit    prime field</li> <li>ecparam: This command is used to manipulate or generate EC parameter files.</li> <li>genkey: This option will generate a EC private key using the specified parameters.</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-root-certificate","title":"Generate a Root Certificate","text":"<pre><code>openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl: The command-line tool for OpenSSL.</li> <li>req: This command is used for X.509 certificate signing request (CSR) management.</li> <li>x509: This option specifies that a self-signed certificate should be created.</li> <li>new: This option is used to generate a new certificate.</li> <li>nodes: This option indicates that the private key should not be encrypted.    It will generates a private key without a passphrase, making it more convenient    but potentially less secure.</li> <li>key myCA.key: This specifies the private key file (myCA.key) to be used in    generating the certificate.</li> <li>sha256: This option specifies the hash algorithm to be used for the certificate.    In this case, SHA-256 is chosen for stronger security.</li> <li>days 1825: This sets the validity period of the certificate in days. Here, it\u2019s    set to 1825 days (5 years).</li> <li>out myCA.pem: This specifies the output file name for the generated certificate.    In this case, \u201cmyCA.pem.\u201d</li> </ul> <p>The information you enter is not so important but it's best to fill it in as good as possible. Just make sure you enter for CN you IP or DNS.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generating-ca-authenticated-certificates","title":"Generating CA-Authenticated Certificates","text":"<p>It's probably good practice to use de dns name of your website in the name of the private key. As we use in this case no DNS but an IP address I will use the fictive dns zabbix.mycompany.internal.</p> <pre><code>openssl genrsa -out zabbix.mycompany.internal.key 2048\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-certificate-signing-request-csr","title":"Generate a Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key zabbix.mycompany.internal.key -out zabbix.mycompany.internal.csr\n</code></pre> <p>You will be asked the same set of questions as above. Once again your answers hold minimal significance and in our case no one will inspect the certificate so they matter even less.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-an-x509-v3-certificate-extension-configuration-file","title":"Generate an X509 V3 certificate extension configuration file.","text":"<pre><code># vi zabbix.mycompany.internal.ext\n</code></pre> <p>Add the following lines in your certificate extension file. Replace IP or DNS with your own values.</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 192.168.0.133\n#DNS.1 = MYDNS (You can use DNS if you have a dns name if you use IP then use the\nabove line)\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-the-certificate-using-our-csr-the-ca-private-key-the-ca-certificate","title":"Generate the certificate using our CSR, the CA private key, the CA certificate,","text":"<p>and the config file</p> <pre><code>openssl x509 -req -in zabbix.mycompany.internal.csr -CA myCA.pem -CAkey myCA.key \\\n-CAcreateserial -out zabbix.mycompany.internal.crt -days 825 -sha256 -extfile zabbix.mycompany.internal.ext\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#copy-the-ssl-certificates-to-our-virtual-host","title":"Copy the SSL certificates to our Virtual Host","text":"<pre><code>cp zabbix.mycompany.internal.crt /etc/pki/tls/certs/. \ncp zabbix.mycompany.internal.key /etc/pki/tls/private/.\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-linux-rhel","title":"Import the CA in Linux (RHEL)","text":"<p>We need to update the CA certificate\u2019s, run the below command to update the CA certs.</p> <pre><code>cp myCA.pem /etc/pki/ca-trust/source/anchors/myCA.crt\nupdate-ca-trust extract\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-osx","title":"Import the CA in OSX","text":"<ul> <li>Open the macOS Keychain app.</li> <li>Navigate to File &gt; Import Items</li> <li>Choose your private key file (i.e., myCA.pem)</li> <li>Search for the \u201cCommon Name\u201d you provided earlier.</li> <li>Double-click on your root certificate in the list.</li> <li>Expand the Trust section.</li> <li>Modify the \u201cWhen using this certificate:\u201d dropdown to \u201cAlways Trust\u201d.</li> <li>Close the certificate window.</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-windows","title":"Import the CA in Windows","text":"<ul> <li>Open the \u201cMicrosoft Management Console\u201d by pressing Windows + R, typing mmc, and   clicking Open.</li> <li>Navigate to File &gt; Add/Remove Snap-in.</li> <li>Select Certificates and click Add.</li> <li>Choose Computer Account and proceed by clicking Next.</li> <li>Select Local Computer and click Finish.</li> <li>Click OK to return to the MMC window.</li> <li>Expand the view by double-clicking Certificates (local computer).</li> <li>Right-click on Certificates under \u201cObject Type\u201d in the middle column, select   All Tasks, and then Import.</li> <li>Click Next, followed by Browse. Change the certificate extension dropdown next   to the filename field to All Files (.) and locate the myCA.pem file.</li> <li>Click Open, then Next.</li> <li>Choose \u201cPlace all certificates in the following store.\u201d with \u201cTrusted Root   Certification Authorities store\u201d as the default. Proceed by clicking Next, then   Finish, to finalize the wizard.</li> <li>If all went well you should find your certificate under Trusted Root Certification   Authorities &gt; Certificates</li> </ul> Warning <p>You also need to import the myCA.crt file in your OS we are not an official CA so we have to import it in our OS and tell it to trust this Certificate. This action depends on the OS you use.</p> <p>As you are using OpenSSL, you should also create a strong Diffie-Hellman group, which is used in negotiating Perfect Forward Secrecy with clients. You can do this by typing:</p> <pre><code>openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#adapt-your-nginx-zabbix-config","title":"Adapt your Nginx Zabbix config","text":"<p>Add the following lines to your Nginx configuration, modifying the file paths as needed. Replace the the already existing lines with port 80 with this configuration. This will enable SSL and HTTP2.</p> <p>Adapt the Nginx config</p> <p>Red Hat <pre><code># vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          443 http2 ssl;\n        listen          [::]:443 http2 ssl;\n        server_name     &lt;ip qddress&gt;;\n        ssl_certificate /etc/ssl/certs/zabbix.mycompany.internal.crt;\n        ssl_certificate_key /etc/pki/tls/private/zabbix.mycompany.internal.key;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n</code></pre></p> <p>To redirect traffic from port 80 to 443 we can add the following lines above our https block:</p> <p><pre><code>server {\n       listen         80;\n       server_name    _; #dns or ip is also possible\n       return         301 https://$host$request_uri;\n}\n</code></pre> Ubuntu <pre><code>ToDo\n</code></pre></p>"},{"location":"ch13-advanced-security/securing-frontend/#adapt-your-apache-zabbix-config","title":"Adapt your Apache Zabbix config","text":""},{"location":"ch13-advanced-security/securing-frontend/#restart-all-services-and-allow-https-traffic","title":"Restart all services and allow https traffic","text":"<pre><code>systemctl restart php-fpm.service\nsystemctl restart nginx\n\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <p>When we go to our url <code>http://&lt;IP or DNS&gt;/</code> we get redirected to our <code>https://</code> page and when we check we can see that our site is secure:</p> <p></p> Note <ul> <li>To be even more secure have a loot at https://cipherlist.eu/ this page maintains a list of strong ciphers that you can use so secure your Nginx even more.</li> <li>You can test your nginx config with 'nginx -t' before you restart.</li> <li>For HTTP/2 to work you need at least nginx 1.9.5 or later</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-lets-encrypt-on-nginx","title":"Securing the Frontend with Let's Encrypt on Nginx","text":"<p>Creating a certificate with Let's Encrypt is quite easy the only thing you need is a domain. With a valid dns record set. Once this is in place you can with a few command in place add SSL to your website.</p>"},{"location":"ch13-advanced-security/securing-frontend/#setup-lets-encrypt-with-a-dns-server","title":"Setup Let's Encrypt with a DNS server","text":"<p>You have a DNS server and everything is properly configured, configuration this is going to be easy.</p> <pre><code>dnf install epel-release\ndnf install certbot python3-certbot-nginx\n\n# Make sure you have added your domain in the file /etc/nginx/conf.d/zabbix.com\n# rename the file\nmv /etc/nginx/conf.d/zabix.conf /etc/nginx/conf.d/&lt;yourdomain.com&gt;\n\n# run certbot replace yourdomain.com with your own domain \ncertbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre> <pre><code># add firewall config\nfirewall-cmd --permanent --add-service=https\nfirewall-cmd --reload\n</code></pre> <pre><code># Obtain the SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre> <p>This will install the certificates automatic in your configuration file. In case you had not renamed your file with the domain name you have alter the config file yourself. You can take a look for an example to the next topic.</p>"},{"location":"ch13-advanced-security/securing-frontend/#setup-lets-encrypt-without-local-a-dns-server","title":"Setup Let;s encrypt without local a DNS server","text":"<p>In case you like to test this at home it's a bit more complex if you don't have a DNS server at home but still possible with DNS-01 if you have bought a domain and are able to configure the TXT records for this domain. In this case we can use get.acme.</p> <pre><code># Install the needed packages\nsudo dnf install epel-release\nsudo dnf install certbot python3-certbot-nginx\nsudo dnf install -y tar gzip openssl cronie\nsudo dnf install -y bind-utils # gives `dig`\n\n# Install the acme script and add it to you path\ncurl https://get.acme.sh | sh\nexec bash\nacme.sh --version\n\n# Activate crond and setup the certificate.\nsudo systemctl enable --now crond\nacme.sh --set-default-ca --server letsencrypt\nacme.sh --issue -d &lt;mydomain.com&gt; -d '*.&lt;mydomain.com&gt;' --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please\n\n# The script had provided you with 2 TXT records add them to your domain and\n# check if they are properly configured. It can take a few minutes before other\n# DNS servers pickup the config change.\ndig +short TXT _acme-challenge.&lt;mydomain.com&gt; @8.8.8.8\n\n# Try to renew the certificate and copy it to your webserver\nacme.sh --renew -d &lt;mydomain.com&gt; --ecc --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please\nsudo mkdir -p /etc/ssl/&lt;mydomain&gt;\nacme.sh --install-cert -d &lt;mydomain.com&gt; --ecc --key-file /etc/ssl/&lt;mydomain&gt;/site.key --fullchain-file /etc/ssl/&lt;mydomain&gt;/site.fullchain.pem  --reloadcmd\n</code></pre> <p>Next step is to alter your NGINX config and open the firewall on port 443</p> <pre><code># Configure the firewall\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <pre><code># Add to your hosts file the domain zabbix.&lt;mydomain.com&gt;\nvi /etc/hosts\n</code></pre> <pre><code># Alter your NGINX config\nvi /etc/nginx/conf.d/zabbix.conf\n\nserver {\n        listen          443 ssl;\n        server_name     zabbix.mydoamin.com;\n        ssl_certificate     /etc/ssl/mydomain/site.fullchain.pem;\n        ssl_certificate_key /etc/ssl/mydomain/site.key;\n        ssl_protocols       TLSv1.2 TLSv1.3;\n        ssl_ciphers         HIGH:!aNULL:!MD5;\n</code></pre> <pre><code># Add a forward from port 80 to 443\n\nvi /etc/nginx/conf.d/no-ssl-zabbix.conf\nserver{\n    listen  80;\n    return 301 https://$host$request_uri?;\n}\n</code></pre> <pre><code># restart the NGINX webserver\nsystemctl restart nginx\n</code></pre> <p>You can now browse to the url zabbix.mydomain.com and you should have a working certificate.</p> Note <p>You should probably add a bit more security to your webserver this is only the bare minimum to make ssl working, A good place to start is probably https://cipherlist.eu/</p>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-lets-encrypt-on-nginx_1","title":"Securing the Frontend with Let's Encrypt on Nginx","text":""},{"location":"ch13-advanced-security/selinux-zabbix/","title":"SELinux and Zabbix","text":"<p>SELinux (Security-Enhanced Linux) provides mandatory access control for Zabbix by enforcing security policies that restrict what the Zabbix processes can do, even when running as root.</p> <p>SELinux contexts are a core component of how SELinux implements security control. Think of contexts as labels that are assigned to every object in the system (files, processes, ports, etc.). These labels determine what can interact with what.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#selinux-enforcement-mode","title":"SELinux Enforcement Mode","text":"<p>For SELinux to actually provide security protection, it needs to be set to \"enforcing\" mode. There are three possible modes for SELinux:</p> <ul> <li>Enforcing - SELinux security policy is enforced. Actions that violate policy are blocked and logged.</li> <li>Permissive - SELinux security policy is not enforced but violations are logged. This is useful for debugging.</li> <li>Disabled - SELinux is completely turned off.</li> </ul> <p>You can check the current SELinux mode with the getenforce command:</p> <pre><code>getenforce\n</code></pre> <p>This should return : Enforcing</p> <p>To properly secure Zabbix with SELinux, the system should be in <code>Enforcing</code> mode. If it's not, you can change it temporarily:</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#set-to-enforcing-immediately-until-reboot","title":"Set to enforcing immediately (until reboot)","text":"<pre><code>sudo setenforce 1\n</code></pre> <p>For permanent configuration, edit /etc/selinux/config and set:</p> <pre><code>SELINUX=Enforcing\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#basic-structure-of-an-selinux-context","title":"Basic Structure of an SELinux Context","text":"<p>An SELinux context typically consists of four parts:</p> <ul> <li>User: The SELinux user identity (not the same as Linux users)</li> <li>Role: What roles the user can enter</li> <li>Type: The domain for processes or type for files (most important part)</li> <li>Level: Optional MLS (Multi-Level Security) sensitivity level</li> </ul> <p>When displayed, these appear in the format: user:role:type:level</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#how-contexts-work-in-practice","title":"How Contexts Work in Practice","text":"<p>In the Zabbix SELinux configuration, several security types are defined to control access:</p> <ul> <li>zabbix_t: The domain in which the Zabbix server process runs</li> <li>zabbix_port_t: Type assigned to network ports that Zabbix uses</li> <li>zabbix_var_run_t: Type for Zabbix runtime socket files</li> <li>httpd_t: The domain for the Apache web server process</li> </ul> <p>The SELinux policy allows specific permissions between these types:</p> <p>Zabbix server can connect to its own Unix stream sockets Zabbix server can connect to network ports labeled as zabbix_port_t Zabbix server can create and remove socket files in directories labeled as zabbix_var_run_t</p> <p>The web server (httpd) can connect to Zabbix ports, allowing the web frontend to communicate with the Zabbix server. These permissions ensure Zabbix components can communicate properly while maintaining SELinux security boundaries.</p> <p>When Zabbix tries to access a file or network resource, SELinux checks if the context of the Zabbix process is allowed to access the context of that resource according to policy rules.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#viewing-contexts","title":"Viewing Contexts","text":"<p>You can view the contexts of files using:</p> <pre><code>ls -Z /path/to/zabbix/files\n</code></pre> <p>And for the processes:</p> <p><pre><code>ps -eZ | grep zabbix\"\n</code></pre> <pre><code>system_u:system_r:unconfined_service_t:s0 691 ?  00:02:20 zabbix_agent2\nsystem_u:system_r:zabbix_t:s0       707 ?        00:00:59 zabbix_server\nsystem_u:system_r:zabbix_t:s0      1203 ?        00:02:00 zabbix_server\n</code></pre></p> <p>And for log files</p> <pre><code>ls -alZ /var/log/zabbix/zabbix_server.log\n```yaml\n-rw-rw-r--. 1 zabbix zabbix system_u:object_r:zabbix_log_t:s0 11857 Apr 26 22:02 /var/log/zabbix/zabbix_server.log\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#zabbix-selinux-policy-package","title":"Zabbix-selinux-policy Package","text":"<p>The zabbix-selinux-policy package is a specialized SELinux policy module designed specifically for Zabbix deployments. It provides pre-configured SELinux policies that allow Zabbix components to function properly while running in an SELinux enforced environment.</p> <p>Key Functions of the Package:</p> <ul> <li>Pre-defined Contexts : Contains proper SELinux context definitions for Zabbix   binaries, configuration files, log directories, and other resources.</li> <li>Port Definitions : Registers standard Zabbix ports (like 10050 for agent, 10051 for server)   in the SELinux policy so they can be used without triggering denials.</li> <li>Access Rules: Defines which operations Zabbix processes can perform, like writing   to log files, connecting to databases, and communicating over networks.</li> <li>Boolean Toggles: Provides SELinux boolean settings specific to Zabbix that can   enable/disable certain functionalities without having to write custom policies.</li> </ul> <p>Benefits of Using the Package:</p> <ul> <li>Simplified Deployment : Reduces the need for manual SELinux policy adjustments when   installing Zabbix.</li> <li>Security by Default: Ensures Zabbix operates with minimal required permissions rather than running in permissive mode.</li> <li>Maintained Compatibility: The package is updated alongside Zabbix to ensure compatibility with new features.</li> </ul>"},{"location":"ch13-advanced-security/selinux-zabbix/#installation-and-usage","title":"Installation and Usage","text":"<p>The package is typically installed alongside other Zabbix components:</p> <pre><code>dnf install zabbix-selinux-policy\n</code></pre> <p>After installation, the SELinux contexts are automatically applied to standard Zabbix paths and ports. If you use non-standard configurations, you may still need to make manual adjustments. This package essentially bridges the gap between Zabbix's operational requirements and SELinux's strict security controls, making it much easier to run Zabbix securely without compromising on monitoring capabilities.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#for-zabbix-to-function-properly-with-selinux-enabled","title":"For Zabbix to function properly with SELinux enabled:","text":"<p>Zabbix binaries and configuration files need appropriate SELinux labels (typically zabbix_t context) Network ports used by Zabbix must be properly defined in SELinux policy Database connections require defined policies for Zabbix to communicate with MySQL/PostgreSQL File paths for monitoring, logging, and temporary files need correct contexts</p> <p>When issues occur, they typically manifest as denied operations in SELinux audit logs. Administrators can either:</p> <p>Use audit2allow to create custom policy modules for legitimate Zabbix operations Apply proper context labels using semanage and restorecon commands Configure boolean settings to enable specific Zabbix functionality</p> <p>This combination creates defense-in-depth by ensuring that even if Zabbix is compromised, the attacker remains constrained by SELinux policies, limiting potential damage to your systems.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#zabbix-selinux-boolean","title":"Zabbix SELinux Boolean","text":"<p>One of the most convenient aspects of the SELinux implementation for Zabbix is the use of \"booleans\". simple on/off switches that control specific permissions. These allow you to fine-tune SELinux policies without needing to understand complex policy writing. Key Zabbix booleans include:</p> <ul> <li>zabbix_can_network: Controls whether Zabbix can initiate network connections</li> <li>httpd_can_connect_zabbix: Controls whether the web server can connect to Zabbix</li> <li>zabbix_run_sudo: Controls whether Zabbix can execute sudo commands</li> </ul> <p>You can view these settings with:</p> <p><code>yaml     getsebool -a | grep zabbix</code> And you can toggle them as needed with setsebool.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#enable-zabbix-network-connections-persistent-across-reboots","title":"Enable Zabbix network connections (persistent across reboots)","text":"<pre><code>setsebool -P zabbix_can_network on\n</code></pre> <p>These booleans make it much easier to securely deploy Zabbix while maintaining SELinux protection, as you can enable only the specific capabilities that your Zabbix implementation needs without compromising overall system security.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#creating-custom-rules","title":"Creating custom rules","text":"<p>When running Zabbix in environments with SELinux enabled, you may encounter permission issues when Zabbix attempts to execute certain utilities like fping. This occurs because fping uses setuid (SUID) permissions, and SELinux's default policies prevent Zabbix from executing such binaries for security reasons.</p> <p>There are different solutions to this problem:</p> <ul> <li>Method 1: Automated Policy Generation :</li> </ul> <p>The most straightforward approach is to use the audit2allow utility to analyse SELinux denial messages and generate appropriate policies:</p> <p>First, capture the denial events from the audit log:</p> <pre><code>sudo grep zabbix /var/log/audit/audit.log | grep fping | audit2allow -M zabbix_fping\n</code></pre> <p>Install the generated policy module:</p> <pre><code>sudo semodule -i zabbix_fping.pp\n</code></pre> <p>Apply the correct SELinux context to the fping binary:</p> <pre><code>sudo chcon -t fping_exec_t /usr/sbin/fping\n</code></pre> <ul> <li>Method 2: Manual Policy Creation :</li> </ul> <p>For more control or in situations where audit logs aren't available, you can manually create a custom policy:</p> <p>Create a policy file named zabbix_fping.te with the following content:</p> <pre><code>module zabbix_fping 1.0;\n\nrequire {\n    type zabbix_t;\n    type fping_t;\n    type fping_exec_t;\n    class file { execute execute_no_trans getattr open read };\n    class capability net_raw;\n}\n\n#============= zabbix_t ==============\nallow zabbix_t fping_exec_t:file { execute execute_no_trans getattr open read };\nallow zabbix_t self:capability net_raw;\n</code></pre> <p>Compile the policy module:</p> <pre><code>checkmodule -M -m -o zabbix_fping.mod zabbix_fping.te\n</code></pre> <p>Package the compiled module:</p> <pre><code>semodule_package -o zabbix_fping.pp -m zabbix_fping.mod\n</code></pre> <p>Install the policy module:</p> <pre><code>semodule -i zabbix_fping.pp\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#securing-zabbix-admin","title":"Securing zabbix admin","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#https","title":"HTTPS","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#db-certs","title":"DB certs","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#conclusion","title":"Conclusion","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#questions","title":"Questions","text":"<ul> <li>Why does SELinux prevent Zabbix from executing fping by default?</li> <li>In what situations might you need to create custom SELinux policies for other Zabbix monitoring tools?</li> <li>What are the key differences between using audit2allow and manually creating a custom policy module?</li> </ul>"},{"location":"ch13-advanced-security/selinux-zabbix/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/7.2/en/manual/installation/install_from_packages/rhel?hl=SELinux#selinux-configuration</li> <li>https://www.systutorials.com/docs/linux/man/8-zabbix_selinux/</li> <li>https://man.linuxreviews.org/man8/zabbix_agent_selinux.8.html</li> <li>https://phoenixnap.com/kb/selinux</li> </ul>"},{"location":"ch13-advanced-security/using-vault/","title":"Storing secrets","text":""},{"location":"ch14-zabbix-maintenance/chapter/","title":"Zabbix maintenance","text":"<p>Maintaining a stable and efficient Zabbix environment requires more than just monitoring external systems, it also involves taking care of Zabbix itself. This chapter explores the key aspects of Zabbix maintenance, including setting up regular backups to protect your data, using Zabbix's internal health checks to monitor its own performance, and applying upgrades to stay current with new features and security fixes. We'll also cover Zabbix's built-in maintenance mode, which allows you to schedule downtime for hosts and services without triggering unnecessary alerts. Together, these practices help ensure your monitoring system remains reliable, resilient, and ready to scale.</p>"},{"location":"ch14-zabbix-maintenance/internal-health/","title":"Zabbix internal health check","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/maintenance/","title":"Maintenance","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/","title":"Backup strategies","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/upgrades/","title":"Zabbix Upgrades","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#useful-urls","title":"Useful URLs","text":""},{"location":"ch15-zabbix-real-world-examples/chapter/","title":"Zabbix real world examples","text":"<p>In this book we have learned a lot about our Zabbix environment, but most of it is building the foundation to start doing it on your own. From time to time you will encounter an implementation in a Zabbix environment that uses out of the box thinking or is just so simple you can't believe you never thought of it.</p> <p>This chapter aims to provide you a collection of interesting things people have built and things you absolutely have to know exist. </p>"},{"location":"fr/","title":"Accueil","text":"<p>Ce livre est n\u00e9 d'un d\u00e9sir simple : partager. Apr\u00e8s des ann\u00e9es de travail avec le produit Zabbix et la r\u00e9daction de plusieurs autres publications sur le sujet, Patrik et Nathan ont ressenti une forte envie de partager leurs connaissances d'une mani\u00e8re qui soit accessible au plus grand nombre. C'est ainsi qu'est n\u00e9e l'id\u00e9e initiale d'une ressource Zabbix gratuite et en ligne - un projet communautaire ayant pour but de rendre les utilisateurs plus autonomes.</p> <p>Au fur et \u00e0 mesure que la ressource en ligne s'est d\u00e9velopp\u00e9e, notre vision s'est \u00e9largie. Nous avons reconnu le potentiel de cr\u00e9er quelque chose qui marque encore plus les esprits. Cela a conduit \u00e0 la cr\u00e9ation d'une fondation, destin\u00e9e \u00e0 assurer la durabilit\u00e9 et la croissance \u00e0 long terme de cet effort communautaire. Ce livre, aboutissement tangible de cette vision, repr\u00e9sente l'\u00e9tape suivante. Tous les b\u00e9n\u00e9fices g\u00e9n\u00e9r\u00e9s par sa vente seront r\u00e9investis dans la communaut\u00e9, ce qui nous permettra d'\u00e9largir et d'am\u00e9liorer les ressources et le soutien que nous offrons. C'est plus qu'un simple livre ; c'est un t\u00e9moignage de la puissance du partage des connaissances et un engagement \u00e0 favoriser une communaut\u00e9 Zabbix prosp\u00e8re.\"</p>"},{"location":"fr/#licence","title":"Licence","text":"<p>Remarque : la version originale de ce document est en anglais. Des traductions sont fournies pour faciliter l'utilisation, mais la version anglaise reste la r\u00e9f\u00e9rence.</p> <p>Avant de commencer, merci de consulter notre licence d'utilisation la plus r\u00e9cente : License sur Github.</p> <p>The Zabbix Book est une ressource librement accessible con\u00e7ue pour aider les utilisateurs \u00e0 comprendre et \u00e0 ma\u00eetriser Zabbix. Les contributions sont vivement encourag\u00e9es afin d'am\u00e9liorer et d'\u00e9tendre son contenu. Cependant, le livre est distribu\u00e9 sous la licence Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0), ce qui signifie qu'il est gratuit pour une utilisation non commerciale uniquement.</p> <p>Ce que les contributeurs doivent savoir :</p> <ul> <li>En contribuant \u00e0 ce projet, vous accordez et transf\u00e9rez de mani\u00e8re irr\u00e9vocable   tous les droits, titres et int\u00e9r\u00eats li\u00e9s \u00e0 vos contributions \u00e0 The   Monitoring Penmasters Foundation, y compris tous les droits de propri\u00e9t\u00e9   intellectuelle associ\u00e9s, dans toute la mesure permise par la loi.</li> <li>La Fondation Monitoring Penmasters se r\u00e9serve le droit d'utiliser, de   reproduire, de modifier, de distribuer et d'exploiter commercialement tout   mat\u00e9riel fourni sous quelque forme que ce soit, y compris, mais sans s'y   limiter, la publication de livres physiques et num\u00e9riques.</li> <li>Tous les contributeurs doivent signer un Deed of Transfer of Intellectual   Property Rights (acte de transfert des droits de propri\u00e9t\u00e9 intellectuelle)   avant d'effectuer toute contribution, afin de garantir le bon transfert des   droits et le traitement du contenu par The Monitoring Penmasters   Foundation. Toute contribution non accompagn\u00e9e d'un Deed of Transfer of   Intellectual Property Rights (acte de transfert des droits de propri\u00e9t\u00e9   intellectuelle) sign\u00e9 ne peut \u00eatre accept\u00e9e.</li> <li>Tous les b\u00e9n\u00e9fices g\u00e9n\u00e9r\u00e9s seront utilis\u00e9s par \"The Monitoring Penmasters   Foundation\" pour couvrir les d\u00e9penses op\u00e9rationnelles et pour encourager   d'autres projets open-source, comme d\u00e9termin\u00e9 par la fondation.</li> </ul> <p>Vos contributions sont inestimables et aideront \u00e0 cr\u00e9er The Zabbix Book une ressource encore plus importante pour l'ensemble de la communaut\u00e9 !</p> <p>Licence :  </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p> </p>"},{"location":"fr/Guidelines/","title":"Lignes directrices","text":""},{"location":"fr/Guidelines/#comment-contribuer","title":"Comment contribuer","text":"<ul> <li>Signer le transfert de   droits,   de pr\u00e9f\u00e9rence \u00e9lectroniquement</li> <li>Clonez ce projet sur votre compte Github</li> <li> <p>Clonez le d\u00e9p\u00f4t sur votre PC</p> </li> <li> <p>Installez les logiciels n\u00e9cessaires au bon fonctionnement de Mkdocs et dans le   dossier racine, consultez le fichier how-to-install-mkdocs.md</p> </li> <li>Cr\u00e9ez une nouvelle branche pour effectuer vos modifications<ul> <li>git branch \"&lt;votre nom de branche&gt;\"</li> <li>git checkout \"&lt;votre nom de branche&gt;\"</li> </ul> </li> <li>Effectuez les modifications souhait\u00e9es et validez-les<ul> <li>git add \"fichiers modifi\u00e9s\"</li> <li>git commit -m \"ajouter des informations utiles concernant le(s)   changement(s)\"</li> </ul> </li> <li>Retour \u00e0 la branche principale<ul> <li>git checkout main</li> </ul> </li> <li>Assurez-vous d'avoir fusionn\u00e9 les derniers changements de la version     principale<ul> <li>git pull origin main</li> </ul> </li> <li>Fusionner votre branche dans la branche principale<ul> <li>git merge \"&lt;votre nom de branche&gt;\"</li> <li>git push</li> </ul> </li> <li>nettoyer votre branche<ul> <li>git branch -d \"&lt;votre nom de branche&gt;\"</li> </ul> </li> <li>Cr\u00e9ez une pull requests pour que nous puissions la fusionner :)</li> <li>Suivez ces lignes   directrices   lorsque vous r\u00e9digez un sujet.</li> </ul>"},{"location":"fr/tags/#tag:beginner","title":"beginner","text":"<ul> <li>            Basic Installation          </li> <li>            Dataflow          </li> <li>            Dependent items          </li> <li>            Frontend expliqu\u00e9          </li> <li>            Host Groups          </li> <li>            Host Interfaces          </li> <li>            Hosts          </li> <li>            Proxy basics          </li> <li>            SSH / Telnet          </li> <li>            Simple checks          </li> <li>            System Requirements          </li> <li>            User Groups          </li> </ul>"},{"location":"fr/ch00-getting-started/Requirements/","title":"Pr\u00e9requis syst\u00e8me","text":"","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#prerequis","title":"Pr\u00e9requis","text":"<p>Zabbix a des pr\u00e9requis mat\u00e9rielles et logicielles sp\u00e9cifiques qui doivent \u00eatre respect\u00e9es, et ces pr\u00e9requis peuvent changer au fil du temps. Ils d\u00e9pendent \u00e9galement de la taille de votre installation et des logiciels que vous utilisez. Avant d'acheter du mat\u00e9riel ou d'installer une version de base de donn\u00e9es, il est essentiel de consulter la documentation de Zabbix pour conna\u00eetre les pr\u00e9requis les plus r\u00e9centes pour la version que vous pr\u00e9voyez d'installer. Vous pouvez trouver les derni\u00e8res exigences https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Veillez \u00e0 s\u00e9lectionner la bonne version de Zabbix dans la liste.</p> <p>Pour les petites installations ou les installations de test, Zabbix peut fonctionner confortablement sur un syst\u00e8me dot\u00e9 de 2 CPU et de 8 Go de RAM. Cependant, la taille de votre installation, le nombre d'\u00e9l\u00e9ments que vous monitorez, les d\u00e9clencheurs que vous cr\u00e9ez et la dur\u00e9e pendant laquelle vous pr\u00e9voyez de conserver les donn\u00e9es auront un impact sur les besoins en ressources. Dans les environnements virtualis\u00e9s d'aujourd'hui, nous vous conseillions de commencer petit et d'augmenter au fur et \u00e0 mesure des besoins.</p> <p>Vous pouvez installer tous les composants (serveur Zabbix, base de donn\u00e9es, serveur web) sur une seule machine ou les r\u00e9partir sur plusieurs serveurs. Pour plus de simplicit\u00e9, notez les d\u00e9tails du/des serveur(s) :</p> Composant Adresse IP Serveur Zabbix Serveur de base de donn\u00e9es Serveur web Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Note <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#configuration-de-base-du-systeme-dexploitation","title":"Configuration de base du syst\u00e8me d'exploitation","text":"<p>Les syst\u00e8mes d'exploitation, vaste choix, chacun avec ses propres avantages et sa base de fervants utilisateurs. Bien que Zabbix puisse \u00eatre install\u00e9 sur une large gamme de plateformes, documenter le processus pour chaque syst\u00e8me d'exploitation disponible ne serait pas pratique. Pour que ce livre reste cibl\u00e9 et efficace, nous avons choisi de ne couvrir que les options les plus largement utilis\u00e9es : Ubuntu et Red Hat.</p> <p>Comme tout le monde n'a pas acc\u00e8s \u00e0 un abonnement Red Hat Enterprise Linux (RHEL), m\u00eame si un compte de d\u00e9veloppeur offre un acc\u00e8s limit\u00e9, nous avons opt\u00e9 pour Rocky Linux comme alternative facilement disponible. Pour ce livre, nous utiliserons Rocky Linux 9.x et Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#pare-feu","title":"Pare-feu","text":"<p>Avant d'installer Zabbix, il est essentiel de pr\u00e9parer correctement le syst\u00e8me d'exploitation. La premi\u00e8re \u00e9tape est de s'assurer que le pare-feu est install\u00e9 et configur\u00e9.</p> <p>Pour installer et activer le pare-feu, ex\u00e9cutez la commande suivante :</p> <p>Installer et activer le pare-feu</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>Une fois install\u00e9, vous pouvez configurer les ports n\u00e9cessaires. Pour Zabbix, nous devons autoriser l'acc\u00e8s au port <code>10051/tcp</code>, qui est l'endroit o\u00f9 le trappeur Zabbix \u00e9coute les donn\u00e9es entrantes. Utilisez la commande suivante pour ouvrir ce port dans le pare-feu :</p> <p>Autoriser l'acc\u00e8s au trappeur Zabbix</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>Si le service n'est pas reconnu, vous pouvez sp\u00e9cifier manuellement le port :</p> <p>Ajouter le port au lieu du nom du service</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Note <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>Une autre approche consiste \u00e0 d\u00e9finir des zones de pare-feu d\u00e9di\u00e9es \u00e0 des cas d'utilisation sp\u00e9cifiques. Par exemple...</p> <p>Cr\u00e9er une zone dans firewalld</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>Vous pouvez valider la cr\u00e9ation de la zone en ex\u00e9cutant la commande suivante :</p> <p>V\u00e9rifier la cr\u00e9ation de la zone</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>block dmz drop external home internal nm-shared postgresql-access public trusted work</p> <p>L'utilisation de zones dans firewalld pour configurer les r\u00e8gles de pare-feu pour PostgreSQL offre plusieurs avantages en termes de s\u00e9curit\u00e9, de flexibilit\u00e9 et de facilit\u00e9 de gestion. Voici pourquoi l'utilisation des zones est vivement conseill\u00e9 :</p> <ul> <li>Contr\u00f4le d'acc\u00e8s granulaire :</li> <li>Les zones firewalld permettent diff\u00e9rents niveaux de confiance pour     diff\u00e9rentes interfaces r\u00e9seau et plages IP. Vous pouvez d\u00e9finir quels     syst\u00e8mes sont autoris\u00e9s \u00e0 se connecter \u00e0 PostgreSQL en fonction de leur     niveau de confiance.</li> <li>Gestion simplifi\u00e9e des r\u00e8gles :</li> <li>Au lieu de d\u00e9finir manuellement des r\u00e8gles iptables complexes, les zones     fournissent un moyen organis\u00e9, de regrouper et de g\u00e9rer les r\u00e8gles de     pare-feu en fonction des sc\u00e9narios d'utilisation.</li> <li>S\u00e9curit\u00e9 renforc\u00e9e :</li> <li>En limitant l'acc\u00e8s de PostgreSQL \u00e0 une zone sp\u00e9cifique, vous emp\u00eachez les     connexions non autoris\u00e9es \u00e0 partir d'autres interfaces ou r\u00e9seaux.</li> <li>Configuration dynamique :</li> <li>firewalld prend en charge les configurations de r\u00e8gles permanentes et en     cours d'ex\u00e9cution, ce qui permet d'apporter des modifications sans perturber     les connexions existantes.</li> <li>Prise en charge de plusieurs interfaces :</li> <li>Si le serveur poss\u00e8de plusieurs interfaces r\u00e9seau, les zones permettent     d'appliquer des strat\u00e9gies de s\u00e9curit\u00e9 diff\u00e9rentes pour chaque interface.</li> </ul> <p>Si l'on regroupe toutes les informations pr\u00e9c\u00e9dentes, on obtient ce qui suit :</p> <p>Firewalld avec configuration de zone</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Lorsque la <code>source IP</code> est la seule adresse autoris\u00e9e \u00e0 \u00e9tablir une connexion avec la base de donn\u00e9es.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#serveur-de-temps","title":"Serveur de temps","text":"<p>Une autre \u00e9tape cruciale consiste \u00e0 configurer le serveur de temps et \u00e0 synchroniser le serveur Zabbix \u00e0 l'aide d'un client NTP. Une synchronisation pr\u00e9cise de l'heure est vitale pour Zabbix, \u00e0 la fois pour le serveur et pour les p\u00e9riph\u00e9riques qu'il surveille. Si l'un des h\u00f4tes a un fuseau horaire incorrect, cela peut entra\u00eener des confusions, comme par exemple d\u00e9terminer l'heure d'un probl\u00e8me dans Zabbix qui semble s'\u00eatre produit plus t\u00f4t qu'il ne l'a fait en r\u00e9alit\u00e9.</p> <p>Pour installer et activer chrony, notre client NTP, utilisez la commande suivante :</p> <p>Installer Chrony le client NTP</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>Apr\u00e8s l'installation, v\u00e9rifiez que Chrony est activ\u00e9 et fonctionne en contr\u00f4lant son \u00e9tat \u00e0 l'aide de la commande suivante :</p> <p>V\u00e9rifier le statut de Chrony</p> <pre><code>systemctl status chronyd\n</code></pre> Qu'est-ce que apt ou dnf ? <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> qu'est-ce que Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>Une fois Chrony install\u00e9, l'\u00e9tape suivante consiste \u00e0 s'assurer que le fuseau horaire est correct. Vous pouvez visualiser votre configuration horaire actuelle en utilisant la commande <code>timedatectl</code>:</p> <p>v\u00e9rifier la configuration de l'heure</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>Assurez-vous que le service Chrony fonctionne (reportez-vous aux \u00e9tapes pr\u00e9c\u00e9dentes si n\u00e9cessaire). Pour d\u00e9finir le bon fuseau horaire, vous pouvez tout d'abord lister tous les fuseaux horaires disponibles \u00e0 l'aide de la commande suivante :</p> <p>liste des fuseaux horaires</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>Cette commande affiche une liste des fuseaux horaires disponibles, vous permettant de s\u00e9lectionner celui qui est le plus proche de votre position. Par exemple :</p> <p>Liste de tous les fuseaux horaires disponibles</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Une fois que vous avez identifi\u00e9 votre fuseau horaire, configurez-le \u00e0 l'aide de la commande suivante :</p> <p>R\u00e9gler le fuseau horaire</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>Pour v\u00e9rifier que le fuseau horaire a \u00e9t\u00e9 configur\u00e9 correctement, utilisez \u00e0 nouveau la commande <code>timedatectl</code>:</p> <p>V\u00e9rifier l'heure et le fuseau horaire</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#verification-de-la-synchronisation-de-chrony","title":"V\u00e9rification de la synchronisation de Chrony","text":"<p>Pour s'assurer que Chrony se synchronise avec les bons serveurs de temps, vous pouvez ex\u00e9cuter la commande suivante :</p> <p>V\u00e9rifier chrony</p> <pre><code>chronyc\n</code></pre> <p>Le r\u00e9sultat devrait ressembler \u00e0 :</p> <p>V\u00e9rifiez votre sortie chrony</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Une fois dans le prompt de Chrony, tapez la commande suivante pour v\u00e9rifier les sources :</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Exemple de sortie :</p> <p>V\u00e9rifiez les sources de votre serveur de temps</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>Dans cet exemple, les serveurs NTP utilis\u00e9s sont situ\u00e9s en dehors de votre r\u00e9gion. Il est recommand\u00e9 de passer \u00e0 des serveurs de temps dans votre pays ou, si disponible, \u00e0 un serveur de temps d\u00e9di\u00e9 \u00e0 votre entreprise. Vous pouvez trouver des serveurs NTP locaux ici : www.ntppool.org.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#mise-a-jour-des-serveurs-de-temps","title":"Mise \u00e0 jour des serveurs de temps","text":"<p>Pour mettre \u00e0 jour les serveurs de temps, modifiez le fichier <code>/etc/chrony.conf</code> pour les syst\u00e8mes bas\u00e9s sur Red Hat, et si vous utilisez Ubuntu \u00e9ditez <code>/etc/chrony/chrony.conf</code>. Remplacez le serveur NTP existant par un autre plus proche de votre emplacement.</p> <p>Exemple de la configuration actuelle :</p> <p>exemple de configuration du ntp pool</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>Apr\u00e8s avoir effectu\u00e9 cette modification, red\u00e9marrez le service Chrony pour appliquer la nouvelle configuration :</p> <p>red\u00e9marrer le service Chrony</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#verification-des-serveurs-de-temps-mis-a-jour","title":"V\u00e9rification des serveurs de temps mis \u00e0 jour","text":"<p>V\u00e9rifiez \u00e0 nouveau les sources de temps pour vous assurer que les nouveaux serveurs locaux sont utilis\u00e9s :</p> <p>V\u00e9rifier les sources Chrony</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Exemple de r\u00e9sultat attendu avec des serveurs locaux :</p> <p>Exemple de sortie</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>Ceci confirme que le syst\u00e8me utilise maintenant des serveurs de temps locaux.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#conclusion","title":"Conclusion","text":"<p>Comme nous l'avons vu, avant m\u00eame de consid\u00e9rer les paquets Zabbix, il faut pr\u00eater attention \u00e0 l'environnement dans lequel il fonctionnera. Un syst\u00e8me d'exploitation correctement configur\u00e9, un chemin ouvert \u00e0 travers le pare-feu et une gestion du temps pr\u00e9cise ne sont pas de simples suggestions, mais des \u00e9l\u00e9ments essentiels. Apr\u00e8s avoir pos\u00e9 ces bases, nous pouvons maintenant proc\u00e9der en toute confiance \u00e0 l'installation de Zabbix, en sachant que le syst\u00e8me sous-jacent est pr\u00eat pour la t\u00e2che.</p>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#questions","title":"Questions","text":"<ul> <li>Pourquoi pensez-vous qu'une synchronisation pr\u00e9cise du temps est si cruciale   pour un syst\u00e8me de surveillance comme Zabbix ?</li> <li>Maintenant que les bases sont pos\u00e9es, quelle sera, selon vous, la premi\u00e8re   \u00e9tape du processus d'installation de Zabbix ?</li> <li>Alors que nous nous appr\u00eatons \u00e0 installer Zabbix, pensons \u00e0 la communication   r\u00e9seau. Quels sont les ports cl\u00e9s que vous pensez devoir autoriser \u00e0 travers   le pare-feu pour que le serveur Zabbix et les agents puissent interagir   efficacement ?</li> </ul>","tags":["beginner"]},{"location":"fr/ch00-getting-started/Requirements/#url-utiles","title":"URL utiles","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/","title":"Installation de base","text":"<p>Dans ce chapitre, nous allons suivre le processus d'installation du serveur Zabbix. Il existe de nombreuses fa\u00e7ons de configurer un serveur Zabbix. Nous couvrirons les configurations les plus courantes avec MariaDB et PostgreSQL sur Ubuntu et sur Rocky Linux.</p> <p>Avant de commencer l'installation, il est important de comprendre l'architecture de Zabbix. Le serveur Zabbix est structur\u00e9 de mani\u00e8re modulaire et se compose de trois \u00e9l\u00e9ments principaux, que nous allons examiner en d\u00e9tail.</p> <ul> <li>Le serveur Zabbix</li> <li>Le serveur web Zabbix (frontend)</li> <li>La base de donn\u00e9es Zabbix</li> </ul> <p>Cr\u00e9ation des utilisateurs de la base de donn\u00e9es</p> <pre><code>In our setup we will create 2 DB users `zabbix-web` and `zabbix-srv`. The \nzabbix-web user will be used for the frontend to connect to our zabbix database.\nThe zabbix-srv user will be used by our zabbix server to connect to the database.\nThis allows us to limit the permissions for every user to only what is strictly\nneeded.\n</code></pre> <p></p> <p>1.1 Installation Zabbix de base</p> <p>Tous ces composants peuvent \u00eatre install\u00e9s sur un seul serveur ou r\u00e9partis sur trois serveurs distincts. Le c\u0153ur du syst\u00e8me est le serveur Zabbix, souvent appel\u00e9 \u00ab cerveau \u00bb. Ce composant est responsable du traitement des calculs des d\u00e9clencheurs et de l'envoi des alertes. La base de donn\u00e9es sert \u00e0 stocker la configuration du serveur Zabbix et toutes les donn\u00e9es qu'il recueille. Le serveur web fournit l'interface utilisateur (front-end) permettant d'interagir avec le syst\u00e8me. Il est important de noter que l'API Zabbix fait partie du composant frontal, et non du serveur Zabbix lui-m\u00eame.</p> <p>Ces composants doivent fonctionner ensemble de mani\u00e8re transparente, comme l'illustre le diagramme ci-dessus. Le serveur Zabbix doit lire les configurations et stocker les donn\u00e9es de surveillance dans la base de donn\u00e9es, tandis que le frontal doit avoir acc\u00e8s \u00e0 la lecture et \u00e0 l'\u00e9criture des donn\u00e9es de configuration. En outre, le frontal doit pouvoir v\u00e9rifier l'\u00e9tat du serveur Zabbix et r\u00e9cup\u00e9rer d'autres informations n\u00e9cessaires pour assurer un fonctionnement sans soucis.</p> <p>Pour notre installation, nous utiliserons deux machines virtuelles (VM) : une VM h\u00e9bergera le serveur Zabbix et l'interface web Zabbix (frontend) , tandis que la seconde VM h\u00e9bergera la base de donn\u00e9es Zabbix.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>Les sujets suivants seront abord\u00e9s :</p> <ul> <li>Installer notre base de donn\u00e9es MariaDB.</li> <li>Installer notre base de donn\u00e9es PostgreSQL.</li> <li>Installation du serveur Zabbix.</li> <li>Installer le serveur web Zabbix (frontend).</li> </ul>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installation-de-la-base-de-donnees-mariadb","title":"Installation de la base de donn\u00e9es MariaDB","text":"<p>Pour commencer le processus d'installation du serveur MariaDB, la premi\u00e8re \u00e9tape consiste \u00e0 cr\u00e9er manuellement un fichier de configuration du d\u00e9p\u00f4t. Ce fichier, mariadb.repo sur Rocky, doit \u00eatre plac\u00e9 dans le r\u00e9pertoire /etc/yum.repos.d/. Le fichier de d\u00e9p\u00f4t permettra \u00e0 votre gestionnaire de paquets de localiser et d'installer les composants MariaDB n\u00e9cessaires. Pour Ubuntu, nous devons importer les cl\u00e9s du d\u00e9p\u00f4t et cr\u00e9er un fichier, par exemple '/etc/apt/sources.list.d/mariadb.sources'.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#ajouter-le-depot-mariadb","title":"Ajouter le d\u00e9p\u00f4t MariaDB","text":"<p>Pour cr\u00e9er le fichier de d\u00e9p\u00f4t MariaDB, ex\u00e9cutez la commande suivante dans votre terminal :</p> <p>cr\u00e9er un d\u00e9p\u00f4t mariadb</p> <p>Red Hat <pre><code>vi /etc/yum.repos.d/mariadb.repo\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install apt-transport-https curl\nsudo mkdir -p /etc/apt/keyrings\nsudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\nsudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre></p> <p>Cela ouvrira un \u00e9diteur de texte dans lequel vous pourrez saisir les d\u00e9tails de la configuration du d\u00e9p\u00f4t. Une fois le d\u00e9p\u00f4t configur\u00e9, vous pouvez proc\u00e9der \u00e0 l'installation de MariaDB en utilisant votre gestionnaire de paquets.</p> Tip <p>Always check Zabbix documentation for the latest supported versions.</p> <p>La derni\u00e8re configuration est disponible ici : https://mariadb.org/download/?t=repo-config</p> <p>Voici la configuration \u00e0 ajouter au fichier :</p> <p>D\u00e9p\u00f4t MariaDB</p> <p>Red Hat <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre></p> <p>Ubuntu <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre></p> <p>Apr\u00e8s avoir enregistr\u00e9 le fichier, assurez-vous que tout est correctement configur\u00e9 et que la version de MariaDB est compatible avec la version de Zabbix afin d'\u00e9viter tout probl\u00e8me de compatibilit\u00e9.</p> <p>Avant de proc\u00e9der \u00e0 l'installation de MariaDB, il est recommand\u00e9 de s'assurer que votre syst\u00e8me d'exploitation est \u00e0 jour avec les derniers patchs et correctifs de s\u00e9curit\u00e9. Cela permettra de maintenir la stabilit\u00e9 du syst\u00e8me et la compatibilit\u00e9 avec le logiciel que vous \u00eates sur le point d'installer.</p> <p>Pour mettre \u00e0 jour votre syst\u00e8me d'exploitation, ex\u00e9cutez la commande suivante :</p> <p>Mise \u00e0 jour OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Cette commande va automatiquement chercher et installer les derni\u00e8res mises \u00e0 jour disponibles pour votre syst\u00e8me, en appliquant les correctifs de s\u00e9curit\u00e9, les am\u00e9liorations de performance et les corrections de bogues. Une fois le processus de mise \u00e0 jour termin\u00e9, vous pouvez poursuivre l'installation de MariaDB.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installer-la-base-de-donnees-mariadb","title":"Installer la base de donn\u00e9es MariaDB","text":"<p>Avec le syst\u00e8me d'exploitation mis \u00e0 jour et le d\u00e9p\u00f4t MariaDB configur\u00e9, vous \u00eates maintenant pr\u00eat \u00e0 installer les paquets serveur et client MariaDB. Vous disposerez ainsi des composants n\u00e9cessaires pour faire fonctionner et g\u00e9rer votre base de donn\u00e9es.</p> <p>Pour installer le serveur et le client MariaDB, ex\u00e9cutez la commande suivante :</p> <p>Installer Mariadb</p> <p>Red Hat <pre><code>dnf install MariaDB-server\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install mariadb-server\n</code></pre></p> <p>Cette commande t\u00e9l\u00e9charge et installe les paquets serveur et client, ce qui vous permet de mettre en place, de configurer et d'interagir avec votre base de donn\u00e9es MariaDB. Une fois l'installation termin\u00e9e, vous pouvez d\u00e9marrer et configurer le service MariaDB.</p> <p>Maintenant que MariaDB est install\u00e9, nous devons activer le service pour qu'il d\u00e9marre automatiquement au d\u00e9marrage et le d\u00e9marrer imm\u00e9diatement. Pour ce faire, utilisez la commande suivante :</p> <p>Activer le service Mariadb</p> <p>Red Hat <pre><code>systemctl enable mariadb --now\n</code></pre></p> <p>Cette commande permet d'activer et de d\u00e9marrer le service MariaDB. Une fois le service lanc\u00e9, vous pouvez v\u00e9rifier que l'installation a r\u00e9ussi en v\u00e9rifiant la version de MariaDB \u00e0 l'aide de la commande suivante :</p> <p>V\u00e9rifier la version de Mariadb</p> <p>Red Hat and Ubuntu <pre><code>sudo mariadb -V\n</code></pre></p> <p>La sortie attendue devrait ressembler \u00e0 ceci :</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using EditLine wrapper\n</code></pre> <p>Pour vous assurer que le service MariaDB fonctionne correctement, vous pouvez v\u00e9rifier son \u00e9tat \u00e0 l'aide de la commande suivante :</p> <p>Obtenir l'\u00e9tat de Mariadb</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl status mariadb\n</code></pre></p> <p>Vous devriez voir une sortie similaire \u00e0 celle-ci, indiquant que le service MariaDB est actif et fonctionne :</p> <p>exemple d'\u00e9tat du service Mariadb</p> <pre><code> mariadb.service - MariaDB 11.4.5 database server\n      Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n     Drop-In: /etc/systemd/system/mariadb.service.d\n              \u2514\u2500migrated-from-my.cnf-settings.conf\n      Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n        Docs: man:mariadbd(8)\n              https://mariadb.com/kb/en/library/systemd/\n     Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n     Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ] &amp;&amp; systemctl set-enviro&gt;\nProcess: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment \\_WSREP_START_POSITION (code=exited, status=0/SUCCESS)\nMain PID: 23156 (mariadbd)\nStatus: \"Taking your SQL requests now...\"\nTasks: 7 (limit: 30620)\nMemory: 281.7M\nCPU: 319ms\nCGroup: /system.slice/mariadb.service\n\u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>Ceci confirme que votre serveur MariaDB est op\u00e9rationnel et pr\u00eat \u00e0 \u00eatre configur\u00e9.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#securiser-la-base-de-donnees-mariadb","title":"S\u00e9curiser la base de donn\u00e9es MariaDB","text":"<p>Pour am\u00e9liorer la s\u00e9curit\u00e9 de votre serveur MariaDB, il est essentiel de supprimer les bases de donn\u00e9es de test inutiles, les utilisateurs anonymes, et de d\u00e9finir un mot de passe root. Cela peut \u00eatre fait en utilisant le script mariadb-secure-installation, qui fournit un guide \u00e9tape par \u00e9tape pour s\u00e9curiser votre base de donn\u00e9es.</p> <p>Ex\u00e9cutez la commande suivante :</p> <p>Installation s\u00e9curis\u00e9e de Mariadb</p> <p>Red Hat and Ubuntu <pre><code> sudo mariadb-secure-installation\n</code></pre></p> <pre><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>Le script mariadb-secure-installation vous guidera \u00e0 travers plusieurs \u00e9tapes cl\u00e9s :</p> <ol> <li>D\u00e9finir un mot de passe root si ce n'est pas d\u00e9j\u00e0 fait.</li> <li>Supprimer les utilisateurs anonymes.</li> <li>Interdire les connexions root \u00e0 distance.</li> <li>Supprimer la base de donn\u00e9es de test.</li> <li>Recharger les tables de privil\u00e8ges pour s'assurer que les modifications sont    prises en compte.</li> </ol> <p>Une fois termin\u00e9, votre instance MariaDB sera nettement plus s\u00e9curis\u00e9e. Vous \u00eates maintenant pr\u00eat \u00e0 configurer la base de donn\u00e9es pour Zabbix.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#creer-la-base-de-donnees-zabbix","title":"Cr\u00e9er la base de donn\u00e9es Zabbix","text":"<p>MariaDB \u00e9tant maintenant configur\u00e9 et s\u00e9curis\u00e9, nous pouvons passer \u00e0 la cr\u00e9ation de la base de donn\u00e9es pour Zabbix. Cette base de donn\u00e9es stockera toutes les donn\u00e9es n\u00e9cessaires relatives \u00e0 votre serveur Zabbix, y compris les informations de configuration et les donn\u00e9es de surveillance.</p> <p>Suivez ces \u00e9tapes pour cr\u00e9er la base de donn\u00e9es Zabbix :</p> Connectez-vous \u00e0 l'interpr\u00e9teur de commandes MariaDB en tant qu'utilisateur root Il vous sera demand\u00e9 d'entrer le mot de passe root que vous avez d\u00e9fini lors de l'installation de mariadb-secure-installation. <p>Entrez dans Mariadb en tant qu'utilisateur root</p> <p>Red Hat and Ubuntu <pre><code>mariadb -uroot -p\n</code></pre></p> <p>Une fois que vous \u00eates connect\u00e9 au shell MariaDB, ex\u00e9cutez la commande suivante pour cr\u00e9er une base de donn\u00e9es pour Zabbix :</p> <p>Cr\u00e9er la base de donn\u00e9es</p> <p><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> Note <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all  Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB  only supports up to three bytes per character and is not a true UTF-8 implementation,  which is why utf8mb4 is recommended.</p> <p>Cette commande cr\u00e9e une nouvelle base de donn\u00e9es nomm\u00e9e zabbix avec le jeu de caract\u00e8res UTF-8, n\u00e9cessaire pour Zabbix.</p> <p>Cr\u00e9ez un utilisateur d\u00e9di\u00e9 \u00e0 Zabbix et accordez-lui les privil\u00e8ges n\u00e9cessaires : Ensuite, vous devez cr\u00e9er un utilisateur que Zabbix utilisera pour acc\u00e9der \u00e0 la base de donn\u00e9es. Remplacez le mot de passe par un mot de passe fort de votre choix.</p> <p>Cr\u00e9er des utilisateurs et accorder des privil\u00e8ges</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>Cette op\u00e9ration cr\u00e9e de nouveaux utilisateurs pour zabbix-web et zabbix-srv, leur donne acc\u00e8s \u00e0 la base de donn\u00e9es zabbix et garantit que les privil\u00e8ges sont appliqu\u00e9s imm\u00e9diatement.</p> <p>Dans certains cas, en particulier lors de la configuration de Zabbix avec MariaDB, vous pouvez rencontrer des probl\u00e8mes li\u00e9s aux fonctions stock\u00e9es et aux d\u00e9clencheurs si la journalisation binaire est activ\u00e9e. Pour r\u00e9soudre ce probl\u00e8me, vous devez d\u00e9finir l'option log_bin_trust_function_creators \u00e0 1 dans le fichier de configuration MariaDB. Cela permet aux utilisateurs non root de cr\u00e9er des fonctions stock\u00e9es et des d\u00e9clencheurs sans avoir besoin des privil\u00e8ges SUPER, qui sont restreints lorsque la journalisation binaire est activ\u00e9e.</p> <p>!!! info \"Activer temporairement les privil\u00e8ges suppl\u00e9mentaires pour les utilisateurs non root\"</p> <pre><code>```sql\nMariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n```\n</code></pre> <p>A ce stade, votre base de donn\u00e9es Zabbix est pr\u00eate, et vous pouvez proc\u00e9der \u00e0 la configuration du serveur Zabbix pour qu'il se connecte \u00e0 la base de donn\u00e9es.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>Si nous voulons que notre serveur Zabbix se connecte \u00e0 notre base de donn\u00e9es, nous devons \u00e9galement ouvrir le port de notre pare-feu.</p> <p>Ajouter des r\u00e8gles de pare-feu</p> <p>Red Hat <pre><code>firewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 3306/tcp\n</code></pre></p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#remplir-la-base-de-donnees-mariadb-de-zabbix","title":"Remplir la base de donn\u00e9es MariaDB de Zabbix","text":"<p>Avec les utilisateurs et les permissions configur\u00e9s correctement, vous pouvez maintenant remplir la base de donn\u00e9es avec le sch\u00e9ma Zabbix cr\u00e9\u00e9 et d'autres \u00e9l\u00e9ments requis. Suivez les \u00e9tapes suivantes :</p> <p>Une des premi\u00e8res choses \u00e0 faire est d'ajouter le d\u00e9p\u00f4t Zabbix \u00e0 notre machine. Cela peut sembler bizarre mais c'est en fait logique car nous avons besoin de remplir notre base de donn\u00e9es avec nos sch\u00e9mas Zabbix.</p> <p>Ajouter le d\u00e9p\u00f4t Zabbix et les scripts d'installation</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>Maintenant nous allons t\u00e9l\u00e9charger les donn\u00e9es de zabbix (structure de la base de donn\u00e9es, images, utilisateur, ... ) pour cela nous utilisons l'utilisateur <code>zabbix-srv</code> et nous t\u00e9l\u00e9chargeons le tout dans notre base de donn\u00e9es <code>zabbix</code>.</p> <p>Remplir la base de donn\u00e9es</p> <p>Red Hat and Ubuntu <pre><code>sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre></p> Note <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Reconnectez-vous \u00e0 votre base de donn\u00e9es MySQL en tant que root</p> <p>Entrez dans MariaDB en tant qu'utilisateur root</p> <p><code>mariadb -uroot -p</code></p> <p>Une fois que l'importation du sch\u00e9ma Zabbix est termin\u00e9e et que vous n'avez plus besoin du param\u00e8tre global log_bin_trust_function_creators, c'est une bonne pratique de le supprimer pour des raisons de s\u00e9curit\u00e9.</p> <p>Pour annuler la modification et remettre le param\u00e8tre global \u00e0 0, utilisez la commande suivante dans l'interpr\u00e9teur de commandes MariaDB :</p> <p>D\u00e9sactiver \u00e0 nouveau la fonction log_bin_trust</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>Cette commande d\u00e9sactivera le param\u00e8tre, garantissant que la posture de s\u00e9curit\u00e9 des serveurs reste robuste.</p> <p>Ceci conclut notre installation du serveur MariaDB</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installation-de-la-base-de-donnees-postgresql","title":"Installation de la base de donn\u00e9es PostgreSQL","text":"<p>Pour l'installation de notre base de donn\u00e9es avec PostgreSQL, nous devons d'abord ajouter notre d\u00e9p\u00f4t PostgreSQL au syst\u00e8me. A ce jour, PostgreSQL 13-17 est support\u00e9 mais le mieux est de jeter un coup d'\u0153il avant de l'installer car de nouvelles versions peuvent \u00eatre support\u00e9es et d'autres plus anciennes peuvent ne plus l'\u00eatre par Zabbix et PostgreSQL. En g\u00e9n\u00e9ral, c'est une bonne id\u00e9e d'utiliser la derni\u00e8re version support\u00e9e par Zabbix. Zabbix supporte \u00e9galement l'extension TimescaleDB dont nous parlerons plus tard. Comme vous le verrez, l'installation de PostgreSQL est tr\u00e8s diff\u00e9rente de celle de MySQL, tant au niveau de l'installation que de la s\u00e9curisation de la base de donn\u00e9es.</p> <p>Le tableau de compatibilit\u00e9 se trouve \u00e0 l'adresse suivante : https://docs.timescale.com/self-hosted/latest/upgrades/upgrade-pg/</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#ajouter-le-depot-postgresql","title":"Ajouter le d\u00e9p\u00f4t PostgreSQL","text":"<p>Commen\u00e7ons donc par configurer notre d\u00e9p\u00f4t PostgreSQL avec les commandes suivantes.</p> <p>Ajouter le d\u00e9p\u00f4t PostgreSQL</p> <p>Red Hat <pre><code>Install the repository RPM:\ndnf install https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\nDisable the built-in PostgreSQL module:\ndnf -qy module disable postgresql\n</code></pre></p> <p>Ubuntu <pre><code># Import the repository signing key:\nsudo apt install curl ca-certificates\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n\n# Create the repository configuration file:\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n\n# Update the package lists:\nsudo apt update\n</code></pre></p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installer-les-bases-de-donnees-postgresql","title":"Installer les bases de donn\u00e9es PostgreSQL","text":"<p>Installer le serveur PostgreSQL</p> <p>Red Hat <pre><code># Install Postgres server:\ndnf install postgresql17-server\n\n# Initialize the database and enable automatic start:\n/usr/pgsql-17/bin/postgresql-17-setup initdb\nsystemctl enable postgresql-17 --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install postgresql-17\n</code></pre></p> <p>Pour mettre \u00e0 jour votre syst\u00e8me d'exploitation, ex\u00e9cutez la commande suivante :</p> <p>update the OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#populate-the-zabbix-postgresql-db","title":"Populate the Zabbix PostgreSQL DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>Avec les utilisateurs et les permissions configur\u00e9s correctement, vous pouvez maintenant remplir la base de donn\u00e9es avec le sch\u00e9ma Zabbix cr\u00e9\u00e9 et d'autres \u00e9l\u00e9ments requis. Suivez les \u00e9tapes suivantes :</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in   the <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <p>upload the DB schema to db zabbix</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <p>Output example</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <p>Grant rights on the schema to user zabbix-web</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server\nTO \"zabbix-web\";\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>Verify if the rights are correct on the schema :</p> <p>Example schema rights</p> <pre><code>zabbix=&gt; \\dn+\n                                           List of schemas\n     Name      |       Owner       |           Access privileges            |      Description\n---------------+-------------------+----------------------------------------+------------------------\n public        | pg_database_owner | pg_database_owner=UC/pg_database_owner+| standard public schema\n               |                   | =U/pg_database_owner                   |\n zabbix_server | zabbix-srv        | \"zabbix-srv\"=UC/\"zabbix-srv\"          +|\n               |                   | \"zabbix-web\"=U/\"zabbix-srv\"            |\n</code></pre> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no     schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the   <code>zabbix_server</code> schema:</li> </ul> <p>List tables</p> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <p>List table with relations</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has   the necessary permissions. You can check permissions for specific tables using   the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <pre><code>                                                     Access privileges\n    Schema     |            Name            |   Type   |         Access privileges          | Column privileges | Policies\n---------------+----------------------------+----------+------------------------------------+-------------------+----------\n zabbix_server | acknowledges               | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | actions                    | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | alerts                     | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | auditlog                   | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <p>Exit the database</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>Red Hat <pre><code>firewall-cmd --add-port=5432/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 5432/tcp\n</code></pre></p> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>Install the zabbix server</p> <p>Red Hat <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre></p> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> Note <p>Before restarting the Zabbix server after modifying its configuration, it is considered best practice to validate the configuration to prevent potential issues. Running a configuration check ensures that any errors are detected beforehand, avoiding downtime caused by an invalid configuration. This can be accomplished using the following command: <code>zabbix-server -T</code></p> <p>enable and start zabbix-server service</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>Check the log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Exemple de sortie</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example log with errors</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check status of zabbix-server service</p> <p><pre><code>systemctl status zabbix-server\n</code></pre> <pre><code>zabbix-server.service - Zabbix Server\nLoaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\nActive: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\nMain PID: 12074 (zabbix_server)\nTasks: 77 (limit: 24744)\nMemory: 71.5M\nCPU: 18.535s\nCGroup: /system.slice/zabbix-server.service\n\u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n\u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n\u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n\u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n\u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n\u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n\u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n\u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n\u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n\u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n\u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n\u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n\u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n\u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n\u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n\u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n\u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n\u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n\u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n\u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n\u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n\u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n\u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n\u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>install zabbix server</p> <p>Red Hat</p> <pre><code>dnf install zabbix-server-pgsql\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre></p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <p><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code></p> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>enable zabbix server service and start</p> <p>Red Hat <pre><code>systemctl enable zabbix-server --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>check the zabbix log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example log output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example of an error in the log</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check server status</p> <p><pre><code> systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n      Memory: 71.5M\n         CPU: 18.535s\n      CGroup: /system.slice/zabbix-server.service\n              \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n              \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n              \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n              \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n              \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n              \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n              \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n              \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n              \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n              \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n              \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n              \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n              \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n              \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n              \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n              \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n              \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n              \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n              \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n              \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n              \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n              \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n              \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n              \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installation-du-frontend","title":"Installation du frontend","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the packages on the same server as is in our case. It's also perfectly possible to install the front-end on another server. In that case you only need to specify the correct IP addresses and open the correct firewall ports.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>install frontend packages</p> <p>Red Hat <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql\n</code></pre></p> <p>Ubuntu <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>edit nginx config for Red Hat</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <p>original config</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nserver*name *;\nroot /usr/share/nginx/html;\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <p>config after edit</p> <pre><code>server {\n# listen 80;\n# listen [::]:80;\n# server*name *;\n# root /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <p>edit zabbix config for nginx</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <p>original config</p> <pre><code>server {\nlisten 8080;\nserver_name example.com;\n\nroot    /usr/share/zabbix;\n\nindex   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <p>config after the edit</p> <pre><code>server { # listen 8080; # server*name example.com;\nlisten 80;\nserver_name *;\n\n         root    /usr/share/zabbix;\n\n         index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>edit nginx config for ubuntu</p> <pre><code>sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <p>original config</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <p>config after edit</p> <pre><code>server {\nlisten xxx.xxx.xxx.xxx:80;\nserver_name \"\";\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> Note <p>server_name is normally replaced with the fqdn name of your machine. If you have no fqdn you can keep it open like in this example.</p> <p>restart the front-end services</p> <p>Red Hat <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>check if the service is running</p> <p><pre><code>systemctl status nginx\n</code></pre> <pre><code>\u25cf nginx.service - The nginx HTTP and reverse proxy server\n      Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n     Drop-In: /usr/lib/systemd/system/nginx.service.d\n              \u2514\u2500php-fpm.conf\n      Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n    Main PID: 1206 (nginx)\n       Tasks: 2 (limit: 12344)\n      Memory: 4.8M\n         CPU: 38ms\n      CGroup: /system.slice/nginx.service\n              \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n              \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre></p> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>configurer le firewall</p> <p>Red Hat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu <pre><code>sudo ufw allow 80/tcp\n</code></pre></p> <p>Open your browser and go to the url or ip of your front-end :</p> <p>front-end configuration</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file:</p> <pre><code> /var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>1.4 Zabbix welcome</p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>!.5 Zabbix welcome language choice</p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>install language packs</p> <p>Red Hat <pre><code>dnf list glibc-langpack-*\n</code></pre></p> <p>Ubuntu <pre><code>apt-cache search language-pack\n</code></pre></p> <p>Users on Ubuntu will probably notice following error `\"Locale for language \"en_US\" is not found on the web server.\"``</p> <p>This can be solved easy with the following commands.</p> <pre><code>sudo locale-gen en_US.UTF-8\nsudo update-locale\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>This will give you on Red Hat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n---\nglibc-langpack-zu.x86_64\n</code></pre> <p>on Ubuntu it will look like :</p> <pre><code>language-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n---\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>search for language pack</p> <p>Red Hat <pre><code>dnf list glibc-langpack-* | grep zh\n</code></pre></p> <pre><code>glibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu <pre><code>sudo apt-cache search language-pack | grep -i zh\n</code></pre></p> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>install the package</p> <p>Red Hat <pre><code>dnf install glibc-langpack-zh.x86_64\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install language-pack-zh-hans\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> <p>1.6 Zabbix select language</p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>1.7 Zabbix pre-requisites</p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on    your setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your    database server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the    schema name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web    front-end, remember in our basic installation guide we created 2 users    zabbix-web and zabbix-srv. One for the frontend and the other one for our    zabbix server so here we will use the user <code>zabbix-web</code>. Enter the    corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>1.8 Zabbix connections</p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix    instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer    to use.</li> <li>Encrypt connections from Web interface: I marked this box but you should    not. This box is to encrypt communications between Zabbix frontend and your    browser. We will cover this later. Once these settings are configured, you    can complete the setup and proceed with any final configuration steps as    needed.</li> </ol> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>1.9 Zabbix summary</p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>1.10 Zabbix install</p> <p>We are now ready to login :</p> <p></p> <p>1.11 Zabbix login</p> <ul> <li>Login : Admin</li> <li>Password : zabbix</li> </ul> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/basic-installation/#url-utiles","title":"URL utiles","text":"<ul> <li>https://www.postgresql.org/docs/current/ddl-priv.html</li> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>","tags":["beginner"]},{"location":"fr/ch01-zabbix-components/chapter/","title":"Composants de Zabbix, fonctions de base et installation","text":"<p>Dans ce chapitre, nous d\u00e9veloppons les connaissances de base de la section \"Pour commencer\" afin de fournir un guide complet aux personnes qui installent Zabbix pour la premi\u00e8re fois et les utilisateurs avanc\u00e9s qui cherchent \u00e0 optimiser leur installation. Nous ne nous contenterons pas de couvrir les \u00e9tapes essentielles d'une installation de base, mais nous nous pencherons \u00e9galement sur les d\u00e9tails les plus fins de l'architecture, des composants et des meilleures pratiques concernant Zabbix.</p> <p>Nous commencerons par passer en revue le processus d'installation, en nous assurant que vous disposez d'une base solide pour continuer. Ensuite, nous aborderons les composants principaux de Zabbix, ce que chacun fait, comment ils interagissent et pourquoi ils sont cruciaux pour votre solution de surveillance. Vous d\u00e9couvrirez les sous-processus, leurs r\u00f4les et la mani\u00e8re dont ils contribuent \u00e0 l'efficacit\u00e9 et \u00e0 la fiabilit\u00e9 de Zabbix.</p> <p>En outre, nous explorerons les bons choix architecturaux qui peuvent faire ou endommager votre installation de monitoring. Que vous g\u00e9riez un petit r\u00e9seau ou une infrastructure \u00e0 grande \u00e9chelle, prendre les bonnes d\u00e9cisions de conception d\u00e8s le d\u00e9part vous permettra d'obtenir des avantages en termes d'\u00e9volutivit\u00e9, de performances et de maintenance.</p> <p>Ce chapitre est con\u00e7u pour r\u00e9pondre aux besoins d'un large \u00e9ventail de lecteurs. Si vous cherchez simplement \u00e0 mettre Zabbix en place et \u00e0 le faire fonctionner, vous trouverez des instructions claires, \u00e9tape par \u00e9tape. Pour ceux qui souhaitent aller plus loin, nous fournirons des informations d\u00e9taill\u00e9es sur la fa\u00e7on dont Zabbix fonctionne, afin de vous aider \u00e0 faire des choix \u00e9clair\u00e9s qui correspondent \u00e0 vos besoins et \u00e0 vos plans de croissance futurs.</p> <p>\u00c0 la fin de ce chapitre, vous aurez non seulement une installation fonctionnelle de Zabbix, mais aussi une compr\u00e9hension approfondie de ses composants et de son architecture, ce qui vous permettra d'exploiter pleinement le potentiel de Zabbix, quelle que soit la complexit\u00e9 de votre environnement.</p> <p>Embarquons pour ce voyage dans les entrailles de Zabbix et abreuvons-nous des connaissances n\u00e9cessaires pour d\u00e9marrer et optimiser une solution de monitoring puissante.</p>"},{"location":"fr/ch01-zabbix-components/ha-setup/","title":"Configuration HA","text":"<p>Dans cette section, nous allons configurer Zabbix en haute disponibilit\u00e9 (HA). Cette fonctionnalit\u00e9, introduite dans Zabbix 6, est une am\u00e9lioration cruciale qui garantit la poursuite de la surveillance m\u00eame si un serveur Zabbix tombe en panne. Avec HA, lorsqu'un serveur Zabbix tombe en panne, un autre peut prendre le relais de mani\u00e8re transparente.</p> <p>Pour ce guide, nous utiliserons deux serveurs Zabbix et une base de donn\u00e9es, mais la configuration permet d'ajouter d'autres serveurs Zabbix si n\u00e9cessaire.</p> <p></p> <p>1.1 Configuration HA</p> <p>Il est important de noter que la configuration de Zabbix HA est simple, fournissant une redondance sans fonctionnalit\u00e9s complexes telles que l'\u00e9quilibrage de charge.</p> <p>Au m\u00eame titre que dans notre configuration de base, nous allons documenter les d\u00e9tails cl\u00e9s des serveurs dans cette configuration HA. Vous trouverez ci-dessous la liste des serveurs et l'endroit o\u00f9 ajouter leurs adresses IP respectives pour plus de commodit\u00e9 :</p> Serveur Adresse IP Serveur Zabbix 1 Serveur Zabbix 2 Base de donn\u00e9es IP virtuelle Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#installer-la-base-de-donnees","title":"Installer la base de donn\u00e9es","text":"<p>Reportez-vous au chapitre Installation de base pour obtenir des instructions d\u00e9taill\u00e9es sur la configuration de la base de donn\u00e9es. Ce chapitre fournit des conseils \u00e9tape par \u00e9tape sur l'installation d'une base de donn\u00e9es PostgreSQL ou MariaDB sur un n\u0153ud d\u00e9di\u00e9 fonctionnant sous Ubuntu ou Rocky Linux.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#installation-du-cluster-zabbix","title":"Installation du cluster Zabbix","text":"<p>La mise en place d'un cluster Zabbix consiste \u00e0 configurer plusieurs serveurs Zabbix pour qu'ils fonctionnent ensemble et offrent une haute disponibilit\u00e9. Bien que le processus soit similaire \u00e0 la configuration d'un seul serveur Zabbix, des \u00e9tapes de configuration suppl\u00e9mentaires sont n\u00e9cessaires pour activer la haute disponibilit\u00e9 (HA).</p> <p>Ajoutez les d\u00e9p\u00f4ts Zabbix \u00e0 vos serveurs.</p> <p>Tout d'abord, ajoutez le d\u00e9p\u00f4t Zabbix \u00e0 vos deux serveurs Zabbix :</p> <p>ajouter le d\u00e9p\u00f4t zabbix</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>Une fois cela fait, nous pouvons installer les paquets du serveur zabbix.</p> <p>installer les paquets du serveur Zabbix</p> <p>Redhat</p> <p><pre><code>dnf install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu</p> <p><pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#configuration-du-serveur-zabbix-1","title":"Configuration du serveur Zabbix 1","text":"<p>Modifiez le fichier de configuration du serveur Zabbix,</p> <p>\u00e9diter le fichier de configuration du serveur</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Mettez \u00e0 jour les lignes suivantes pour vous connecter \u00e0 la base de donn\u00e9es :</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configurer les param\u00e8tres HA pour ce serveur :</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Sp\u00e9cifier l'adresse du serveur frontend pour les sc\u00e9narios de basculement :</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#configuration-de-zabbix-server-2","title":"Configuration de Zabbix Server 2","text":"<p>R\u00e9p\u00e9tez les \u00e9tapes de configuration pour le deuxi\u00e8me serveur Zabbix. Ajustez les champs <code>HANodeName</code> et <code>NodeAddress</code> si n\u00e9cessaire pour ce serveur.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#demarrage-du-serveur-zabbix","title":"D\u00e9marrage du serveur Zabbix","text":"<p>Apr\u00e8s avoir configur\u00e9 les deux serveurs, activez et d\u00e9marrez le service zabbix-server sur chacun d'eux :</p> <p>red\u00e9marrer le service zabbix-server</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> Note <p>The <code>NodeAddress</code> must match the IP or FQDN name of the Zabbix server node. Without this parameter the Zabbix front-end is unable to connect to the active node. The result will be that the frontend is unable to display the status the queue and other information.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#verification-de-la-configuration","title":"V\u00e9rification de la configuration","text":"<p>V\u00e9rifiez les fichiers journaux des deux serveurs pour vous assurer qu'ils ont d\u00e9marr\u00e9 correctement et qu'ils fonctionnent dans leurs modes HA respectifs.</p> <p>Sur le premier serveur :</p> <p>v\u00e9rifier les journaux pour les messages HA</p> <pre><code>sudo grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Dans les journaux du syst\u00e8me, vous devriez observer les entr\u00e9es suivantes, indiquant l'initialisation du gestionnaire de haute disponibilit\u00e9 (HA) :</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>Ces messages confirment que le processus HA manager a d\u00e9marr\u00e9 et a assum\u00e9 le r\u00f4le actif. Cela signifie que l'instance Zabbix est maintenant le n\u0153ud principal dans le cluster HA, g\u00e9rant toutes les op\u00e9rations de surveillance. Si un \u00e9v\u00e9nement de basculement se produit, un autre n\u0153ud en attente prendra le relais en fonction de la strat\u00e9gie HA configur\u00e9e.</p> <p>Sur le deuxi\u00e8me serveur (et tout autre n\u0153ud suppl\u00e9mentaire) :</p> <pre><code>grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Dans les journaux du syst\u00e8me, les entr\u00e9es suivantes indiquent l'initialisation du gestionnaire de haute disponibilit\u00e9 (HA) :</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>Ces messages confirment que le processus du gestionnaire HA a \u00e9t\u00e9 lanc\u00e9 avec succ\u00e8s en mode veille. Cela sugg\u00e8re que le n\u0153ud est op\u00e9rationnel mais qu'il n'agit pas actuellement en tant qu'instance HA active, en attendant d'autres transitions d'\u00e9tat bas\u00e9es sur la strat\u00e9gie HA configur\u00e9e.</p> <p>\u00c0 ce stade, votre cluster Zabbix est configur\u00e9 correctement pour la haute disponibilit\u00e9 (HA). Les journaux du syst\u00e8me confirment que le gestionnaire HA a \u00e9t\u00e9 initialis\u00e9 et qu'il fonctionne en mode veille, ce qui indique que les m\u00e9canismes de basculement sont en place. Cette configuration garantit une surveillance ininterrompue, m\u00eame en cas de d\u00e9faillance d'un serveur, en permettant des transitions de r\u00f4le automatiques bas\u00e9es sur la configuration HA.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#installation-du-frontend","title":"Installation du frontend","text":"<p>Avant de proc\u00e9der \u00e0 l'installation et \u00e0 la configuration du serveur web, il est essentiel d'installer Keepalived. Keepalived permet l'utilisation d'une IP virtuelle (VIP) pour les services frontaux, assurant un basculement transparent et la continuit\u00e9 du service. Il fournit un cadre robuste pour l'\u00e9quilibrage de la charge et la haute disponibilit\u00e9, ce qui en fait un composant essentiel dans le maintien d'une infrastructure r\u00e9siliente.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#mise-en-place-de-keepalived","title":"Mise en place de keepalived","text":"Note <p>Keepalived is like a helper that makes sure one computer takes over if another one stops working. It gives them a shared magic IP address so users don't notice when a server fails. If the main one breaks, the backup jumps in right away. You can replace it with tools like Pacemaker, Corosync, or cloud load balancers that do the same \u201ctake over\u201d job. So let's get started. On both our servers we have to install keepalived.</p> <p>Installation de keepalived</p> <p>Redhat <pre><code>dnf install keepalived\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install keepalived\n</code></pre></p> <p>Ensuite, nous devons modifier la configuration de Keepalived sur les deux serveurs. Bien que les configurations soient similaires, chaque serveur n\u00e9cessite de l\u00e9g\u00e8res adaptations. Nous commencerons par le serveur 1. Pour \u00e9diter le fichier de configuration de Keepalived, utilisez la commande suivante :</p> <p>\u00e9diter la configuration de keepalived</p> <p>RedHat and Ubuntu <pre><code>sudo vi /etc/keepalived/keepalived.conf\n</code></pre></p> <p>Si le fichier contient quelque chose, il doit \u00eatre effac\u00e9 et remplac\u00e9 par les lignes suivantes :</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> Warning <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with something secure. For the virtual_ipaddress use a free IP from your network. This will be used as our VIP.</p> <p>Nous pouvons maintenant faire la m\u00eame modification sur notre <code>deuxi\u00e8me</code> serveur Zabbix. Supprimez tout dans le m\u00eame fichier comme nous l'avons fait pr\u00e9c\u00e9demment et remplacez le par les lignes suivantes :</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n       xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Comme pour notre 1er serveur Zabbix, remplacez <code>enp0s1</code> par le nom de l'interface de votre machine, remplacez <code>password</code> par votre mot de passe et remplissez le virtual_ipaddress comme pr\u00e9c\u00e9demment.</p> <p>Ceci termine la configuration de keepalived. Nous pouvons maintenant continuer \u00e0 adapter le frontend.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#installer-et-configurer-le-frontend","title":"Installer et configurer le frontend","text":"<p>Sur les deux serveurs, nous pouvons ex\u00e9cuter les commandes suivantes pour installer notre serveur web et les paquets du serveur frontend :</p> <p>installation et configuration du serveur web</p> <p>RedHat <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install nginx zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>En outre, il est essentiel de configurer le pare-feu. Des r\u00e8gles de pare-feu appropri\u00e9es garantissent une communication transparente entre les serveurs et pr\u00e9viennent les d\u00e9faillances inattendues. Avant de continuer, v\u00e9rifiez que les ports n\u00e9cessaires sont ouverts et appliquez les r\u00e8gles de pare-feu requises en cons\u00e9quence.</p> <p>configurer le firewall</p> <p>RedHat <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\nsudo ufw allow 80/tcp\n</code></pre></p> <p>Avec la configuration en place et le pare-feu correctement configur\u00e9, nous pouvons maintenant d\u00e9marrer le service Keepalived. De plus, nous devons l'activer pour nous assurer qu'il d\u00e9marre automatiquement. Pour ce faire, utilisez les commandes suivantes :</p> <p>d\u00e9marrer et activer keepalived</p> <p>RedHat and Ubuntu <pre><code>sudo systemctl enable keepalived nginx --now\n</code></pre></p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#configurer-le-serveur-web","title":"Configurer le serveur web","text":"<p>Le processus d'installation du frontend suit les m\u00eames \u00e9tapes que celles d\u00e9crites dans la section <code>Installation de base</code> sous Installation du frontend. En utilisant des proc\u00e9dures pr\u00e9-\u00e9tablies, nous assurons la coh\u00e9rence et la fiabilit\u00e9 du d\u00e9ploiement.</p> Warning <p>Ubuntu users need to use the VIP in the setup of Nginx, together with the local IP in the listen directive of the config.</p> Note <p>Don't forget to configure both front-ends. Also this is a new setup. Keep in mind that with an existing setup we need to comment out the lines  <code>$ZBX_SERVER</code> and <code>$ZBX_SERVER_PORT</code>. Our frontend will check what node is active by reading the node table in the database.</p> <p><pre><code>select * from ha_node;\n</code></pre> <pre><code>zabbix=# select * from ha_node;\n         ha_nodeid         |  name   |   address       | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+-----------------+-------+------------+--------+---------------------------\n cm8agwr2b0001h6kzzsv19ng6 | zabbix1 | xxx.xxx.xxx.xxx | 10051 | 1742133911 |      0 | cm8apvb0c0000jkkzx1ojuhst\n cm8agyv830001ell0m2nq5o6n | zabbix2 | localhost       | 10051 | 1742133911 |      3 | cm8ap7b8u0000jil0845p0w51\n(2 rows)\n</code></pre></p> <p>Dans ce cas, le n\u0153ud <code>zabbix2</code> est identifi\u00e9 comme le n\u0153ud actif, comme l'indique sa valeur d'\u00e9tat <code>3</code>, qui d\u00e9signe un \u00e9tat actif. Les valeurs d'\u00e9tat possibles sont les suivantes :</p> <ul> <li><code>0</code> - Plusieurs n\u0153uds peuvent rester en mode veille.</li> <li><code>1</code> - Un n\u0153ud pr\u00e9c\u00e9demment d\u00e9tect\u00e9 a \u00e9t\u00e9 arr\u00eat\u00e9.</li> <li><code>2</code> - Un n\u0153ud a \u00e9t\u00e9 d\u00e9tect\u00e9 pr\u00e9c\u00e9demment mais est devenu indisponible sans   avoir \u00e9t\u00e9 correctement arr\u00eat\u00e9.</li> <li><code>3</code> - Le n\u0153ud est actuellement actif.</li> </ul> <p>Cette classification permet une surveillance et une gestion efficace de l'\u00e9tat au sein du cluster.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#verifier-le-bon-fonctionnement","title":"V\u00e9rifier le bon fonctionnement","text":"<p>Pour v\u00e9rifier que la configuration fonctionne correctement, acc\u00e9dez \u00e0 votre <code>serveur Zabbix</code> en utilisant l'IP virtuelle (VIP). Naviguez vers Rapports \u2192 Informations sur le syst\u00e8me dans le menu. Au bas de la page, vous devriez voir une liste de serveurs, dont au moins un est marqu\u00e9 comme actif. Le nombre de serveurs affich\u00e9s d\u00e9pend du nombre total de serveurs configur\u00e9s dans votre configuration HA.</p> <p></p> <p>1.2 v\u00e9rifier l'HA</p> <p>Arr\u00eatez ou red\u00e9marrez le serveur frontend actif et observez que le serveur <code>frontend Zabbix</code> reste accessible. En rechargeant la page, vous remarquerez que l'autre <code>serveur frontend</code> a pris le relais en tant qu'instance active, assurant ainsi un basculement presque transparent et une haute disponibilit\u00e9.</p> <p></p> <p>1.3 v\u00e9rifier l'HA</p> <p>Outre la surveillance de l'\u00e9tat des n\u0153uds HA, Zabbix fournit plusieurs commandes d'ex\u00e9cution qui permettent aux administrateurs de g\u00e9rer les param\u00e8tres de basculement et de supprimer les n\u0153uds inactifs de mani\u00e8re dynamique.</p> <p>L'une de ces commandes est la suivante :</p> <pre><code>zabbix_server -R ha_set_failover_delay=10m\n</code></pre> <p>Cette commande ajuste le d\u00e9lai de basculement, qui d\u00e9finit la dur\u00e9e pendant laquelle Zabbix attend avant de faire passer un n\u0153ud en attente \u00e0 l'\u00e9tat actif. Le d\u00e9lai peut \u00eatre d\u00e9fini entre 10 secondes et 15 minutes.</p> <p>Pour supprimer un n\u0153ud qui est soit arr\u00eat\u00e9 ou inaccessible, la commande suivante doit \u00eatre utilis\u00e9e :</p> <pre><code>zabbix_server -R ha_remove_node=`zabbix1`\n</code></pre> <p>L'ex\u00e9cution de cette commande supprime le n\u0153ud du cluster HA. Si la suppression est r\u00e9ussie, la sortie confirme l'action :</p> <pre><code>Removed node \"zabbix1\" with ID \"cm8agwr2b0001h6kzzsv19ng6\"\n</code></pre> <p>Si le n\u0153ud supprim\u00e9 redevient disponible, il peut \u00eatre ajout\u00e9 automatiquement lorsqu'il se reconnecte au cluster. Ces commandes offrent une certaine souplesse pour g\u00e9rer la haute disponibilit\u00e9 dans Zabbix sans n\u00e9cessiter un red\u00e9marrage complet du processus <code>zabbix_server</code>.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#conclusion","title":"Conclusion","text":"<p>Dans ce chapitre, nous avons r\u00e9ussi \u00e0 mettre en place un environnement Zabbix \u00e0 haute disponibilit\u00e9 (HA) en configurant le serveur Zabbix et le frontend pour la redondance. Nous avons d'abord \u00e9tabli la haute disponibilit\u00e9 pour le serveur Zabbix, en veillant \u00e0 ce que les services de surveillance restent disponibles m\u00eame en cas de d\u00e9faillance. Ensuite, nous nous sommes concentr\u00e9s sur le frontend, en impl\u00e9mentant une IP virtuelle (VIP) avec Keepalived pour fournir un basculement transparent et une accessibilit\u00e9 continue.</p> <p>Additionally, we configured the firewall to allow Keepalived traffic and ensured that the service starts automatically after a reboot. With this setup, the Zabbix frontend can dynamically switch between servers, minimizing downtime and improving reliability.</p> <p>While database HA is an important consideration, it falls outside the scope of this setup. However, this foundation provides a robust starting point for building a resilient monitoring infrastructure that can be further enhanced as needed.</p>","tags":["expert"]},{"location":"fr/ch01-zabbix-components/ha-setup/#url-utiles","title":"URL utiles","text":"<ul> <li>https://www.redhat.com/sysadmin/advanced-keepalived</li> <li>https://keepalived.readthedocs.io/en/latest/introduction.html</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/concepts/server/ha</li> </ul>","tags":["expert"]},{"location":"fr/ch02-zabbix-installation/chapter/","title":"D\u00e9marrer l'installation de Zabbix","text":"<p>Nous commen\u00e7ons ce chapitre par une vue d\u00e9taill\u00e9e dans le frontend de Zabbix ** , le lieu o\u00f9 toutes les t\u00e2ches de surveillance et de configuration se rejoignent. En plus de l'introduction de base \u00e0 la navigation dans le frontend, ce chapitre couvre \u00e9galement la configuration des utilisateurs et des groupes**, en se concentrant sur la cr\u00e9ation d'un syst\u00e8me de gestion des utilisateurs s\u00e9curis\u00e9 et efficace.</p> <p>Nous verrons comment configurer l'authentification interne avec les meilleures pratiques de s\u00e9curit\u00e9, y compris l'authentification \u00e0 double facteur. Pour ceux qui ont besoin d'une int\u00e9gration avanc\u00e9e, nous explorerons des options telles que SAML, LDAP, et d'autres m\u00e9thodes d'authentification externes.</p> <p>Ce chapitre \u00e9tablit un \u00e9quilibre entre une vue d'ensemble simple \"c'est le frontend\" et un regard plus approfondi sur les choix avanc\u00e9s que vous pouvez faire pour am\u00e9liorer la s\u00e9curit\u00e9 et la facilit\u00e9 de gestion de votre syst\u00e8me. Que vous d\u00e9butiez ou que vous cherchiez \u00e0 mettre en \u0153uvre des mesures de s\u00e9curit\u00e9 robustes, il y a ici quelque chose pour tout le monde.</p> <p>\u00c0 la fin de cette formation, vous serez bien \u00e9quip\u00e9 pour naviguer en toute confiance dans l'interface de Zabbix et mettre en place un syst\u00e8me de gestion des utilisateurs s\u00e9curis\u00e9, \u00e9volutif et adapt\u00e9 aux besoins de votre organisation.</p>"},{"location":"fr/ch02-zabbix-installation/frontend/","title":"Frontend expliqu\u00e9","text":"<p>Ce chapitre va couvrir les bases que vous devez conna\u00eetre \u00e0 propos de l'interface utilisateur de Zabbix et les choses que vous devez savoir avant de pouvoir commencer \u00e0 exploiter pleinement votre outil de surveillance. Nous verrons comment fonctionne l'interface utilisateur, comment ajouter un h\u00f4te, des groupes, des utilisateurs, des \u00e9l\u00e9ments... afin d'avoir une bonne compr\u00e9hension des bases. C'est quelque chose qui est parfois oubli\u00e9 et qui peut conduire \u00e0 des frustration, ne pas savoir pourquoi les choses ne fonctionnent pas comme nous l'avions pr\u00e9vu. Donc, m\u00eame si vous \u00eates un utilisateur avanc\u00e9, il peut \u00eatre utile de jeter un coup d'oeil \u00e0 ce chapitre.</p> <p>Commen\u00e7ons</p>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#apercu-de-linterface","title":"Aper\u00e7u de l'interface","text":"<p>Avec Zabbix 7, l'interface de connexion utilisateur a l\u00e9g\u00e8rement chang\u00e9. Notre menu sur le c\u00f4t\u00e9 gauche de l'\u00e9cran a \u00e9t\u00e9 l\u00e9g\u00e8rement remani\u00e9. Voyons cela de plus pr\u00e8s. Lorsque nous nous connectons \u00e0 notre installation Zabbix pour la premi\u00e8re fois avec notre utilisateur Admin, nous voyons une page</p> <p>comme ceci o\u00f9 nous avons la <code>fen\u00eatre principale</code> en vert le <code>menu principal</code> marqu\u00e9 en rouge et les <code>liens</code> marqu\u00e9s en jaune.</p> <p></p> <p>2.1 Vue d'ensemble</p> <p>Le menu principal peut \u00eatre cach\u00e9 en le r\u00e9duisant compl\u00e8tement ou en le r\u00e9duisant \u00e0 un ensemble de petites ic\u00f4nes. En cliquant sur le bouton avec les 2 fl\u00e8ches \u00e0 gauche :</p> <p></p> <p>2.2 R\u00e9duction</p> <p>Vous verrez que le menu se r\u00e9duit \u00e0 un ensemble de petites ic\u00f4nes. En appuyant sur \"&gt;&gt;\", le <code>menu principal</code> de reviendra \u00e0 son \u00e9tat d'origine.</p> <p>En cliquant sur l'ic\u00f4ne qui ressemble \u00e0 une bo\u00eete avec une fl\u00e8che qui d\u00e9passe, \u00e0 c\u00f4t\u00e9 du bouton \"&lt;&lt;\", vous masquerez compl\u00e8tement le <code>menu principal</code> .</p> <p></p> <p>2.3 Masquer</p> <p>Pour revenir \u00e0 votre <code>menu principal</code> , c'est assez facile, il suffit de chercher le bouton \u00e0 gauche avec trois lignes horizontales et de cliquer dessus. Cela affichera le <code>menu principal</code> mais il ne restera pas. Lorsque nous cliquons sur la bo\u00eete avec la fl\u00e8che pointant vers le bas \u00e0 droite, le <code>menu principal</code> est remis \u00e0 sa place.</p> <p>Une autre fa\u00e7on d'agrandir l'\u00e9cran, tr\u00e8s utile pour les moniteurs <code>NOC Teams</code> par exemple, est le bouton <code>kiosk mode</code>. Celui-ci est situ\u00e9 sur le c\u00f4t\u00e9 gauche de l'\u00e9cran et ressemble \u00e0 4 fl\u00e8ches pointant vers chaque coin de l'\u00e9cran. En appuyant sur ce bouton, tous les menus disparaissent et il ne reste plus que la <code>fen\u00eatre principale</code> sur laquelle vous pouvez vous concentrer.</p> <p></p> <p>2.4 \u00c9largir</p> <p>Lorsque nous voulons quitter le mode kiosque, le bouton sera remplac\u00e9 par 2 fl\u00e8ches pointant vers l'int\u00e9rieur de l'\u00e9cran. En appuyant sur ce bouton, nous reviendrons \u00e0 l'\u00e9tat d'origine.</p> <p></p> <p>2.5 R\u00e9duire</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode.</p> Note <p>There are many other page parameters we can use. A full list can be found at https://www.zabbix.com/documentation/7.4/en/manual/web_interface/page_parameters Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p>Si nous tapons dans la bo\u00eete de recherche le mot <code>server</code> vous verrez que nous obtenons une vue d'ensemble de tous les <code>templates</code>, <code>host groups</code> et <code>hosts</code> avec le serveur de nom dedans. C'est pourquoi on l'appelle la bo\u00eete de <code>recherche globale</code> .</p> <p></p> <p>2.6 Recherche globale</p> <p>Voici notre r\u00e9sultat apr\u00e8s avoir cherch\u00e9 le mot <code>serveur</code>. Si vous avez une configuration Zabbix standard, votre page devrait ressembler plus ou moins \u00e0 la m\u00eame chose.</p> <p></p> <p>2.7 R\u00e9sultat de la recherche globale</p>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#menu-principal","title":"Menu principal","text":"<p>Nous allons maintenant examiner bri\u00e8vement les \u00e9l\u00e9ments du menu principal de l'application. Le <code>menu principal</code> , situ\u00e9 sur l'interface de gauche, comprend au total neuf sections distinctes :</p> Nom du menu D\u00e9tails Tableaux de bord Contient un aper\u00e7u de tous les tableaux de bord auxquels nous avons acc\u00e8s. Monitoring Nous montre les h\u00f4tes, les probl\u00e8mes, les derni\u00e8res donn\u00e9es, les cartes, ... Services Une vue d'ensemble de tous les services et des param\u00e8tres SLA. Inventaire Une vue d'ensemble de nos donn\u00e9es d'inventaire collect\u00e9es. Rapports Affiche les informations syst\u00e8me, les rapports planifi\u00e9s, les journaux d'audit, les journaux d'action, etc. Collecte de donn\u00e9es Contient tout ce qui est li\u00e9 \u00e0 la collecte de donn\u00e9es comme les h\u00f4tes, les mod\u00e8les, la maintenance, la d\u00e9couverte, ... Alerte La configuration de nos types de m\u00e9dias, scripts et actions Utilisateurs Configuration des utilisateurs comme les r\u00f4les d'utilisateurs, les groupes d'utilisateurs, l'authentification, les acc\u00e8s \u00e0 l'API, ... Administration La partie administration contenant tous les param\u00e8tres globaux, housekeeper, proxies, file d'attente, ...","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#menu-des-liens","title":"Menu des liens","text":"<p>Imm\u00e9diatement \u00e0 c\u00f4t\u00e9 du menu principal de l'application, sur la gauche de l'interface, se trouve le menu <code>Links</code>. Ce module fournit une collection d'hyperliens utiles pour les utilisateurs.</p> Nom du menu D\u00e9tails Support Ceci nous am\u00e8ne \u00e0 la page de support technique que vous pouvez acheter chez Zabbix. N'oubliez pas que votre partenaire local est \u00e9galement en mesure de vendre ces contrats et peut vous aider dans votre propre langue. Vos distributeurs locaux Int\u00e9grations La [page d'int\u00e9gration] officielle de zabbix (https://www.zabbix.com/integrations) Aide Le lien vers la documentation de votre version Zabbix Param\u00e8tres de l'utilisateur Les param\u00e8tres du profil de l'utilisateur. D\u00e9connexion D\u00e9connexion de la session en cours. <p>Quelques \u00e9l\u00e9ments interactifs restent \u00e0 traiter dans la partie droite de l'\u00e9cran.</p> <p></p> <p>2.8 Editer le tableau de bord</p> <p>Le bouton <code>Edit dashboard</code> facilite la modification de la configuration du tableau de bord de l'utilisateur, une fonctionnalit\u00e9 qui sera d\u00e9velopp\u00e9e dans les sections suivantes. L'activation de cette ic\u00f4ne redirige l'utilisateur vers le portail de documentation de Zabbix, qui fournit des informations d\u00e9taill\u00e9es sur les fonctionnalit\u00e9s du tableau de bord. Inversement, le contr\u00f4le situ\u00e9 dans la marge de droite, repr\u00e9sent\u00e9 par trois lignes horizontales, permet d'acc\u00e9der \u00e0 des op\u00e9rations telles que le partage, le renommage et la suppression des tableaux de bord d\u00e9finis par l'utilisateur.</p>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#informations-sur-le-systeme","title":"Informations sur le syst\u00e8me","text":"<p>Le tableau de bord comporte \u00e9galement un panneau d\u00e9di\u00e9 intitul\u00e9 <code>System Information</code>. Ce widget fournit une vue d'ensemble en temps r\u00e9el de l'\u00e9tat op\u00e9rationnel du d\u00e9ploiement de Zabbix. Nous allons maintenant examiner les diff\u00e9rents points de donn\u00e9es pr\u00e9sent\u00e9s dans ce panneau, car leur interpr\u00e9tation est cruciale pour la compr\u00e9hension du syst\u00e8me.</p> <p></p> <p></p> <p>2.9 Informations sur le syst\u00e8me</p> Param\u00e8tre Valeur D\u00e9tails Le serveur Zabbix fonctionne Le statut de notre serveur zabbix s'il fonctionne ou non et s'il est en localhost ou sur une autre IP et sur quel port il \u00e9coute. Si aucun trappeur n'est \u00e0 l'\u00e9coute, le reste de l'information ne peut pas \u00eatre affich\u00e9 IP et port du serveur Zabbix Version du serveur Zabbix Ceci nous montre la version du <code>serveur Zabbix</code> donc la version que vous voyez en bas de votre \u00e9cran est celle du frontend Zabbix et peut \u00eatre diff\u00e9rente mais devrait \u00eatre dans la m\u00eame version majeure. Num\u00e9ro de version Version du frontend de Zabbix Il s'agit de la version du frontend et elle doit correspondre \u00e0 ce que vous voyez en bas de votre \u00e9cran. Num\u00e9ro de version Nombre d'h\u00f4tes (activ\u00e9/d\u00e9sactiv\u00e9) Le nombre total d'h\u00f4tes configur\u00e9s sur notre syst\u00e8me Combien d'entre eux sont activ\u00e9s et d\u00e9sactiv\u00e9s Nombre de mod\u00e8les Le nombre de mod\u00e8les install\u00e9s sur notre serveur Zabbix. Nombre d'\u00e9l\u00e9ments (activ\u00e9s/d\u00e9sactiv\u00e9s/non pris en charge) Cette ligne nous indique le nombre d'\u00e9l\u00e9ments que nous avons configur\u00e9s au total, dans ce cas 99 90 sont activ\u00e9s et 0 sont d\u00e9sactiv\u00e9s, mais 9 d'entre eux ne sont pas pris en charge. Ce dernier chiffre est important car il s'agit d'\u00e9l\u00e9ments qui ne fonctionnent pas. Nous verrons plus tard pourquoi cela se produit et comment y rem\u00e9dier. Pour l'instant, rappelez-vous qu'un nombre \u00e9lev\u00e9 d'\u00e9l\u00e9ments non pris en charge n'est pas une bonne id\u00e9e. Nombre de d\u00e9clencheurs (Activ\u00e9/d\u00e9sactiv\u00e9 [probl\u00e8me/ok]) Le nombre de d\u00e9clencheurs configur\u00e9s Nombre de d\u00e9clencheurs activ\u00e9s et d\u00e9sactiv\u00e9s. Tout comme pour les \u00e9l\u00e9ments, nous voyons \u00e9galement si des d\u00e9clencheurs sont dans un \u00e9tat probl\u00e9matique ou dans un \u00e9tat correct. Un d\u00e9clencheur dans un \u00e9tat probl\u00e9matique est un d\u00e9clencheur qui ne fonctionne pas, quelque chose que nous devons surveiller et corriger. Nous reviendrons sur ce point plus tard. Nombre d'utilisateurs (en ligne) Nous voyons ici le nombre d'utilisateurs qui sont configur\u00e9s sur notre syst\u00e8me Le nombre d'utilisateurs actuellement en ligne. Required server performance, nvps Le nombre de nouvelles valeurs que Zabbix traitera par seconde. Il s'agit d'une estimation car certaines valeurs sont inconnues et la valeur r\u00e9elle est donc probablement plus \u00e9lev\u00e9e. Nous pouvons donc avoir une id\u00e9e du nombre d'IOPS dont nous avons besoin et de la charge de notre base de donn\u00e9es. Une meilleure indication est probablement l'\u00e9l\u00e9ment interne <code>zabbix[wcache,values,all]</code> Global scripts on Zabbix server It notifies us that the Global scripts are enabled or disabled in the server config. Global scripts can be used in our frontend, actions, ... but need to be activated first High availability cluster It will show us if Zabbix HA cluster is disabled or not Failover delay once HA is activated Note <p><code>Global script</code> execution on Zabbix server can be enabled by going to the zabbix server configuration file and setting <code>EnableGlobalScripts=1</code>. For new installations, since Zabbix 7.0, global script execution on Zabbix server is disabled by default.</p> Tip <p>System information may display some additional warnings like when your database  doesn't have the correct character set or collation UTF-8.  Also when the database you used is lower or higher then the recommended version  or when there are misconfigurations on housekeeper or TimescaleDB.  Another warning you can see is about database history tables that aren't  upgraded or primary keys that have not been set. This is possible if you are  coming from an older version before Zabbix 6 and never did the upgrade.</p>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have seen so far our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This has a serious impact on what we can see and do in Zabbix as this user has no restrictions. Zabbix works with 3 different levels of users we have the regular <code>users</code>, <code>Zabbix Admin</code> and <code>Zabbix Super Admin</code> users. Let's have a deeper look at the differences :</p> <p></p> <p>2.10 Main menu sections</p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the   yellow part of the <code>main menu</code> and is able to change   our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able to   change the configuration and all the global settings.</li> </ul> <p></p> <p>2.11 Monitoring menu</p> <ul> <li>Problems: This page will give us an overview of all the problems. With   filter we can look at recent problems past problems and problems that are   active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with what's happening on   our hosts and allows us to quickly go to the latest data, graphs and   dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the   information collected from all our hosts.</li> <li>Maps: The location where we can create map that are an overview of our IT   infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can   find the results.</li> </ul> <p></p> <p>2.12 Services menu</p> <ul> <li>Services: This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.</li> </ul> <p></p> <p>2.13 Inventory menu</p> <ul> <li>Overview: A place where we can watch all our inventory data that we have   retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.</li> </ul> <p></p> <p>2.14 Inventory menu</p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a <code>pdf</code> of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in <code>ok</code>/<code>nok</code> state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a <code>NOK</code> state.</li> <li>Audit log: An overview of the user activity that happened on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here. What   mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to   each user.</li> </ul> <p></p> <p>2.15 Data collection</p> <ul> <li>Template groups: A place to logical group all templates together in   different groups. Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together. Host   groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped   together on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance   can be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers   related we can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices,   services,... on our network. This can be done here.</li> </ul> <p></p> <p>2.16 Alerts menu</p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions   we have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.</li> </ul> <p></p> <p>2.17 Users menu</p> <ul> <li>User groups: The <code>User groups</code> menu section enables the creation and   management of user groupings for streamlined access and permission control.</li> <li>User roles: The <code>User roles</code> menu section defines sets of permissions that   can be assigned to individual users, limiting their allowed actions based on   the user type they have within the system.</li> <li>Users: The <code>Users</code> menu section provides the interface for managing   individual user accounts, including creation and modification settings.</li> <li>API tokens: The <code>API tokens</code> menu section manages authentication   credentials specifically designed for programmatic access to the system's   Application Programming Interface (API), enabling secure automation and   integration with external applications.</li> <li>Authentication: The <code>Authentication</code> menu section configures the methods   and settings used to verify user identities and control access to the system.</li> </ul> <p></p> <p>2.18 Administration menu</p> <ul> <li>General: The <code>General</code> menu section within administration allows   configuration of core system-wide settings and parameters.</li> <li>Audit log: The <code>Audit log</code> menu section provides a chronological record of   system activities and user actions for security monitoring and   troubleshooting.</li> <li>Housekeeping: The <code>Housekeeping</code> menu section configures automated   maintenance tasks for managing historical data and system performance.</li> <li>Proxies: The <code>Proxies</code> menu section manages the configuration and   monitoring of proxy servers used for communication with managed hosts in   distributed environments.</li> <li>Macros: The <code>Macros</code> menu section allows the definition and management of   global variables for flexible system configuration.</li> <li>Queue: The <code>Queue</code> menu section provides real-time insight into the   processing status of internal system tasks and data handling.</li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix developers <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didn't made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#questions","title":"Questions","text":"<ul> <li> <p>Which frontend section (Monitoring, Data Collection, Alerts, Users, or   Administration) do you think you'll use most often in your daily work, and   why?</p> </li> <li> <p>How can kiosk mode be useful in a real-world monitoring environment, and what   types of dashboards would you display with it?</p> </li> <li> <p>What insights can the system information widget provide during   troubleshooting, and how might it help identify issues with server   performance?</p> </li> <li> <p>Why is it important to understand the difference between data displayed in   \u201cMonitoring\u201d and configuration options found in \u201cData Collection\u201d?</p> </li> <li> <p>If you were onboarding a new team member, which parts of the frontend would   you show them first, and why?</p> </li> </ul>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/frontend/#url-utiles","title":"URL utiles","text":"<ul> <li> <p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/dashboards</p> </li> <li> <p>https://blog.zabbix.com/handy-tips-6-organize-your-dashboards-and-create-slideshows-with-dashboard-pages/17511/</p> </li> <li> <p>https://blog.zabbix.com/interactive-dashboard-creation-for-large-organizations-and-msps/30132/</p> </li> </ul>","tags":["beginner"]},{"location":"fr/ch02-zabbix-installation/http/","title":"HTTP","text":"<p>L'authentification HTTP est l'une des m\u00e9thodes d'authentification externe fournies par Zabbix et peut \u00eatre utilis\u00e9e pour s\u00e9curiser davantage votre interface Web Zabbix avec un m\u00e9canisme d'authentification de base au niveau du serveur HTTP.</p> <p>L'authentification HTTP de base prot\u00e8ge les ressources du site Web (Zabbix WebUI) avec un nom d'utilisateur et un mot de passe. Lorsqu'un utilisateur tente d'acc\u00e9der \u00e0 Zabbix WebUI, le navigateur affiche une bo\u00eete de dialogue demandant des informations d'identification avant d'envoyer quoi que ce soit au code php de Zabbix WebUI.</p> <p>Un serveur HTTP dispose d'un fichier contenant des informations d'identification utilis\u00e9es pour authentifier les utilisateurs.</p> Note <p>IMPORTANT: usernames configured for basic authentication in HTTP server must exit in Zabbix. But only passwords configured in HTTP server are used for users authentication.</p> <p>Voyons d'abord comment configurer l'authentification de base dans le serveur HTTP.</p> Warning <p>The examples below provide just minimum set of options to configure basic authentication. Please refer to respective HTTP server documentation for more details</p>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#authentification-de-base-dans-nginx","title":"Authentification de base dans Nginx","text":"<p>Trouvez le bloc <code>location / {</code> dans les fichiers de configuration de Nginx, qui d\u00e9finit votre WebUI Zabbix (ie : <code>/etc/nginx/conf.d/nginx.conf</code> file) et ajoutez ces deux lignes :</p> <pre><code>    location / {\n        ...\n        auth_basic \"Basic Auth Protected Site\";\n        auth_basic_user_file /etc/nginx/httpauth;\n    }\n</code></pre> <p>N'oubliez pas de red\u00e9marrer le service Nginx apr\u00e8s avoir effectu\u00e9 cette modification.</p> <p>Ensuite, vous devez cr\u00e9er <code>/etc/nginx/httpauth</code> un fichier qui contiendra les mots de passe de tous les utilisateurs (assurez-vous de restreindre l'acc\u00e8s \u00e0 ce fichier). Le format de ce fichier est <code>nom_utilisateur :mot_de_passe_hach\u00e9</code>, par exemple, pour les utilisateurs <code>Admin</code> et <code>test</code> :</p> <pre><code>Admin:$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\ntest:$1$GXoDIOCA$u/n1kkDeFwcI4KhyHkY6p/\n</code></pre> <p>Pour g\u00e9n\u00e9rer un mot de passe hach\u00e9, vous pouvez utiliser l'outil <code>openssl</code> en entrant le mot de passe deux fois : <pre><code>openssl passwd\nPassword:\nVerifying - Password:\n$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\n</code></pre></p>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#authentification-de-base-dans-apache-httpd","title":"Authentification de base dans Apache HTTPD","text":"<p>Trouvez le bloc <code>&lt;Directory \"/usr/share/zabbix\"&gt;</code> dans le fichier de configuration Apache HTTP, il d\u00e9finit votre WebUI Zabbix (ie : <code>/etc/zabbix/apache.conf</code>) et ajoutez ces lignes :</p> <p>???+ note La configuration par d\u00e9faut est <code>Require all granted</code>, supprimez cette ligne.</p> <p>Pour Ubuntu/Debian : <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>Pour RedHat : <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/httpd/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>N'oubliez pas de red\u00e9marrer le service apache2 apr\u00e8s avoir effectu\u00e9 cette modification.</p> <p>Cr\u00e9ez le fichier <code>/etc/apache2/.httpasswd</code> (<code>/etc/httpd/.htpassword</code> pour RedHat) qui contiendra tous les utilisateurs avec leurs mots de passe, en utilisant l'outil <code>htpasswd</code>, pour ajouter l'utilisateur <code>test</code> ex\u00e9cuter :</p> <p>Pour Ubuntu/Debian <pre><code>sudo htpasswd -c /etc/apache2/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>Pour RedHat <pre><code>sudo htpasswd -c /etc/httpd/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>Pour ajouter d'autres utilisateurs au fichier, r\u00e9p\u00e9tez la commande sans l'option <code>-c</code>.</p>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#configuration-de-zabbix-pour-lauthentification-http","title":"Configuration de Zabbix pour l'authentification HTTP","text":"<p>Une fois le serveur WEB configur\u00e9 avec l'authentification de base, il est temps de configurer le serveur Zabbix. Dans le menu Zabbix, s\u00e9lectionnez <code>Users | Authentication | HTTP settings</code> et cochez la case <code>Enable HTTP authentication</code>. Cliquez sur <code>Update</code> et confirmez les changements en cliquant sur <code>OK</code>.</p> <p>{ align=center }</p> <p>2.1 Authentification des utilisateurs HTTP</p> <p><code>Remove domain name</code> Le champ doit contenir une liste de domaines s\u00e9par\u00e9s par des virgules que Zabbix supprimera du nom d'utilisateur fourni. Par exemple, si un utilisateur entre \"test@myzabbix\" ou \"myzabbix\\test\" et que nous avons \"myzabbix\" dans ce champ, l'utilisateur sera connect\u00e9 avec le nom d'utilisateur \"test\".</p> <p>D\u00e9cocher la case <code>Case-sensitive login</code> indiquera \u00e0 Zabbix de ne pas tenir compte des majuscules/minuscules dans les noms d'utilisateur, par exemple \"tEst\" et \"test\" deviendront des noms d'utilisateur tout aussi l\u00e9gitimes m\u00eame si dans Zabbix nous n'avons que l'utilisateur \"test\" de configur\u00e9.</p> <p>Notez que le <code>formulaire de connexion par d\u00e9faut</code> est r\u00e9gl\u00e9 sur \"Zabbix login form\". Maintenant, si vous vous d\u00e9connectez, vous verrez le lien \"Sign in with HTTP\" (se connecter avec HTTP) sous les champs Username (nom d'utilisateur) et Password (mot de passe). Si vous cliquez sur ce lien, vous serez automatiquement connect\u00e9 \u00e0 Zabbix WebUI avec le m\u00eame nom d'utilisateur que celui que vous avez utilis\u00e9 pr\u00e9c\u00e9demment. Vous pouvez \u00e9galement saisir un nom d'utilisateur et un mot de passe diff\u00e9rents et vous connecter normalement \u00e0 Zabbix WebUI en tant qu'utilisateur diff\u00e9rent.</p> <p>HTTP users authentication login</p> <p>2.2 Formulaire d'authentification des utilisateurs HTTP</p> <p>Si vous s\u00e9lectionnez \"HTTP login form\" dans le menu d\u00e9roulant <code>Default login form</code>, vous ne verrez pas le formulaire de connexion standard de Zabbix lorsque vous essayerez de vous d\u00e9connecter. En fait, vous ne pourrez pas vous d\u00e9connecter \u00e0 moins que votre session d'authentification n'expire. La seule fa\u00e7on de se d\u00e9connecter est d'effacer les cookies dans votre navigateur. Vous devrez alors suivre \u00e0 nouveau la proc\u00e9dure d'authentification de base du serveur Web.</p>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#conclusion","title":"Conclusion","text":"<p>La configuration de l'authentification au niveau HTTP ajoute une couche critique de contr\u00f4le d'acc\u00e8s \u00e0 votre interface Web Zabbix en exploitant les m\u00e9canismes d'authentification natifs de votre serveur Web. Que vous utilisiez Nginx ou Apache, cette approche garantit que les utilisateurs sont invit\u00e9s \u00e0 fournir des informations d'identification avant m\u00eame d'atteindre Zabbix, ce qui prot\u00e8ge efficacement contre les acc\u00e8s non autoris\u00e9s au niveau du point d'entr\u00e9e HTTP. Il est essentiel de s'assurer que les noms d'utilisateur utilis\u00e9s dans l'authentification HTTP sont d\u00e9j\u00e0 d\u00e9finis dans Zabbix lui-m\u00eame - seul le mot de passe du serveur web compte pour les v\u00e9rifications d'identit\u00e9 - et de configurer correctement les param\u00e8tres d'authentification HTTP de Zabbix (tels que la suppression du domaine et les options de sensibilit\u00e9 \u00e0 la casse). En coordonnant les param\u00e8tres d'authentification du serveur web avec la configuration interne de Zabbix, vous pouvez obtenir des flux de travail de connexion des utilisateurs transparents et s\u00e9curis\u00e9s qui combinent la facilit\u00e9 d'utilisation frontale avec des mesures de protection robustes.</p>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#questions","title":"Questions","text":"<ul> <li> <p>Quel est l'avantage de l'authentification HTTP (bas\u00e9e sur le serveur web) par   rapport au m\u00e9canisme d'authentification interne de Zabbix ? (Pensez \u00e0 la   protection au niveau du serveur web avant m\u00eame que l'utilisateur n'atteigne   l'interface utilisateur de Zabbix.)</p> </li> <li> <p>Pourquoi est-il essentiel qu'un utilisateur existe dans Zabbix m\u00eame lorsque   l'authentification HTTP est activ\u00e9e et pourquoi le mot de passe Zabbix   n'est-il pas pertinent dans ce cas ?</p> </li> <li> <p>Quelles sont les options de configuration dans le frontend de Zabbix sous   \"Administration \u2192 Authentification\" pour l'authentification HTTP, et comment   chacune d'entre elles peut-elle affecter le comportement de connexion ? Les   exemples incluent l'activation/d\u00e9sactivation de la sensibilit\u00e9 \u00e0 la casse, la   suppression du domaine et le choix du formulaire de connexion.</p> </li> <li> <p>Supposons que vous d\u00e9sactiviez la sensibilit\u00e9 \u00e0 la casse des logins et que   vous mainteniez les deux comptes 'Admin' et 'admin' dans Zabbix. Comment   l'authentification HTTP se comportera-t-elle, et \u00e0 quel r\u00e9sultat devez-vous   vous attendre ?</p> </li> <li> <p>Imaginez la r\u00e9solution d'un probl\u00e8me d'\u00e9chec de connexion lors de   l'utilisation de l'authentification HTTP : Quelles mesures prendriez-vous pour   vous assurer que l'authentification du serveur web est configur\u00e9e correctement   avant d'examiner les param\u00e8tres de Zabbix ?</p> </li> <li> <p>Du point de vue de la s\u00e9curit\u00e9, quand l'authentification HTTP seule   serait-elle insuffisante et quelles autres m\u00e9thodes d'authentification (par   exemple, LDAP, SAML, MFA) pourriez-vous mettre en \u0153uvre pour plus de s\u00e9curit\u00e9   ?</p> </li> </ul>","tags":["advanced"]},{"location":"fr/ch02-zabbix-installation/http/#url-utiles","title":"URL utiles","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/http</p>","tags":["advanced"]},{"location":"fr/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"fr/ch00-getting-started%20/initial-steps/","title":"Getting Started with Zabbix \u2013 Unlocking the Power of Monitoring","text":"<p>Welcome to the world of Zabbix, a powerful open-source monitoring solution designed to give you comprehensive insights into your IT infrastructure. Whether you're managing a small network or overseeing a large-scale enterprise system, Zabbix provides the tools you need to monitor performance, detect issues, and ensure the smooth operation of your services.</p> <p>In this book, we focus on Zabbix LTS 8.0, the long-term support version that ensures stability and reliability for your monitoring needs. We'll explore its extensive feature set, including the newly introduced reporting functionality and built-in web monitoring based on the Selenium driver, which allows for sophisticated end-user experience monitoring through automated browser interactions.</p> <p>Zabbix is more than just a simple monitoring tool. It offers a wide range of features that allow you to:</p> <ul> <li>Monitor diverse environments: Track the performance and availability of   servers, virtual machines, network devices, databases, and applications.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens   to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that   notify you of potential issues before they become critical, using various   channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration   to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to   tailor Zabbix to your specific needs.</li> </ul>"},{"location":"nl/","title":"Welkom","text":"<p>Dit boek is geboren uit een eenvoudig verlangen: om terug te geven. Na jaren werken met Zabbix en het schrijven van vele andere publicaties over het platform, voelden Patrik en Nathan een sterke drang om hun kennis te delen op een manier die toegankelijk was voor iedereen. Zo ontstond het initi\u00eble idee voor een gratis, online Zabbix-bron - een community-gedreven project gewijd aan het empoweren van gebruikers.</p> <p>Naarmate de online bron groeide, groeide ook de visie. We zagen het potentieel om iets te cre\u00ebren dat nog meer impact zou hebben. Dit leidde tot de oprichting van een stichting, toegewijd om de duurzaamheid en groei van deze gemeenschapsinspanning op lange termijn te garanderen. Dit boek, een tastbaar resultaat van die visie, vertegenwoordigt de volgende stap. Alle winst die wordt gegenereerd met de verkoop van dit boek zal weer worden ge\u00efnvesteerd in de gemeenschap, zodat we de middelen en ondersteuning die we bieden verder kunnen uitbreiden en verbeteren. Dit is meer dan alleen een boek; het is een bewijs van de kracht van gedeelde kennis en een toewijding aan het stimuleren van een bloeiende Zabbix-gemeenschap.\"</p>"},{"location":"nl/#licentie","title":"Licentie","text":"<p>Let op: De engelse versie is het primaire brondocument. Vertalingen worden voor het gemak gegeven, maar deze versie wordt als de meest nauwkeurige beschouwd.</p> <p>Bekijk voordat je begint onze meest bijgewerkte licentie: Licentie op Github.</p> <p>Het Zabbix Boek is een vrij toegankelijke bron ontworpen om gebruikers te helpen Zabbix te begrijpen en te beheersen. Bijdragen worden ten zeerste aangemoedigd om de inhoud te verbeteren en uit te breiden. Het boek wordt echter verspreid onder de Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) licentie, wat betekent dat het alleen vrij is voor niet-commercieel gebruik.</p> <p>Bijdragers moeten zich ervan bewust zijn dat:</p> <ul> <li>Door bij te dragen aan dit werk, draagt u onherroepelijk alle rechten,   aanspraken en belangen in uw bijdragen over aan The Monitoring Penmasters   Foundation, inclusief alle bijbehorende intellectuele eigendomsrechten, voor   zover wettelijk toegestaan.</li> <li>De Stichting Monitoring Penmasters behoudt zich het recht voor om   bijgedragen materiaal te gebruiken, reproduceren, wijzigen, distribueren en   commercieel te exploiteren in welke vorm dan ook, inclusief maar niet beperkt   tot de publicatie van fysieke en digitale boeken.</li> <li>Alle bijdragers moeten een Akte van Overdracht van Intellectuele   Eigendomsrechten ondertekenen voordat ze bijdragen leveren, om de juiste   overdracht van rechten en behandeling van de inhoud door The Monitoring   Penmasters Foundation te waarborgen. Bijdragen zonder een ondertekende   Akte van overdracht van intellectuele eigendomsrechten kunnen niet worden   geaccepteerd.</li> <li>Alle winst die wordt gegenereerd zal worden gebruikt door The Monitoring   Penmasters Foundation om operationele kosten te dekken en om andere   open-source projecten te sponsoren, zoals bepaald door de stichting.</li> </ul> <p>Jullie bijdragen zijn van onschatbare waarde en zullen helpen om The Zabbix Book een nog grotere bron te maken voor de hele gemeenschap!</p> <p>Shield: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"nl/Guidelines/","title":"Richtlijnen","text":""},{"location":"nl/Guidelines/#hoe-u-kunt-bijdragen","title":"Hoe u kunt bijdragen","text":"<ul> <li>Onderteken de akte van   overdracht   bij voorkeur elektronisch</li> <li>Kloon dit project naar uw Github account</li> <li> <p>Kloon de repository naar uw pc</p> </li> <li> <p>Installeer de benodigde software om Mkdocs te laten werken. Controleer het   bestand in de hoofdmap how-to-install-mkdocs.md</p> </li> <li>Maak een nieuwe branch om uw wijzigingen door te voeren<ul> <li>git branch \"&lt;jouw branch naam&gt;\"</li> <li>git checkout \"&lt;jouw branch naam&gt;\"</li> </ul> </li> <li>Maak de gewenste wijzigingen en commit ze<ul> <li>git add \"bestanden die je hebt gewijzigd\"</li> <li>git commit -m \"voeg nuttige commit info toe\"</li> </ul> </li> <li>Terug naar de hoofdtak<ul> <li>git checkout main</li> </ul> </li> <li>Zorg ervoor dat je de laatste wijzigingen hebt samengevoegd vanuit het     hoofdgedeelte<ul> <li>git pull origin main</li> </ul> </li> <li>Voeg uw branch samen met de hoofdbranch<ul> <li>git merge \"&lt;jouw branch naam&gt;\"</li> <li>git push</li> </ul> </li> <li>je branch opschonen<ul> <li>git branch -d \"&lt;jouw branch naam&gt;\"</li> </ul> </li> <li>Maak een pull-verzoek zodat we het kunnen samenvoegen :)</li> <li>Volg deze   richtlijnen   als je een onderwerp schrijft.</li> </ul>"},{"location":"nl/Supporters-Contributors/#our-contributors","title":"Our Contributors","text":"<p>This book is a community effort, and we sincerely appreciate the time and knowledge shared by our contributors. From writing and reviewing content to providing feedback and sharing expertise, your efforts have helped shape this resource into something valuable for the monitoring and open-source communities.</p> <ul> <li>Patrik Uytterhoeven :   http://github.com/Trikke76</li> <li>Nathan Liefting :   https://github.com/larcorba</li> <li>Evgeny Yurchenko: https://github.com/BGmot</li> <li>Nikolas Garofil: https://github.com/ngaro</li> <li>Aigars Kadikis :   https://github.com/aigarskadikis</li> </ul> <p>A list of all the contributors who where so kind to fix typos etc .. can be found here : https://github.com/penmasters/zabbix-book/graphs/contributors</p>"},{"location":"nl/ch00-getting-started/Requirements/","title":"Systeemvereisten","text":"","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#vereisten","title":"Vereisten","text":"<p>Zabbix heeft specifieke hardware- en softwarevereisten waaraan voldaan moet worden, en deze vereisten kunnen na verloop van tijd veranderen. Ze zijn ook afhankelijk van de grootte van je installatie en de softwarestack die je kiest. Voordat je hardware aanschaft of een databaseversie installeert, is het essentieel om de Zabbix documentatie te raadplegen voor de meest recente vereisten voor de versie die je van plan bent te installeren. Je kunt de meest recente vereisten vinden https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Zorg ervoor dat je de juiste Zabbix-versie uit de lijst selecteert.</p> <p>Voor kleinere of testopstellingen kan Zabbix gemakkelijk draaien op een systeem met 2 CPU's en 8 GB RAM. Echter, de grootte van je setup, het aantal items dat je monitort, de triggers die je aanmaakt en hoe lang je van plan bent gegevens te bewaren, zullen invloed hebben op de benodigde bronnen. In de gevirtualiseerde omgevingen van vandaag is mijn advies om klein te beginnen en zo nodig op te schalen.</p> <p>Je kunt alle componenten (Zabbix server, database, webserver) op \u00e9\u00e9n machine installeren of verdelen over meerdere servers. Noteer voor de eenvoud de servergegevens:</p> Component IP-adres Zabbix server Databaseserver Webserver Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Note <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#basis-os-configuratie","title":"Basis OS-configuratie","text":"<p>Besturingssystemen, zoveel keuzes, elk met zijn eigen voordelen en trouwe gebruikers. Hoewel Zabbix op een groot aantal platformen ge\u00efnstalleerd kan worden, zou het onpraktisch zijn om het proces voor elk beschikbaar besturingssysteem te documenteren. Om dit boek doelgericht en effici\u00ebnt te houden, hebben we ervoor gekozen om alleen de meest gebruikte opties te behandelen: Ubuntu en Red Hat gebaseerde distributies.</p> <p>Omdat niet iedereen toegang heeft tot een Red Hat Enterprise Linux (RHEL) abonnement, ook al biedt een ontwikkelaarsaccount beperkte toegang, hebben we gekozen voor Rocky Linux als een gemakkelijk beschikbaar alternatief. Voor dit boek gebruiken we Rocky Linux 9.x en Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Voordat je Zabbix installeert, is het essentieel om het besturingssysteem goed voor te bereiden. De eerste stap is ervoor zorgen dat de firewall is ge\u00efnstalleerd en geconfigureerd.</p> <p>Voer het volgende commando uit om de firewall te installeren en in te schakelen:</p> <p>Installeer en schakel de firewall in</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>Eenmaal ge\u00efnstalleerd, kun je de nodige poorten configureren. Voor Zabbix moeten we toegang toestaan tot poort <code>10051/tcp</code>, waar de Zabbix trapper luistert naar inkomende gegevens. Gebruik het volgende commando om deze poort te openen in de firewall:</p> <p>Zabbix trapper toegang verlenen</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>Als de service niet wordt herkend, kun je de poort handmatig opgeven:</p> <p>Voeg poort toe in plaats van de servicenaam</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Note <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>Een alternatieve aanpak is om speciale firewallzones te defini\u00ebren voor specifieke gebruikssituaties. Bijvoorbeeld...</p> <p>Cre\u00eber een firewalld zone</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>Je kunt het aanmaken van de zone bevestigen door het volgende commando uit te voeren:</p> <p>De aanmaak van de zone verifi\u00ebren</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>block dmz drop external home internal nm-shared postgresql-access public trusted work</p> <p>Het gebruik van zones in firewalld om firewall regels voor PostgreSQL te configureren biedt verschillende voordelen op het gebied van beveiliging, flexibiliteit en beheergemak. Hier lees je waarom zones nuttig zijn:</p> <ul> <li>Granulaire toegangscontrole :</li> <li>firewalld zones staan verschillende vertrouwensniveaus toe voor     verschillende netwerkinterfaces en IP bereiken. Je kunt defini\u00ebren welke     systemen verbinding mogen maken met PostgreSQL op basis van hun     vertrouwensniveau.</li> <li>Vereenvoudigd regelbeheer:</li> <li>In plaats van het handmatig defini\u00ebren van complexe iptable regels, bieden     zones een georganiseerde manier om firewall regels te groeperen en te     beheren op basis van gebruiksscenario's.</li> <li>Verbeterde beveiliging:</li> <li>Door PostgreSQL toegang te beperken tot een specifieke zone, voorkom je     ongeautoriseerde verbindingen vanaf andere interfaces of netwerken.</li> <li>Dynamische configuratie:</li> <li>firewalld ondersteunt runtime en permanente regelconfiguraties, waardoor     veranderingen mogelijk zijn zonder bestaande verbindingen te verstoren.</li> <li>Ondersteuning voor meerdere interfaces:</li> <li>Als de server meerdere netwerkinterfaces heeft, staan zones een verschillend     beveiligingsbeleid toe voor elke interface.</li> </ul> <p>Alles bij elkaar zou het er als volgt uitzien:</p> <p>Firewall met zoneconfiguratie</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Waarbij het <code>bron IP</code> het enige adres is dat een verbinding met de database tot stand mag brengen.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#tijdserver","title":"Tijdserver","text":"<p>Een andere cruciale stap is het configureren van de tijdserver en het synchroniseren van de Zabbix server met behulp van een NTP client. Nauwkeurige tijdsynchronisatie is van vitaal belang voor Zabbix, zowel voor de server als voor de apparaten die het bewaakt. Als een van de hosts een onjuiste tijdzone heeft, kan dat tot verwarring leiden, zoals het onderzoeken van een probleem in Zabbix dat uren eerder lijkt te zijn gebeurd dan in werkelijkheid het geval was.</p> <p>Gebruik het volgende commando om chrony, onze NTP-cli\u00ebnt, te installeren en in te schakelen:</p> <p>NTP-cli\u00ebnt installeren</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>Controleer na de installatie of Chrony is ingeschakeld en draait door de status te controleren met het volgende commando:</p> <p>Controleer status chronyd</p> <pre><code>systemctl status chronyd\n</code></pre> wat is apt of dnf <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> Wat is Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>Zodra Chrony ge\u00efnstalleerd is, is de volgende stap ervoor te zorgen dat de juiste tijdzone ingesteld is. U kan uw huidige tijdsconfiguratie bekijken met het commando <code>timedatectl</code>:</p> <p>controleer de tijdconfiguratie</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>Zorg ervoor dat de Chrony service actief is (raadpleeg indien nodig de vorige stappen). Om de juiste tijdzone in te stellen, kunt u eerst alle beschikbare tijdzones oplijsten met het volgende commando:</p> <p>lijst de tijdzones</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>Deze opdracht toont een lijst met beschikbare tijdzones, zodat je de tijdzone kunt selecteren die het dichtst bij je locatie ligt. Bijvoorbeeld:</p> <p>Lijst van alle beschikbare tijdzones</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Zodra je je tijdzone hebt ge\u00efdentificeerd, configureer je deze met het volgende commando:</p> <p>Tijdzone instellen</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>Gebruik het commando <code>timedatectl</code> opnieuw om te controleren of de tijdzone juist is ingesteld:</p> <p>Controleer de tijd en zone</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#chrony-synchronisatie-controleren","title":"Chrony-synchronisatie controleren","text":"<p>Om ervoor te zorgen dat Chrony met de juiste tijdservers synchroniseert, kunt u het volgende commando uitvoeren:</p> <p>chrony verifi\u00ebren</p> <pre><code>chronyc\n</code></pre> <p>De uitvoer moet lijken op:</p> <p>Controleer uw chrony uitvoer</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Eenmaal in de Chrony prompt, typ het volgende om de bronnen te controleren:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Voorbeelduitvoer:</p> <p>Controleer de bronnen van uw tijdserver</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In dit voorbeeld bevinden de gebruikte NTP-servers zich buiten je lokale regio. Het wordt aanbevolen om over te schakelen naar tijdservers in je eigen land of, indien beschikbaar, naar een speciale bedrijfstijdserver. U kunt lokale NTP-servers hier vinden: www.ntppool.org.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#tijdservers-bijwerken","title":"Tijdservers bijwerken","text":"<p>Om de tijdservers bij te werken, wijzig je het bestand <code>/etc/chrony.conf</code> voor Red Hat gebaseerde systemen, en als je Ubuntu gebruikt bewerk je <code>/etc/chrony/chrony.conf</code>. Vervang de bestaande NTP-server door een die dichter bij je locatie staat.</p> <p>Voorbeeld van de huidige configuratie:</p> <p>voorbeeld ntp pool configuratie</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>Herstart de Chrony service na deze wijziging om de nieuwe configuratie toe te passen:</p> <p>De chrony service opnieuw starten</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#bijgewerkte-tijdservers-controleren","title":"Bijgewerkte tijdservers controleren","text":"<p>Controleer de tijdbronnen opnieuw om er zeker van te zijn dat de nieuwe lokale servers in gebruik zijn:</p> <p>Controleer chrony bronnen</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Voorbeeld van verwachte uitvoer met lokale servers:</p> <p>Voorbeeld uitvoer</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>Dit bevestigt dat het systeem nu lokale tijdservers gebruikt.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#conclusie","title":"Conclusie","text":"<p>Zoals we hebben gezien, moet er, voordat er over de Zabbix pakketten wordt nagedacht, aandacht worden besteed aan de omgeving waarin het zich zal bevinden. Een goed geconfigureerd besturingssysteem, een open pad door de firewall en nauwkeurige tijdregistratie zijn niet slechts suggesties, maar essenti\u00eble bouwstenen. Nu we deze basis gelegd hebben, kunnen we met vertrouwen verder gaan met de installatie van Zabbix, wetende dat het onderliggende systeem voorbereid is op de taak.</p>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#vragen","title":"Vragen","text":"<ul> <li>Waarom denk je dat nauwkeurige tijdsynchronisatie zo cruciaal is voor een   monitoringsysteem als Zabbix?</li> <li>Nu de basis is gelegd, wat is volgens jullie de eerste stap in het   daadwerkelijke Zabbix installatieproces?</li> <li>Als we Zabbix gaan installeren, laten we dan eens nadenken over   netwerkcommunicatie. Welke belangrijke poorten moet je door de firewall   toestaan zodat de Zabbix server en agents effectief met elkaar kunnen   communiceren?</li> </ul>","tags":["beginner"]},{"location":"nl/ch00-getting-started/Requirements/#nuttige-urls","title":"Nuttige URL's","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"nl/ch00-getting-started/initial-steps/","title":"Aan de slag met Zabbix - De kracht van monitoring ontsluiten","text":"<p>Welkom in de wereld van Zabbix, een krachtige open-source monitoring oplossing ontworpen om u uitgebreide inzichten te geven in uw IT-infrastructuur. Of je nu een klein netwerk beheert of toezicht houdt op een grootschalig bedrijfssysteem, Zabbix biedt de tools die je nodig hebt om de prestaties te bewaken, problemen op te sporen en een soepele werking van je diensten te garanderen.</p> <p>In dit boek richten we ons op Zabbix LTS 8.0, de versie met langetermijnondersteuning die stabiliteit en betrouwbaarheid garandeert voor uw monitoringbehoeften. We verkennen de uitgebreide functieset, inclusief de nieuw ge\u00efntroduceerde rapportagefunctionaliteit en ingebouwde webmonitoring gebaseerd op de Selenium driver, die geavanceerde monitoring van eindgebruikerservaringen mogelijk maakt via geautomatiseerde browserinteracties.</p> <p>Zabbix is meer dan een eenvoudige monitoringtool. Het biedt een breed scala aan functies waarmee je:</p> <ul> <li>Bewaak diverse omgevingen: Volg de prestaties en beschikbaarheid van   servers, virtuele machines, netwerkapparaten, databases en applicaties.</li> <li>Maak dynamische visualisaties: Gebruik dashboards, grafieken, kaarten en   schermen om gegevens te visualiseren en in \u00e9\u00e9n oogopslag een overzicht te   krijgen van de gezondheid van uw systeem.</li> <li>Stel complexe waarschuwingsmechanismen in: Definieer triggers en acties   die u op de hoogte brengen van potenti\u00eble problemen voordat ze kritiek worden,   met behulp van verschillende kanalen zoals e-mail, sms en integraties met   externe services.</li> <li>Automatiseer bewakingstaken: Maak gebruik van auto-discovery en   auto-registration om bij te blijven met veranderende omgevingen zonder   handmatige tussenkomst.</li> <li>Aanpassen en uitbreiden: Bouw aangepaste scripts, sjablonen en integraties   om Zabbix aan te passen aan je specifieke behoeften.</li> </ul>"},{"location":"nl/ch01-zabbix-components/basic-installation/","title":"Basisinstallatie","text":"<p>In dit hoofdstuk doorlopen we het installatieproces van de Zabbix server. Er zijn veel verschillende manieren om een Zabbix server op te zetten. We behandelen de meest voorkomende opstellingen met MariaDB en PostgreSQL op Ubuntu en op Rocky Linux.</p> <p>Voordat je begint met de installatie, is het belangrijk om de architectuur van Zabbix te begrijpen. De Zabbix server is modulair opgebouwd en bestaat uit drie hoofdcomponenten, die we in detail zullen bespreken.</p> <ul> <li>De Zabbix server</li> <li>De Zabbix webserver</li> <li>The Zabbix database</li> </ul> <p>Creation of DB users</p> <pre><code>In our setup we will create 2 DB users `zabbix-web` and `zabbix-srv`. The \nzabbix-web user will be used for the frontend to connect to our zabbix database.\nThe zabbix-srv user will be used by our zabbix server to connect to the database.\nThis allows us to limit the permissions for every user to only what is strictly\nneeded.\n</code></pre> <p></p> <p>1.1 Zabbix basic split installation</p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server's configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>We behandelen de volgende onderwerpen:</p> <ul> <li>Install our Database based on MariaDB.</li> <li>Install our Database based on PostgreSQL.</li> <li>Installing the Zabbix server.</li> <li>Install the frontend.</li> </ul>","tags":["beginner"]},{"location":"nl/ch01-zabbix-components/basic-installation/#populate-the-zabbix-postgresql-db","title":"Populate the Zabbix PostgreSQL DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in   the <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <p>upload the DB schema to db zabbix</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <p>Output example</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <p>Grant rights on the schema to user zabbix-web</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server\nTO \"zabbix-web\";\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>Verify if the rights are correct on the schema :</p> <p>Example schema rights</p> <pre><code>zabbix=&gt; \\dn+\n                                           List of schemas\n     Name      |       Owner       |           Access privileges            |      Description\n---------------+-------------------+----------------------------------------+------------------------\n public        | pg_database_owner | pg_database_owner=UC/pg_database_owner+| standard public schema\n               |                   | =U/pg_database_owner                   |\n zabbix_server | zabbix-srv        | \"zabbix-srv\"=UC/\"zabbix-srv\"          +|\n               |                   | \"zabbix-web\"=U/\"zabbix-srv\"            |\n</code></pre> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no     schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the   <code>zabbix_server</code> schema:</li> </ul> <p>List tables</p> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <p>List table with relations</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has   the necessary permissions. You can check permissions for specific tables using   the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <pre><code>                                                     Access privileges\n    Schema     |            Name            |   Type   |         Access privileges          | Column privileges | Policies\n---------------+----------------------------+----------+------------------------------------+-------------------+----------\n zabbix_server | acknowledges               | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | actions                    | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | alerts                     | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | auditlog                   | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <p>Exit the database</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>Red Hat <pre><code>firewall-cmd --add-port=5432/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 5432/tcp\n</code></pre></p> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>","tags":["beginner"]},{"location":"nl/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>Install the zabbix server</p> <p>Red Hat <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre></p> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> Note <p>Before restarting the Zabbix server after modifying its configuration, it is considered best practice to validate the configuration to prevent potential issues. Running a configuration check ensures that any errors are detected beforehand, avoiding downtime caused by an invalid configuration. This can be accomplished using the following command: <code>zabbix-server -T</code></p> <p>enable and start zabbix-server service</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>Check the log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example log with errors</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check status of zabbix-server service</p> <p><pre><code>systemctl status zabbix-server\n</code></pre> <pre><code>zabbix-server.service - Zabbix Server\nLoaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\nActive: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\nMain PID: 12074 (zabbix_server)\nTasks: 77 (limit: 24744)\nMemory: 71.5M\nCPU: 18.535s\nCGroup: /system.slice/zabbix-server.service\n\u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n\u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n\u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n\u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n\u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n\u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n\u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n\u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n\u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n\u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n\u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n\u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n\u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n\u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n\u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n\u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n\u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n\u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n\u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n\u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n\u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n\u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n\u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n\u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb.</p>","tags":["beginner"]},{"location":"nl/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>install zabbix server</p> <p>Red Hat</p> <pre><code>dnf install zabbix-server-pgsql\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre></p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <p><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code></p> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>enable zabbix server service and start</p> <p>Red Hat <pre><code>systemctl enable zabbix-server --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>check the zabbix log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example log output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example of an error in the log</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check server status</p> <p><pre><code> systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n      Memory: 71.5M\n         CPU: 18.535s\n      CGroup: /system.slice/zabbix-server.service\n              \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n              \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n              \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n              \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n              \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n              \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n              \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n              \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n              \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n              \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n              \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n              \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n              \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n              \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n              \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n              \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n              \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n              \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n              \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n              \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n              \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n              \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n              \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n              \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>","tags":["beginner"]},{"location":"nl/ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>install frontend packages</p> <p>Red Hat <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql\n</code></pre></p> <p>Ubuntu <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>edit nginx config for Red Hat</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <p>original config</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nserver*name *;\nroot /usr/share/nginx/html;\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <p>config after edit</p> <pre><code>server {\n# listen 80;\n# listen [::]:80;\n# server*name *;\n# root /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <p>edit zabbix config for nginx</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <p>original config</p> <pre><code>server {\nlisten 8080;\nserver_name example.com;\n\nroot    /usr/share/zabbix;\n\nindex   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <p>config after the edit</p> <pre><code>server { # listen 8080; # server*name example.com;\nlisten 80;\nserver_name *;\n\n         root    /usr/share/zabbix;\n\n         index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>edit nginx config for ubuntu</p> <pre><code>sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <p>original config</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <p>config after edit</p> <pre><code>server {\nlisten xxx.xxx.xxx.xxx:80;\nserver_name \"\";\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> Note <p>server_name is normally replaced with the fqdn name of your machine. If you have no fqdn you can keep it open like in this example.</p> <p>restart the front-end services</p> <p>Red Hat <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>check if the service is running</p> <p><pre><code>systemctl status nginx\n</code></pre> <pre><code>\u25cf nginx.service - The nginx HTTP and reverse proxy server\n      Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n     Drop-In: /usr/lib/systemd/system/nginx.service.d\n              \u2514\u2500php-fpm.conf\n      Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n    Main PID: 1206 (nginx)\n       Tasks: 2 (limit: 12344)\n      Memory: 4.8M\n         CPU: 38ms\n      CGroup: /system.slice/nginx.service\n              \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n              \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre></p> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>configure the firewall</p> <p>Red Hat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu <pre><code>sudo ufw allow 80/tcp\n</code></pre></p> <p>Open your browser and go to the url or ip of your front-end :</p> <p>front-end configuration</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file:</p> <pre><code> /var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>1.4 Zabbix welcome</p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>!.5 Zabbix welcome language choice</p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>install language packs</p> <p>Red Hat <pre><code>dnf list glibc-langpack-*\n</code></pre></p> <p>Ubuntu <pre><code>apt-cache search language-pack\n</code></pre></p> <p>Users on Ubuntu will probably notice following error `\"Locale for language \"en_US\" is not found on the web server.\"``</p> <p>This can be solved easy with the following commands.</p> <pre><code>sudo locale-gen en_US.UTF-8\nsudo update-locale\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>This will give you on Red Hat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n---\nglibc-langpack-zu.x86_64\n</code></pre> <p>on Ubuntu it will look like :</p> <pre><code>language-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n---\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>search for language pack</p> <p>Red Hat <pre><code>dnf list glibc-langpack-* | grep zh\n</code></pre></p> <pre><code>glibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu <pre><code>sudo apt-cache search language-pack | grep -i zh\n</code></pre></p> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>install the package</p> <p>Red Hat <pre><code>dnf install glibc-langpack-zh.x86_64\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install language-pack-zh-hans\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> <p>1.6 Zabbix select language</p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>1.7 Zabbix pre-requisites</p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on    your setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your    database server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the    schema name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web    front-end, remember in our basic installation guide we created 2 users    zabbix-web and zabbix-srv. One for the frontend and the other one for our    zabbix server so here we will use the user <code>zabbix-web</code>. Enter the    corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>1.8 Zabbix connections</p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix    instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer    to use.</li> <li>Encrypt connections from Web interface: I marked this box but you should    not. This box is to encrypt communications between Zabbix frontend and your    browser. We will cover this later. Once these settings are configured, you    can complete the setup and proceed with any final configuration steps as    needed.</li> </ol> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>1.9 Zabbix summary</p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>1.10 Zabbix install</p> <p>We are now ready to login :</p> <p></p> <p>1.11 Zabbix login</p> <ul> <li>Login : Admin</li> <li>Password : zabbix</li> </ul> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>","tags":["beginner"]},{"location":"nl/ch01-zabbix-components/chapter/","title":"Zabbix componenten, basisfuncties en installatie","text":"<p>In dit hoofdstuk breiden we de basiskennis uit de \"Aan de slag\" sectie uit om een uitgebreide gids te bieden voor zowel beginners die Zabbix voor de eerste keer installeren als gevorderde gebruikers die hun installatie willen optimaliseren. We behandelen niet alleen de essenti\u00eble stappen voor een basisinstallatie, maar gaan ook dieper in op de fijnere details van de architectuur, componenten en best practices van Zabbix.</p> <p>We beginnen met het doorlopen van het installatieproces, zodat je een solide basis hebt om op te bouwen. Daarna gaan we dieper in op de kerncomponenten van Zabbix, wat ze allemaal doen, hoe ze samenwerken en waarom ze cruciaal zijn voor je monitoring oplossing. Je leert over subprocessen, hun rollen en hoe ze bijdragen aan de effici\u00ebntie en betrouwbaarheid van Zabbix.</p> <p>Daarnaast onderzoeken we goede architecturale keuzes die uw monitoring setup kunnen maken of breken. Of u nu een klein netwerk of een grootschalige infrastructuur beheert, het maken van de juiste ontwerpbeslissingen in een vroeg stadium zal zich uitbetalen in schaalbaarheid, prestaties en onderhoud.</p> <p>Dit hoofdstuk is ontworpen voor een breed scala aan lezers. Als je Zabbix gewoon aan de praat wilt krijgen, vind je duidelijke, stapsgewijze instructies. Voor degenen die dieper willen duiken, bieden we gedetailleerde inzichten in hoe Zabbix onder de motorkap werkt, zodat je weloverwogen keuzes kunt maken die aansluiten bij je behoeften en toekomstige groeiplannen.</p> <p>Aan het einde van dit hoofdstuk heb je niet alleen een werkende Zabbix installatie, maar ook een grondig begrip van de componenten en architectuur, zodat je Zabbix optimaal kunt benutten, ongeacht de complexiteit van je omgeving.</p> <p>Laten we beginnen aan deze gedetailleerde reis in Zabbix en onszelf uitrusten met de kennis om een krachtige monitoringoplossing te starten en te optimaliseren.</p>"},{"location":"nl/ch01-zabbix-components/ha-setup/#configure-the-web-server","title":"Configure the web server","text":"<p>The setup process for the frontend follows the same steps outlined in the <code>Basic Installation</code> section under Installing the Frontend. By adhering to these established procedures, we ensure consistency and reliability in the deployment.</p> Warning <p>Ubuntu users need to use the VIP in the setup of Nginx, together with the local IP in the listen directive of the config.</p> Note <p>Don't forget to configure both front-ends. Also this is a new setup. Keep in mind that with an existing setup we need to comment out the lines  <code>$ZBX_SERVER</code> and <code>$ZBX_SERVER_PORT</code>. Our frontend will check what node is active by reading the node table in the database.</p> <p><pre><code>select * from ha_node;\n</code></pre> <pre><code>zabbix=# select * from ha_node;\n         ha_nodeid         |  name   |   address       | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+-----------------+-------+------------+--------+---------------------------\n cm8agwr2b0001h6kzzsv19ng6 | zabbix1 | xxx.xxx.xxx.xxx | 10051 | 1742133911 |      0 | cm8apvb0c0000jkkzx1ojuhst\n cm8agyv830001ell0m2nq5o6n | zabbix2 | localhost       | 10051 | 1742133911 |      3 | cm8ap7b8u0000jil0845p0w51\n(2 rows)\n</code></pre></p> <p>In this instance, the node <code>zabbix2</code> is identified as the active node, as indicated by its status value of <code>3</code>, which designates an active state. The possible status values are as follows:</p> <ul> <li><code>0</code> \u2013 Multiple nodes can remain in standby mode.</li> <li><code>1</code> \u2013 A previously detected node has been shut down.</li> <li><code>2</code> \u2013 A node was previously detected but became unavailable without a proper   shutdown.</li> <li><code>3</code> \u2013 The node is currently active.</li> </ul> <p>This classification allows for effective monitoring and state management within the cluster.</p>","tags":["expert"]},{"location":"nl/ch02-zabbix-installation/frontend/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have seen so far our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This has a serious impact on what we can see and do in Zabbix as this user has no restrictions. Zabbix works with 3 different levels of users we have the regular <code>users</code>, <code>Zabbix Admin</code> and <code>Zabbix Super Admin</code> users. Let's have a deeper look at the differences :</p> <p></p> <p>2.10 Main menu sections</p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the   yellow part of the <code>main menu</code> and is able to change   our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able to   change the configuration and all the global settings.</li> </ul> <p></p> <p>2.11 Monitoring menu</p> <ul> <li>Problems: This page will give us an overview of all the problems. With   filter we can look at recent problems past problems and problems that are   active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with what's happening on   our hosts and allows us to quickly go to the latest data, graphs and   dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the   information collected from all our hosts.</li> <li>Maps: The location where we can create map that are an overview of our IT   infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can   find the results.</li> </ul> <p></p> <p>2.12 Services menu</p> <ul> <li>Services: This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.</li> </ul> <p></p> <p>2.13 Inventory menu</p> <ul> <li>Overview: A place where we can watch all our inventory data that we have   retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.</li> </ul> <p></p> <p>2.14 Inventory menu</p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a <code>pdf</code> of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in <code>ok</code>/<code>nok</code> state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a <code>NOK</code> state.</li> <li>Audit log: An overview of the user activity that happened on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here. What   mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to   each user.</li> </ul> <p></p> <p>2.15 Data collection</p> <ul> <li>Template groups: A place to logical group all templates together in   different groups. Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together. Host   groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped   together on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance   can be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers   related we can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices,   services,... on our network. This can be done here.</li> </ul> <p></p> <p>2.16 Alerts menu</p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions   we have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.</li> </ul> <p></p> <p>2.17 Users menu</p> <ul> <li>User groups: The <code>User groups</code> menu section enables the creation and   management of user groupings for streamlined access and permission control.</li> <li>User roles: The <code>User roles</code> menu section defines sets of permissions that   can be assigned to individual users, limiting their allowed actions based on   the user type they have within the system.</li> <li>Users: The <code>Users</code> menu section provides the interface for managing   individual user accounts, including creation and modification settings.</li> <li>API tokens: The <code>API tokens</code> menu section manages authentication   credentials specifically designed for programmatic access to the system's   Application Programming Interface (API), enabling secure automation and   integration with external applications.</li> <li>Authentication: The <code>Authentication</code> menu section configures the methods   and settings used to verify user identities and control access to the system.</li> </ul> <p></p> <p>2.18 Administration menu</p> <ul> <li>General: The <code>General</code> menu section within administration allows   configuration of core system-wide settings and parameters.</li> <li>Audit log: The <code>Audit log</code> menu section provides a chronological record of   system activities and user actions for security monitoring and   troubleshooting.</li> <li>Housekeeping: The <code>Housekeeping</code> menu section configures automated   maintenance tasks for managing historical data and system performance.</li> <li>Proxies: The <code>Proxies</code> menu section manages the configuration and   monitoring of proxy servers used for communication with managed hosts in   distributed environments.</li> <li>Macros: The <code>Macros</code> menu section allows the definition and management of   global variables for flexible system configuration.</li> <li>Queue: The <code>Queue</code> menu section provides real-time insight into the   processing status of internal system tasks and data handling.</li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix developers <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didn't made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>","tags":["beginner"]},{"location":"nl/ch02-zabbix-installation/frontend/#questions","title":"Questions","text":"<ul> <li> <p>Which frontend section (Monitoring, Data Collection, Alerts, Users, or   Administration) do you think you'll use most often in your daily work, and   why?</p> </li> <li> <p>How can kiosk mode be useful in a real-world monitoring environment, and what   types of dashboards would you display with it?</p> </li> <li> <p>What insights can the system information widget provide during   troubleshooting, and how might it help identify issues with server   performance?</p> </li> <li> <p>Why is it important to understand the difference between data displayed in   \u201cMonitoring\u201d and configuration options found in \u201cData Collection\u201d?</p> </li> <li> <p>If you were onboarding a new team member, which parts of the frontend would   you show them first, and why?</p> </li> </ul>","tags":["beginner"]},{"location":"nl/ch02-zabbix-installation/host-groups/#accessing-host-groups","title":"Accessing Host Groups","text":"<p>You can manage host groups by navigating to:</p> <p>Menu \u2192 Data collection \u2192 Host groups</p> <p></p> <p>2.19 Host Groups menu</p> <p>In this menu under <code>Data collection</code>, you'll notice two distinct sections:</p> <ul> <li>Host groups: Groups that contain hosts.</li> <li>Template groups: A newer addition, specifically created for organizing   templates.</li> </ul> Info <p>If you're migrating from an older Zabbix version: In previous versions, templates and hosts were often placed in the same groups. This led to confusion, particularly for new users, as templates don't technically belong to host groups in Zabbix. As of recent versions (starting from Zabbix 6.x), template groups are separated out for better clarity.</p>","tags":["beginner"]},{"location":"nl/ch02-zabbix-installation/host-groups/#applying-permissions-and-tag-filters-to-nested-groups","title":"Applying Permissions and Tag Filters to Nested Groups","text":"<p>Once you've created nested groups, the Host group overview screen provides an option to apply permissions and tag filters to all subgroups:</p> <ol> <li>Click on a parent group (e.g., <code>Europe</code>).</li> <li>A box appears: Apply permissions and tag filters to all subgroups.</li> <li>Enabling this will cascade any rights assigned to the parent group down to    its subgroups.</li> </ol> <p></p> <p>2.21 subgroup permissions</p> <p>This is especially useful for user groups. For example:</p> <ul> <li>If Brian is in a user group with access to <code>Europe/Belgium</code>, enabling this   option allows Brian to see all hosts in subgroups like <code>Europe/Belgium/Gent</code>   or <code>Europe/Belgium/Brussels</code>, including their tags and data.</li> </ul>","tags":["beginner"]},{"location":"nl/ch02-zabbix-installation/host-groups/#best-practices","title":"Best Practices","text":"<ul> <li>Use a consistent naming convention: <code>Location/Function</code>, <code>Team/Environment</code>,   etc.</li> <li>Assign hosts to multiple groups if they logically belong in more than one.</li> <li>Avoid overly deep nesting keep it readable and manageable.</li> <li>Regularly review group usage and clean up unused or outdated groups.</li> </ul> Tip <p>You can even try adding emojis to group names for a fun visual touch! \ud83c\udf89 For example: <code>\ud83c\udf0d Europe/\ud83c\udde7\ud83c\uddea Belgium</code> or <code>\ud83d\udce6 Containers/Docker</code>.</p>","tags":["beginner"]},{"location":"nl/ch02-zabbix-installation/http/","title":"HTTP","text":"<p>HTTP authenticatie is een van de externe authenticatiemethoden die Zabbix biedt en kan worden gebruikt om je Zabbix WebUI extra te beveiligen met een basisauthenticatiemechanisme op HTTP-serverniveau.</p> <p>Basis HTTP authenticatie beschermt website (Zabbix WebUI) bronnen met een gebruikersnaam en wachtwoord. Wanneer een gebruiker toegang probeert te krijgen tot de Zabbix WebUI, zal de browser een dialoogvenster laten verschijnen waarin gevraagd wordt naar de gebruikersnaam en wachtwoord voordat er iets verzonden wordt naar de Zabbix WebUI php code.</p> <p>Een HTTP-server heeft een bestand met referenties dat wordt gebruikt om gebruikers te authenticeren.</p> Note <p>IMPORTANT: usernames configured for basic authentication in HTTP server must exit in Zabbix. But only passwords configured in HTTP server are used for users authentication.</p> <p>Laten we eerst eens kijken hoe we basisauthenticatie kunnen configureren in HTTP server.</p> <p>Waarschuwing</p> <pre><code>The examples below provide just minimum set of options to configure\nbasic authentication. Please refer to respective HTTP server documentation\nfor more details\n</code></pre>","tags":["advanced"]},{"location":"nl/ch02-zabbix-installation/http/#basisauthenticatie-in-nginx","title":"Basisauthenticatie in Nginx","text":"<p>Zoek <code>location / {</code> block in Nginx configuratiebestand dat je Zabbix WebUI definieert (in mijn Zabbix implementatie is dat <code>/etc/nginx/conf.d/nginx.conf</code> bestand) en voeg deze twee regels toe:</p> <pre><code>    location / {\n        ...\n        auth_basic \"Basic Auth Protected Site\";\n        auth_basic_user_file /etc/nginx/httpauth;\n    }\n</code></pre> <p>Vergeet niet om de Nginx service te herstarten na het maken van deze wijziging.</p> <p>Dan moet je het bestand <code>/etc/nginx/httpauth</code> aanmaken dat het wachtwoord van alle gebruikers bijhoudt (zorg ervoor dat je de toegang tot dit bestand beperkt). Het formaat van dit bestand is <code>gebruikersnaam:hashed_wachtwoord</code>, bijvoorbeeld voor gebruikers <code>Admin</code> en <code>test</code>:</p> <pre><code>Admin:$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\ntest:$1$GXoDIOCA$u/n1kkDeFwcI4KhyHkY6p/\n</code></pre> <p>Om hashed_password te genereren kun je <code>openssl</code> gebruiken en het wachtwoord twee keer in voeren: <pre><code>openssl passwd\nPassword:\nVerifying - Password:\n$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\n</code></pre></p>","tags":["advanced"]},{"location":"nl/ch02-zabbix-installation/http/#basisverificatie-in-apache-httpd","title":"Basisverificatie in Apache HTTPD","text":"<p>Find <code>&lt;Directory \"/usr/share/zabbix\"&gt;</code> block in Apache HTTPD configuration file that defines your Zabbix WebUI (in my case it is <code>/etc/zabbix/apache.conf</code>) and add these lines:</p> <p>???+ note By default configuration has <code>Require all granted</code>, remove this line.</p> <p>For Ubuntu/Debian: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>For RedHat: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/httpd/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>Do not forget to restart apache2 service after making this change.</p> <p>Create <code>/etc/apache2/.httpasswd</code> (<code>/etc/httpd/.htpassword</code> for RedHat) file that will have all the users with passwords, do it by using <code>htpasswd</code> tool, to add user <code>test</code> execute:</p> <p>For Ubuntu/Debian <pre><code>sudo htpasswd -c /etc/apache2/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>For RedHat <pre><code>sudo htpasswd -c /etc/httpd/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>To add more users to the file repeat the command without <code>-c</code> flag.</p>","tags":["advanced"]},{"location":"nl/ch02-zabbix-installation/http/#questions","title":"Questions","text":"<ul> <li> <p>What advantage does HTTP (web server based) authentication provide compared to   Zabbix's internal authentication mechanism? (Consider protection at the web   server layer before the user even reaches the Zabbix UI.)</p> </li> <li> <p>Why is it essential that a user must exist in Zabbix even when HTTP   authentication is enabled and why does the Zabbix password become irrelevant   in that case?</p> </li> <li> <p>What are the configuration options in Zabbix's frontend under \u201cAdministration   \u2192 Authentication\u201d for HTTP authentication, and how might each affect login   behavior? Examples include enabling/disabling case sensitivity, domain   stripping, and choice of login form.</p> </li> <li> <p>Suppose you disable case sensitive logins and maintain both 'Admin' and   'admin' accounts in Zabbix. How will HTTP authentication behave, and what   outcome should you expect?</p> </li> <li> <p>Imagine troubleshooting a login failure when using HTTP authentication: What   steps would you take to ensure the web server\u2019s authentication is configured   correctly before examining Zabbix settings?</p> </li> <li> <p>From a security standpoint, when would HTTP authentication alone be   insufficient and what other authentication methods (e.g., LDAP, SAML, MFA)   might you layer on top for added security?</p> </li> </ul>","tags":["advanced"]},{"location":"nl/ch03-zabbix-proxies/chapter/","title":"proxies","text":""},{"location":"nl/ch00-getting-started%20/initial-steps/","title":"Aan de slag met Zabbix - De Kracht van Monitoring Onthuld","text":"<p>Welkom in de wereld van Zabbix, een krachtige open-source monitoring oplossing ontworpen om u uitgebreide inzichten te geven in uw IT-infrastructuur. Of je nu een klein netwerk beheert of toezicht houdt op een grootschalig bedrijfssysteem, Zabbix biedt de tools die je nodig hebt om de prestaties te bewaken, problemen op te sporen en een soepele werking van je diensten te garanderen.</p> <p>In dit boek richten we ons op Zabbix LTS 8.0, de versie met langetermijnondersteuning die stabiliteit en betrouwbaarheid garandeert voor uw monitoringbehoeften. We verkennen de uitgebreide functieset, inclusief de nieuw ge\u00efntroduceerde rapportagefunctionaliteit en ingebouwde webmonitoring gebaseerd op de Selenium driver, die geavanceerde monitoring van eindgebruikerservaringen mogelijk maakt via geautomatiseerde browserinteracties.</p> <p>Zabbix is meer dan een eenvoudige monitoringtool. Het biedt een breed scala aan functies waarmee je:</p> <ul> <li>Bewaak diverse omgevingen: Volg de prestaties en beschikbaarheid van   servers, virtuele machines, netwerkapparaten, databases en applicaties.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens   to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that   notify you of potential issues before they become critical, using various   channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration   to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to   tailor Zabbix to your specific needs.</li> </ul>"},{"location":"pt_BR/Guidelines/","title":"Diretrizes","text":""},{"location":"pt_BR/Guidelines/#como-contribuir","title":"Como contribuir","text":"<ul> <li>Assine a escritura de   transfer\u00eancia   de prefer\u00eancia eletronicamente</li> <li>Clone este projeto em sua conta do Github</li> <li> <p>Clone o reposit\u00f3rio em seu computador</p> </li> <li> <p>Instale o software necess\u00e1rio para que o Mkdocs funcione, verifique o arquivo   na pasta raiz how-to-install-mkdocs.md</p> </li> <li>Crie uma nova branch para fazer suas altera\u00e7\u00f5es<ul> <li>git branch \"&lt;nome da sua branch&gt;\"</li> <li>git checkout \"&lt;nome da sua branch&gt;\"</li> </ul> </li> <li>Fa\u00e7a as altera\u00e7\u00f5es desejadas e confirme-as<ul> <li>git add \"arquivos que voc\u00ea alterou\"</li> <li>git commit -m \"adicionar informa\u00e7\u00f5es \u00fateis do commit\"</li> </ul> </li> <li>Retornar \u00e0 se\u00e7\u00e3o principal<ul> <li>git checkout main</li> </ul> </li> <li>Certifique-se de que voc\u00ea tenha as \u00faltimas altera\u00e7\u00f5es mescladas a partir da     vers\u00e3o principal<ul> <li>git pull origin main</li> </ul> </li> <li>Mesclar sua branch com a branch principal<ul> <li>git merge \"&lt;nome da sua branch&gt;\"</li> <li>git push</li> </ul> </li> <li>limpar sua branch<ul> <li>git branch -d \"&lt;nome da sua branch&gt;\"</li> </ul> </li> <li>Crie um pull request para que possamos mescl\u00e1-lo :)</li> <li>Siga estas   diretrizes   ao escrever um t\u00f3pico.</li> </ul>"},{"location":"pt_BR/Supporters-Contributors/","title":"Apoiadores e colaboradores","text":"<p>Este livro n\u00e3o teria sido poss\u00edvel sem a dedica\u00e7\u00e3o, a generosidade e o conhecimento especializado de muitas pessoas e organiza\u00e7\u00f5es. Nossos sinceros agradecimentos a todos que apoiaram este projeto, seja por meio de contribui\u00e7\u00f5es financeiras, conhecimento t\u00e9cnico, revis\u00f5es de conte\u00fado ou envolvimento da comunidade.</p>"},{"location":"pt_BR/Supporters-Contributors/#nossos-patrocinadores","title":"Nossos patrocinadores","text":"<p>Somos profundamente gratos aos patrocinadores que forneceram apoio financeiro ou material para ajudar a dar vida a este livro. Suas contribui\u00e7\u00f5es nos permitiram manter um conte\u00fado de alta qualidade, apoiar iniciativas de c\u00f3digo aberto e garantir que este livro permane\u00e7a acess\u00edvel ao maior n\u00famero poss\u00edvel de pessoas.</p> <ul> <li>OICTS: https://oicts.com/</li> <li>ZABBIX: https://www.zabbix.com/</li> </ul>"},{"location":"pt_BR/Supporters-Contributors/#nossos-colaboradores","title":"Nossos colaboradores","text":"<p>Este livro \u00e9 um esfor\u00e7o da comunidade, e agradecemos sinceramente o tempo e o conhecimento compartilhados por nossos colaboradores. Desde a reda\u00e7\u00e3o e a revis\u00e3o do conte\u00fado at\u00e9 o fornecimento de feedback e o compartilhamento de conhecimentos, seus esfor\u00e7os ajudaram a transformar este recurso em algo valioso para as comunidades de monitoramento e de c\u00f3digo aberto.</p> <ul> <li>Patrik Uytterhoeven:   http://github.com/Trikke76</li> <li>Nathan Liefting:   https://github.com/larcorba</li> <li>Evgeny Yurchenko: https://github.com/BGmot</li> <li>Nikolas Garofil: https://github.com/ngaro</li> <li>Aigars Kadikis :   https://github.com/aigarskadikis</li> </ul> <p>Uma lista de todos os colaboradores que tiveram a gentileza de corrigir erros de digita\u00e7\u00e3o etc. pode ser encontrada aqui: https://github.com/penmasters/zabbix-book/graphs/contributors</p>"},{"location":"pt_BR/Supporters-Contributors/#tradutores","title":"Tradutores","text":"<ul> <li>Nicolas Hermel : https://github.com/wityender</li> <li>Dimitry Q : https://github.com/krotesk</li> </ul>"},{"location":"pt_BR/Supporters-Contributors/#agradecimentos-especiais-aos-membros-de-nossa-diretoria","title":"Agradecimentos especiais aos membros de nossa diretoria","text":"<p>Um agradecimento especial vai para os membros do nosso conselho, cuja vis\u00e3o, lideran\u00e7a e dedica\u00e7\u00e3o guiaram este projeto desde o seu in\u00edcio. Seu compromisso com os princ\u00edpios de c\u00f3digo aberto e com o compartilhamento de conhecimento foi fundamental para tornar este livro uma realidade.</p> <ul> <li>Patrik Uytterhoeven: http://github.com/Trikke76</li> <li>Nathan Liefting: https://github.com/larcorba</li> <li>Alexei Vladishev:</li> </ul>"},{"location":"pt_BR/Supporters-Contributors/#toda-contribuicao-e-importante","title":"Toda contribui\u00e7\u00e3o \u00e9 importante","text":"<p>O c\u00f3digo aberto prospera com a colabora\u00e7\u00e3o, e mesmo as menores contribui\u00e7\u00f5es ajudam a fazer a diferen\u00e7a. Seja relatando um erro de digita\u00e7\u00e3o, sugerindo uma melhoria, abrindo um problema ou simplesmente compartilhando coment\u00e1rios, agradecemos a todos que dedicaram seu tempo para ajudar a refinar e melhorar este livro. Seus esfor\u00e7os, por menores que sejam, s\u00e3o uma parte valiosa deste projeto. D\u00ea uma olhada em Todos que criaram um problema.</p>"},{"location":"pt_BR/Supporters-Contributors/#participe-da-comunidade","title":"Participe da comunidade","text":"<p>Damos as boas-vindas a novos colaboradores e apoiadores! Se voc\u00ea quiser se envolver, seja contribuindo com conte\u00fado, fornecendo feedback ou apoiando esta iniciativa, poder\u00e1 encontrar mais detalhes sobre como participar em Diretrizes.</p> <p>Obrigado por fazer parte dessa jornada e por nos ajudar a criar um recurso valioso para a comunidade de c\u00f3digo aberto!</p>"},{"location":"pt_BR/ch00-getting-started/Requirements/","title":"Requisitos de sistema","text":"","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#requisitos","title":"Requisitos","text":"<p>O Zabbix tem requisitos espec\u00edficos de hardware e software que devem ser atendidos, e esses requisitos podem mudar com o tempo. Eles tamb\u00e9m dependem do tamanho de sua configura\u00e7\u00e3o e da pilha de software que voc\u00ea selecionar. Antes de comprar hardware ou instalar uma vers\u00e3o de banco de dados, \u00e9 essencial consultar a documenta\u00e7\u00e3o do Zabbix para obter os requisitos mais atualizados para a vers\u00e3o que voc\u00ea planeja instalar. Voc\u00ea pode encontrar os requisitos mais recentes https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Certifique-se de selecionar a vers\u00e3o correta do Zabbix na lista.</p> <p>Para configura\u00e7\u00f5es menores ou de teste, o Zabbix pode ser executado confortavelmente em um sistema com 2 CPUs e 8 GB de RAM. No entanto, o tamanho da sua configura\u00e7\u00e3o, o n\u00famero de itens que voc\u00ea monitora, os acionadores que cria e o tempo que planeja reter os dados afetar\u00e3o os requisitos de recursos. Nos ambientes virtualizados de hoje, minha recomenda\u00e7\u00e3o \u00e9 come\u00e7ar com pouco e aumentar a escala conforme necess\u00e1rio.</p> <p>Voc\u00ea pode instalar todos os componentes (servidor Zabbix, banco de dados, servidor Web) em uma \u00fanica m\u00e1quina ou distribu\u00ed-los em v\u00e1rios servidores. Para simplificar, anote os detalhes do servidor:</p> Componente Endere\u00e7o IP Servidor Zabbix Servidor de banco de dados Servidor Web Dica <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Nota <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#configuracao-basica-do-sistema-operacional","title":"Configura\u00e7\u00e3o b\u00e1sica do sistema operacional","text":"<p>Sistemas operacionais, tantas op\u00e7\u00f5es, cada uma com suas pr\u00f3prias vantagens e base de usu\u00e1rios fi\u00e9is. Embora o Zabbix possa ser instalado em uma ampla gama de plataformas, documentar o processo para cada sistema operacional dispon\u00edvel seria impratic\u00e1vel. Para manter este livro focado e eficiente, optamos por abordar apenas as op\u00e7\u00f5es mais usadas: As distribui\u00e7\u00f5es baseadas no Ubuntu e no Red Hat.</p> <p>Como nem todo mundo tem acesso a uma assinatura do Red Hat Enterprise Linux (RHEL), mesmo que uma conta de desenvolvedor forne\u00e7a acesso limitado, optamos pelo Rocky Linux como uma alternativa prontamente dispon\u00edvel. Para este livro, usaremos o Rocky Linux 9.x e o Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Antes de instalar o Zabbix, \u00e9 essencial preparar adequadamente o sistema operacional. A primeira etapa \u00e9 garantir que o firewall esteja instalado e configurado.</p> <p>Para instalar e ativar o firewall, execute o seguinte comando:</p> <p>Instalar e ativar o firewall</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>Depois de instalado, voc\u00ea pode configurar as portas necess\u00e1rias. Para o Zabbix, precisamos permitir o acesso \u00e0 porta <code>10051/tcp</code>, que \u00e9 onde o coletor do Zabbix escuta os dados recebidos. Use o seguinte comando para abrir essa porta no firewall:</p> <p>Permitir acesso ao Zabbix trapper</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>Se o servi\u00e7o n\u00e3o for reconhecido, voc\u00ea poder\u00e1 especificar manualmente a porta:</p> <p>Adicionar porta em vez do nome do servi\u00e7o</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Nota <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>Uma abordagem alternativa \u00e9 definir zonas de firewall dedicadas para casos de uso espec\u00edficos. Por exemplo...</p> <p>Criar uma zona firewalld</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>Voc\u00ea pode confirmar a cria\u00e7\u00e3o da zona executando o seguinte comando:</p> <p>Verificar a cria\u00e7\u00e3o da zona</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>Bloquear a DMZ e descartar todo o tr\u00e1fego proveniente de redes externas, permitindo apenas o acesso interno por meio das redes home, internal, nm-shared, postgresql-access, public, trusted e work.</p> <p>O uso de zonas no firewalld para configurar regras de firewall para o PostgreSQL oferece v\u00e1rias vantagens em termos de seguran\u00e7a, flexibilidade e facilidade de gerenciamento. Veja por que as zonas s\u00e3o vantajosas:</p> <ul> <li>Controle de acesso granular :</li> <li>As zonas firewalld permitem diferentes n\u00edveis de confian\u00e7a para diferentes     interfaces de rede e intervalos de IP. Voc\u00ea pode definir quais sistemas t\u00eam     permiss\u00e3o para se conectar ao PostgreSQL com base em seu n\u00edvel de confian\u00e7a.</li> <li>Gerenciamento simplificado de regras:</li> <li>Em vez de definir manualmente regras complexas do iptables, as zonas     oferecem uma maneira organizada de agrupar e gerenciar regras de firewall     com base em cen\u00e1rios de uso.</li> <li>Seguran\u00e7a aprimorada:</li> <li>Ao restringir o acesso do PostgreSQL a uma zona espec\u00edfica, voc\u00ea evita     conex\u00f5es n\u00e3o autorizadas de outras interfaces ou redes.</li> <li>Configura\u00e7\u00e3o din\u00e2mica:</li> <li>O firewalld suporta configura\u00e7\u00f5es de regras permanentes e em tempo de     execu\u00e7\u00e3o, permitindo altera\u00e7\u00f5es sem interromper as conex\u00f5es existentes.</li> <li>Suporte a v\u00e1rias interfaces:</li> <li>Se o servidor tiver v\u00e1rias interfaces de rede, as zonas permitir\u00e3o pol\u00edticas     de seguran\u00e7a diferentes para cada interface.</li> </ul> <p>Juntando tudo, ficaria assim:</p> <p>Firewalld com configura\u00e7\u00e3o de zona</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Onde o <code>IP de origem</code> \u00e9 o \u00fanico endere\u00e7o permitido para estabelecer uma conex\u00e3o com o banco de dados.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#servidor-de-tempo","title":"Servidor de tempo","text":"<p>Outra etapa crucial \u00e9 a configura\u00e7\u00e3o do servidor de hor\u00e1rio e a sincroniza\u00e7\u00e3o do servidor Zabbix usando um cliente NTP. A sincroniza\u00e7\u00e3o precisa do hor\u00e1rio \u00e9 vital para o Zabbix, tanto para o servidor quanto para os dispositivos que ele monitora. Se um dos hosts tiver um fuso hor\u00e1rio incorreto, isso pode gerar confus\u00e3o, como investigar um problema no Zabbix que parece ter acontecido horas antes do que realmente aconteceu.</p> <p>Para instalar e ativar o chrony, nosso cliente NTP, use o seguinte comando:</p> <p>Instalar cliente NTP</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>Ap\u00f3s a instala\u00e7\u00e3o, verifique se o Chrony est\u00e1 ativado e em execu\u00e7\u00e3o, verificando seu status com o seguinte comando:</p> <p>Verifique o status do servi\u00e7o chronyd.</p> <pre><code>systemctl status chronyd\n</code></pre> O que \u00e9 apt ou dnf <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> O que \u00e9 Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>Depois que o Chrony estiver instalado, a pr\u00f3xima etapa \u00e9 garantir que o fuso hor\u00e1rio correto esteja definido. Voc\u00ea pode ver a configura\u00e7\u00e3o do hor\u00e1rio atual usando o comando <code>timedatectl</code>:</p> <p>verifique a configura\u00e7\u00e3o da hora</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>Certifique-se de que o servi\u00e7o Chrony esteja ativo (consulte as etapas anteriores, se necess\u00e1rio). Para definir o fuso hor\u00e1rio correto, primeiro, voc\u00ea pode listar todos os fusos hor\u00e1rios dispon\u00edveis com o seguinte comando:</p> <p>listar os fusos hor\u00e1rios</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>Esse comando exibir\u00e1 uma lista de fusos hor\u00e1rios dispon\u00edveis, permitindo que voc\u00ea selecione o mais pr\u00f3ximo de sua localiza\u00e7\u00e3o. Por exemplo:</p> <p>Lista de todos os fusos hor\u00e1rios dispon\u00edveis</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Depois de identificar seu fuso hor\u00e1rio, configure-o usando o seguinte comando:</p> <p>Definir o fuso hor\u00e1rio</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>Para verificar se o fuso hor\u00e1rio foi configurado corretamente, use novamente o comando <code>timedatectl</code>:</p> <p>Verifique a hora e o fuso hor\u00e1rio</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Nota <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#verificacao-da-sincronizacao-do-chrony","title":"Verifica\u00e7\u00e3o da sincroniza\u00e7\u00e3o do Chrony","text":"<p>Para garantir que o Chrony esteja sincronizando com os servidores de hor\u00e1rio corretos, voc\u00ea pode executar o seguinte comando:</p> <p>Verificar chrony</p> <pre><code>chronyc\n</code></pre> <p>O resultado deve ser semelhante:</p> <p>Verifique a sa\u00edda do seu chrony</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Quando estiver no prompt do Chrony, digite o seguinte para verificar os c\u00f3digos-fonte:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Exemplo de sa\u00edda:</p> <p>Verifique as fontes do seu servidor de hor\u00e1rio</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>Neste exemplo, os servidores NTP em uso est\u00e3o localizados fora de sua regi\u00e3o local. Recomenda-se mudar para servidores de hor\u00e1rio em seu pa\u00eds ou, se dispon\u00edvel, para um servidor de hor\u00e1rio dedicado da empresa. Voc\u00ea pode encontrar servidores NTP locais aqui: www.ntppool.org.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#atualizando-os-servidores-de-horario","title":"Atualizando os servidores de hor\u00e1rio","text":"<p>Para atualizar os servidores de hor\u00e1rio, modifique o arquivo <code>/etc/chrony.conf</code> para sistemas baseados no Red Hat e, se voc\u00ea usar o Ubuntu, edite <code>/etc/chrony/chrony.conf</code>. Substitua o servidor NTP existente por um mais pr\u00f3ximo de sua localiza\u00e7\u00e3o.</p> <p>Exemplo da configura\u00e7\u00e3o atual:</p> <p>exemplo de configura\u00e7\u00e3o do pool ntp</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>Depois de fazer essa altera\u00e7\u00e3o, reinicie o servi\u00e7o Chrony para aplicar a nova configura\u00e7\u00e3o:</p> <p>reinicie o servi\u00e7o chrony</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#verificacao-de-servidores-de-horario-atualizados","title":"Verifica\u00e7\u00e3o de servidores de hor\u00e1rio atualizados","text":"<p>Verifique novamente as fontes de hor\u00e1rio para garantir que os novos servidores locais estejam em uso:</p> <p>Verificar as fontes do chrony </p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Exemplo de sa\u00edda esperada com servidores locais:</p> <p>Exemplo de sa\u00edda</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>Isso confirma que o sistema agora est\u00e1 usando servidores de hor\u00e1rio local.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#conclusao","title":"Conclus\u00e3o","text":"<p>Como vimos, antes mesmo de considerar os pacotes do Zabbix, \u00e9 preciso prestar aten\u00e7\u00e3o ao ambiente em que ele residir\u00e1. Um sistema operacional configurado adequadamente, um caminho aberto atrav\u00e9s do firewall e um controle preciso do tempo n\u00e3o s\u00e3o meras sugest\u00f5es, mas blocos de constru\u00e7\u00e3o essenciais. Depois de estabelecer essa base, agora podemos prosseguir com confian\u00e7a para a instala\u00e7\u00e3o do Zabbix, sabendo que o sistema subjacente est\u00e1 preparado para a tarefa.</p>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#perguntas","title":"Perguntas","text":"<ul> <li>Por que voc\u00ea acha que a sincroniza\u00e7\u00e3o precisa do tempo \u00e9 t\u00e3o crucial para um   sistema de monitoramento como o Zabbix?</li> <li>Agora que as bases est\u00e3o estabelecidas, qual voc\u00ea prev\u00ea que ser\u00e1 a primeira   etapa do processo de instala\u00e7\u00e3o do Zabbix?</li> <li>\u00c0 medida que avan\u00e7amos na instala\u00e7\u00e3o do Zabbix, vamos pensar na comunica\u00e7\u00e3o da   rede. Quais s\u00e3o as principais portas que voc\u00ea prev\u00ea que precisar\u00e3o passar pelo   firewall para que o servidor Zabbix e os agentes interajam de forma eficaz?</li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch00-getting-started/Requirements/#urls-uteis","title":"URLs \u00fateis","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/","title":"Instala\u00e7\u00e3o b\u00e1sica","text":"<p>Neste cap\u00edtulo, discorreremos sobre o processo de instala\u00e7\u00e3o do Zabbix Server. H\u00e1 diversas maneiras de configurar um Zabbix Server. Abordaremos as configura\u00e7\u00f5es mais comuns com o MariaDB e o PostgreSQL no Ubuntu e no Rocky Linux.</p> <p>Antes de iniciar a instala\u00e7\u00e3o, \u00e9 importante entender a arquitetura do Zabbix. O Zabbix Server \u00e9 estruturado de forma modular, composto por tr\u00eas componentes principais, que discutiremos em detalhes.</p> <ul> <li>O Zabbix Server</li> <li>O servidor web Zabbix (Frontend)</li> <li>O banco de dados do Zabbix</li> </ul> <p>Cria\u00e7\u00e3o de Usu\u00e1rios do Banco de Dados</p> <pre><code>In our setup we will create 2 DB users `zabbix-web` and `zabbix-srv`. The \nzabbix-web user will be used for the frontend to connect to our zabbix database.\nThe zabbix-srv user will be used by our zabbix server to connect to the database.\nThis allows us to limit the permissions for every user to only what is strictly\nneeded.\n</code></pre> <p></p> <p>1.1 Instala\u00e7\u00e3o da divis\u00e3o b\u00e1sica do Zabbix</p> <p>Todos esses componentes podem ser instalados em um \u00fanico servidor ou distribu\u00eddos em tr\u00eas servidores separados. O n\u00facleo do sistema \u00e9 o Zabbix Server, geralmente chamado de \"c\u00e9rebro\". Esse componente \u00e9 respons\u00e1vel pelo processamento de c\u00e1lculos de acionamento e pelo envio de alertas. O banco de dados serve como armazenamento da configura\u00e7\u00e3o do servidor Zabbix e de todos os dados que ele coleta. O servidor Web fornece a interface do usu\u00e1rio (front-end) para interagir com o sistema. \u00c9 importante observar que a API do Zabbix faz parte do componente front-end, e n\u00e3o do pr\u00f3prio servidor Zabbix.</p> <p>Esses componentes devem funcionar juntos de forma integrada, conforme ilustrado no diagrama acima. O Zabbix Server deve ler as configura\u00e7\u00f5es e armazenar os dados de monitoramento no banco de dados, enquanto o front-end precisa ter acesso para ler e gravar os dados de configura\u00e7\u00e3o. Al\u00e9m disso, o front-end deve ser capaz de verificar o status do Zabbix Server e recuperar informa\u00e7\u00f5es adicionais necess\u00e1rias para garantir uma opera\u00e7\u00e3o tranquila.</p> <p>Para nossa configura\u00e7\u00e3o, usaremos duas m\u00e1quinas virtuais (VMs): uma VM hospedar\u00e1 o Zabbix Server e o Frontend, enquanto a segunda VM hospedar\u00e1 o banco de dados do Zabbix.</p> Nota <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Nota <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>Abordaremos os seguintes t\u00f3picos:</p> <ul> <li>Instale nosso banco de dados baseado no MariaDB.</li> <li>Instale nosso banco de dados baseado no PostgreSQL.</li> <li>Instalando o Zabbix Server.</li> <li>Instale o front-end.</li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#instalando-o-banco-de-dados-mariadb","title":"Instalando o banco de dados MariaDB","text":"<p>Para iniciar o processo de instala\u00e7\u00e3o do servidor MariaDB, a primeira etapa envolve a cria\u00e7\u00e3o manual de um arquivo de configura\u00e7\u00e3o do reposit\u00f3rio. Esse arquivo, mariadb.repo no Rocky, deve ser colocado no diret\u00f3rio /etc/yum.repos.d/. O arquivo de reposit\u00f3rio permitir\u00e1 que seu gerenciador de pacotes localize e instale os componentes necess\u00e1rios do MariaDB. Para o Ubuntu, precisamos importar as chaves do reposit\u00f3rio e criar um arquivo, por exemplo, '/etc/apt/sources.list.d/mariadb.sources'.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#adicione-o-repositorio-mariadb","title":"Adicione o reposit\u00f3rio MariaDB","text":"<p>Para criar o arquivo de reposit\u00f3rio do MariaDB, execute o seguinte comando em seu terminal:</p> <p>criar reposit\u00f3rio mariadb</p> <p>Red Hat <pre><code>vi /etc/yum.repos.d/mariadb.repo\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install apt-transport-https curl\nsudo mkdir -p /etc/apt/keyrings\nsudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\nsudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre></p> <p>Isso abrir\u00e1 um editor de texto no qual voc\u00ea poder\u00e1 inserir os detalhes de configura\u00e7\u00e3o do reposit\u00f3rio. Depois que o reposit\u00f3rio estiver configurado, voc\u00ea poder\u00e1 prosseguir com a instala\u00e7\u00e3o do MariaDB usando o gerenciador de pacotes.</p> Dica <p>Always check Zabbix documentation for the latest supported versions.</p> <p>A configura\u00e7\u00e3o mais recente pode ser encontrada aqui: https://mariadb.org/download/?t=repo-config</p> <p>Aqui est\u00e1 a configura\u00e7\u00e3o que voc\u00ea precisa adicionar ao arquivo:</p> <p>Reposit\u00f3rio Mariadb</p> <p>Red Hat <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre></p> <p>Ubuntu <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre></p> <p>Depois de salvar o arquivo, verifique se tudo est\u00e1 devidamente configurado, e se a vers\u00e3o do MariaDB \u00e9 compat\u00edvel com a vers\u00e3o do Zabbix, para evitar poss\u00edveis problemas de integra\u00e7\u00e3o.</p> <p>Antes de prosseguir com a instala\u00e7\u00e3o do MariaDB, \u00e9 uma pr\u00e1tica recomendada garantir que seu sistema operacional esteja atualizado com os patches e as corre\u00e7\u00f5es de seguran\u00e7a mais recentes. Isso ajudar\u00e1 a manter a estabilidade e a compatibilidade do sistema com o software que voc\u00ea est\u00e1 prestes a instalar.</p> <p>Para atualizar seu sistema operacional, execute o seguinte comando:</p> <p>Atualizar sistema operacional</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Esse comando buscar\u00e1 e instalar\u00e1 automaticamente as atualiza\u00e7\u00f5es mais recentes dispon\u00edveis para seu sistema, aplicando patches de seguran\u00e7a, melhorias de desempenho e corre\u00e7\u00f5es de bugs. Quando o processo de atualiza\u00e7\u00e3o estiver conclu\u00eddo, voc\u00ea poder\u00e1 prosseguir com a instala\u00e7\u00e3o do MariaDB.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#instalar-o-banco-de-dados-mariadb","title":"Instalar o banco de dados MariaDB","text":"<p>Com o sistema operacional atualizado e o reposit\u00f3rio do MariaDB configurado, agora voc\u00ea est\u00e1 pronto para instalar os pacotes do servidor e do cliente MariaDB. Isso fornecer\u00e1 os componentes necess\u00e1rios para executar e administrar a sua base de dados.</p> <p>Para instalar o servidor e o cliente MariaDB, execute o seguinte comando:</p> <p>Instalar o Mariadb</p> <p>Red Hat <pre><code>dnf install MariaDB-server\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install mariadb-server\n</code></pre></p> <p>Esse comando realizar\u00e1 o download e instalar\u00e1 os pacotes do servidor e do cliente, permitindo que voc\u00ea defina, configure e interaja com o banco de dados MariaDB. Quando a instala\u00e7\u00e3o estiver conclu\u00edda, voc\u00ea poder\u00e1 iniciar e configurar o servi\u00e7o MariaDB.</p> <p>Agora que o MariaDB est\u00e1 instalado, precisamos habilitar o servi\u00e7o para iniciar automaticamente na inicializa\u00e7\u00e3o do sistema operacional, assim como inici\u00e1-lo imediatamente. Utilize o seguinte comando para realizar isso:</p> <p>Enable mariadb service</p> <p>Red Hat <pre><code>systemctl enable mariadb --now\n</code></pre></p> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <p>Check Mariadb version</p> <p>Red Hat and Ubuntu <pre><code>sudo mariadb -V\n</code></pre></p> <p>A sa\u00edda esperada deve ser similar a esta:</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using EditLine wrapper\n</code></pre> <p>Para garantir que o servi\u00e7o do MariaDB esteja funcionando corretamente, voc\u00ea pode verificar o status com o seguinte comando:</p> <p>Get mariadb status</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl status mariadb\n</code></pre></p> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <p>mariadb service status example</p> <pre><code> mariadb.service - MariaDB 11.4.5 database server\n      Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n     Drop-In: /etc/systemd/system/mariadb.service.d\n              \u2514\u2500migrated-from-my.cnf-settings.conf\n      Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n        Docs: man:mariadbd(8)\n              https://mariadb.com/kb/en/library/systemd/\n     Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n     Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ] &amp;&amp; systemctl set-enviro&gt;\nProcess: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment \\_WSREP_START_POSITION (code=exited, status=0/SUCCESS)\nMain PID: 23156 (mariadbd)\nStatus: \"Taking your SQL requests now...\"\nTasks: 7 (limit: 30620)\nMemory: 281.7M\nCPU: 319ms\nCGroup: /system.slice/mariadb.service\n\u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <p>Log in to the MariaDB shell as the root user: You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <p>Enter Mariadb as user root</p> <p>Red Hat and Ubuntu <pre><code>mariadb -uroot -p\n</code></pre></p> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <p>Create the database</p> <p><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> Nota <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all  Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB  only supports up to three bytes per character and is not a true UTF-8 implementation,  which is why utf8mb4 is recommended.</p> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <p>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</p> <p>Create users and grant privileges</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them access to the zabbix database, and ensures that the privileges are applied immediately.</p> <p>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled. To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <p>Activate temporarily extra privileges for non root users</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>If we want our Zabbix server to connect to our DB then we also need to open our firewall port.</p> <p>Add firewall rules</p> <p>Red Hat <pre><code>firewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 3306/tcp\n</code></pre></p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#populate-the-zabbix-maria-db","title":"Populate the Zabbix Maria DB","text":"<p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <p>One of the first things we need to do is add the Zabbix repository to our machine. This may sound weird but actually makes sense because we need to populate our DB with our Zabbix schemas.</p> <p>Add Zabbix repo and install scripts</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>Now lets upload the data from zabbix (db structure, images, user, ... ) for this we make use of the user <code>zabbix-srv</code> and we upload it all in our DB <code>zabbix</code>.</p> <p>Populate the database</p> <p>Red Hat and Ubuntu <pre><code>sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre></p> Nota <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <p>Enter mariadb as user root</p> <p><code>mariadb -uroot -p</code></p> <p>Once the import of the Zabbix schema is complete and you no longer need the log_bin_trust_function_creators global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to 0, use the following command in the MariaDB shell:</p> <p>Disable function log_bin_trust again</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the servers security posture remains robust.</p> <p>This concludes our installation of the MariaDB</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#install-the-postgresql-databases","title":"Install the PostgreSQL databases","text":"<p>Install the Postgres server</p> <p>Red Hat <pre><code># Install Postgres server:\ndnf install postgresql17-server\n\n# Initialize the database and enable automatic start:\n/usr/pgsql-17/bin/postgresql-17-setup initdb\nsystemctl enable postgresql-17 --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install postgresql-17\n</code></pre></p> <p>Para atualizar seu sistema operacional, execute o seguinte comando:</p> <p>update the OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Nota <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\" https://www.postgresql.org/docs/current/auth-pg-hba-conf.html</p> <p>Add the following lines, the order here is important.</p> <p>Edit the pg_hba file</p> <p>Red hat <pre><code>vi /var/lib/pgsql/17/data/pg_hba.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/pg_hba.conf\n</code></pre></p> <p>The result should look like :</p> <p>pg_hba example</p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal    zabbix     zabbix-srv                                                              scram-sha-256\nlocal    all            all                                                                            peer\n# IPv4 local connections\nhost     zabbix     zabbix-srv          &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     zabbix     zabbix-web        &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     all            all                         127.0.0.1/32                            scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incoming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <p>Edit postgresql.conf file</p> <p>Red Hat <pre><code>vi /var/lib/pgsql/17/data/postgresql.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/postgresql.conf\n</code></pre></p> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>and replace it with:</p> <p><code>listen_addresses = '*'</code></p> Nota <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. In production it's probably a good idea to limit who can connect to the DB.</p> <p>After making this change, restart the PostgreSQL service to apply the new settings:</p> <p>restart the DB server</p> <p>Red Hat <pre><code>systemctl restart postgresql-17\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl restart postgresql\n</code></pre></p> <p>If the service fails to restart, review the pg_hba.conf file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you'll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#create-the-zabbix-database-with-postgresql","title":"Create the Zabbix database with PostgreSQL","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <p>Add zabbix schema repos package</p> <p>Red Hat <pre><code>dnf install https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <p>create server users</p> <pre><code>sudo su - postgres\ncreateuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <p>Create front-end user</p> <pre><code>createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root or your regular user, unzip the necessary schema files by running the following command:</p> <p>Unzip the DB patch</p> <p>Red Hat <pre><code>gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> <p>Ubuntu <pre><code>sudo gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> Nota <p>Zabbix seems to like to change the locations of the script to populate the DB every version or in between versions. If you encounter an error take a look at the Zabbix documentation there is a good chance that some location was changed.</p> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database. First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to zabbix-srv:</p> <p>Create DB</p> <p>Red Hat <pre><code>su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Ubuntu <pre><code>sudo su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the zabbix database using the zabbix-srv user:</p> <p>Login as user zabbix-srv</p> <pre><code>psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other's data.</p> Nota <p>PostgreSQL comes with a default schema, typically called public, but it's in general best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, https://hevodata.com/learn/postgresql-schema/#schema which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <p>create the db schema</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\n</code></pre> <p>Next, we set the <code>search path</code> to <code>zabbix_server</code> schema so that it's the default for the current session:</p> <p>Set search path</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <p>verify schema access</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <p>Grant access to schema for user zabbix-web</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#populate-the-zabbix-postgresql-db","title":"Populate the Zabbix PostgreSQL DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in   the <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <p>upload the DB schema to db zabbix</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <p>Output example</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <p>Grant rights on the schema to user zabbix-web</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server\nTO \"zabbix-web\";\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>Verify if the rights are correct on the schema :</p> <p>Example schema rights</p> <pre><code>zabbix=&gt; \\dn+\n                                           List of schemas\n     Name      |       Owner       |           Access privileges            |      Description\n---------------+-------------------+----------------------------------------+------------------------\n public        | pg_database_owner | pg_database_owner=UC/pg_database_owner+| standard public schema\n               |                   | =U/pg_database_owner                   |\n zabbix_server | zabbix-srv        | \"zabbix-srv\"=UC/\"zabbix-srv\"          +|\n               |                   | \"zabbix-web\"=U/\"zabbix-srv\"            |\n</code></pre> Nota <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no     schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the   <code>zabbix_server</code> schema:</li> </ul> <p>List tables</p> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <p>List table with relations</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has   the necessary permissions. You can check permissions for specific tables using   the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <pre><code>                                                     Access privileges\n    Schema     |            Name            |   Type   |         Access privileges          | Column privileges | Policies\n---------------+----------------------------+----------+------------------------------------+-------------------+----------\n zabbix_server | acknowledges               | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | actions                    | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | alerts                     | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | auditlog                   | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Nota <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <p>Exit the database</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>Red Hat <pre><code>firewall-cmd --add-port=5432/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 5432/tcp\n</code></pre></p> Nota <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.2 Zabbix download</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>exclude packages</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Dica <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>Add the zabbix repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Nota <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>Install the zabbix server</p> <p>Red Hat <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre></p> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Nota <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> Nota <p>Before restarting the Zabbix server after modifying its configuration, it is considered best practice to validate the configuration to prevent potential issues. Running a configuration check ensures that any errors are detected beforehand, avoiding downtime caused by an invalid configuration. This can be accomplished using the following command: <code>zabbix-server -T</code></p> <p>enable and start zabbix-server service</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>Check the log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Exemplo de sa\u00edda</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example log with errors</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check status of zabbix-server service</p> <p><pre><code>systemctl status zabbix-server\n</code></pre> <pre><code>zabbix-server.service - Zabbix Server\nLoaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\nActive: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\nMain PID: 12074 (zabbix_server)\nTasks: 77 (limit: 24744)\nMemory: 71.5M\nCPU: 18.535s\nCGroup: /system.slice/zabbix-server.service\n\u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n\u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n\u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n\u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n\u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n\u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n\u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n\u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n\u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n\u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n\u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n\u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n\u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n\u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n\u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n\u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n\u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n\u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n\u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n\u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n\u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n\u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n\u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n\u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository_1","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.3 Download do Zabbix</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>Adicionar exclus\u00e3o ao epelrepo para o zabbix</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Dica <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>add the repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Nota <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>install zabbix server</p> <p>Red Hat</p> <pre><code>dnf install zabbix-server-pgsql\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre></p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if   it's on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Nota <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <p><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code></p> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>enable zabbix server service and start</p> <p>Red Hat <pre><code>systemctl enable zabbix-server --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>check the zabbix log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example log output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example of an error in the log</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check server status</p> <p><pre><code> systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n      Memory: 71.5M\n         CPU: 18.535s\n      CGroup: /system.slice/zabbix-server.service\n              \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n              \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n              \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n              \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n              \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n              \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n              \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n              \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n              \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n              \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n              \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n              \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n              \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n              \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n              \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n              \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n              \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n              \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n              \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n              \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n              \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n              \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n              \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n              \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>install frontend packages</p> <p>Red Hat <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql\n</code></pre></p> <p>Ubuntu <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>edit nginx config for Red Hat</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <p>original config</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nserver*name *;\nroot /usr/share/nginx/html;\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <p>config after edit</p> <pre><code>server {\n# listen 80;\n# listen [::]:80;\n# server*name *;\n# root /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <p>edit zabbix config for nginx</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <p>original config</p> <pre><code>server {\nlisten 8080;\nserver_name example.com;\n\nroot    /usr/share/zabbix;\n\nindex   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <p>config after the edit</p> <pre><code>server { # listen 8080; # server*name example.com;\nlisten 80;\nserver_name *;\n\n         root    /usr/share/zabbix;\n\n         index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>edit nginx config for ubuntu</p> <pre><code>sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <p>original config</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <p>config after edit</p> <pre><code>server {\nlisten xxx.xxx.xxx.xxx:80;\nserver_name \"\";\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> Nota <p>server_name is normally replaced with the fqdn name of your machine. If you have no fqdn you can keep it open like in this example.</p> <p>restart the front-end services</p> <p>Red Hat <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>check if the service is running</p> <p><pre><code>systemctl status nginx\n</code></pre> <pre><code>\u25cf nginx.service - The nginx HTTP and reverse proxy server\n      Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n     Drop-In: /usr/lib/systemd/system/nginx.service.d\n              \u2514\u2500php-fpm.conf\n      Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n    Main PID: 1206 (nginx)\n       Tasks: 2 (limit: 12344)\n      Memory: 4.8M\n         CPU: 38ms\n      CGroup: /system.slice/nginx.service\n              \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n              \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre></p> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>configure the firewall</p> <p>Red Hat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu <pre><code>sudo ufw allow 80/tcp\n</code></pre></p> <p>Open your browser and go to the url or ip of your front-end :</p> <p>front-end configuration</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file:</p> <pre><code> /var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>1.4 Zabbix welcome</p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>!.5 Zabbix welcome language choice</p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>install language packs</p> <p>Red Hat <pre><code>dnf list glibc-langpack-*\n</code></pre></p> <p>Ubuntu <pre><code>apt-cache search language-pack\n</code></pre></p> <p>Users on Ubuntu will probably notice following error `\"Locale for language \"en_US\" is not found on the web server.\"``</p> <p>This can be solved easy with the following commands.</p> <pre><code>sudo locale-gen en_US.UTF-8\nsudo update-locale\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>This will give you on Red Hat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n---\nglibc-langpack-zu.x86_64\n</code></pre> <p>on Ubuntu it will look like :</p> <pre><code>language-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n---\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>search for language pack</p> <p>Red Hat <pre><code>dnf list glibc-langpack-* | grep zh\n</code></pre></p> <pre><code>glibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu <pre><code>sudo apt-cache search language-pack | grep -i zh\n</code></pre></p> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>install the package</p> <p>Red Hat <pre><code>dnf install glibc-langpack-zh.x86_64\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install language-pack-zh-hans\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> <p>1.6 Zabbix select language</p> Nota <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>1.7 Zabbix pre-requisites</p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on    your setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your    database server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the    schema name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web    front-end, remember in our basic installation guide we created 2 users    zabbix-web and zabbix-srv. One for the frontend and the other one for our    zabbix server so here we will use the user <code>zabbix-web</code>. Enter the    corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>1.8 Zabbix connections</p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix    instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or    your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer    to use.</li> <li>Encrypt connections from Web interface: I marked this box but you should    not. This box is to encrypt communications between Zabbix frontend and your    browser. We will cover this later. Once these settings are configured, you    can complete the setup and proceed with any final configuration steps as    needed.</li> </ol> Nota <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>1.9 Zabbix summary</p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>1.10 Zabbix install</p> <p>We are now ready to login :</p> <p></p> <p>1.11 Zabbix login</p> <ul> <li>Login : Admin</li> <li>Password : zabbix</li> </ul> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Nota <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#conclusao","title":"Conclus\u00e3o","text":"<p>With this, we conclude our journey through setting up Zabbix and configuring it with MySQL or PostgreSQL on RHEL-based systems and Ubuntu. We have walked through the essential steps of preparing the environment, installing the necessary components, and ensuring a fully functional Zabbix server. From database selection to web frontend configuration with Nginx, each decision has been aimed at creating a robust and efficient monitoring solution.</p> <p>At this stage, your Zabbix instance is operational, providing the foundation for advanced monitoring and alerting. In the upcoming chapters, we will delve into fine-tuning Zabbix, optimizing performance, and exploring key features that transform it into a powerful observability platform.</p> <p>Now that your Zabbix environment is up and running, let\u2019s take it to the next level.</p>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#perguntas","title":"Perguntas","text":"<ol> <li>Should I choose MySQL or PostgreSQL as the database back-end? Why?</li> <li>What version of Zabbix should I install for compatibility and stability?</li> <li>What port does my DB use ?</li> <li>What Zabbix logs should I check for troubleshooting common issues?</li> </ol>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/basic-installation/#urls-uteis","title":"URLs \u00fateis","text":"<ul> <li>https://www.postgresql.org/docs/current/ddl-priv.html</li> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch01-zabbix-components/chapter/","title":"Componentes do Zabbix, fun\u00e7\u00f5es b\u00e1sicas e instala\u00e7\u00e3o","text":"<p>Neste cap\u00edtulo, expandimos o conhecimento b\u00e1sico da se\u00e7\u00e3o \"Introdu\u00e7\u00e3o\" para fornecer um guia abrangente tanto para iniciantes que est\u00e3o instalando o Zabbix pela primeira vez quanto para usu\u00e1rios avan\u00e7ados que buscam otimizar sua configura\u00e7\u00e3o. N\u00e3o abordaremos apenas as etapas essenciais para uma instala\u00e7\u00e3o b\u00e1sica, mas tamb\u00e9m nos aprofundaremos nos detalhes mais finos da arquitetura, dos componentes e das pr\u00e1ticas recomendadas do Zabbix.</p> <p>Come\u00e7aremos percorrendo o processo de instala\u00e7\u00e3o, garantindo que voc\u00ea tenha uma base s\u00f3lida sobre a qual construir. A partir da\u00ed, abordaremos os principais componentes do Zabbix, o que cada um deles faz, como interagem e por que s\u00e3o cruciais para sua solu\u00e7\u00e3o de monitoramento. Voc\u00ea conhecer\u00e1 os subprocessos, suas fun\u00e7\u00f5es e como eles contribuem para a efici\u00eancia e a confiabilidade do Zabbix.</p> <p>Al\u00e9m disso, exploraremos as boas escolhas arquitet\u00f4nicas que podem ser decisivas para a sua configura\u00e7\u00e3o de monitoramento. N\u00e3o importa se voc\u00ea est\u00e1 gerenciando uma rede pequena ou uma infraestrutura de grande escala, tomar as decis\u00f5es corretas de projeto logo no in\u00edcio trar\u00e1 dividendos em termos de escalabilidade, desempenho e manuten\u00e7\u00e3o.</p> <p>Este cap\u00edtulo foi projetado para atender a uma ampla gama de leitores. Se estiver apenas procurando colocar o Zabbix em funcionamento, voc\u00ea encontrar\u00e1 instru\u00e7\u00f5es claras e passo a passo. Para aqueles que desejam se aprofundar, forneceremos insights detalhados sobre como o Zabbix funciona nos bastidores, ajudando-o a fazer escolhas informadas que se alinham com suas necessidades e planos de crescimento futuro.</p> <p>Ao final deste cap\u00edtulo, voc\u00ea ter\u00e1 n\u00e3o apenas uma instala\u00e7\u00e3o funcional do Zabbix, mas tamb\u00e9m uma compreens\u00e3o completa de seus componentes e arquitetura, o que o capacitar\u00e1 a aproveitar todo o potencial do Zabbix, independentemente da complexidade de seu ambiente.</p> <p>Vamos embarcar nessa jornada detalhada pelo Zabbix e nos equipar com o conhecimento necess\u00e1rio para iniciar e otimizar uma solu\u00e7\u00e3o de monitoramento avan\u00e7ada.</p>"},{"location":"pt_BR/ch01-zabbix-components/ha-setup/","title":"Configura\u00e7\u00e3o do HA","text":"<p>Nesta se\u00e7\u00e3o, definiremos o Zabbix em uma configura\u00e7\u00e3o de alta disponibilidade (HA). Esse recurso, introduzido no Zabbix 6, \u00e9 um aprimoramento crucial que garante o monitoramento cont\u00ednuo mesmo se um servidor Zabbix falhar. Com a HA, quando um servidor Zabbix fica inativo, outro pode assumir o controle sem problemas.</p> <p>Para este guia, usaremos dois servidores Zabbix e um banco de dados, mas a configura\u00e7\u00e3o permite adicionar mais servidores Zabbix, se necess\u00e1rio.</p> <p></p> <p>1.1 Configura\u00e7\u00e3o de HA</p> <p>\u00c9 importante observar que a configura\u00e7\u00e3o do Zabbix HA \u00e9 simples, fornecendo redund\u00e2ncia sem recursos complexos, como balanceamento de carga.</p> <p>Assim como em nossa configura\u00e7\u00e3o b\u00e1sica, documentaremos os principais detalhes dos servidores nessa configura\u00e7\u00e3o de HA. Abaixo est\u00e1 a lista de servidores e um local para adicionar seus respectivos endere\u00e7os IP para sua conveni\u00eancia:</p> Servidor Endere\u00e7o IP Servidor Zabbix 1 Servidor Zabbix 2 Banco de dados IP virtual Nota <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#instalacao-do-banco-de-dados","title":"Instala\u00e7\u00e3o do banco de dados","text":"<p>Consulte o cap\u00edtulo Instala\u00e7\u00e3o b\u00e1sica para obter instru\u00e7\u00f5es detalhadas sobre a configura\u00e7\u00e3o do banco de dados. Esse cap\u00edtulo fornece orienta\u00e7\u00e3o passo a passo sobre a instala\u00e7\u00e3o de um banco de dados PostgreSQL ou MariaDB em um n\u00f3 dedicado que executa o Ubuntu ou o Rocky Linux. As mesmas etapas de instala\u00e7\u00e3o se aplicam \u00e0 configura\u00e7\u00e3o do banco de dados para essa instala\u00e7\u00e3o.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#instalando-o-cluster-no-zabbix","title":"Instalando o cluster no Zabbix","text":"<p>A configura\u00e7\u00e3o de um cluster no Zabbix envolve a configura\u00e7\u00e3o de v\u00e1rios servidores Zabbix para trabalharem juntos, proporcionando alta disponibilidade. Embora o processo seja semelhante \u00e0 configura\u00e7\u00e3o de um \u00fanico servidor Zabbix, h\u00e1 etapas adicionais de configura\u00e7\u00e3o necess\u00e1rias para ativar a HA (High Availability).</p> <p>Adicione os Reposit\u00f3rios Zabbix aos seus servidores.</p> <p>Primeiro, adicione o reposit\u00f3rio Zabbix a ambos os servidores Zabbix:</p> <p>adicionar reposit\u00f3rio zabbix</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>Quando isso for feito, poderemos instalar os pacotes do servidor zabbix.</p> <p>instalar pacotes do servidor zabbix</p> <p>Redhat</p> <p><pre><code>dnf install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu</p> <p><pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#configuracao-do-zabbix-server-1","title":"Configura\u00e7\u00e3o do Zabbix Server 1","text":"<p>Edite o arquivo de configura\u00e7\u00e3o do servidor Zabbix,</p> <p>edit the server config file</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the zabbix-server service on each:</p> <p>restart zabbix-server service</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> Nota <p>The <code>NodeAddress</code> must match the IP or FQDN name of the Zabbix server node. Without this parameter the Zabbix front-end is unable to connect to the active node. The result will be that the frontend is unable to display the status the queue and other information.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#setting-up-keepalived","title":"Setting up keepalived","text":"Nota <p>Keepalived is like a helper that makes sure one computer takes over if another one stops working. It gives them a shared magic IP address so users don't notice when a server fails. If the main one breaks, the backup jumps in right away. You can replace it with tools like Pacemaker, Corosync, or cloud load balancers that do the same \u201ctake over\u201d job. So let's get started. On both our servers we have to install keepalived.</p> <p>install keepalived</p> <p>Redhat <pre><code>dnf install keepalived\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install keepalived\n</code></pre></p> <p>Next, we need to modify the Keepalived configuration on both servers. While the configurations will be similar, each server requires slight adjustments. We will begin with Server 1. To edit the Keepalived configuration file, use the following command:</p> <p>edit the keepalived config</p> <p>RedHat and Ubuntu <pre><code>sudo vi /etc/keepalived/keepalived.conf\n</code></pre></p> <p>If the file contains any existing content, it should be cleared and replaced with the following lines :</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> Warning <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with something secure. For the virtual_ipaddress use a free IP from your network. This will be used as our VIP.</p> <p>We can now do the same modification on our <code>second</code> Zabbix server. Delete everything again in the same file like we did before and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n       xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1st Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with your password and fill in the virtual_ipaddress as used before.</p> <p>This ends the configuration of keepalived. We can now continue adapting the frontend.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#configure-the-web-server","title":"Configure the web server","text":"<p>The setup process for the frontend follows the same steps outlined in the <code>Basic Installation</code> section under Installing the Frontend. By adhering to these established procedures, we ensure consistency and reliability in the deployment.</p> Warning <p>Ubuntu users need to use the VIP in the setup of Nginx, together with the local IP in the listen directive of the config.</p> Nota <p>Don't forget to configure both front-ends. Also this is a new setup. Keep in mind that with an existing setup we need to comment out the lines  <code>$ZBX_SERVER</code> and <code>$ZBX_SERVER_PORT</code>. Our frontend will check what node is active by reading the node table in the database.</p> <p><pre><code>select * from ha_node;\n</code></pre> <pre><code>zabbix=# select * from ha_node;\n         ha_nodeid         |  name   |   address       | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+-----------------+-------+------------+--------+---------------------------\n cm8agwr2b0001h6kzzsv19ng6 | zabbix1 | xxx.xxx.xxx.xxx | 10051 | 1742133911 |      0 | cm8apvb0c0000jkkzx1ojuhst\n cm8agyv830001ell0m2nq5o6n | zabbix2 | localhost       | 10051 | 1742133911 |      3 | cm8ap7b8u0000jil0845p0w51\n(2 rows)\n</code></pre></p> <p>In this instance, the node <code>zabbix2</code> is identified as the active node, as indicated by its status value of <code>3</code>, which designates an active state. The possible status values are as follows:</p> <ul> <li><code>0</code> \u2013 Multiple nodes can remain in standby mode.</li> <li><code>1</code> \u2013 A previously detected node has been shut down.</li> <li><code>2</code> \u2013 A node was previously detected but became unavailable without a proper   shutdown.</li> <li><code>3</code> \u2013 The node is currently active.</li> </ul> <p>This classification allows for effective monitoring and state management within the cluster.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#conclusao","title":"Conclus\u00e3o","text":"<p>In this chapter, we have successfully set up a high-availability (HA) Zabbix environment by configuring both the Zabbix server and frontend for redundancy. We first established HA for the Zabbix server, ensuring that monitoring services remain available even in the event of a failure. Next, we focused on the frontend, implementing a Virtual IP (VIP) with Keepalived to provide seamless failover and continuous accessibility.</p> <p>Additionally, we configured the firewall to allow Keepalived traffic and ensured that the service starts automatically after a reboot. With this setup, the Zabbix frontend can dynamically switch between servers, minimizing downtime and improving reliability.</p> <p>While database HA is an important consideration, it falls outside the scope of this setup. However, this foundation provides a robust starting point for building a resilient monitoring infrastructure that can be further enhanced as needed.</p>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#perguntas","title":"Perguntas","text":"<ol> <li>What is Zabbix High Availability (HA), and why is it important?</li> <li>How does Zabbix determine which node is active in an HA setup?</li> <li>Can multiple Zabbix nodes be active simultaneously in an HA cluster? Why or    why not?</li> <li>What configuration file(s) are required to enable HA in Zabbix?</li> </ol>","tags":["expert"]},{"location":"pt_BR/ch01-zabbix-components/ha-setup/#urls-uteis","title":"URLs \u00fateis","text":"<ul> <li>https://www.redhat.com/sysadmin/advanced-keepalived</li> <li>https://keepalived.readthedocs.io/en/latest/introduction.html</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/concepts/server/ha</li> </ul>","tags":["expert"]},{"location":"pt_BR/ch02-zabbix-installation/frontend/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page</p> <p>like this where we have our <code>main window</code> in green our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>2.1 Overview</p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons. When we click on the button with the 2 arrows to the left:</p> <p></p> <p>2.2 Collapse</p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state.</p> <p>When you click on the icon that looks like a box with an arrow sticking out, next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>2.3 Hide</p> <p>To bring back our <code>main menu</code> is rather easy, we just look for the button on the left with three horizontal lines and click on it. This will show the <code>main menu</code> but it won't stay. When we click on the box with the arrow now pointing to the bottom right it will keep the <code>main menu</code> back in it's position.</p> <p>Yet another way to make the screen bigger that is quite useful for monitors in <code>NOK teams</code> for example is the <code>kiosk mode</code> button. This one however is located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only the <code>main window</code> to focus on.</p> <p></p> <p>2.4 Expand</p> <p>When we want to leave the kiosk mode, the button will be changed to 2 arrows pointing to the inside of the screen. Pressing this button will revert us back to the original state.</p> <p></p> <p>2.5 Shrink</p> Dica <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode.</p> Note <p>There are many other page parameters we can use. A full list can be found at https://www.zabbix.com/documentation/7.4/en/manual/web_interface/page_parameters Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p>If we type in the search box the word <code>server</code> you will see that we get an overview of all <code>templates</code>, <code>host groups</code> and <code>hosts</code> with the name server in it. That's why this is called the <code>global search</code> box.</p> <p></p> <p>2.6 Global search</p> <p>This is our result after we looked for the word <code>server</code>. If you have a standard Zabbix setup your page should look more or less the same.</p> <p></p> <p>2.7 Global search result</p>","tags":["beginner"]},{"location":"pt_BR/ch02-zabbix-installation/frontend/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have seen so far our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This has a serious impact on what we can see and do in Zabbix as this user has no restrictions. Zabbix works with 3 different levels of users we have the regular <code>users</code>, <code>Zabbix Admin</code> and <code>Zabbix Super Admin</code> users. Let's have a deeper look at the differences :</p> <p></p> <p>2.10 Main menu sections</p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the   yellow part of the <code>main menu</code> and is able to change   our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able to   change the configuration and all the global settings.</li> </ul> <p></p> <p>2.11 Monitoring menu</p> <ul> <li>Problems: This page will give us an overview of all the problems. With   filter we can look at recent problems past problems and problems that are   active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with what's happening on   our hosts and allows us to quickly go to the latest data, graphs and   dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the   information collected from all our hosts.</li> <li>Maps: The location where we can create map that are an overview of our IT   infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can   find the results.</li> </ul> <p></p> <p>2.12 Services menu</p> <ul> <li>Services: This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.</li> </ul> <p></p> <p>2.13 Inventory menu</p> <ul> <li>Overview: A place where we can watch all our inventory data that we have   retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.</li> </ul> <p></p> <p>2.14 Inventory menu</p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a <code>pdf</code> of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in <code>ok</code>/<code>nok</code> state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a <code>NOK</code> state.</li> <li>Audit log: An overview of the user activity that happened on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here. What   mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to   each user.</li> </ul> <p></p> <p>2.15 Data collection</p> <ul> <li>Template groups: A place to logical group all templates together in   different groups. Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together. Host   groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped   together on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance   can be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers   related we can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices,   services,... on our network. This can be done here.</li> </ul> <p></p> <p>2.16 Alerts menu</p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions   we have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.</li> </ul> <p></p> <p>2.17 Users menu</p> <ul> <li>User groups: The <code>User groups</code> menu section enables the creation and   management of user groupings for streamlined access and permission control.</li> <li>User roles: The <code>User roles</code> menu section defines sets of permissions that   can be assigned to individual users, limiting their allowed actions based on   the user type they have within the system.</li> <li>Users: The <code>Users</code> menu section provides the interface for managing   individual user accounts, including creation and modification settings.</li> <li>API tokens: The <code>API tokens</code> menu section manages authentication   credentials specifically designed for programmatic access to the system's   Application Programming Interface (API), enabling secure automation and   integration with external applications.</li> <li>Authentication: The <code>Authentication</code> menu section configures the methods   and settings used to verify user identities and control access to the system.</li> </ul> <p></p> <p>2.18 Administration menu</p> <ul> <li>General: The <code>General</code> menu section within administration allows   configuration of core system-wide settings and parameters.</li> <li>Audit log: The <code>Audit log</code> menu section provides a chronological record of   system activities and user actions for security monitoring and   troubleshooting.</li> <li>Housekeeping: The <code>Housekeeping</code> menu section configures automated   maintenance tasks for managing historical data and system performance.</li> <li>Proxies: The <code>Proxies</code> menu section manages the configuration and   monitoring of proxy servers used for communication with managed hosts in   distributed environments.</li> <li>Macros: The <code>Macros</code> menu section allows the definition and management of   global variables for flexible system configuration.</li> <li>Queue: The <code>Queue</code> menu section provides real-time insight into the   processing status of internal system tasks and data handling.</li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix developers <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didn't made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>","tags":["beginner"]},{"location":"pt_BR/ch02-zabbix-installation/frontend/#conclusao","title":"Conclus\u00e3o","text":"<p>The Zabbix frontend serves as the central command center for monitoring, configuration, and system awareness. In this chapter, you explored how to navigate its interface from dashboards and the customizable main menu to powerful tools like system information and global search. You learned how each menu section (Monitoring, Data Collection, Alerts, Users, Administration, and more) aligns with distinct functions, and how kiosk mode and layout controls help optimize visibility during daily operations.</p> <p>Additionally, the system information widget stands out as a real time diagnostic snapshot, revealing critical metrics such as server status, number of hosts, templates, items, triggers, and user activity all of which aid rapid troubleshooting and performance assessment.</p> <p>By mastering these frontend components, you're now better equipped to confidently navigate Zabbix, manage user access, interpret monitoring data, and maintain your environment more effectively. This foundational knowledge lays the groundwork for deeper exploration into host configuration, authentication mechanisms, and advanced monitoring workflows in the chapters that follow.</p>","tags":["beginner"]},{"location":"pt_BR/ch02-zabbix-installation/frontend/#perguntas","title":"Perguntas","text":"<ul> <li> <p>Which frontend section (Monitoring, Data Collection, Alerts, Users, or   Administration) do you think you'll use most often in your daily work, and   why?</p> </li> <li> <p>How can kiosk mode be useful in a real-world monitoring environment, and what   types of dashboards would you display with it?</p> </li> <li> <p>What insights can the system information widget provide during   troubleshooting, and how might it help identify issues with server   performance?</p> </li> <li> <p>Why is it important to understand the difference between data displayed in   \u201cMonitoring\u201d and configuration options found in \u201cData Collection\u201d?</p> </li> <li> <p>If you were onboarding a new team member, which parts of the frontend would   you show them first, and why?</p> </li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch02-zabbix-installation/frontend/#urls-uteis","title":"URLs \u00fateis","text":"<ul> <li> <p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/dashboards</p> </li> <li> <p>https://blog.zabbix.com/handy-tips-6-organize-your-dashboards-and-create-slideshows-with-dashboard-pages/17511/</p> </li> <li> <p>https://blog.zabbix.com/interactive-dashboard-creation-for-large-organizations-and-msps/30132/</p> </li> </ul>","tags":["beginner"]},{"location":"pt_BR/ch02-zabbix-installation/http/#basic-authentication-in-apache-httpd","title":"Basic authentication in Apache HTTPD","text":"<p>Find <code>&lt;Directory \"/usr/share/zabbix\"&gt;</code> block in Apache HTTPD configuration file that defines your Zabbix WebUI (in my case it is <code>/etc/zabbix/apache.conf</code>) and add these lines:</p> <p>???+ note By default configuration has <code>Require all granted</code>, remove this line.</p> <p>For Ubuntu/Debian: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>For RedHat: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/httpd/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>Do not forget to restart apache2 service after making this change.</p> <p>Create <code>/etc/apache2/.httpasswd</code> (<code>/etc/httpd/.htpassword</code> for RedHat) file that will have all the users with passwords, do it by using <code>htpasswd</code> tool, to add user <code>test</code> execute:</p> <p>For Ubuntu/Debian <pre><code>sudo htpasswd -c /etc/apache2/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>For RedHat <pre><code>sudo htpasswd -c /etc/httpd/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>To add more users to the file repeat the command without <code>-c</code> flag.</p>","tags":["advanced"]},{"location":"pt_BR/ch02-zabbix-installation/http/#conclusao","title":"Conclus\u00e3o","text":"<p>Configuring HTTP level authentication adds a critical layer of access control to your Zabbix Web UI by leveraging your web server's native authentication mechanisms. Whether using Nginx or Apache, this approach ensures that users are prompted for credentials before even reaching Zabbix, effectively guarding against unauthorized access at the HTTP entry point. Key considerations include ensuring that usernames used in the HTTP authentication are already defined within Zabbix itself only the password from the web server matters for credential checks and correctly setting up Zabbix's HTTP authentication settings (such as domain removal and case sensitivity options). By coordinating web server authentication settings with Zabbix's internal configuration, you can achieve seamless and secure user login workflows that blend frontend usability with robust protective measures.</p>","tags":["advanced"]},{"location":"pt_BR/ch02-zabbix-installation/http/#perguntas","title":"Perguntas","text":"<ul> <li> <p>What advantage does HTTP (web server based) authentication provide compared to   Zabbix's internal authentication mechanism? (Consider protection at the web   server layer before the user even reaches the Zabbix UI.)</p> </li> <li> <p>Why is it essential that a user must exist in Zabbix even when HTTP   authentication is enabled and why does the Zabbix password become irrelevant   in that case?</p> </li> <li> <p>What are the configuration options in Zabbix's frontend under \u201cAdministration   \u2192 Authentication\u201d for HTTP authentication, and how might each affect login   behavior? Examples include enabling/disabling case sensitivity, domain   stripping, and choice of login form.</p> </li> <li> <p>Suppose you disable case sensitive logins and maintain both 'Admin' and   'admin' accounts in Zabbix. How will HTTP authentication behave, and what   outcome should you expect?</p> </li> <li> <p>Imagine troubleshooting a login failure when using HTTP authentication: What   steps would you take to ensure the web server\u2019s authentication is configured   correctly before examining Zabbix settings?</p> </li> <li> <p>From a security standpoint, when would HTTP authentication alone be   insufficient and what other authentication methods (e.g., LDAP, SAML, MFA)   might you layer on top for added security?</p> </li> </ul>","tags":["advanced"]},{"location":"pt_BR/ch02-zabbix-installation/http/#urls-uteis","title":"URLs \u00fateis","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/http</p>","tags":["advanced"]},{"location":"pt_BR/ch00-getting-started%20/initial-steps/","title":"Primeiros passos com o Zabbix - Liberando o poder do monitoramento","text":"<p>Bem-vindo ao mundo do Zabbix, uma poderosa solu\u00e7\u00e3o de monitoramento de c\u00f3digo aberto projetada para fornecer informa\u00e7\u00f5es abrangentes sobre sua infraestrutura de TI. Quer voc\u00ea esteja gerenciando uma pequena rede ou supervisionando um sistema corporativo de grande escala, o Zabbix fornece as ferramentas necess\u00e1rias para monitorar o desempenho, detectar problemas e garantir a opera\u00e7\u00e3o tranquila dos seus servi\u00e7os.</p> <p>Neste livro, vamos nos concentrar no Zabbix LTS 8.0, a vers\u00e3o de suporte de longo prazo que garante estabilidade e confiabilidade para suas necessidades de monitoramento. Exploraremos seu amplo conjunto de recursos, incluindo a rec\u00e9m-introduzida funcionalidade de relat\u00f3rios ** e o monitoramento da Web incorporado ** com base no driver Selenium, que permite o monitoramento sofisticado da experi\u00eancia do usu\u00e1rio final por meio de intera\u00e7\u00f5es automatizadas do navegador.</p> <p>O Zabbix \u00e9 mais do que uma simples ferramenta de monitoramento. Ele oferece uma ampla gama de recursos que permitem a voc\u00ea:</p> <ul> <li>Monitore diversos ambientes: Acompanhe o desempenho e a disponibilidade de   servidores, m\u00e1quinas virtuais, dispositivos de rede, bancos de dados e   aplicativos.</li> <li>Crie visualiza\u00e7\u00f5es din\u00e2micas: Use pain\u00e9is, gr\u00e1ficos, mapas e telas para   visualizar dados e obter uma vis\u00e3o geral da integridade do seu sistema em um   piscar de olhos.</li> <li>Configure mecanismos de alerta complexos: Defina acionadores e a\u00e7\u00f5es que o   notificam sobre poss\u00edveis problemas antes que eles se tornem cr\u00edticos, usando   v\u00e1rios canais, como e-mail, SMS e integra\u00e7\u00f5es com servi\u00e7os externos.</li> <li>Automatize as tarefas de monitoramento: Aproveite a descoberta autom\u00e1tica   e o registro autom\u00e1tico para acompanhar as mudan\u00e7as nos ambientes sem   interven\u00e7\u00e3o manual.</li> <li>Personalize e amplie: Crie scripts, modelos e integra\u00e7\u00f5es personalizados   para adaptar o Zabbix \u00e0s suas necessidades espec\u00edficas.</li> </ul>"},{"location":"ru/Guidelines/","title":"\u0420\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u043e","text":""},{"location":"ru/Guidelines/#_2","title":"\u041a\u0430\u043a \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434","text":"<ul> <li>\u041f\u043e\u0434\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0430\u043a\u0442   \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438   \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435</li> <li>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u044d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u0432 \u0441\u0432\u043e\u0439 \u0430\u043a\u043a\u0430\u0443\u043d\u0442 Github</li> <li> <p>\u041a\u043b\u043e\u043d\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u043d\u0430 \u0441\u0432\u043e\u0439 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440</p> </li> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b Mkdocs, \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435   \u0444\u0430\u0439\u043b how-to-install-mkdocs.md \u0432 \u043a\u043e\u0440\u043d\u0435\u0432\u043e\u043c \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0435</p> </li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443 \u0434\u043b\u044f \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439<ul> <li>git branch \"&lt;\u0438\u043c\u044f_\u0432\u0430\u0448\u0435\u0439_\u0432\u0435\u0442\u0432\u0438&gt;\"</li> <li>git checkout \"&lt;\u0438\u043c\u044f_\u0432\u0430\u0448\u0435\u0439_\u0432\u0435\u0442\u0432\u0438&gt;\"</li> </ul> </li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0438 \u0437\u0430\u043a\u043e\u043c\u043c\u0438\u0442\u044c\u0442\u0435 \u0438\u0445<ul> <li>git add \"\u0432\u0430\u0448_\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0439_\u0444\u0430\u0439\u043b\"</li> <li>git commit -m \"\u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043f\u043e\u043b\u0435\u0437\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043f\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u0443\"</li> </ul> </li> <li>\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u0443\u044e \u0432\u0435\u0442\u043a\u0443<ul> <li>git checkout main</li> </ul> </li> <li>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u0441\u043b\u0438\u0442\u044b\u0435 \u0438\u0437 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0432\u0435\u0442\u043a\u0438     (main)<ul> <li>git pull origin main</li> </ul> </li> <li>\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u0432\u0435\u0442\u043a\u0443 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439<ul> <li>git merge \"&lt;\u0438\u043c\u044f_\u0432\u0430\u0448\u0435\u0439_\u0432\u0435\u0442\u043a\u0438&gt;\"</li> <li>git push</li> </ul> </li> <li>\u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0432\u0435\u0442\u043a\u0438<ul> <li>git branch -d \"&lt;\u0438\u043c\u044f_\u0432\u0430\u0448\u0435\u0439_\u0432\u0435\u0442\u043a\u0438&gt;\"</li> </ul> </li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 pull request (\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u0432 \u043a\u043e\u0434), \u0447\u0442\u043e\u0431\u044b \u043c\u044b \u043c\u043e\u0433\u043b\u0438   \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0435\u0433\u043e :)</li> <li>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u044d\u0442\u0438\u043c   \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c   \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0442\u0435\u043c\u044b.</li> </ul>"},{"location":"ru/ch00-getting-started/Requirements/","title":"\u0421\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>\u0423 Zabbix \u0435\u0441\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0430\u043f\u043f\u0430\u0440\u0430\u0442\u043d\u043e\u043c\u0443 \u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u043c\u0443 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b, \u0438 \u044d\u0442\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c. \u041e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0432\u0430\u0448\u0435\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0442\u0435\u043a\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f. \u041f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u043f\u0440\u0438\u043e\u0431\u0440\u0435\u0442\u0430\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043b\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0432\u0435\u0440\u0441\u0438\u044e \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 Zabbix, \u0447\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0432\u0435\u0440\u0441\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u044b \u043f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f https://www.zabbix.com/documentation/current/en/manual/installation/requirements. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e Zabbix \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.</p> <p>\u0414\u043b\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0438\u043b\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a Zabbix \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0444\u043e\u0440\u0442\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043d\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u0435 \u0441 2 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430\u043c\u0438 \u0438 8 \u0413\u0411 \u043e\u043f\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u0430\u0448\u0435\u0439 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b \u0438 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0443\u0434\u0443\u0442 \u0432\u043b\u0438\u044f\u0442\u044c \u043d\u0430 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0430\u043c. \u0412 \u0441\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0430\u0445 \u044f \u0441\u043e\u0432\u0435\u0442\u0443\u044e \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u0441 \u043c\u0430\u043b\u043e\u0433\u043e \u0438 \u043d\u0430\u0440\u0430\u0449\u0438\u0432\u0430\u0442\u044c \u043c\u0430\u0441\u0448\u0442\u0430\u0431 \u043f\u043e \u043c\u0435\u0440\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438.</p> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b (\u0441\u0435\u0440\u0432\u0435\u0440 Zabbix, \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440) \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u0435 \u0438\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0438\u0445 \u043f\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c. \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0434\u0435\u0442\u0430\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430:</p> \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 IP-\u0430\u0434\u0440\u0435\u0441 \u0421\u0435\u0440\u0432\u0435\u0440 Zabbix \u0421\u0435\u0440\u0432\u0435\u0440 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0412\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Note <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_3","title":"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u041e\u0421","text":"<p>\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0441\u0438\u0441\u0442\u0435\u043c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u043e \u0441\u0432\u043e\u0438\u043c\u0438 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430\u043c\u0438 \u0438 \u043b\u043e\u044f\u043b\u044c\u043d\u043e\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0431\u0430\u0437\u043e\u0439. \u0425\u043e\u0442\u044f Zabbix \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0430 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0441\u043f\u0435\u043a\u0442\u0440 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u041e\u0421 \u0431\u044b\u043b\u043e \u0431\u044b \u043d\u0435\u043f\u0440\u0430\u043a\u0442\u0438\u0447\u043d\u043e. \u0427\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u0443 \u043a\u043d\u0438\u0433\u0443 \u0446\u0435\u043b\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0439 \u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0439, \u043c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\u0445: \u0434\u0438\u0441\u0442\u0440\u0438\u0431\u0443\u0442\u0438\u0432\u0430\u0445 \u043d\u0430 \u0431\u0430\u0437\u0435 Ubuntu \u0438 Red Hat.</p> <p>\u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043d\u0435 \u0443 \u0432\u0441\u0435\u0445 \u0435\u0441\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u0434\u043f\u0438\u0441\u043a\u0435 \u043d\u0430 Red Hat Enterprise Linux (RHEL), \u0434\u0430\u0436\u0435 \u0435\u0441\u043b\u0438 \u0443\u0447\u0435\u0442\u043d\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f, \u043c\u044b \u0432\u044b\u0431\u0440\u0430\u043b\u0438 Rocky Linux \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043b\u0435\u0433\u043a\u043e\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0439 \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u044b. \u0412 \u044d\u0442\u043e\u0439 \u043a\u043d\u0438\u0433\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c Rocky Linux 9.x \u0438 Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_4","title":"\u0411\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440","text":"<p>\u041f\u0435\u0440\u0435\u0434 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 Zabbix \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u044c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443. \u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u043e\u0440\u0442\u044b. \u0414\u043b\u044f Zabbix \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043f\u043e\u0440\u0442\u0443 <code>10051/tcp</code>, \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0442\u0440\u0430\u043f\u043f\u0435\u0440 Zabbix \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u044d\u0442\u043e\u0442 \u043f\u043e\u0440\u0442 \u0432 \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440\u0435:</p> <p>\u0420\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0442\u0440\u0430\u043f\u043f\u0435\u0440\u0443 Zabbix</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>\u0415\u0441\u043b\u0438 \u0441\u043b\u0443\u0436\u0431\u0430 \u043d\u0435 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0435\u0442\u0441\u044f, \u0442\u043e \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u0440\u0442:</p> <p>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0440\u0442 \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d\u0438 \u0441\u043b\u0443\u0436\u0431\u044b</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Note <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043e\u043d \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440\u0430 \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440...</p> <p>\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0437\u043e\u043d\u0443 firewalld</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u043e\u043d\u044b, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u043e\u043d\u044b</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>block dmz drop external home internal nm-shared postgresql-access public trusted work</p> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043e\u043d \u0432 firewalld \u0434\u043b\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u0440\u0430\u0432\u0438\u043b \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440\u0430 \u0434\u043b\u044f PostgreSQL \u0434\u0430\u0435\u0442 \u0440\u044f\u0434 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u0432 \u043f\u043b\u0430\u043d\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438, \u0433\u0438\u0431\u043a\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0442\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u0412\u043e\u0442 \u043f\u043e\u0447\u0435\u043c\u0443 \u0437\u043e\u043d\u044b \u043f\u043e\u043b\u0435\u0437\u043d\u044b:</p> <ul> <li>\u0414\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u0430 :</li> <li>\u0417\u043e\u043d\u044b firewalld \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0443\u0440\u043e\u0432\u043d\u0438 \u0434\u043e\u0432\u0435\u0440\u0438\u044f \u0434\u043b\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445     \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0438 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u043e\u0432 IP-\u0430\u0434\u0440\u0435\u0441\u043e\u0432. \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u043a\u0430\u043a\u0438\u043c     \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043a PostgreSQL \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0445 \u0443\u0440\u043e\u0432\u043d\u044f     \u0434\u043e\u0432\u0435\u0440\u0438\u044f.</li> <li>\u0423\u043f\u0440\u043e\u0449\u0435\u043d\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438:</li> <li>\u0412\u043c\u0435\u0441\u0442\u043e \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 iptables, \u0437\u043e\u043d\u044b     \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438     \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u0446\u0435\u043d\u0430\u0440\u0438\u0435\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041f\u043e\u0432\u044b\u0448\u0435\u043d\u043d\u0430\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c:</li> <li>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u0432\u0430\u044f \u0434\u043e\u0441\u0442\u0443\u043f \u043a PostgreSQL \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0437\u043e\u043d\u0435, \u0432\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0435     \u043d\u0435\u0441\u0430\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438\u0437 \u0434\u0440\u0443\u0433\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0438\u043b\u0438 \u0441\u0435\u0442\u0435\u0439.</li> <li>\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f:</li> <li>firewalld \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432\u0438\u043b, \u0447\u0442\u043e     \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u043d\u043e\u0441\u0438\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f, \u043d\u0435 \u043d\u0430\u0440\u0443\u0448\u0430\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0439.</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432:</li> <li>\u0415\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432, \u0437\u043e\u043d\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c     \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u043e\u043b\u0438\u0442\u0438\u043a\u0438 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430.</li> </ul> <p>\u0415\u0441\u043b\u0438 \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043c\u0435\u0441\u0442\u0435, \u044d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:</p> <p>Firewalld \u0441 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0435\u0439 \u0437\u043e\u043d\u044b</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>\u0413\u0434\u0435 <code>IP-\u0430\u0434\u0440\u0435\u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430</code> \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_5","title":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u0438","text":"<p>\u0415\u0449\u0435 \u043e\u0434\u0438\u043d \u0432\u0430\u0436\u043d\u044b\u0439 \u0448\u0430\u0433 - \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0438 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 Zabbix \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e NTP-\u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u043e\u0447\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0436\u0438\u0437\u043d\u0435\u043d\u043d\u043e \u0432\u0430\u0436\u043d\u0430 \u0434\u043b\u044f Zabbix, \u043a\u0430\u043a \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u0442. \u0415\u0441\u043b\u0438 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u0443\u0437\u043b\u043e\u0432 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441, \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u0443\u0442\u0430\u043d\u0438\u0446\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0440\u0438 \u0440\u0430\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u0432 Zabbix, \u043a\u043e\u0442\u043e\u0440\u0430\u044f, \u043a\u0430\u043a \u043e\u043a\u0430\u0437\u0430\u043b\u043e\u0441\u044c, \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0430\u0441\u043e\u0432 \u0440\u0430\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043d\u0430 \u0441\u0430\u043c\u043e\u043c \u0434\u0435\u043b\u0435.</p> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0438 \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c chrony - \u043d\u0430\u0448 NTP-\u043a\u043b\u0438\u0435\u043d\u0442, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c NTP-\u043a\u043b\u0438\u0435\u043d\u0442</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e Chrony \u0432\u043a\u043b\u044e\u0447\u0435\u043d \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0432 \u0435\u0433\u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 chronyd</p> <pre><code>systemctl status chronyd\n</code></pre> \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 apt \u0438\u043b\u0438 dnf <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>\u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 Chrony \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043c\u043e\u0436\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b <code>timedatectl</code>:</p> <p>\u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e \u0432\u0440\u0435\u043c\u0435\u043d\u0438</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0441\u043b\u0443\u0436\u0431\u0430 Chrony \u0430\u043a\u0442\u0438\u0432\u043d\u0430 (\u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u0435\u0441\u044c \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0448\u0430\u0433\u0430\u043c). \u0427\u0442\u043e\u0431\u044b \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0447\u0430\u0441\u043e\u0432\u044b\u0435 \u043f\u043e\u044f\u0441\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <p>\u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0430\u0441\u043e\u0432\u044b\u0445 \u043f\u043e\u044f\u0441\u043e\u0432</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>\u042d\u0442\u0430 \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0447\u0430\u0441\u043e\u0432\u044b\u0445 \u043f\u043e\u044f\u0441\u043e\u0432, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u043b\u0438\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:</p> <p>\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0447\u0430\u0441\u043e\u0432\u044b\u0445 \u043f\u043e\u044f\u0441\u043e\u0432</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0432 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b:</p> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>\u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e, \u0441\u043d\u043e\u0432\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 <code>timedatectl</code>:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0438 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#chrony","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u0438 Chrony","text":"<p>\u0427\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e Chrony \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u043c\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u0443:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 chrony</p> <pre><code>chronyc\n</code></pre> <p>\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0432\u044b\u0432\u043e\u0434 chrony</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0432\u0432\u043e\u0434\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 Chrony \u0432\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u043e\u0432:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b NTP \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0432\u0430\u0448\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430. \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0438\u043b\u0438, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u041d\u0430\u0439\u0442\u0438 \u043c\u0435\u0441\u0442\u043d\u044b\u0435 NTP-\u0441\u0435\u0440\u0432\u0435\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u0437\u0434\u0435\u0441\u044c: www.ntppool.org.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_6","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0435 \u0444\u0430\u0439\u043b <code>/etc/chrony.conf</code> \u0434\u043b\u044f \u0441\u0438\u0441\u0442\u0435\u043c \u043d\u0430 \u0431\u0430\u0437\u0435 Red Hat, \u0430 \u0435\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Ubuntu, \u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0439\u0442\u0435 <code>/etc/chrony/chrony.conf</code>. \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 NTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0431\u043b\u0438\u0437\u043a\u0438\u0439 \u043a \u0432\u0430\u0448\u0435\u043c\u0443 \u043c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e.</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438:</p> <p>\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043f\u0443\u043b\u0430 ntp</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0432\u043d\u0435\u0441\u0435\u043d\u0438\u044f \u044d\u0442\u0438\u0445 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u043b\u0443\u0436\u0431\u0443 Chrony \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438:</p> <p>\u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u0441\u043b\u0443\u0436\u0431\u044b chrony</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_7","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u0438","text":"<p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0435\u0449\u0435 \u0440\u0430\u0437, \u0447\u0442\u043e\u0431\u044b \u0443\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e \u043d\u043e\u0432\u044b\u0435 \u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f:</p> <p>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438 chrony</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u043c\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u0432:</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043c\u0435\u0441\u0442\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_8","title":"\u0417\u0430\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435","text":"<p>\u041a\u0430\u043a \u043c\u044b \u0443\u0436\u0435 \u0443\u0431\u0435\u0434\u0438\u043b\u0438\u0441\u044c, \u043f\u0440\u0435\u0436\u0434\u0435 \u0447\u0435\u043c \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043f\u0430\u043a\u0435\u0442\u044b Zabbix, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u0441\u0440\u0435\u0434\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f. \u041f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043f\u0443\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440 \u0438 \u0442\u043e\u0447\u043d\u044b\u0439 \u0443\u0447\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 - \u044d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438, \u0430 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0435 \u0441\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438. \u0417\u0430\u043b\u043e\u0436\u0438\u0432 \u044d\u0442\u0443 \u043e\u0441\u043d\u043e\u0432\u0443, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u0442\u044c \u043a \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 Zabbix, \u0437\u043d\u0430\u044f, \u0447\u0442\u043e \u0431\u0430\u0437\u043e\u0432\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0433\u043e\u0442\u043e\u0432\u0430 \u043a \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044e \u0437\u0430\u0434\u0430\u0447\u0438.</p>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#_9","title":"\u0412\u043e\u043f\u0440\u043e\u0441\u044b","text":"<ul> <li>\u041a\u0430\u043a \u0432\u044b \u0434\u0443\u043c\u0430\u0435\u0442\u0435, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u043e\u0447\u043d\u0430\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0442\u0430\u043a \u0432\u0430\u0436\u043d\u0430 \u0434\u043b\u044f \u0442\u0430\u043a\u043e\u0439   \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430, \u043a\u0430\u043a Zabbix?</li> <li>\u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u0444\u0443\u043d\u0434\u0430\u043c\u0435\u043d\u0442 \u0437\u0430\u043b\u043e\u0436\u0435\u043d, \u0447\u0442\u043e, \u043f\u043e \u0432\u0430\u0448\u0435\u043c\u0443 \u043c\u043d\u0435\u043d\u0438\u044e, \u0431\u0443\u0434\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u043c \u0448\u0430\u0433\u043e\u043c \u0432   \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 Zabbix?</li> <li>\u041f\u0440\u0438\u0441\u0442\u0443\u043f\u0430\u044f \u043a \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 Zabbix, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0434\u0443\u043c\u0430\u0435\u043c \u043e \u0441\u0435\u0442\u0435\u0432\u043e\u043c \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0438. \u041a\u0430\u043a\u0438\u0435   \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u043e\u0440\u0442\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0431\u0440\u0430\u043d\u0434\u043c\u0430\u0443\u044d\u0440, \u0447\u0442\u043e\u0431\u044b \u0441\u0435\u0440\u0432\u0435\u0440 Zabbix \u0438   \u0430\u0433\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u043b\u0438 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c?</li> </ul>","tags":["beginner"]},{"location":"ru/ch00-getting-started/Requirements/#url-","title":"\u041f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 URL-\u0430\u0434\u0440\u0435\u0441\u0430","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"","title":"Welcome","text":"<p>This book is born from a simple desire: to give back. After years of working with Zabbix, and authoring previous many other publications about the platform, Patrik and Nathan felt a strong pull to share their knowledge in a way that was accessible to everyone. That's how the initial idea of a free, online Zabbix resource was conceived \u2013 a community-driven project dedicated to empowering users.</p> <p>As the online resource grew, so did the vision. We recognized the potential to create something even more impactful. This led to the formation of a foundation, dedicated to ensuring the long-term sustainability and growth of this community effort. This book, a tangible culmination of that vision, represents the next step. All profits generated from its sales will be reinvested back into the community, enabling us to further expand and enhance the resources and support we offer. This is more than just a book; it's a testament to the power of shared knowledge and a commitment to fostering a thriving Zabbix community.\"</p>"},{"location":"#license","title":"License","text":"<p>Please note: The english version is the primary source document. Translations are provided for convenience, but this version is considered the most accurate.</p> <p>Please before you start take a look at our most updated license : License on Github.</p> <p>The Zabbix Book is a freely accessible resource designed to help users understand and master Zabbix. Contributions are highly encouraged to improve and expand its content. However, the book is distributed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 (CC BY-NC-SA 4.0) license, meaning it is free for non-commercial use only.</p> <p>Contributors should be aware that:</p> <ul> <li>By contributing to this work, you irrevocably assign and transfer all rights, title, and interest in your contributions to The Monitoring Penmasters Foundation, including any associated intellectual property rights, to the fullest extent permitted by law.</li> <li>The Monitoring Penmasters Foundation reserves the right to use, reproduce, modify, distribute, and commercially exploit any contributed material in any form, including but not limited to the publication of physical and digital books.</li> <li>All contributors must sign a Deed of Transfer of Intellectual Property Rights before making any contributions, ensuring the proper transfer of rights and handling of the content by The Monitoring Penmasters Foundation. Any contributions without a signed Deed of Transfer of Intellectual Property Rights cannot be accepted.</li> <li>All profits generated will be used by The Monitoring Penmasters Foundation to cover operational expenses and to sponsor other open-source projects, as determined by the foundation.</li> </ul> <p>Your contributions are invaluable and will help make The Zabbix Book an even greater resource for the entire community!</p> <p>Shield: </p> <p>Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</p> <p></p>"},{"location":"Guidelines/","title":"Guidelines","text":""},{"location":"Guidelines/#how-to-contribute","title":"How to contribute","text":"<ul> <li>Sign the deed of transfer preferable electronically</li> <li>Clone this project to your Github account</li> <li> <p>Clone the repository to you pc</p> </li> <li> <p>Install the needed software for Mkdocs to work,   check the file in the root folder how-to-install-mkdocs.md</p> </li> <li>Create a new branch to make your changes<ul> <li>git branch \"&lt;your branch name&gt;\"</li> <li>git checkout \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Make the changes you want and commit them<ul> <li>git add \"files you changed\"</li> <li>git commit -m \"add useful commit info\"</li> </ul> </li> <li>Return back to the main branch<ul> <li>git checkout main</li> </ul> </li> <li>Make sure you have the latest changes merged from main<ul> <li>git pull origin main</li> </ul> </li> <li>Merge your branch into the main branch<ul> <li>git merge \"&lt;your branch name&gt;\"</li> <li>git push</li> </ul> </li> <li>cleanup your branch<ul> <li>git branch -d \"&lt;your branch name&gt;\"</li> </ul> </li> <li>Create a pull requests so that we can merge it :)</li> <li>Follow these guidelines when you write a topic.</li> </ul>"},{"location":"Supporters-Contributors/","title":"Supporters &amp; Contributors","text":"<p>This book would not have been possible without the dedication, generosity, and expertise of many individuals and organizations. We extend our heartfelt thanks to everyone who has supported this project, whether through financial contributions, technical expertise, content reviews, or community engagement.</p>"},{"location":"Supporters-Contributors/#our-sponsors","title":"Our Sponsors","text":"<p>We are deeply grateful to the sponsors who have provided financial or material support to help bring this book to life. Their contributions have enabled us to maintain high-quality content, support open-source initiatives, and ensure that this book remains accessible to as many people as possible.</p> <ul> <li>OICTS : https://oicts.com/</li> <li>ZABBIX : https://www.zabbix.com/</li> </ul>"},{"location":"Supporters-Contributors/#our-contributors","title":"Our Contributors","text":"<p>This book is a community effort, and we sincerely appreciate the time and knowledge shared by our contributors. From writing and reviewing content to providing feedback and sharing expertise, your efforts have helped shape this resource into something valuable for the monitoring and open-source communities.</p> <ul> <li>Patrik Uytterhoeven : http://github.com/Trikke76</li> <li>Nathan Liefting : https://github.com/larcorba</li> <li>Evgeny Yurchenko: https://github.com/BGmot</li> <li>Nikolas Garofil: https://github.com/ngaro</li> <li>Aigars Kadikis : https://github.com/aigarskadikis</li> </ul> <p>A list of all the contributors who where so kind to fix typos etc .. can be found here : https://github.com/penmasters/zabbix-book/graphs/contributors</p>"},{"location":"Supporters-Contributors/#translators","title":"Translators","text":"<ul> <li>Nicolas Hermel : https://github.com/wityender</li> <li>Dimitry Q : https://github.com/krotesk</li> </ul>"},{"location":"Supporters-Contributors/#special-thanks-to-our-board-members","title":"Special Thanks to Our Board Members","text":"<p>A special acknowledgment goes to the members of our board, whose vision, leadership, and dedication have guided this project from its inception. Their commitment to open-source principles and knowledge sharing has been instrumental in making this book a reality.</p> <ul> <li>Patrik Uytterhoeven : http://github.com/Trikke76</li> <li>Nathan Liefting : https://github.com/larcorba</li> <li>Alexei Vladishev :</li> </ul>"},{"location":"Supporters-Contributors/#every-contribution-matters","title":"Every Contribution Matters","text":"<p>Open-source thrives on collaboration, and even the smallest contributions help make a difference. Whether it was reporting a typo, suggesting an improvement, opening an issue, or simply sharing feedback, we appreciate everyone who took the time to help refine and improve this book. Your efforts, no matter how small, are a valuable part of this project. Check out Everyone who created an issue.</p>"},{"location":"Supporters-Contributors/#join-the-community","title":"Join the Community","text":"<p>We welcome new contributors and supporters! If you'd like to get involved whether by contributing content, providing feedback, or supporting this initiative you can find more details on how to participate at Guidelines.</p> <p>Thank you for being part of this journey and helping us build a valuable resource for the open-source community!</p>"},{"location":"tags/","title":"Tags","text":"<p>Use tags to quickly browse per level.</p> <ul> <li>beginner \u2014 Assumes no or minimal prior Zabbix knowledge. Covers basic concepts, installation, simple use cases.</li> <li>advanced \u2014 Assumes the reader is comfortable with core Zabbix features and configurations; covers more involved setups, integrations, intermediate complexity.</li> <li>expert \u2014 Covers high-end topics: scaling, HA, deep performance tuning, custom extensions, edge cases, complex architectures, security hardening.</li> </ul>"},{"location":"tags/#tag:advanced","title":"advanced","text":"<ul> <li>            Active and Passive proxies          </li> <li>            Browser item          </li> <li>            Calculated items          </li> <li>            Custom LLD          </li> <li>            Database checks via agent          </li> <li>            Database checks via odbc          </li> <li>            Dependent LLD          </li> <li>            External checks          </li> <li>            Frontend Scripts          </li> <li>            Global scripts          </li> <li>            HTTP          </li> <li>            Http          </li> <li>            IPMI          </li> <li>            Media types          </li> <li>            Monitoring Java Applications with JMX          </li> <li>            Multi factor authentication          </li> <li>            Preprocessing          </li> <li>            Proxy groups          </li> <li>            SAML          </li> <li>            SNMP Polling          </li> <li>            SNMP Trapping          </li> <li>            Scripts          </li> <li>            Triggers          </li> <li>            Web services          </li> <li>            Working with templates          </li> <li>            Zabbix Agent Active monitoring          </li> <li>            Zabbix Agent installation and Passive monitoring          </li> <li>            Zabbix trapper          </li> </ul>"},{"location":"tags/#tag:beginner","title":"beginner","text":"<ul> <li>            Basic Installation          </li> <li>            Dataflow          </li> <li>            Dependent items          </li> <li>            Frontend explained          </li> <li>            Host Groups          </li> <li>            Host Interfaces          </li> <li>            Hosts          </li> <li>            Proxy basics          </li> <li>            SSH / Telnet          </li> <li>            Simple checks          </li> <li>            System Requirements          </li> <li>            User Groups          </li> </ul>"},{"location":"tags/#tag:expert","title":"expert","text":"<ul> <li>            Actions          </li> <li>            Advanced triggers          </li> <li>            Browser item          </li> <li>            Global scripts          </li> <li>            HA Setup          </li> <li>            LDAP / AD          </li> <li>            Running Proxies as containers          </li> <li>            Script item          </li> <li>            Scripts          </li> <li>            Zabbix Internals          </li> </ul>"},{"location":"ch00-getting-started/Requirements/","title":"System Requirements","text":"","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#requirements","title":"Requirements","text":"<p>Zabbix has specific hardware and software requirements that must be met, and these requirements may change over time. They also depend on the size of your setup and the software stack you select. Before purchasing hardware or installing a database version, it's essential to consult the Zabbix documentation for the most up-to-date requirements for the version you plan to install. You can find the latest requirements https://www.zabbix.com/documentation/current/en/manual/installation/requirements. Make sure to select the correct Zabbix version from the list.</p> <p>For smaller or test setups, Zabbix can comfortably run on a system with 2 CPUs and 8 GB of RAM. However, your setup size, the number of items you monitor, the triggers you create, and how long you plan to retain data will impact resource requirements. In today's virtualised environments, my advice is to start small and scale up as needed.</p> <p>You can install all components (Zabbix server, database, web server) on a single machine or distribute them across multiple servers. For simplicity, take note of the server details:</p> Component IP Address Zabbix Server Database Server Web Server Tip <p>Zabbix package names often use dashes (<code>-</code>) in their names, such as <code>zabbix-get</code> or <code>zabbix-sender</code>, but the binaries themselves may use underscores (<code>_</code>), like <code>zabbix_sender</code> or <code>zabbix_server</code>. This naming discrepancy can sometimes be confusing, particularly if you are using packages from non-official Zabbix repositories. Always check if a binary uses a dash or an underscore when troubleshooting.</p> Note <p>Starting from Zabbix 7.2, only MySQL (including its forks) and PostgreSQL are supported as back-end databases. Earlier versions of Zabbix also included support for Oracle Database; however, this support was discontinued with Zabbix 7.0 LTS, making it the last LTS version to officially support Oracle DB.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#basic-os-configuration","title":"Basic OS Configuration","text":"<p>Operating systems, so many choices, each with its own advantages and loyal user base. While Zabbix can be installed on a wide range of platforms, documenting the process for every available OS would be impractical. To keep this book focused and efficient, we have chosen to cover only the most widely used options: Ubuntu and Red Hat based distributions.</p> <p>Since not everyone has access to a Red Hat Enterprise Linux (RHEL) subscription even though a developer account provides limited access we have opted for Rocky Linux as a readily available alternative. For this book, we will be using Rocky Linux 9.x and Ubuntu LTS 24.04.x.</p> <ul> <li>https://rockylinux.org/</li> <li>https://ubuntu.com/</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#firewall","title":"Firewall","text":"<p>Before installing Zabbix, it's essential to properly prepare the operating system. The first step is to ensure that the firewall is installed and configured.</p> <p>To install and enable the firewall, run the following command:</p> <p>Install and enable the firewall</p> <p>Red Hat <pre><code>dnf install firewalld\nsystemctl enable firewalld --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install ufw\nsudo ufw enable\n</code></pre></p> <p>Once installed, you can configure the necessary ports. For Zabbix, we need to allow access to port <code>10051/tcp</code>, which is where the Zabbix trapper listens for incoming data. Use the following command to open this port in the firewall:</p> <p>Allow Zabbix trapper access</p> <p>Red Hat <pre><code>firewall-cmd --add-service=zabbix-server --permanent\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>If the service is not recognized, you can manually specify the port:</p> <p>Add port instead of the service name</p> <pre><code>firewall-cmd --add-port=10051/tcp --permanent\n</code></pre> Note <p>\"Firewalld is the replacement for iptables in RHEL-based systems and allows changes to take effect immediately without needing to restart the service. If your distribution does not use Firewalld, refer to your OS documentation for the appropriate firewall configuration steps.\" Ubuntu makes use of UFW and is merely a frontend for iptables.</p> <p>An alternative approach is to define dedicated firewall zones for specific use cases. For example...</p> <p>Create a firewalld zone</p> <pre><code>firewall-cmd --new-zone=postgresql-access --permanent\n</code></pre> <p>You can confirm the creation of the zone by executing the following command:</p> <p>Verify the zone creation</p> <pre><code>firewall-cmd --get-zones\n</code></pre> <p>block dmz drop external home internal nm-shared postgresql-access public trusted work</p> <p>Using zones in firewalld to configure firewall rules for PostgreSQL provides several advantages in terms of security, flexibility, and ease of management. Here\u2019s why zones are beneficial:</p> <ul> <li>Granular Access Control :</li> <li>firewalld zones allow different levels of trust for different network interfaces     and IP ranges. You can define which systems are allowed to connect to PostgreSQL     based on their trust level.</li> <li>Simplified Rule management:</li> <li>Instead of manually defining complex iptables rules, zones provide an organized     way to group and manage firewall rules based on usage scenarios.</li> <li>Enhanced security:</li> <li>By restricting PostgreSQL access to a specific zone, you prevent unauthorized     connections from other interfaces or networks.</li> <li>Dynamic configuration:</li> <li>firewalld supports runtime and permanent rule configurations, allowing changes     without disrupting existing connections.</li> <li>Multi-Interface support:</li> <li>If the server has multiple network interfaces, zones allow different security     policies for each interface.</li> </ul> <p>Bringing everything together it would look like this:</p> <p>Firewalld with zone config</p> <pre><code>firewall-cmd --new-zone=db_zone --permanent\nfirewall-cmd --zone=db_zone --add-service=postgresql --permanent\nfirewall-cmd --zone=db_zone --add-source=xxx.xxx.xxx.xxx/32 --permanent\nfirewall-cmd --reload\n</code></pre> <p>Where the <code>source IP</code> is the only address permitted to establish a connection to the database.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#time-server","title":"Time Server","text":"<p>Another crucial step is configuring the time server and syncing the Zabbix server using an NTP client. Accurate time synchronization is vital for Zabbix, both for the server and the devices it monitors. If one of the hosts has an incorrect time zone, it could lead to confusion, such as investigating an issue in Zabbix that appears to have happened hours earlier than it actually did.</p> <p>To install and enable chrony, our NTP client, use the following command:</p> <p>Install NTP client</p> <p>Red Hat <pre><code>dnf install chrony\nsystemctl enable chronyd --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install chrony\n</code></pre></p> <p>After installation, verify that Chrony is enabled and running by checking its status with the following command:</p> <p>Check status chronyd</p> <pre><code>systemctl status chronyd\n</code></pre> what is apt or dnf <p>dnf is a package manager used in Red Hat-based systems. If you're using another distribution, replace <code>dnf</code> with your appropriate package manager, such as <code>zypper</code>, <code>apt</code>, or <code>yum</code>.</p> what is Chrony <p>Chrony is a modern replacement for <code>ntpd</code>, offering faster and more accurate time synchronization. If your OS does not support Chrony, consider using <code>ntpd</code> instead.</p> <p>Once Chrony is installed, the next step is to ensure the correct time zone is set. You can view your current time configuration using the <code>timedatectl</code> command:</p> <p>check the time config</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 15:09:14 UTC\nUniversal time: Thu 2023-11-16 15:09:14 UTC\nRTC time: Thu 2023-11-16 15:09:15\nTime zone: UTC (UTC, +0000)\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> <p>Ensure that the Chrony service is active (refer to the previous steps if needed). To set the correct time zone, first, you can list all available time zones with the following command:</p> <p>list the timezones</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>This command will display a list of available time zones, allowing you to select the one closest to your location. For example:</p> <p>List of all the timezones available</p> <pre><code>Africa/Abidjan\nAfrica/Accra\n...\nPacific/Tongatapu\nPacific/Wake\nPacific/Wallis\nUTC\n</code></pre> <p>Once you've identified your time zone, configure it using the following command:</p> <p>Set the timezone</p> <pre><code>timedatectl set-timezone Europe/Brussels\n</code></pre> <p>To verify that the time zone has been configured correctly, use the <code>timedatectl</code> command again:</p> <p>Check the time and zone</p> <pre><code>timedatectl\n</code></pre> <pre><code>Local time: Thu 2023-11-16 16:13:35 CET\nUniversal time: Thu 2023-11-16 15:13:35 UTC\nRTC time: Thu 2023-11-16 15:13:36\n**Time zone: Europe/Brussels (CET, +0100)**\nSystem clock synchronized: yes\nNTP service: active\nRTC in local TZ: no\n</code></pre> Note <p>Some administrators prefer installing all servers in the UTC time zone to ensure that server logs across global deployments are synchronized. Zabbix supports user-based time zone settings, which allows the server to remain in UTC while individual users can adjust the time zone via the interface if needed.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#verifying-chrony-synchronization","title":"Verifying Chrony Synchronization","text":"<p>To ensure that Chrony is synchronizing with the correct time servers, you can run the following command:</p> <p>Verify chrony</p> <pre><code>chronyc\n</code></pre> <p>The output should resemble:</p> <p>Verify your chrony output</p> <pre><code>chrony version 4.2\nCopyright (C) 1997-2003, 2007, 2009-2021 Richard P. Curnow and others\nchrony comes with ABSOLUTELY NO WARRANTY. This is free software, and\nyou are welcome to redistribute it under certain conditions. See the\nGNU General Public License version 2 for details.\n\nchronyc&gt;\n</code></pre> <p>Once inside the Chrony prompt, type the following to check the sources:</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example output:</p> <p>Check your time server sources</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- 51-15-20-83.rev.poneytel&gt;     2   9   377   354   +429us[ +429us] +/-  342ms\n^- 5.255.99.180                  2  10   377   620  +7424us[+7424us] +/-   37ms\n^- hachi.paina.net               2  10   377   412   +445us[ +445us] +/-   39ms\n^* leontp1.office.panq.nl        1  10   377   904  +6806ns[ +171us] +/- 2336us\n</code></pre> <p>In this example, the NTP servers in use are located outside your local region. It is recommended to switch to time servers in your country or, if available, to a dedicated company time server. You can find local NTP servers here: www.ntppool.org.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#updating-time-servers","title":"Updating Time Servers","text":"<p>To update the time servers, modify the <code>/etc/chrony.conf</code> file for Red Hat based systems, and if you use Ubuntu edit <code>/etc/chrony/chrony.conf</code>. Replace the existing NTP server with one closer to your location.</p> <p>Example of the current configuration:</p> <p>example ntp pool config</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool 2.centos.pool.ntp.org iburst\n</code></pre> <p>Change the pools you want to a local time server:</p> <pre><code># Use public servers from the pool.ntp.org project.\n# Please consider joining the pool (http://www.pool.ntp.org/join.html).\npool be.pool.ntp.org iburst\n</code></pre> <p>After making this change, restart the Chrony service to apply the new configuration:</p> <p>restart the chrony service</p> <pre><code>systemctl restart chronyd\n</code></pre>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#verifying-updated-time-servers","title":"Verifying Updated Time Servers","text":"<p>Check the time sources again to ensure that the new local servers are in use:</p> <p>Check chrony sources</p> <pre><code>chronyc&gt; sources\n</code></pre> <p>Example of expected output with local servers:</p> <p>Example output</p> <pre><code>MS Name/IP address         Stratum Poll Reach LastRx Last sample\n===============================================================================\n^- ntp1.unix-solutions.be        2   6    17    43   -375us[ -676us] +/-   28ms\n^* ntp.devrandom.be              2   6    17    43   -579us[ -880us] +/- 2877us\n^+ time.cloudflare.com           3   6    17    43   +328us[  +27us] +/- 2620us\n^+ time.cloudflare.com           3   6    17    43\n</code></pre> <p>This confirms that the system is now using local time servers.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#conclusion","title":"Conclusion","text":"<p>As we have seen, before even considering the Zabbix packages, attention must be paid to the environment in which it will reside. A properly configured operating system, an open path through the firewall, and accurate timekeeping are not mere suggestions, but essential building blocks. Having laid this groundwork, we can now proceed with confidence to the Zabbix installation, knowing that the underlying system is prepared for the task.</p>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#questions","title":"Questions","text":"<ul> <li>Why do you think accurate time synchronization is so crucial for a monitoring   system like Zabbix?</li> <li>Now that the groundwork is laid, what do you anticipate will be the first step   in the actual Zabbix installation process?</li> <li>As we move towards installing Zabbix, let's think about network communication.   What key ports do you anticipate needing to allow through the firewall for the   Zabbix server and agents to interact effectively?</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/Requirements/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.ntppool.org/zone</li> <li>https://www.redhat.com/en/blog/beginners-guide-firewalld</li> </ul>","tags":["beginner"]},{"location":"ch00-getting-started/initial-steps/","title":"Getting Started with Zabbix \u2013 Unlocking the Power of Monitoring","text":"<p>Welcome to the world of Zabbix, a powerful open-source monitoring solution designed to give you comprehensive insights into your IT infrastructure. Whether you're managing a small network or overseeing a large-scale enterprise system, Zabbix provides the tools you need to monitor performance, detect issues, and ensure the smooth operation of your services.</p> <p>In this book, we focus on Zabbix LTS 8.0, the long-term support version that ensures stability and reliability for your monitoring needs. We'll explore its extensive feature set, including the newly introduced reporting functionality and built-in web monitoring based on the Selenium driver, which allows for sophisticated end-user experience monitoring through automated browser interactions.</p> <p>Zabbix is more than just a simple monitoring tool. It offers a wide range of features that allow you to:</p> <ul> <li>Monitor diverse environments: Track the performance and availability of servers, virtual machines, network devices, databases, and applications.</li> <li>Create dynamic visualizations: Use dashboards, graphs, maps, and screens to visualize data and get an overview of your system's health at a glance.</li> <li>Set up complex alerting mechanisms: Define triggers and actions that notify you of potential issues before they become critical, using various channels like email, SMS, and integrations with external services.</li> <li>Automate monitoring tasks: Leverage auto-discovery and auto-registration to keep up with changing environments without manual intervention.</li> <li>Customize and extend: Build custom scripts, templates, and integrations to tailor Zabbix to your specific needs.</li> </ul>"},{"location":"ch01-zabbix-components/basic-installation/","title":"Basic installation","text":"<p>In this chapter, we will walk through the process of installing the Zabbix server. There are many different ways to setup a Zabbix server. We will cover the most common setups with MariaDB and PostgreSQL on Ubuntu and on Rocky Linux.</p> <p>Before beginning the installation, it is important to understand the architecture of Zabbix. The Zabbix server is structured in a modular fashion, composed of three main components, which we will discuss in detail.</p> <ul> <li>The Zabbix server</li> <li>The Zabbix web server</li> <li>The Zabbix database</li> </ul> <p>Creation of DB users</p> <pre><code>In our setup we will create 2 DB users `zabbix-web` and `zabbix-srv`. The \nzabbix-web user will be used for the frontend to connect to our zabbix database.\nThe zabbix-srv user will be used by our zabbix server to connect to the database.\nThis allows us to limit the permissions for every user to only what is strictly\nneeded.\n</code></pre> <p></p> <p>1.1 Zabbix basic split installation</p> <p>All of these components can either be installed on a single server or distributed across three separate servers. The core of the system is the Zabbix server, often referred to as the \"brain.\" This component is responsible for processing trigger calculations and sending alerts. The database serves as the storage for the Zabbix server's configuration and all the data it collects. The web server provides the user interface (front-end) for interacting with the system. It is important to note that the Zabbix API is part of the front-end component, not the Zabbix server itself.</p> <p>These components must function together seamlessly, as illustrated in the diagram above. The Zabbix server must read configurations and store monitoring data in the database, while the front-end needs access to read and write configuration data. Furthermore, the front-end must be able to check the status of the Zabbix server and retrieve additional necessary information to ensure smooth operation.</p> <p>For our setup, we will be using two virtual machines (VMs): one VM will host both the Zabbix server and the Zabbix web front-end, while the second VM will host the Zabbix database.</p> Note <p>It's perfect possible to install all components on 1 single VM or every component on a separate VM. Reason we split the DB as an example is because the database will probably be the first component giving you performance headaches. It's also the component that needs some extra attention when we split it so for this reason we have chosen in this example to split the database from the rest of the setup.</p> Note <p>A crucial consideration for those managing Zabbix installations is the database back-end. Zabbix 7.0 marks the final release to offer support for Oracle Database. Consequently, systems running Zabbix 7.0 or any prior version must undertake a database migration to either PostgreSQL, MySQL, or a compatible fork such as MariaDB before upgrading to a later Zabbix release. This migration is a mandatory step to ensure continued functionality and compatibility with future Zabbix versions.</p> <p>We will cover the following topics:</p> <ul> <li>Install our Database based on MariaDB.</li> <li>Install our Database based on PostgreSQL.</li> <li>Installing the Zabbix server.</li> <li>Install the frontend.</li> </ul>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-mariadb-database","title":"Installing the MariaDB database","text":"<p>To begin the installation process for the MariaDB server, the first step involves manually creating a repository configuration file. This file, mariadb.repo on Rocky, must be placed in the /etc/yum.repos.d/ directory. The repository file will allow your package manager to locate and install the necessary MariaDB components. For Ubuntu we need to import the repository keys and create a file for example '/etc/apt/sources.list.d/mariadb.sources'.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#add-the-mariadb-repository","title":"Add the MariaDB repository","text":"<p>To create the MariaDB repository file, execute the following command in your terminal:</p> <p>create mariadb repository</p> <p>Red Hat <pre><code>vi /etc/yum.repos.d/mariadb.repo\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install apt-transport-https curl\nsudo mkdir -p /etc/apt/keyrings\nsudo curl -o /etc/apt/keyrings/mariadb-keyring.pgp 'https://mariadb.org/mariadb_release_signing_key.pgp'\n\nsudo vi /etc/apt/sources.list.d/mariadb.sources\n</code></pre></p> <p>This will open a text editor where you can input the repository configuration details. Once the repository is configured, you can proceed with the installation of MariaDB using your package manager.</p> Tip <p>Always check Zabbix documentation for the latest supported versions.</p> <p>The latest config can be found here: https://mariadb.org/download/?t=repo-config</p> <p>Here's the configuration you need to add into the file:</p> <p>Mariadb repository</p> <p>Red Hat <pre><code># MariaDB 11.4 RedHatEnterpriseLinux repository list - created 2025-02-21 10:15 UTC\n# https://mariadb.org/download/\n[mariadb]\nname = MariaDB\n# rpm.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# baseurl = https://rpm.mariadb.org/11.4/rhel/$releasever/$basearch\nbaseurl = https://mirror.bouwhuis.network/mariadb/yum/11.4/rhel/$releasever/$basearch\n# gpgkey = https://rpm.mariadb.org/RPM-GPG-KEY-MariaDB\ngpgkey = https://mirror.bouwhuis.network/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\n</code></pre></p> <p>Ubuntu <pre><code># MariaDB 11.4 repository list - created 2025-02-21 11:42 UTC\n# https://mariadb.org/download/\nX-Repolib-Name: MariaDB\nTypes: deb\n# deb.mariadb.org is a dynamic mirror if your preferred mirror goes offline. See https://mariadb.org/mirrorbits/ for details.\n# URIs: https://deb.mariadb.org/11.4/ubuntu\nURIs: https://mirror.bouwhuis.network/mariadb/repo/11.4/ubuntu\nSuites: noble\nComponents: main main/debug\nSigned-By: /etc/apt/keyrings/mariadb-keyring.pgp\n</code></pre></p> <p>After saving the file, ensure that everything is properly set up and that your MariaDB version is compatible with your Zabbix version to avoid potential integration issues.</p> <p>Before proceeding with the MariaDB installation, it's a best practice to ensure your operating system is up-to-date with the latest patches and security fixes. This will help maintain system stability and compatibility with the software you're about to install.</p> <p>To update your OS, run the following command:</p> <p>Update OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>This command will automatically fetch and install the latest updates available for your system, applying security patches, performance improvements, and bug fixes. Once the update process is complete, you can move forward with the MariaDB installation.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#install-the-mariadb-database","title":"Install the MariaDB database","text":"<p>With the operating system updated and the MariaDB repository configured, you are now ready to install the MariaDB server and client packages. This will provide the necessary components to run and manage your database.</p> <p>To install the MariaDB server and client, execute the following command:</p> <p>Install Mariadb</p> <p>Red Hat <pre><code>dnf install MariaDB-server\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install mariadb-server\n</code></pre></p> <p>This command will download and install both the server and client packages, enabling you to set up, configure, and interact with your MariaDB database. Once the installation is complete, you can proceed to start and configure the MariaDB service.</p> <p>Now that MariaDB is installed, we need to enable the service to start automatically upon boot and start it immediately. Use the following command to accomplish this:</p> <p>Enable mariadb service</p> <p>Red Hat <pre><code>systemctl enable mariadb --now\n</code></pre></p> <p>This command will both enable and start the MariaDB service. Once the service is running, you can verify that the installation was successful by checking the version of MariaDB using the following command:</p> <p>Check Mariadb version</p> <p>Red Hat and Ubuntu <pre><code>sudo mariadb -V\n</code></pre></p> <p>The expected output should resemble this:</p> <pre><code>mariadb from 11.4.5-MariaDB, client 15.2 for Linux (aarch64) using EditLine wrapper\n</code></pre> <p>To ensure that the MariaDB service is running properly, you can check its status with the following command:</p> <p>Get mariadb status</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl status mariadb\n</code></pre></p> <p>You should see an output similar to this, indicating that the MariaDB service is active and running:</p> <p>mariadb service status example</p> <pre><code> mariadb.service - MariaDB 11.4.5 database server\n      Loaded: loaded (/usr/lib/systemd/system/mariadb.service; enabled; preset: disabled)\n     Drop-In: /etc/systemd/system/mariadb.service.d\n              \u2514\u2500migrated-from-my.cnf-settings.conf\n      Active: active (running) since Fri 2025-02-21 11:22:59 CET; 2min 8s ago\n        Docs: man:mariadbd(8)\n              https://mariadb.com/kb/en/library/systemd/\n     Process: 23147 ExecStartPre=/bin/sh -c systemctl unset-environment _WSREP_START_POSITION (code=exited, status=0/SUCCESS)\n     Process: 23148 ExecStartPre=/bin/sh -c [ ! -e /usr/bin/galera_recovery ] &amp;&amp; VAR= ||   VAR=`/usr/bin/galera_recovery`; [ $? -eq 0 ] &amp;&amp; systemctl set-enviro&gt;\nProcess: 23168 ExecStartPost=/bin/sh -c systemctl unset-environment \\_WSREP_START_POSITION (code=exited, status=0/SUCCESS)\nMain PID: 23156 (mariadbd)\nStatus: \"Taking your SQL requests now...\"\nTasks: 7 (limit: 30620)\nMemory: 281.7M\nCPU: 319ms\nCGroup: /system.slice/mariadb.service\n\u2514\u250023156 /usr/sbin/mariadbd\n\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'FEEDBACK' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Plugin 'wsrep-provider' is disabled.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] InnoDB: Buffer pool(s) load completed at 250221 11:22:58\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '0.0.0.0'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] Server socket created on IP: '::'.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] mariadbd: Event Scheduler: Loaded 0 events\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: 2025-02-21 11:22:58 0 [Note] /usr/sbin/mariadbd: ready for connections.\nFeb 21 11:22:58 localhost.localdomain mariadbd[23156]: Version: '11.4.5-MariaDB'  socket: '/var/lib/mysql/mysql.sock'  port: 3306  MariaDB Server\nFeb 21 11:22:59 localhost.localdomain systemd[1]: Started MariaDB 11.4.5 database server.\n</code></pre> <p>This confirms that your MariaDB server is up and running, ready for further configuration.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#securing-the-mariadb-database","title":"Securing the MariaDB Database","text":"<p>To enhance the security of your MariaDB server, it's essential to remove unnecessary test databases, anonymous users, and set a root password. This can be done using the mariadb-secure-installation script, which provides a step-by-step guide to securing your database.</p> <p>Run the following command:</p> <p>Secure Mariadb setup</p> <p>Red Hat and Ubuntu <pre><code> sudo mariadb-secure-installation\n</code></pre></p> <pre><code>NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB\n      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!\n\nIn order to log into MariaDB to secure it, we'll need the current\npassword for the root user. If you've just installed MariaDB, and\nhaven't set the root password yet, you should just press enter here.\n\nEnter current password for root (enter for none):\nOK, successfully used password, moving on...\n\nSetting the root password or using the unix_socket ensures that nobody\ncan log into the MariaDB root user without the proper authorisation.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nSwitch to unix_socket authentication [Y/n] n\n ... skipping.\n\nYou already have your root account protected, so you can safely answer 'n'.\n\nChange the root password? [Y/n] y\nNew password:\nRe-enter new password:\nPassword updated successfully!\nReloading privilege tables..\n ... Success!\n\n\nBy default, a MariaDB installation has an anonymous user, allowing anyone\nto log into MariaDB without having to have a user account created for\nthem.  This is intended only for testing, and to make the installation\ngo a bit smoother.  You should remove them before moving into a\nproduction environment.\n\nRemove anonymous users? [Y/n] y\n ... Success!\n\nNormally, root should only be allowed to connect from 'localhost'.  This\nensures that someone cannot guess at the root password from the network.\n\nDisallow root login remotely? [Y/n] y\n ... Success!\n\nBy default, MariaDB comes with a database named 'test' that anyone can\naccess.  This is also intended only for testing, and should be removed\nbefore moving into a production environment.\n\nRemove test database and access to it? [Y/n] y\n - Dropping test database...\n ... Success!\n - Removing privileges on test database...\n ... Success!\n\nReloading the privilege tables will ensure that all changes made so far\nwill take effect immediately.\n\nReload privilege tables now? [Y/n] y\n ... Success!\n\nCleaning up...\n\nAll done!  If you've completed all of the above steps, your MariaDB\ninstallation should now be secure.\n\nThanks for using MariaDB!\n</code></pre> <p>The mariadb-secure-installation script will guide you through several key steps:</p> <ol> <li>Set a root password if one isn't already set.</li> <li>Remove anonymous users.</li> <li>Disallow remote root logins.</li> <li>Remove the test database.</li> <li>Reload the privilege tables to ensure the changes take effect.</li> </ol> <p>Once complete, your MariaDB instance will be significantly more secure. You are now ready to configure the database for Zabbix.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database","title":"Create the Zabbix database","text":"<p>With MariaDB now set up and secured, we can move on to creating the database for Zabbix. This database will store all the necessary data related to your Zabbix server, including configuration information and monitoring data.</p> <p>Follow these steps to create the Zabbix database:</p> <p>Log in to the MariaDB shell as the root user: You'll be prompted to enter the root password that you set during the mariadb-secure-installation process.</p> <p>Enter Mariadb as user root</p> <p>Red Hat and Ubuntu <pre><code>mariadb -uroot -p\n</code></pre></p> <p>Once you're logged into the MariaDB shell, run the following command to create a database for Zabbix:</p> <p>Create the database</p> <p><code>MariaDB [(none)]&gt; CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</code></p> Note <p>utf8mb4 is a proper implementation of UTF-8 in MySQL/MariaDB, supporting all  Unicode characters, including emojis. The older utf8 charset in MySQL/MariaDB  only supports up to three bytes per character and is not a true UTF-8 implementation,  which is why utf8mb4 is recommended.</p> <p>This command creates a new database named zabbix with the UTF-8 character set, which is required for Zabbix.</p> <p>Create a dedicated user for Zabbix and grant the necessary privileges: Next, you need to create a user that Zabbix will use to access the database. Replace password with a strong password of your choice.</p> <p>Create users and grant privileges</p> <pre><code>MariaDB [(none)]&gt; CREATE USER 'zabbix-web'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; CREATE USER 'zabbix-srv'@'&lt;zabbix server ip&gt;' IDENTIFIED BY '&lt;password&gt;';\nMariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix-srv'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; GRANT SELECT, UPDATE, DELETE, INSERT ON zabbix.* TO 'zabbix-web'@'&lt;zabbix server ip&gt;';\nMariaDB [(none)]&gt; FLUSH PRIVILEGES;\n</code></pre> <p>This creates new users for zabbix-web and zabbix-srv, grants them access to the zabbix database, and ensures that the privileges are applied immediately.</p> <p>In some cases, especially when setting up Zabbix with MariaDB, you might encounter issues related to stored functions and triggers if binary logging is enabled. To address this, you need to set the log_bin_trust_function_creators option to 1 in the MariaDB configuration file. This allows non-root users to create stored functions and triggers without requiring SUPER privileges, which are restricted when binary logging is enabled.</p> <p>Activate temporarily extra privileges for non root users</p> <pre><code>MariaDB [(none)]&gt; SET GLOBAL log_bin_trust_function_creators = 1;\nMariaDB [(none)]&gt; QUIT\n</code></pre> <p>At this point, your Zabbix database is ready, and you can proceed with configuring the Zabbix server to connect to the database.</p> Warning <p>In the Zabbix documentation, it is explicitly stated that deterministic triggers need to be created during the schema import. On MySQL and MariaDB systems, this requires setting GLOBAL log_bin_trust_function_creators = 1 if binary logging is enabled, and you lack superuser privileges.</p> <p>If the log_bin_trust_function_creators option is not set in the MySQL configuration file, it will block the creation of these triggers during schema import. This is essential because, without superuser access, non-root users cannot create triggers or stored functions unless this setting is applied.</p> <p>To summarize:</p> <ul> <li> <p>Binary logging enabled: If binary logging is enabled and the user does not   have superuser privileges, the creation of necessary Zabbix triggers will   fail unless log_bin_trust_function_creators = 1 is set.</p> </li> <li> <p>Solution: Add log_bin_trust_function_creators = 1 to the [mysqld] section   in your MySQL/MariaDB configuration file or temporarily set it at runtime   with SET GLOBAL log_bin_trust_function_creators = 1 if you have sufficient   permissions.</p> </li> </ul> <p>This ensures that Zabbix can successfully create the required triggers during schema import without encountering privilege-related errors.</p> <p>If we want our Zabbix server to connect to our DB then we also need to open our firewall port.</p> <p>Add firewall rules</p> <p>Red Hat <pre><code>firewall-cmd --add-port=3306/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 3306/tcp\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-maria-db","title":"Populate the Zabbix Maria DB","text":"<p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <p>One of the first things we need to do is add the Zabbix repository to our machine. This may sound weird but actually makes sense because we need to populate our DB with our Zabbix schemas.</p> <p>Add Zabbix repo and install scripts</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>Now lets upload the data from zabbix (db structure, images, user, ... ) for this we make use of the user <code>zabbix-srv</code> and we upload it all in our DB <code>zabbix</code>.</p> <p>Populate the database</p> <p>Red Hat and Ubuntu <pre><code>sudo zcat /usr/share/zabbix/sql-scripts/mysql/server.sql.gz | mariadb --default-character-set=utf8mb4 -uroot -p zabbix\n</code></pre></p> Note <p>Depending on the speed of your hardware or virtual machine, the process may take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation; just wait for the prompt to appear.</p> <p>Log back into your MySQL Database as root</p> <p>Enter mariadb as user root</p> <p><code>mariadb -uroot -p</code></p> <p>Once the import of the Zabbix schema is complete and you no longer need the log_bin_trust_function_creators global parameter, it is a good practice to remove it for security reasons.</p> <p>To revert the change and set the global parameter back to 0, use the following command in the MariaDB shell:</p> <p>Disable function log_bin_trust again</p> <pre><code>mysql&gt; SET GLOBAL log_bin_trust_function_creators = 0;\nQuery OK, 0 rows affected (0.001 sec)\n</code></pre> <p>This command will disable the setting, ensuring that the servers security posture remains robust.</p> <p>This concludes our installation of the MariaDB</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-postgresql-database","title":"Installing the PostgreSQL database","text":"<p>For our DB setup with PostgreSQL we need to add our PostgreSQL repository first to the system. As of writing PostgreSQL 13-17 are supported but best is to have a look before you install it as new versions may be supported and older maybe unsupported both by Zabbix and PostgreSQL. Usually it's a good idea to go with the latest version that is supported by Zabbix. Zabbix also supports the extension TimescaleDB this is something we will talk later about. As you will see the setup from PostgreSQL is very different from MySQL not only the installation but also securing the DB.</p> <p>The table of compatibility can be found https://docs.timescale.com/self-hosted/latest/upgrades/upgrade-pg/</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#add-the-postgresql-repository","title":"Add the PostgreSQL repository","text":"<p>So let us start first setting up our PostgreSQL repository with the following commands.</p> <p>Add PostgreSQL repo</p> <p>Red Hat <pre><code>Install the repository RPM:\ndnf install https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\nDisable the built-in PostgreSQL module:\ndnf -qy module disable postgresql\n</code></pre></p> <p>Ubuntu <pre><code># Import the repository signing key:\nsudo apt install curl ca-certificates\nsudo install -d /usr/share/postgresql-common/pgdg\nsudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc\n\n# Create the repository configuration file:\nsudo sh -c 'echo \"deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" &gt; /etc/apt/sources.list.d/pgdg.list'\n\n# Update the package lists:\nsudo apt update\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#install-the-postgresql-databases","title":"Install the PostgreSQL databases","text":"<p>Install the Postgres server</p> <p>Red Hat <pre><code># Install Postgres server:\ndnf install postgresql17-server\n\n# Initialize the database and enable automatic start:\n/usr/pgsql-17/bin/postgresql-17-setup initdb\nsystemctl enable postgresql-17 --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install postgresql-17\n</code></pre></p> <p>To update your OS, run the following command:</p> <p>update the OS</p> <p>Red Hat <pre><code>dnf update\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#securing-the-postgresql-database","title":"Securing the PostgreSQL database","text":"<p>PostgreSQL handles access permissions differently from MySQL and MariaDB. PostgreSQL relies on a file called pg_hba.conf to manage who can access the database, from where, and what encryption method is used for authentication.</p> Note <p>Client authentication in PostgreSQL is configured through the pg_hba.conf file, where \"HBA\" stands for Host-Based Authentication. This file specifies which users can access the database, from which hosts, and how they are authenticated. For further details, you can refer to the official PostgreSQL documentation.\" https://www.postgresql.org/docs/current/auth-pg-hba-conf.html</p> <p>Add the following lines, the order here is important.</p> <p>Edit the pg_hba file</p> <p>Red hat <pre><code>vi /var/lib/pgsql/17/data/pg_hba.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/pg_hba.conf\n</code></pre></p> <p>The result should look like :</p> <p>pg_hba example</p> <pre><code># \"local\" is for Unix domain socket connections only\nlocal    zabbix     zabbix-srv                                                              scram-sha-256\nlocal    all            all                                                                            peer\n# IPv4 local connections\nhost     zabbix     zabbix-srv          &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     zabbix     zabbix-web        &lt;ip from zabbix server/24&gt;     scram-sha-256\nhost     all            all                         127.0.0.1/32                            scram-sha-256\n</code></pre> <p>After we changed the pg_hba file don't forget to restart postgres else the settings will not be applied. But before we restart let us also edit the file postgresql.conf and allow our database to listen on our network interface for incoming connections from the zabbix server. Postgresql will standard only allow connections from the socket.</p> <p>Edit postgresql.conf file</p> <p>Red Hat <pre><code>vi /var/lib/pgsql/17/data/postgresql.conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo vi /etc/postgresql/17/main/postgresql.conf\n</code></pre></p> <p>To configure PostgreSQL to listen on all network interfaces, you need to modify the <code>postgresql.conf</code> file. Locate the following line:</p> <pre><code>#listen_addresses = 'localhost'\n</code></pre> <p>and replace it with:</p> <p><code>listen_addresses = '*'</code></p> Note <p>This will enable PostgreSQL to accept connections from any network interface, not just the local machine. In production it's probably a good idea to limit who can connect to the DB.</p> <p>After making this change, restart the PostgreSQL service to apply the new settings:</p> <p>restart the DB server</p> <p>Red Hat <pre><code>systemctl restart postgresql-17\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl restart postgresql\n</code></pre></p> <p>If the service fails to restart, review the pg_hba.conf file for any syntax errors, as incorrect entries here may prevent PostgreSQL from starting.</p> <p>Next, to prepare your PostgreSQL instance for Zabbix, you'll need to create the necessary database tables. Begin by installing the Zabbix repository, as you did for the Zabbix server. Then, install the appropriate Zabbix package that contains the predefined tables, images, icons, and other database elements needed for the Zabbix application.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#create-the-zabbix-database-with-postgresql","title":"Create the Zabbix database with PostgreSQL","text":"<p>To begin, add the Zabbix repository to your system by running the following commands:</p> <p>Add zabbix schema repos package</p> <p>Red Hat <pre><code>dnf install https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf install zabbix-sql-scripts\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\nsudo apt install zabbix-sql-scripts\n</code></pre></p> <p>With the necessary packages installed, you are now ready to create the Zabbix users for both the server and frontend.</p> <p>First, switch to the <code>postgres</code> user and create the Zabbix server database user:</p> <p>create server users</p> <pre><code>sudo su - postgres\ncreateuser --pwprompt zabbix-srv\nEnter password for new role: &lt;server-password&gt;\nEnter it again: &lt;server-password&gt;\n</code></pre> <p>Next, create the Zabbix frontend user, which will be used to connect to the database:</p> <p>Create front-end user</p> <pre><code>createuser --pwprompt zabbix-web\nEnter password for new role: &lt;frontend-password&gt;\nEnter it again: &lt;frontend-password&gt;\n</code></pre> <p>After creating the users, you need to prepare the database schema. As the root or your regular user, unzip the necessary schema files by running the following command:</p> <p>Unzip the DB patch</p> <p>Red Hat <pre><code>gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> <p>Ubuntu <pre><code>sudo gzip -d /usr/share/zabbix/sql-scripts/postgresql/server.sql.gz\n</code></pre></p> Note <p>Zabbix seems to like to change the locations of the script to populate the DB every version or in between versions. If you encounter an error take a look at the Zabbix documentation there is a good chance that some location was changed.</p> <p>This will extract the database schema required for the Zabbix server.</p> <p>Now that the users are created, the next step is to create the Zabbix database. First, switch to the <code>postgres</code> user and execute the following command to create the database with the owner set to zabbix-srv:</p> <p>Create DB</p> <p>Red Hat <pre><code>su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Ubuntu <pre><code>sudo su - postgres\ncreatedb -E Unicode -O zabbix-srv zabbix\nexit\n</code></pre></p> <p>Once the database is created, you should verify the connection and ensure that the correct user session is active. To do this, log into the zabbix database using the zabbix-srv user:</p> <p>Login as user zabbix-srv</p> <pre><code>psql -d zabbix -U zabbix-srv\n</code></pre> <p>After logging in, run the following SQL query to confirm that both the <code>session_user</code> and <code>current_user</code> are set to <code>zabbix-srv</code>:</p> <pre><code>zabbix=&gt; SELECT session_user, current_user;\n session_user | current_user\n--------------+--------------\n zabbix-srv   | zabbix-srv\n(1 row)\n</code></pre> <p>If the output matches, you are successfully connected to the database with the correct user.</p> <p>PostgreSQL indeed differs significantly from MySQL or MariaDB in several aspects, and one of the key features that sets it apart is its use of schemas. Unlike MySQL, where databases are more standalone, PostgreSQL's schema system provides a structured, multi-user environment within a single database.</p> <p>Schemas act as logical containers within a database, enabling multiple users or applications to access and manage data independently without conflicts. This feature is especially valuable in environments where several users or applications need to interact with the same database concurrently. Each user or application can have its own schema, preventing accidental interference with each other's data.</p> Note <p>PostgreSQL comes with a default schema, typically called public, but it's in general best practice to create custom schemas to better organize and separate database objects, especially in complex or multi-user environments.</p> <p>For more in-depth information, I recommend checking out the detailed guide at this URI, https://hevodata.com/learn/postgresql-schema/#schema which explains the benefits and use cases for schemas in PostgreSQL.</p> <p>To finalize the database setup for Zabbix, we need to configure schema permissions for both the <code>zabbix-srv</code> and <code>zabbix-web</code> users.</p> <p>First, we create a custom schema named <code>zabbix_server</code> and assign ownership to the <code>zabbix-srv</code> user:</p> <p>create the db schema</p> <pre><code>zabbix=&gt; CREATE SCHEMA zabbix_server AUTHORIZATION \"zabbix-srv\";\n</code></pre> <p>Next, we set the <code>search path</code> to <code>zabbix_server</code> schema so that it's the default for the current session:</p> <p>Set search path</p> <pre><code>zabbix=&gt; SET search_path TO \"zabbix_server\";\n</code></pre> <p>To confirm the schema setup, you can list the existing schemas:</p> <p>verify schema access</p> <pre><code>zabbix=&gt; \\dn\n          List of schemas\n     Name      |       Owner\n---------------+-------------------\n public        | pg_database_owner\n zabbix_server | zabbix-srv\n(2 rows)\n</code></pre> <p>At this point, the <code>zabbix-srv</code> user has full access to the schema, but the <code>zabbix-web</code> user still needs appropriate permissions to connect and interact with the database. First, we grant <code>USAGE</code> privileges on the schema to allow <code>zabbix-web</code> to connect:</p> <p>Grant access to schema for user zabbix-web</p> <pre><code>zabbix=# GRANT USAGE ON SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#populate-the-zabbix-postgresql-db","title":"Populate the Zabbix PostgreSQL DB","text":"<p>Now, the <code>zabbix-web</code> user has appropriate access to interact with the schema while maintaining security by limiting permissions to essential operations.</p> <p>With the users and permissions set up correctly, you can now populate the database with the Zabbix schema created and other required elements. Follow these steps:</p> <ul> <li>Execute the SQL file to populate the database. Run the following command in the   <code>psql</code> shell:</li> </ul> Warning <p>Make sure you did previous steps carefully so that you have selected the correct search_path.</p> <p>upload the DB schema to db zabbix</p> <pre><code>sql zabbix=# \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\n</code></pre> Warning <p>Depending on your hardware or VM performance, this process can take anywhere from a few seconds to several minutes. Please be patient and avoid cancelling the operation.</p> <ul> <li>Monitor the progress as the script runs. You will see output similar to:</li> </ul> <p>Output example</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/server.sql\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\nCREATE INDEX\nCREATE TABLE\n...\n...\n...\nINSERT 0 10444\nDELETE 90352\nCOMMIT\n</code></pre> <p>Once the script completes and you return to the <code>zabbix=#</code> prompt, the database should be successfully populated with all the required tables, schemas, images, and other elements needed for Zabbix.</p> <p>However, <code>zabbix-web</code> still cannot perform any operations on the tables or sequences. To allow basic data interaction without giving too many privileges, grant the following permissions:</p> <ul> <li>For tables: SELECT, INSERT, UPDATE, and DELETE.</li> <li>For sequences: SELECT and UPDATE.</li> </ul> <p>Grant rights on the schema to user zabbix-web</p> <pre><code>zabbix=# GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA zabbix_server\nTO \"zabbix-web\";\nzabbix=# GRANT SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA zabbix_server TO \"zabbix-web\";\n</code></pre> <p>Verify if the rights are correct on the schema :</p> <p>Example schema rights</p> <pre><code>zabbix=&gt; \\dn+\n                                           List of schemas\n     Name      |       Owner       |           Access privileges            |      Description\n---------------+-------------------+----------------------------------------+------------------------\n public        | pg_database_owner | pg_database_owner=UC/pg_database_owner+| standard public schema\n               |                   | =U/pg_database_owner                   |\n zabbix_server | zabbix-srv        | \"zabbix-srv\"=UC/\"zabbix-srv\"          +|\n               |                   | \"zabbix-web\"=U/\"zabbix-srv\"            |\n</code></pre> Note <p>If you encounter the following error during the SQL import: <code>vbnet psql:/usr/share/zabbix/sql-scripts/postgresql/server.sql:7: ERROR: no     schema has been selected to create in</code> It indicates that the search_path setting might not have been correctly applied. This setting is crucial because it specifies the schema where the tables and other objects should be created. By correctly setting the search path, you ensure that the SQL script will create tables and other objects in the intended schema.</p> <p>To ensure that the Zabbix tables were created successfully and have the correct permissions, you can verify the table list and their ownership using the <code>psql</code> command:</p> <ul> <li>List the Tables: Use the following command to list all tables in the <code>zabbix_server</code> schema:</li> </ul> <p>List tables</p> <pre><code>sql zabbix=# \\dt\n</code></pre> <p>You should see a list of tables with their schema, name, type, and owner. For example:</p> <p>List table with relations</p> <pre><code>zabbix=&gt; \\dt\n                        List of relations\n    Schema     |            Name            | Type  |   Owner\n---------------+----------------------------+-------+------------\n zabbix_server | acknowledges               | table | zabbix-srv\n zabbix_server | actions                    | table | zabbix-srv\n zabbix_server | alerts                     | table | zabbix-srv\n zabbix_server | auditlog                   | table | zabbix-srv\n zabbix_server | autoreg_host               | table | zabbix-srv\n zabbix_server | changelog                  | table | zabbix-srv\n zabbix_server | conditions                 | table | zabbix-srv\n...\n...\n...\n zabbix_server | valuemap                   | table | zabbix-srv\n zabbix_server | valuemap_mapping           | table | zabbix-srv\n zabbix_server | widget                     | table | zabbix-srv\n zabbix_server | widget_field               | table | zabbix-srv\n(203 rows)\n</code></pre> <ul> <li>Verify Permissions: Confirm that the zabbix-srv user owns the tables and has   the necessary permissions. You can check permissions for specific tables using   the \\dp command:</li> </ul> <pre><code>sql zabbix=# \\dp zabbix_server.*\n</code></pre> <pre><code>                                                     Access privileges\n    Schema     |            Name            |   Type   |         Access privileges          | Column privileges | Policies\n---------------+----------------------------+----------+------------------------------------+-------------------+----------\n zabbix_server | acknowledges               | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | actions                    | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | alerts                     | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n               |                            |          | \"zabbix-web\"=arwd/\"zabbix-srv\"     |                   |\n zabbix_server | auditlog                   | table    | \"zabbix-srv\"=arwdDxtm/\"zabbix-srv\"+|                   |\n</code></pre> <p>This will display the access privileges for all tables in the <code>zabbix_server</code> schema. Ensure that <code>zabbix-srv</code> has the required privileges.</p> <p>If everything looks correct, your tables are properly created and the <code>zabbix-srv</code> user has the appropriate ownership and permissions. If you need to adjust any permissions, you can do so using the GRANT commands as needed.</p> Note <p>If you prefer not to set the search path manually each time you log in as the <code>zabbix-srv</code> user, you can configure PostgreSQL to automatically use the desired search path. Run the following SQL command to set the default search path for the <code>zabbix-srv</code> role:</p> <p>sql zabbix=&gt; ALTER ROLE \"zabbix-srv\" SET search_path = \"$user\", public, zabbix_server;</p> <p>This command ensures that every time the <code>zabbix-srv</code> user connects to the database, the <code>search_path</code> is automatically set to include <code>$user</code>, <code>public</code>, and <code>zabbix_server</code>.</p> <p>If you are ready you can exit the database and return as user root.</p> <p>Exit the database</p> <pre><code>zabbix=&gt; \\q\n</code></pre> <p>If we want our Zabbix server to be able to connect to our DB then we also need to open our firewall port.</p> <p>Red Hat <pre><code>firewall-cmd --add-port=5432/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 5432/tcp\n</code></pre></p> Note <p>Make sure your DB is listening on the correct IP and not on 127.0.0.1. You could add the following files to your config file. This would allow MariaDB to listen on all interfaces. Best to limit it only to the needed IP.</p> <p>/etc/mysql/mariadb.cnf</p> <p>[mariadb] log_error=/var/log/mysql/mariadb.err log_warnings=3 bind-address = 0.0.0.0</p> <p>This concludes our installation of the PostgreSQL database.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-mariadbmysql","title":"Installing the Zabbix server for MariaDB/Mysql","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use Red Hat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <p>Selinux status</p> <p><pre><code>sestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <p>Disable SeLinux</p> <p><pre><code>setenforce 0\nsestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>Disable SeLinux permanent</p> <p>Red Hat <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre></p> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <p>Verify selinux status again</p> <p><pre><code>sestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.2 Zabbix download</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>exclude packages</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>Add the zabbix repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-mysqlmariadb","title":"Configuring the Zabbix server for MySQL/MariaDB","text":"<p>Now that we've added the Zabbix repository with the necessary software, we are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for MySQL/MariaDB, run the following command:</p> <p>Install the zabbix server</p> <p>Red Hat <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p> <p>After successfully installing the Zabbix server and frontend packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre></p> <p>Replace <code>&lt;database-host&gt;</code>, <code>&lt;database-name&gt;</code>, <code>&lt;database-user&gt;</code>, and <code>&lt;database-password&gt;</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your MariaDB server&gt;\nDBName=zabbix\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=3306\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's   on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <pre><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf\n</code></pre> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> Note <p>Before restarting the Zabbix server after modifying its configuration, it is considered best practice to validate the configuration to prevent potential issues. Running a configuration check ensures that any errors are detected beforehand, avoiding downtime caused by an invalid configuration. This can be accomplished using the following command: <code>zabbix-server -T</code></p> <p>enable and start zabbix-server service</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>Check the log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example log with errors</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check status of zabbix-server service</p> <p><pre><code>systemctl status zabbix-server\n</code></pre> <pre><code>zabbix-server.service - Zabbix Server\nLoaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\nActive: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\nMain PID: 12074 (zabbix_server)\nTasks: 77 (limit: 24744)\nMemory: 71.5M\nCPU: 18.535s\nCGroup: /system.slice/zabbix-server.service\n\u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n\u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n\u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n\u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n\u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n\u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n\u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n\u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n\u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n\u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n\u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n\u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n\u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n\u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n\u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n\u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n\u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n\u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n\u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n\u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n\u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n\u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n\u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n\u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with Mariadb.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-zabbix-server-for-postgresql","title":"Installing the Zabbix server for PostgreSQL","text":"<p>Before proceeding with the installation of your Zabbix server, ensure that the server is properly configured, as outlined in the previous section System Requirements</p> <p>Another critical step at this stage if you use Red Hat based systems is disabling SELinux, which can interfere with the installation and operation of Zabbix. We will revisit SELinux at the end of this chapter once our installation is finished.</p> <p>To check the current status of SELinux, you can use the following command: `sestatus``</p> <p>check the selinux status</p> <pre><code>sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   enforcing\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre> <p>As shown, the system is currently in enforcing mode. To temporarily disable SELinux, you can run the following command: <code>setenforce 0</code></p> <p>change selinux to permissive</p> <p><pre><code>setenforce 0\nsestatus\n</code></pre> <pre><code>SELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          enforcing\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre></p> <p>Now, as you can see, the mode is switched to permissive. However, this change is not persistent across reboots. To make it permanent, you need to modify the SELinux configuration file located at <code>/etc/selinux/config</code>. Open the file and replace enforcing with <code>permissive</code>.</p> <p>Alternatively, you can achieve the same result more easily by running the following command:</p> <p>Adapt selinux config permanently</p> <p>Red Hat <pre><code>sed -i 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config\n</code></pre></p> <p>This line will alter the configuration file for you. So when we run <code>sestatus</code> again we will see that we are in <code>permissive</code> mode and that our configuration file is also in permissive mode.</p> <p>check if everything is disabled</p> <pre><code>sestatus\n\nSELinux status:                 enabled\nSELinuxfs mount:                /sys/fs/selinux\nSELinux root directory:         /etc/selinux\nLoaded policy name:             targeted\nCurrent mode:                   permissive\nMode from config file:          permissive\nPolicy MLS status:              enabled\nPolicy deny_unknown status:     allowed\nMemory protection checking:     actual (secure)\nMax kernel policy version:      33\n</code></pre>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#adding-the-zabbix-repository_1","title":"Adding the Zabbix repository","text":"<p>From the Zabbix Download page https://www.zabbix.com/download, select the appropriate Zabbix version you wish to install. In this case, we will be using Zabbix 8.0 LTS. Additionally, ensure you choose the correct OS distribution for your environment, which will be Rocky Linux 9 or Ubuntu 24.04 in our case.</p> <p>We will be installing the Zabbix Server along with NGINX as the web server for the front-end. Make sure to download the relevant packages for your chosen configuration.</p> <p></p> <p>1.3 Zabbix download</p> <p>If you make use of a RHEL based system like Rocky then the first step is to disable the Zabbix packages provided by the EPEL repository, if it's installed on your system. To do this, edit the <code>/etc/yum.repos.d/epel.repo</code> file and add the following statement to disable the EPEL repository by default:</p> <p>Add exclude to epelrepo for zabbix</p> <p>Red Hat <pre><code>[epel]\n...\nexcludepkgs=zabbix*\n</code></pre></p> Tip <p>It's considered bad practice to keep the EPEL repository enabled all the time, as it may cause conflicts by unintentionally overwriting or installing unwanted packages. Instead, it's safer to enable the repository only when needed, by using the following command during installations: dnf install --enablerepo=epel  This ensures that EPEL is only enabled when explicitly required. <p>Next, we will install the Zabbix repository on our operating system. After adding the Zabbix repository, it is recommended to perform a repository cleanup to remove old cache files and ensure the repository metadata is up to date. You can do this by running:</p> <p>add the repo</p> <p>Red Hat <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre></p> <p>Ubuntu <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre></p> <p>This will refresh the repository metadata and prepare the system for Zabbix installation.</p> Note <p>A repository in Linux is a configuration that allows you to access and install software packages. You can think of it like an \"app store\" where you find and download software from a trusted source, in this case, the Zabbix repository. Many repositories are available, but it's important to only add those you trust. The safest practice is to stick to the repositories provided by your operating system and only add additional ones when you're sure they are both trusted and necessary.</p> <p>For our installation, the Zabbix repository is provided by the vendor itself, making it a trusted source. Another popular and safe repository for Red Hat-based systems is EPEL (Extra Packages for Enterprise Linux), which is commonly used in enterprise environments. However, always exercise caution when adding new repositories to ensure system security and stability.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#configuring-the-zabbix-server-for-postgresql","title":"Configuring the Zabbix server for PostgreSQL","text":"<p>We are ready to install both the Zabbix server and the web server. Keep in mind that the web server doesn't need to be installed on the same machine as the Zabbix server; they can be hosted on separate systems if desired.</p> <p>To install the Zabbix server and the web server components for PostgreSQL, run the following command:</p> <p>install zabbix server</p> <p>Red Hat</p> <pre><code>dnf install zabbix-server-pgsql\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> <p>After successfully installing the Zabbix server packages, we need to configure the Zabbix server to connect to the database. This requires modifying the Zabbix server configuration file. Open the <code>/etc/zabbix/zabbix_server.conf</code> file and update the following lines to match your database configuration:</p> <p>Edit zabbix server config</p> <p>Red Hat and Ubuntu <pre><code>#sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre></p> <pre><code>DBHost=&lt;database-host&gt;\nDBName=&lt;database-name&gt;\nDBSchema=&lt;database-schema&gt;\nDBUser=&lt;database-user&gt;\nDBPassword=&lt;database-password&gt;\n</code></pre> <p>Replace <code>database-host</code>, <code>database-name</code>, <code>database-user</code>,<code>database-schema</code> and <code>database-password</code> with the appropriate values for your setup. This ensures that the Zabbix server can communicate with your database.</p> <p>Ensure that there is no # (comment symbol) in front of the configuration parameters, as Zabbix will treat lines beginning with # as comments, ignoring them during execution. Additionally, double-check for duplicate configuration lines; if there are multiple lines with the same parameter, Zabbix will use the value from the last occurrence.</p> <p>For our setup, the configuration will look like this:</p> <p>Example config</p> <pre><code>DBHost=&lt;ip or dns of your PostgreSQL server&gt;\nDBName=zabbix\nDBSchema=zabbix_server\nDBUser=zabbix-srv\nDBPassword=&lt;your super secret password&gt;\nDBPort=5432\n</code></pre> <p>In this example:</p> <ul> <li>DBHost refers to the host where your database is running (use localhost if it's   on the same machine).</li> <li>DBName is the name of the Zabbix database.</li> <li>DBUser is the database user.</li> <li>DBPassword is the password for the database user.</li> </ul> <p>Make sure the settings reflect your environment's database configuration.</p> Note <p>The Zabbix server configuration file offers an option to include additional configuration files for custom parameters. For a production environment, it's often best to avoid altering the original configuration file directly. Instead, you can create and include a separate configuration file for any additional or modified parameters. This approach ensures that your original configuration file remains untouched, which is particularly useful when performing upgrades or managing configurations with tools like Ansible, Puppet, or SaltStack.</p> <p>To enable this feature, remove the # from the line:</p> <p><code># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</code></p> <p>Ensure the path <code>/usr/local/etc/zabbix_server.conf.d/</code> exists and create a custom configuration file in this directory. This file should be readable by the <code>zabbix</code> user. By doing so, you can add or modify parameters without modifying the default configuration file, making system management and upgrades smoother.</p> <p>With the Zabbix server configuration updated to connect to your database, you can now start and enable the Zabbix server service. Run the following command to enable the Zabbix server and ensure it starts automatically on boot:</p> <p>enable zabbix server service and start</p> <p>Red Hat <pre><code>systemctl enable zabbix-server --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre></p> <p>This command will start the Zabbix server service immediately and configure it to launch on system startup. To verify that the Zabbix server is running correctly, check the log file for any messages. You can view the latest entries in the <code>Zabbix server</code> log file using:</p> <p>check the zabbix log file</p> <pre><code>tail /var/log/zabbix/zabbix_server.log\n</code></pre> <p>Look for messages indicating that the server has started successfully. If there are any issues, the log file will provide details to help with troubleshooting.</p> <p>Example log output</p> <pre><code>12074:20250225:145333.529 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12074:20250225:145333.530 ****** Enabled features ******\n12074:20250225:145333.530 SNMP monitoring:           YES\n12074:20250225:145333.530 IPMI monitoring:           YES\n12074:20250225:145333.530 Web monitoring:            YES\n12074:20250225:145333.530 VMware monitoring:         YES\n12074:20250225:145333.530 SMTP authentication:       YES\n12074:20250225:145333.530 ODBC:                      YES\n12074:20250225:145333.530 SSH support:               YES\n12074:20250225:145333.530 IPv6 support:              YES\n12074:20250225:145333.530 TLS support:               YES\n12074:20250225:145333.530 ******************************\n12074:20250225:145333.530 using configuration file: /etc/zabbix/zabbix_server.conf\n12074:20250225:145333.545 current database version (mandatory/optional): 07020000/07020000\n12074:20250225:145333.545 required mandatory version: 07020000\n12075:20250225:145333.557 starting HA manager\n12075:20250225:145333.566 HA manager started in active mode\n12074:20250225:145333.567 server #0 started [main process]\n12076:20250225:145333.567 server #1 started [service manager #1]\n12077:20250225:145333.567 server #2 started [configuration syncer #1]\n12078:20250225:145333.718 server #3 started [alert manager #1]\n12079:20250225:145333.719 server #4 started [alerter #1]\n12080:20250225:145333.719 server #5 started [alerter #2]\n12081:20250225:145333.719 server #6 started [alerter #3]\n12082:20250225:145333.719 server #7 started [preprocessing manager #1]\n12083:20250225:145333.719 server #8 started [lld manager #1]\n</code></pre> <p>If there was an error and the server was not able to connect to the database you would see something like this in the server log file :</p> <p>Example of an error in the log</p> <pre><code>12068:20250225:145309.018 Starting Zabbix Server. Zabbix 7.2.4 (revision c34078a4563).\n12068:20250225:145309.018 ****** Enabled features ******\n12068:20250225:145309.018 SNMP monitoring:           YES\n12068:20250225:145309.018 IPMI monitoring:           YES\n12068:20250225:145309.018 Web monitoring:            YES\n12068:20250225:145309.018 VMware monitoring:         YES\n12068:20250225:145309.018 SMTP authentication:       YES\n12068:20250225:145309.018 ODBC:                      YES\n12068:20250225:145309.018 SSH support:               YES\n12068:20250225:145309.018 IPv6 support:              YES\n12068:20250225:145309.018 TLS support:               YES\n12068:20250225:145309.018 ******************************\n12068:20250225:145309.018 using configuration file: /etc/zabbix/zabbix_server.conf\n12068:20250225:145309.027 [Z3005] query failed: [1146] Table 'zabbix.users' doesn't exist [select userid from users limit 1]\n12068:20250225:145309.027 cannot use database \"zabbix\": database is not a Zabbix database\n</code></pre> <p>Let's check the Zabbix server service to see if it's enabled so that it survives a reboot</p> <p>check server status</p> <p><pre><code> systemctl status zabbix-server\n</code></pre> <pre><code>\u25cf zabbix-server.service - Zabbix Server\n Loaded: loaded (/usr/lib/systemd/system/zabbix-server.service; enabled; preset: disabled)\n Active: active (running) since Tue 2025-02-25 14:53:33 CET; 26min ago\n Main PID: 12074 (zabbix_server)\n      Tasks: 77 (limit: 24744)\n      Memory: 71.5M\n         CPU: 18.535s\n      CGroup: /system.slice/zabbix-server.service\n              \u251c\u250012074 /usr/sbin/zabbix_server -c /etc/zabbix/zabbix_server.conf\n              \u251c\u250012075 \"/usr/sbin/zabbix_server: ha manager\"\n              \u251c\u250012076 \"/usr/sbin/zabbix_server: service manager #1 [processed 0 events, updated 0 event tags, deleted 0 problems, synced 0 service updates, idle 5.027667 sec during 5.042628 sec]\"\n              \u251c\u250012077 \"/usr/sbin/zabbix_server: configuration syncer [synced configuration in 0.051345 sec, idle 10 sec]\"\n              \u251c\u250012078 \"/usr/sbin/zabbix_server: alert manager #1 [sent 0, failed 0 alerts, idle 5.030391 sec during 5.031944 sec]\"\n              \u251c\u250012079 \"/usr/sbin/zabbix_server: alerter #1 started\"\n              \u251c\u250012080 \"/usr/sbin/zabbix_server: alerter #2 started\"\n              \u251c\u250012081 \"/usr/sbin/zabbix_server: alerter #3 started\"\n              \u251c\u250012082 \"/usr/sbin/zabbix_server: preprocessing manager #1 [queued 0, processed 0 values, idle 5.023818 sec during 5.024830 sec]\"\n              \u251c\u250012083 \"/usr/sbin/zabbix_server: lld manager #1 [processed 0 LLD rules, idle 5.017278sec during 5.017574 sec]\"\n              \u251c\u250012084 \"/usr/sbin/zabbix_server: lld worker #1 [processed 1 LLD rules, idle 21.031209 sec during 21.063879 sec]\"\n              \u251c\u250012085 \"/usr/sbin/zabbix_server: lld worker #2 [processed 1 LLD rules, idle 43.195541 sec during 43.227934 sec]\"\n              \u251c\u250012086 \"/usr/sbin/zabbix_server: housekeeper [startup idle for 30 minutes]\"\n              \u251c\u250012087 \"/usr/sbin/zabbix_server: timer #1 [updated 0 hosts, suppressed 0 events in 0.017595 sec, idle 59 sec]\"\n              \u251c\u250012088 \"/usr/sbin/zabbix_server: http poller #1 [got 0 values in 0.000071 sec, idle 5 sec]\"\n              \u251c\u250012089 \"/usr/sbin/zabbix_server: browser poller #1 [got 0 values in 0.000066 sec, idle 5 sec]\"\n              \u251c\u250012090 \"/usr/sbin/zabbix_server: discovery manager #1 [processing 0 rules, 0 unsaved checks]\"\n              \u251c\u250012091 \"/usr/sbin/zabbix_server: history syncer #1 [processed 4 values, 3 triggers in 0.027382 sec, idle 1 sec]\"\n              \u251c\u250012092 \"/usr/sbin/zabbix_server: history syncer #2 [processed 0 values, 0 triggers in 0.000077 sec, idle 1 sec]\"\n              \u251c\u250012093 \"/usr/sbin/zabbix_server: history syncer #3 [processed 0 values, 0 triggers in 0.000076 sec, idle 1 sec]\"\n              \u251c\u250012094 \"/usr/sbin/zabbix_server: history syncer #4 [processed 0 values, 0 triggers in 0.000020 sec, idle 1 sec]\"\n              \u251c\u250012095 \"/usr/sbin/zabbix_server: escalator #1 [processed 0 escalations in 0.011627 sec, idle 3 sec]\"\n              \u251c\u250012096 \"/usr/sbin/zabbix_server: proxy poller #1 [exchanged data with 0 proxies in 0.000081 sec, idle 5 sec]\"\n              \u251c\u250012097 \"/usr/sbin/zabbix_server: self-monitoring [processed data in 0.000068 sec, idle 1 sec]\"\n</code></pre></p> <p>This concludes our chapter on installing and configuring the Zabbix server with PostgreSQL.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before configuring the front-end, you need to install the necessary packages. If the Zabbix front-end is hosted on the same server as the Zabbix server, you can install the packages on the same server as is in our case. It's also perfectly possible to install the front-end on another server. In that case you only need to specify the correct IP addresses and open the correct firewall ports.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#installing-the-frontend-with-nginx","title":"Installing the frontend with NGINX","text":"<p>install frontend packages</p> <p>Red Hat <pre><code># dnf install zabbix-nginx-conf zabbix-web-mysql\nor if you used PostgreSQL\n# dnf install zabbix-nginx-conf zabbix-web-pgsql\n</code></pre></p> <p>Ubuntu <pre><code># sudo apt install zabbix-frontend-php php8.3-mysql zabbix-nginx-conf\nor if you use PostgreSQL\n# sudo apt install zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>This command will install the front-end packages along with the required dependencies for Nginx. If you are installing the front-end on a different server, make sure to execute this command on that specific machine.</p> <p>If you don't remember how to add the repository, have a look at the topic Adding the zabbix repository</p> <p>First thing we have to do is alter the Nginx configuration file so that we don't use the standard config.</p> <p>edit nginx config for Red Hat</p> <pre><code>vi /etc/nginx/nginx.conf\n</code></pre> <p>In this configuration file look for the following block that starts with :</p> <p>original config</p> <pre><code>server {\nlisten 80;\nlisten [::]:80;\nserver*name *;\nroot /usr/share/nginx/html;\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n</code></pre> <p>Then, comment out the following server block within the configuration file:</p> <p>config after edit</p> <pre><code>server {\n# listen 80;\n# listen [::]:80;\n# server*name *;\n# root /usr/share/nginx/html;\n</code></pre> <p>The Zabbix configuration file must now be modified to reflect the current environment. Open the following file for editing:</p> <p>edit zabbix config for nginx</p> <pre><code>vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <p>And alter the following lines:</p> <p>original config</p> <pre><code>server {\nlisten 8080;\nserver_name example.com;\n\nroot    /usr/share/zabbix;\n\nindex   index.php;\n</code></pre> <p>Replace the first 2 lines with the correct port and domain for your front-end in case you don't have a domain you can replace <code>servername</code> with <code>_;</code> like in the example below:</p> <p>config after the edit</p> <pre><code>server { # listen 8080; # server*name example.com;\nlisten 80;\nserver_name *;\n\n         root    /usr/share/zabbix;\n\n         index   index.php;\n</code></pre> <p>The web server and PHP-FPM service are now ready for activation and persistent startup. Execute the following commands to enable and start them immediately:</p> <p>edit nginx config for ubuntu</p> <pre><code>sudo vi /etc/zabbix/nginx.conf\n</code></pre> <p>replace the Following lines:</p> <p>original config</p> <pre><code>server {\n#        listen          8080;\n#        server_name     example.com;\n</code></pre> <p>with :</p> <p>config after edit</p> <pre><code>server {\nlisten xxx.xxx.xxx.xxx:80;\nserver_name \"\";\n</code></pre> <p>where xxx.xxx.xxx.xxx is your IP or DNS name.</p> Note <p>server_name is normally replaced with the fqdn name of your machine. If you have no fqdn you can keep it open like in this example.</p> <p>restart the front-end services</p> <p>Red Hat <pre><code>systemctl enable php-fpm --now\nsystemctl enable nginx --now\n</code></pre></p> <p>Ubuntu <pre><code>sudo systemctl enable nginx php8.3-fpm\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>Let's verify if the service is properly started and enabled so that it survives our reboot next time.</p> <p>check if the service is running</p> <p><pre><code>systemctl status nginx\n</code></pre> <pre><code>\u25cf nginx.service - The nginx HTTP and reverse proxy server\n      Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; preset: disabled)\n     Drop-In: /usr/lib/systemd/system/nginx.service.d\n              \u2514\u2500php-fpm.conf\n      Active: active (running) since Mon 2023-11-20 11:42:18 CET; 30min ago\n    Main PID: 1206 (nginx)\n       Tasks: 2 (limit: 12344)\n      Memory: 4.8M\n         CPU: 38ms\n      CGroup: /system.slice/nginx.service\n              \u251c\u25001206 \"nginx: master process /usr/sbin/nginx\"\n              \u2514\u25001207 \"nginx: worker process\"\n\nNov 20 11:42:18 zabbix-srv systemd[1]: Starting The nginx HTTP and reverse proxy server...\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nNov 20 11:42:18 zabbix-srv nginx[1204]: nginx: configuration file /etc/nginx/nginx.conf test is successful\nNov 20 11:42:18 zabbix-srv systemd[1]: Started The nginx HTTP and reverse proxy server.\n</code></pre></p> <p>With the service operational and configured for automatic startup, the final preparatory step involves adjusting the firewall to permit inbound HTTP traffic. Execute the following commands:</p> <p>configure the firewall</p> <p>Red Hat</p> <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --reload\n</code></pre> <p>Ubuntu <pre><code>sudo ufw allow 80/tcp\n</code></pre></p> <p>Open your browser and go to the url or ip of your front-end :</p> <p>front-end configuration</p> <pre><code>http://&lt;ip or dns of the zabbix frontend server&gt;/\n</code></pre> <p>If all goes well you should be greeted with a Zabbix welcome page. In case you have an error check the configuration again or have a look at the nginx log file:</p> <pre><code> /var/log/nginx/error.log\n</code></pre> <p>or run the following command :</p> <pre><code>journalctl -xe\n</code></pre> <p>This should help you in locating the errors you made.</p> <p>Upon accessing the appropriate URL, a page resembling the one illustrated below should appear:</p> <p></p> <p>1.4 Zabbix welcome</p> <p>The Zabbix frontend presents a limited array of available localizations, as shown.</p> <p></p> <p>!.5 Zabbix welcome language choice</p> <p>What if we want to install Chinese as language or another language from the list? Run the next command to get a list of all locales available for your OS.</p> <p>install language packs</p> <p>Red Hat <pre><code>dnf list glibc-langpack-*\n</code></pre></p> <p>Ubuntu <pre><code>apt-cache search language-pack\n</code></pre></p> <p>Users on Ubuntu will probably notice following error `\"Locale for language \"en_US\" is not found on the web server.\"``</p> <p>This can be solved easy with the following commands.</p> <pre><code>sudo locale-gen en_US.UTF-8\nsudo update-locale\nsudo systemctl restart nginx php8.3-fpm\n</code></pre> <p>This will give you on Red Hat based systems a list like:</p> <pre><code>Installed Packages\nglibc-langpack-en.x86_64\nAvailable Packages\nglibc-langpack-aa.x86_64\n---\nglibc-langpack-zu.x86_64\n</code></pre> <p>on Ubuntu it will look like :</p> <pre><code>language-pack-kab - translation updates for language Kabyle\nlanguage-pack-kab-base - translations for language Kabyle\nlanguage-pack-kn - translation updates for language Kannada\nlanguage-pack-kn-base - translations for language Kannada\n---\nlanguage-pack-ko - translation updates for language Korean\nlanguage-pack-ko-base - translations for language Korean\nlanguage-pack-ku - translation updates for language Kurdish\nlanguage-pack-ku-base - translations for language Kurdish\nlanguage-pack-lt - translation updates for language Lithuanian\n</code></pre> <p>Let's search for our Chinese locale to see if it is available. As you can see the code starts with zh.</p> <p>search for language pack</p> <p>Red Hat <pre><code>dnf list glibc-langpack-* | grep zh\n</code></pre></p> <pre><code>glibc-langpack-zh.x86_64\nglibc-langpack-lzh.x86_64\n</code></pre> <p>Ubuntu <pre><code>sudo apt-cache search language-pack | grep -i zh\n</code></pre></p> <p>The command outputs two lines; however, given the identified language code, 'zh_CN,' only the first package requires installation.</p> <p>install the package</p> <p>Red Hat <pre><code>dnf install glibc-langpack-zh.x86_64\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install language-pack-zh-hans\nsudo systemctl restart nginx php8.3-fpm\n</code></pre></p> <p>When we return now to our front-end we are able to select the Chinese language, after a reload of our browser.</p> <p></p> <p>1.6 Zabbix select language</p> Note <p>If your preferred language is not available in the Zabbix front-end, don't worry it simply means that the translation is either incomplete or not yet available. Zabbix is an open-source project that relies on community contributions for translations, so you can help improve it by contributing your own translations.</p> <p>Visit the translation page at https://translate.zabbix.com/ to assist with the translation efforts. Once your translation is complete and reviewed, it will be included in the next minor patch version of Zabbix. Your contributions help make Zabbix more accessible and improve the overall user experience for everyone.</p> <p>When you're satisfied with the available translations, click <code>Next</code>. You will then be taken to a screen to verify that all prerequisites are satisfied. If any prerequisites are not fulfilled, address those issues first. However, if everything is in order, you should be able to proceed by clicking <code>Next</code>.</p> <p></p> <p>1.7 Zabbix pre-requisites</p> <p>On the next page, you'll configure the database connection parameters:</p> <ol> <li><code>Select the Database Type</code>: Choose either MySQL or PostgreSQL depending on your    setup.</li> <li><code>Enter the Database Host</code>: Provide the IP address or DNS name of your database    server. Use port 3306 for MariaDB/MySQL or 5432 for PostgreSQL.</li> <li><code>Enter the Database Name</code>: Specify the name of your database. In our case, it    is zabbix. If you are using PostgreSQL, you will also need to provide the schema    name, which is zabbix_server in our case.</li> <li><code>Enter the Database User</code>: Input the database user created for the web front-end,    remember in our basic installation guide we created 2 users zabbix-web and zabbix-srv.    One for the frontend and the other one for our zabbix server so here we will use     the user <code>zabbix-web</code>. Enter the corresponding password for this user.</li> </ol> <p>Ensure that the <code>Database TLS encryption</code> option is not selected, and then click <code>Next step</code> to proceed.</p> <p></p> <p>1.8 Zabbix connections</p> <p>You're almost finished with the setup! The final steps involve:</p> <ol> <li><code>Assigning an Instance Name</code>: Choose a descriptive name for your Zabbix instance.</li> <li><code>Selecting the Timezone</code>: Choose the timezone that matches your location or your preferred time zone for the Zabbix interface.</li> <li><code>Setting the Default Time Format</code>: Select the default time format you prefer to use.</li> <li>Encrypt connections from Web interface: I marked this box but you should    not. This box is to encrypt communications between Zabbix frontend and your    browser. We will cover this later.    Once these settings are configured, you can complete the setup and proceed with any final configuration steps as needed.</li> </ol> Note <p>It's a good practice to set your Zabbix server to the UTC timezone, especially when managing systems across multiple timezones. Using UTC helps ensure consistency in time-sensitive actions and events, as the server\u2019s timezone is often used for calculating and displaying time-related information.</p> <p></p> <p>1.9 Zabbix summary</p> <p>After clicking <code>Next step</code> again, you'll be taken to a page confirming that the configuration was successful. Click <code>Finish</code> to complete the setup process.</p> <p></p> <p>1.10 Zabbix install</p> <p>We are now ready to login :</p> <p></p> <p>1.11 Zabbix login</p> <ul> <li>Login : Admin</li> <li>Password : zabbix</li> </ul> <p>This concludes our topic on setting up the Zabbix server. If you're interested in securing your front-end, I recommend checking out the topic Securing Zabbix for additional guidance and best practices.</p> Note <p>If you are not able to safe your configuration at the end make sure SeLinux is disabled. It is possible that it will block access to certain files or even the database.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#conclusion","title":"Conclusion","text":"<p>With this, we conclude our journey through setting up Zabbix and configuring it with MySQL or PostgreSQL on RHEL-based systems and Ubuntu. We have walked through the essential steps of preparing the environment, installing the necessary components, and ensuring a fully functional Zabbix server. From database selection to web frontend configuration with Nginx, each decision has been aimed at creating a robust and efficient monitoring solution.</p> <p>At this stage, your Zabbix instance is operational, providing the foundation for advanced monitoring and alerting. In the upcoming chapters, we will delve into fine-tuning Zabbix, optimizing performance, and exploring key features that transform it into a powerful observability platform.</p> <p>Now that your Zabbix environment is up and running, let\u2019s take it to the next level.</p>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#questions","title":"Questions","text":"<ol> <li>Should I choose MySQL or PostgreSQL as the database back-end? Why?</li> <li>What version of Zabbix should I install for compatibility and stability?</li> <li>What port does my DB use ?</li> <li>What Zabbix logs should I check for troubleshooting common issues?</li> </ol>","tags":["beginner"]},{"location":"ch01-zabbix-components/basic-installation/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.postgresql.org/docs/current/ddl-priv.html</li> <li>https://www.zabbix.com/download</li> <li>https://www.zabbix.com/documentation/current/en/manual</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/requirements</li> <li>https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages</li> </ul>","tags":["beginner"]},{"location":"ch01-zabbix-components/chapter/","title":"Zabbix components, basic functions and installation","text":"<p>In this chapter, we expand on the foundational knowledge from the \"Getting Started\" section to provide a comprehensive guide for both beginners who are installing Zabbix for the first time and advanced users who seek to optimize their setup. We\u2019ll not only cover the essential steps for a basic installation but also delve into the finer details of Zabbix architecture, components, and best practices.</p> <p>We\u2019ll start by walking through the installation process, ensuring you have a solid foundation to build on. From there, we'll move into the core components of Zabbix, what each one does, how they interact, and why they are crucial to your monitoring solution. You'll learn about subprocesses, their roles, and how they contribute to Zabbix efficiency and reliability.</p> <p>Additionally, we\u2019ll explore good architectural choices that can make or break your monitoring setup. Whether you're managing a small network or a large-scale infrastructure, making the right design decisions early on will pay dividends in scalability, performance, and maintenance.</p> <p>This chapter is designed to cater to a wide range of readers. If you're simply looking to get Zabbix up and running, you'll find clear, step-by-step instructions. For those wanting to dive deeper, we'll provide detailed insights into how Zabbix functions under the hood, helping you make informed choices that align with your needs and future growth plans.</p> <p>By the end of this chapter, you will have not only a working Zabbix installation but also a thorough understanding of its components and architecture, empowering you to leverage Zabbix to its fullest potential, regardless of the complexity of your environment.</p> <p>Let\u2019s embark on this detailed journey into Zabbix and equip ourselves with the knowledge to both start and optimize a powerful monitoring solution.</p>"},{"location":"ch01-zabbix-components/ha-setup/","title":"HA Setup","text":"<p>In this section, we will set up Zabbix in a High Availability (HA) configuration. This feature, introduced in Zabbix 6, is a crucial enhancement that ensures continued monitoring even if a Zabbix server fails. With HA, when one Zabbix server goes down, another can take over seamlessly.</p> <p>For this guide, we will use two Zabbix servers and one database, but the setup allows for adding more zabbix servers if necessary.</p> <p></p> <p>1.1 HA Setup</p> <p>It's important to note that Zabbix HA setup is straightforward, providing redundancy without complex features like load balancing.</p> <p>Just as in our basic configuration, we will document key details for the servers in this HA setup. Below is the list of servers and some place to add their respective IP addresses for your convenience :</p> Server IP Address Zabbix Server 1 Zabbix Server 2 Database Virtual IP Note <p>Our database (DB) in this setup is not configured for HA. Since it's not a Zabbix component, you will need to implement your own solution for database HA, such as a HA SAN or a database cluster setup. A DB cluster configuration is out of the scope of this guide and unrelated to Zabbix, so it will not be covered here.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-database","title":"Installing the Database","text":"<p>Refer to the Basic Installation chapter for detailed instructions on setting up the database. That chapter provides step-by-step guidance on installing either a PostgreSQL or MariaDB database on a dedicated node running Ubuntu or Rocky Linux. The same installation steps apply when configuring the database for this setup.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-zabbix-cluster","title":"Installing the Zabbix cluster","text":"<p>Setting up a Zabbix cluster involves configuring multiple Zabbix servers to work together, providing high availability. While the process is similar to setting up a single Zabbix server, there are additional configuration steps required to enable HA (High Availability).</p> <p>Add the Zabbix Repositories to your servers.</p> <p>First, add the Zabbix repository to both of your Zabbix servers:</p> <p>add zabbix repository</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>Once this is done we can install the zabbix server packages.</p> <p>install zabbix server packages</p> <p>Redhat</p> <p><pre><code>dnf install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>dnf install zabbix-server-mysql\n</code></pre></p> <p>Ubuntu</p> <p><pre><code>sudo apt install zabbix-server-pgsql\n</code></pre> or if your database is MySQL or MariaDB <pre><code>sudo apt install zabbix-server-mysql\n</code></pre></p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-1","title":"Configuring Zabbix Server 1","text":"<p>Edit the Zabbix server configuration file,</p> <p>edit the server config file</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Update the following lines to connect to the database:</p> <pre><code>DBHost=&lt;zabbix db ip&gt;\nDBName=&lt;name of the zabbix DB&gt;\nDBUser=&lt;name of the db user&gt;\nDBSchema=&lt;db schema for the PostgreSQL DB&gt;\nDBPassword=&lt;your secret password&gt;\n</code></pre> <p>Configure the HA parameters for this server:</p> <pre><code>HANodeName=zabbix1 (or choose a name you prefer)\n</code></pre> <p>Specify the frontend node address for failover scenarios:</p> <pre><code>NodeAddress=&lt;Zabbix server 1 ip&gt;:10051\n</code></pre>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configuring-zabbix-server-2","title":"Configuring Zabbix Server 2","text":"<p>Repeat the configuration steps for the second Zabbix server. Adjust the <code>HANodeName</code> and <code>NodeAddress</code> as necessary for this server.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#starting-zabbix-server","title":"Starting Zabbix Server","text":"<p>After configuring both servers, enable and start the zabbix-server service on each:</p> <p>restart zabbix-server service</p> <pre><code>sudo systemctl enable zabbix-server --now\n</code></pre> Note <p>The <code>NodeAddress</code> must match the IP or FQDN name of the Zabbix server node. Without this parameter the Zabbix front-end is unable to connect to the active node. The result will be that the frontend is unable to display the status the queue and other information.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#verifying-the-configuration","title":"Verifying the Configuration","text":"<p>Check the log files on both servers to ensure they have started correctly and are operating in their respective HA modes.</p> <p>On the first server:</p> <p>check logs for HA messages</p> <pre><code>sudo grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>In the system logs, you should observe the following entries, indicating the initialization of the High Availability (HA) manager:</p> <pre><code>22597:20240309:155230.353 starting HA manager\n22597:20240309:155230.362 HA manager started in active mode\n</code></pre> <p>These log messages confirm that the HA manager process has started and assumed the active role. This means that the Zabbix instance is now the primary node in the HA cluster, handling all monitoring operations. If a failover event occurs, another standby node will take over based on the configured HA strategy.</p> <p>On the second server (and any additional nodes):</p> <pre><code>grep HA /var/log/zabbix/zabbix_server.log\n</code></pre> <p>In the system logs, the following entries indicate the initialization of the High Availability (HA) manager:</p> <pre><code>22304:20240309:155331.163 starting HA manager\n22304:20240309:155331.174 HA manager started in standby mode\n</code></pre> <p>These messages confirm that the HA manager process was invoked and successfully launched in standby mode. This suggests that the node is operational but not currently acting as the active HA instance, awaiting further state transitions based on the configured HA strategy.</p> <p>At this stage, your Zabbix cluster is successfully configured for High Availability (HA). The system logs confirm that the HA manager has been initialized and is running in standby mode, indicating that failover mechanisms are in place. This setup ensures uninterrupted monitoring, even in the event of a server failure, by allowing automatic role transitions based on the HA configuration.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#installing-the-frontend","title":"Installing the frontend","text":"<p>Before proceeding with the installation and configuration of the web server, it is essential to install Keepalived. Keepalived enables the use of a Virtual IP (VIP) for frontend services, ensuring seamless failover and service continuity. It provides a robust framework for both load balancing and high availability, making it a critical component in maintaining a resilient infrastructure.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#setting-up-keepalived","title":"Setting up keepalived","text":"Note <p>Keepalived is like a helper that makes sure one computer takes over if another one stops working. It gives them a shared magic IP address so users don't notice when a server fails. If the main one breaks, the backup jumps in right away. You can replace it with tools like Pacemaker, Corosync, or cloud load balancers that do the same \u201ctake over\u201d job. So let's get started. On both our servers we have to install keepalived.</p> <p>install keepalived</p> <p>Redhat <pre><code>dnf install keepalived\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install keepalived\n</code></pre></p> <p>Next, we need to modify the Keepalived configuration on both servers. While the configurations will be similar, each server requires slight adjustments. We will begin with Server 1. To edit the Keepalived configuration file, use the following command:</p> <p>edit the keepalived config</p> <p>RedHat and Ubuntu <pre><code>sudo vi /etc/keepalived/keepalived.conf\n</code></pre></p> <p>If the file contains any existing content, it should be cleared and replaced with the following lines :</p> <pre><code>vrrp_track_process track_nginx {\n    process nginx\n    weight 10\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface enp0s1\n    virtual_router_id 51\n    priority 244\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n        xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> Warning <p>Replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with something secure. For the virtual_ipaddress use a free IP from your network. This will be used as our VIP.</p> <p>We can now do the same modification on our <code>second</code> Zabbix server. Delete everything again in the same file like we did before and replace it with the following lines:</p> <pre><code>vrrp_track_process track_nginx {\n      process nginx\n      weight 10\n}\n\nvrrp_instance VI_1 {\n    state BACKUP\n    interface enp0s1\n    virtual_router_id 51\n    priority 243\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass 12345\n    }\n    virtual_ipaddress {\n       xxx.xxx.xxx.xxx\n    }\n    track_process {\n         track_nginx\n      }\n}\n</code></pre> <p>Just as with our 1st Zabbix server, replace <code>enp0s1</code> with the interface name of your machine and replace the <code>password</code> with your password and fill in the virtual_ipaddress as used before.</p> <p>This ends the configuration of keepalived. We can now continue adapting the frontend.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#install-and-configure-the-frontend","title":"Install and configure the frontend","text":"<p>On both servers we can run the following commands to install our web server and the zabbix frontend packages:</p> <p>install web server and config</p> <p>RedHat <pre><code>dnf install nginx zabbix-web-pgsql zabbix-nginx-conf\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install nginx zabbix-frontend-php php8.3-pgsql zabbix-nginx-conf\n</code></pre></p> <p>Additionally, it is crucial to configure the firewall. Proper firewall rules ensure seamless communication between the servers and prevent unexpected failures. Before proceeding, verify that the necessary ports are open and apply the required firewall rules accordingly.</p> <p>configure the firewall</p> <p>RedHat <pre><code>firewall-cmd --add-service=http --permanent\nfirewall-cmd --add-service=zabbix-server --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\nsudo ufw allow 80/tcp\n</code></pre></p> <p>With the configuration in place and the firewall properly configured, we can now start the Keepalived service. Additionally, we should enable it to ensure it automatically starts on reboot. Use the following commands to achieve this:</p> <p>start and enable keepalived</p> <p>RedHat and Ubuntu <pre><code>sudo systemctl enable keepalived nginx --now\n</code></pre></p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#configure-the-web-server","title":"Configure the web server","text":"<p>The setup process for the frontend follows the same steps outlined in the <code>Basic Installation</code> section under Installing the Frontend. By adhering to these established procedures, we ensure consistency and reliability in the deployment.</p> Warning <p>Ubuntu users need to use the VIP in the setup of Nginx, together with the local IP in the listen directive of the config.</p> Note <p>Don't forget to configure both front-ends. Also this is a new setup. Keep in mind that with an existing setup we need to comment out the lines  <code>$ZBX_SERVER</code> and <code>$ZBX_SERVER_PORT</code>. Our frontend will check what node is active by reading the node table in the database.</p> <p><pre><code>select * from ha_node;\n</code></pre> <pre><code>zabbix=# select * from ha_node;\n         ha_nodeid         |  name   |   address       | port  | lastaccess | status |       ha_sessionid\n---------------------------+---------+-----------------+-------+------------+--------+---------------------------\n cm8agwr2b0001h6kzzsv19ng6 | zabbix1 | xxx.xxx.xxx.xxx | 10051 | 1742133911 |      0 | cm8apvb0c0000jkkzx1ojuhst\n cm8agyv830001ell0m2nq5o6n | zabbix2 | localhost       | 10051 | 1742133911 |      3 | cm8ap7b8u0000jil0845p0w51\n(2 rows)\n</code></pre></p> <p>In this instance, the node <code>zabbix2</code> is identified as the active node, as indicated by its status value of <code>3</code>, which designates an active state. The possible status values are as follows:</p> <ul> <li><code>0</code> \u2013 Multiple nodes can remain in standby mode.</li> <li><code>1</code> \u2013 A previously detected node has been shut down.</li> <li><code>2</code> \u2013 A node was previously detected but became unavailable without a proper shutdown.</li> <li><code>3</code> \u2013 The node is currently active.</li> </ul> <p>This classification allows for effective monitoring and state management within the cluster.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#verify-the-correct-working","title":"Verify the correct working","text":"<p>To verify that the setup is functioning correctly, access your <code>Zabbix server</code> using the Virtual IP (VIP). Navigate to Reports \u2192 System Information in the menu. At the bottom of the page, you should see a list of servers, with at least one marked as active. The number of servers displayed will depend on the total configured in your HA setup.</p> <p></p> <p>1.2 verify HA</p> <p>Shut down or reboot the active frontend server and observe that the <code>Zabbix frontend</code> remains accessible. Upon reloading the page, you will notice that the other <code>frontend server</code> has taken over as the active instance, ensuring an almost seamless failover and high availability.</p> <p></p> <p>1.3 verify HA</p> <p>In addition to monitoring the status of HA nodes, Zabbix provides several runtime commands that allow administrators to manage failover settings and remove inactive nodes dynamically.</p> <p>One such command is:</p> <pre><code>zabbix_server -R ha_set_failover_delay=10m\n</code></pre> <p>This command adjusts the failover delay, which defines how long Zabbix waits before promoting a standby node to active status. The delay can be set within a range of 10 seconds to 15 minutes.</p> <p>To remove a node that is either stopped or unreachable, the following runtime command must be used:</p> <pre><code>zabbix_server -R ha_remove_node=`zabbix1`\n</code></pre> <p>Executing this command removes the node from the HA cluster. Upon successful removal, the output confirms the action:</p> <pre><code>Removed node \"zabbix1\" with ID \"cm8agwr2b0001h6kzzsv19ng6\"\n</code></pre> <p>If the removed node becomes available again, it can be added back automatically when it reconnects to the cluster. These runtime commands provide flexibility for managing high availability in Zabbix without requiring a full restart of the <code>zabbix_server</code> process.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#conclusion","title":"Conclusion","text":"<p>In this chapter, we have successfully set up a high-availability (HA) Zabbix environment by configuring both the Zabbix server and frontend for redundancy. We first established HA for the Zabbix server, ensuring that monitoring services remain available even in the event of a failure. Next, we focused on the frontend, implementing a Virtual IP (VIP) with Keepalived to provide seamless failover and continuous accessibility.</p> <p>Additionally, we configured the firewall to allow Keepalived traffic and ensured that the service starts automatically after a reboot. With this setup, the Zabbix frontend can dynamically switch between servers, minimizing downtime and improving reliability.</p> <p>While database HA is an important consideration, it falls outside the scope of this setup. However, this foundation provides a robust starting point for building a resilient monitoring infrastructure that can be further enhanced as needed.</p>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#questions","title":"Questions","text":"<ol> <li>What is Zabbix High Availability (HA), and why is it important?</li> <li>How does Zabbix determine which node is active in an HA setup?</li> <li>Can multiple Zabbix nodes be active simultaneously in an HA cluster? Why or    why not?</li> <li>What configuration file(s) are required to enable HA in Zabbix?</li> </ol>","tags":["expert"]},{"location":"ch01-zabbix-components/ha-setup/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.redhat.com/sysadmin/advanced-keepalived</li> <li>https://keepalived.readthedocs.io/en/latest/introduction.html</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/concepts/server/ha</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/chapter/","title":"Getting started with the Zabbix installation","text":"<p>We begin this chapter with a deep dive into the Zabbix frontend, the central hub where all monitoring and configuration tasks come together. Alongside the basic introduction to navigating the frontend, this chapter also covers user and group setup, focusing on creating a secure and efficient user management system.</p> <p>We'll walk through setting up internal authentication with best practices for security, including dual-factor authentication. For those needing advanced integration, we'll explore options like SAML, LDAP, and other external authentication methods.</p> <p>This chapter strikes a balance between a straightforward overview \u201cthis is the frontend\u201d and a more in depth look at the advanced choices you can make to enhance your system's security and manageability. Whether you're just getting started or looking to implement robust security measures, there's something here for everyone.</p> <p>By the end, you'll be well equipped to navigate the Zabbix frontend with confidence and set up a secure, scalable user management system tailored to your organization's needs.</p>"},{"location":"ch02-zabbix-installation/frontend/","title":"Frontend explained","text":"<p>This chapter is going to cover the basics we need to know when it comes to the Zabbix user interface and the thing we need to know before we can start to fully dive into our monitoring tool. We will see how the user interface works how to add a host, groups users, items ... so that we have a good understanding of the basics. This is something that is sometimes missed and can lead to frustrations not knowing why things don't work like we had expected them to work. So even if you are an advanced user it may be useful to have a look into this chapter.</p> <p>Let's get started</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#overview-of-the-interface","title":"Overview of the interface","text":"<p>With Zabbix 7 the user interface after logging in is a bit changed. Our menu on the left side of the screen has has a small overhaul. Let's dive into it. When we login into our Zabbix setup the first time with our Admin user we see a page</p> <p>like this where we have our <code>main window</code> in green our <code>main menu</code> marked in red and our <code>links</code> marked in yellow.</p> <p></p> <p>2.1 Overview</p> <p>The main menu can be hidden by collapsing it completely or to reduce it to a set of small icons. When we click on the button with the 2 arrows to the left:</p> <p></p> <p>2.2 Collapse</p> <p>You will see that the menu collapses to a set of small icons. Pressing \"&gt;&gt;\" will bring the <code>main menu</code> back to it's original state.</p> <p>When you click on the icon that looks like a box with an arrow sticking out, next to the \"&lt;&lt;\" button will hide the <code>main menu</code> completely.</p> <p></p> <p>2.3 Hide</p> <p>To bring back our <code>main menu</code> is rather easy, we just look for the button on the left with three horizontal lines and click on it. This will show the <code>main menu</code> but it won't stay. When we click on the box with the arrow now pointing to the bottom right it will keep the <code>main menu</code> back in it's position.</p> <p>Yet another way to make the screen bigger that is quite useful for monitors in <code>NOK teams</code> for example is the <code>kiosk mode</code> button. This one however is located on the left side of your screen and looks like 4 arrows pointing to every corner of the screen. Pressing this button will remove all the menus and leave only the <code>main window</code> to focus on.</p> <p></p> <p>2.4 Expand</p> <p>When we want to leave the kiosk mode, the button will be changed to 2 arrows pointing to the inside of the screen. Pressing this button will revert us back to the original state.</p> <p></p> <p>2.5 Shrink</p> Tip <p>We can also enter and exit kiosk mode by making use of parameters in our Zabbix url: <code>/zabbix.php?action=dashboard.view&amp;kiosk=1</code> - activate kiosk mode or <code>/zabbix.php?action=dashboard.view&amp;kiosk=0</code> - activate normal mode.</p> Note <p>There are many other page parameters we can use. A full list can be found at https://www.zabbix.com/documentation/7.4/en/manual/web_interface/page_parameters Zabbix also has a global search menu that we can use to find hosts, host groups and templates.</p> <p>If we type in the search box the word <code>server</code> you will see that we get an overview of all <code>templates</code>, <code>host groups</code> and <code>hosts</code> with the name server in it. That's why this is called the <code>global search</code> box.</p> <p></p> <p>2.6 Global search</p> <p>This is our result after we looked for the word <code>server</code>. If you have a standard Zabbix setup your page should look more or less the same.</p> <p></p> <p>2.7 Global search result</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#main-menu","title":"Main menu","text":"<p>We shall now briefly examine the constituent sections of the primary application menu. The <code>main menu</code>, situated on the left hand interface, comprises a total of nine distinct sections:</p> Menu Name Details Dashboards Contains an overview of all the dashboards we have access to. Monitoring Shows us the hosts, problems, latest data, maps, ... Services An overview of all the Services and SLA settings. Inventory An overview of our collected inventory data. Reports Shows us the system information, scheduled reports, audit logs, action logs, etc . Data collection Contains all things related to collecting data like hosts, templates, maintenance, discovery, ... Alert The configuration of our media types, scripts and actions Users User configuration like user roles, user groups, authentication, API tokes, ... Administration The administration part containing all global settings, housekeeper, proxies, queue, ...","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#links-menu","title":"Links menu","text":"<p>Immediately subjacent to the primary application menu on the left-hand interface resides the <code>Links</code> menu. This module furnishes a collection of pertinent hyperlinks for user access.</p> Menu name Details Support This brings us to the technical support page that you can buy from Zabbix. Remember that your local partner is also able to sell these contracts and can help you in your own language. Your local distributors Integrations The official zabbix integration page Help The link to the documentation of your Zabbix version User settings The user profile settings. Sign out Log out of the current session. <p>A few interactive elements remains to be addressed on the right-hand portion of the display.</p> <p></p> <p>2.8 Edit dashboard</p> <p>The <code>Edit dashboard</code> button facilitates modification of the user's dashboard configuration, a feature that will be elaborated upon in subsequent sections. Located on the extreme left margin is a query mark icon ('?'), activation of which redirects the user to the Zabbix documentation portal providing comprehensive details regarding dashboard functionalities. Conversely, the control situated on the right margin, represented by three horizontal lines, provides access to operations such as sharing, renaming, and deletion of user defined dashboards.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#system-information","title":"System information","text":"<p>The dashboard also features a dedicated panel labeled <code>System Information</code>. This widget provides a real-time overview of the operational status of the Zabbix deployment. We will now examine the individual data points presented within this panel, as their interpretation is crucial for system comprehension.</p> <p></p> <p></p> <p>2.9 System Information</p> Parameter Value Details Zabbix server is running The status of our zabbix server if it is running yes or no and if it is running on our localhost or another IP and on what port the zabbix server is listening. If no trapper is listening the rest of the information can not be displayed IP and port of the Zabbix server Zabbix server version This shows us the version of the <code>Zabbix server</code> so the version you see at the bottom of your screen is the one from the Zabbix frontend and can be different but should be in the same major version. Version Number Zabbix frontend version This is the version of the frontend and should match with what you see at the bottom of your screen. Version Number Number of hosts (enabled/disabled) The total number of hosts configured on our system How many of those are enabled and disabled Number of templates The number of templates installed on our Zabbix server. Number of items (enabled/disabled/not supported) This line shows us the number of items we have configured in total in this case 99 90 are enabled and 0 are disabled but 9 of them are unsupported. This last number is important as those are items not working. We will look into this later why it happens and how to fix it. For now remember that a high number of unsupported items is not a good idea. Number of triggers (Enabled/disabled[problem/ok]) The number of triggers configured Number of enabled and disabled triggers. Just as with items we also see if there are triggers that are in a problem state or ok state. A trigger in a problem state is a non working trigger something we need to monitor and fix. We will cover this also later. Number of users (online) Here we see the number of users that are configured on our system The number of users currently online. Required server performance, nvps The number of new values per second that Zabbix will process per second. This is just an estimated number as some values we get are unknown so the real value is probably higher. So we can have some indication about how many IOPS we need and how busy our database is. A better indication is probably the internal item <code>zabbix[wcache,values,all]</code> Global scripts on Zabbix server It notifies us that the Global scripts are enabled or disabled in the server config. Global scripts can be used in our frontend, actions, ... but need to be activated first High availability cluster It will show us if Zabbix HA cluster is disabled or not Failover delay once HA is activated Note <p><code>Global script</code> execution on Zabbix server can be enabled by going to the zabbix server configuration file and setting <code>EnableGlobalScripts=1</code>. For new installations, since Zabbix 7.0, global script execution on Zabbix server is disabled by default.</p> Tip <p>System information may display some additional warnings like when your database  doesn't have the correct character set or collation UTF-8.  Also when the database you used is lower or higher then the recommended version  or when there are misconfigurations on housekeeper or TimescaleDB.  Another warning you can see is about database history tables that aren't  upgraded or primary keys that have not been set. This is possible if you are  coming from an older version before Zabbix 6 and never did the upgrade.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#the-main-menu-explained","title":"The main menu explained","text":"<p>It's important to know that we have seen so far our dashboard with the Admin user and that this user is a <code>Zabbix Super Admin</code> user. This has a serious impact on what we can see and do in Zabbix as this user has no restrictions. Zabbix works with 3 different levels of users we have the regular <code>users</code>, <code>Zabbix Admin</code> and <code>Zabbix Super Admin</code> users. Let's have a deeper look at the differences :</p> <p></p> <p>2.10 Main menu sections</p> <ul> <li>A <code>Zabbix User</code> will only see the red part of our   <code>main menu</code> and will only be able to see our collected data.</li> <li>A <code>Zabbix Admin</code> will see the red part and the yellow   part of the <code>main menu</code> and is able to change our configuration.</li> <li>A <code>Zabbix Super Admin</code> will see the complete <code>main menu</code> and so is able   to change the configuration and all the global settings.</li> </ul> <p></p> <p>2.11 Monitoring menu</p> <ul> <li>Problems: This page will give us an overview of all the problems.   With filter we can look at recent problems past problems and problems   that are active now. There are many more filters tor drill down more.</li> <li>Hosts: This will give us a quick overview page with what's happening   on our hosts and allows us to quickly go to the latest data, graphs and dashboards.</li> <li>Latest data: This page I probably use the most, it shows us all the information   collected from all our hosts.</li> <li>Maps: The location where we can create map that are an overview of our   IT infrastructure very useful to get a high level overview of the network.</li> <li>Discovery: When we run a network discovery this is the place where we can find   the results.</li> </ul> <p></p> <p>2.12 Services menu</p> <ul> <li>Services: This page will give us a high level overview of all services   configured in Zabbix.</li> <li>SLA: An overview of all the SLAs configured in Zabbix.</li> <li>SLA Report: Here we can watch all SLA reports based on our filters.</li> </ul> <p></p> <p>2.13 Inventory menu</p> <ul> <li>Overview: A place where we can watch all our inventory data that   we have retrieved from our hosts.</li> <li>Hosts: Here we can filter by host and watch all inventory data for the   hosts we have selected.</li> </ul> <p></p> <p>2.14 Inventory menu</p> <ul> <li>System information: System information is a summary of key Zabbix server   and system data.</li> <li>Scheduled reports: The place where we can schedule our reports, a <code>pdf</code> of   the dashboard that will be sent at a specified time and date.</li> <li>Availability report: A nice overview where we can see what trigger has   been in <code>ok</code>/<code>nok</code> state for how much % of the time</li> <li>Top 100 triggers: Another page I visit a lot here we have our top list   with triggers that have been in a <code>NOK</code> state.</li> <li>Audit log: An overview of the user activity that happened on our system.   Useful if we want to know who did what and when.</li> <li>Action log: A detailed overview of our actions can be found here.   What mail was sent to who and when ...?</li> <li>Notifications: A quick overview of the number of notifications sent to each   user.</li> </ul> <p></p> <p>2.15 Data collection</p> <ul> <li>Template groups: A place to logical group all templates together in different   groups. Before it was mixed together with hosts in host groups.</li> <li>Host groups: A logical collection of different hosts put together.   Host groups are used for our permissions.</li> <li>Templates: A set off entities like items and triggers can be grouped together   on a template, A template can be applied to one or more hosts.</li> <li>Hosts: What we need in Zabbix to monitor A host, application, service ...</li> <li>Maintenance: The place to configure our maintenance windows. A maintenance   can be planned in this location.</li> <li>Event correlation: When we have multiple events that fires triggers related   we can configure correlations in this place.</li> <li>Discovery: Sometimes we like to use Zabbix to discover devices, services,...   on our network. This can be done here.</li> </ul> <p></p> <p>2.16 Alerts menu</p> <ul> <li>Actions: This menu allows us to configure actions based on <code>events</code> in   Zabbix. We can create such actions for triggers, services, discovery,   autoregistration and internal events.</li> <li>Media types: Zabbix can sent messages, emails etc ... based on the actions   we have configured. Those media types need templates and need to be activated.</li> <li>Scripts: In Zabbix it's possible to make use of scripts in our actions and   frontend. Those actions need to be created here first and configured.</li> </ul> <p></p> <p>2.17 Users menu</p> <ul> <li>User groups: The <code>User groups</code> menu section enables the creation and management of user groupings for streamlined access and permission control.</li> <li>User roles: The <code>User roles</code> menu section defines sets of permissions that can be assigned to individual users, limiting their allowed actions based on the user type they have within the system.</li> <li>Users: The <code>Users</code> menu section provides the interface for managing individual user accounts, including creation and modification settings.</li> <li>API tokens: The <code>API tokens</code> menu section manages authentication credentials specifically designed for programmatic access to the system's Application Programming Interface (API), enabling secure automation and integration with external applications.</li> <li>Authentication: The <code>Authentication</code> menu section configures the methods and settings used to verify user identities and control access to the system.</li> </ul> <p></p> <p>2.18 Administration menu</p> <ul> <li>General: The <code>General</code> menu section within administration allows configuration of core system-wide settings and parameters.</li> <li>Audit log: The <code>Audit log</code> menu section provides a chronological record of system activities and user actions for security monitoring and troubleshooting.</li> <li>Housekeeping: The <code>Housekeeping</code> menu section configures automated maintenance tasks for managing historical data and system performance.</li> <li>Proxies: The <code>Proxies</code> menu section manages the configuration and monitoring of proxy servers used for communication with managed hosts in distributed environments.</li> <li>Macros: The <code>Macros</code> menu section allows the definition and management of global variables for flexible system configuration.</li> <li>Queue: The <code>Queue</code> menu section provides real-time insight into the processing status of internal system tasks and data handling.</li> </ul> Info <p>More information can be found in the online Zabbix documentation here</p> Info <p>You will see that Zabbix is using the modal forms in the frontend on many places. The problem is that they are not movable. This module created by one of the Zabbix developers <code>UI Twix</code> will solve this problem for you.</p> Note <p>At time of writing there is no Dashboard import/export functionality in zabbix. So when upgrading dashboards it needs to be created by hand. It was on the roadmap for 7 but didn't made it so feel free to vote https://support.zabbix.com/browse/ZBXNEXT-5419</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#conclusion","title":"Conclusion","text":"<p>The Zabbix frontend serves as the central command center for monitoring, configuration, and system awareness. In this chapter, you explored how to navigate its interface from dashboards and the customizable main menu to powerful tools like system information and global search. You learned how each menu section (Monitoring, Data Collection, Alerts, Users, Administration, and more) aligns with distinct functions, and how kiosk mode and layout controls help optimize visibility during daily operations.</p> <p>Additionally, the system information widget stands out as a real time diagnostic snapshot, revealing critical metrics such as server status, number of hosts, templates, items, triggers, and user activity all of which aid rapid troubleshooting and performance assessment.</p> <p>By mastering these frontend components, you're now better equipped to confidently navigate Zabbix, manage user access, interpret monitoring data, and maintain your environment more effectively. This foundational knowledge lays the groundwork for deeper exploration into host configuration, authentication mechanisms, and advanced monitoring workflows in the chapters that follow.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#questions","title":"Questions","text":"<ul> <li> <p>Which frontend section (Monitoring, Data Collection, Alerts, Users, or Administration)   do you think you'll use most often in your daily work, and why?</p> </li> <li> <p>How can kiosk mode be useful in a real-world monitoring environment, and what   types of dashboards would you display with it?</p> </li> <li> <p>What insights can the system information widget provide during troubleshooting,   and how might it help identify issues with server performance?</p> </li> <li> <p>Why is it important to understand the difference between data displayed in \u201cMonitoring\u201d   and configuration options found in \u201cData Collection\u201d?</p> </li> <li> <p>If you were onboarding a new team member, which parts of the frontend would you   show them first, and why?</p> </li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/frontend/#useful-urls","title":"Useful URLs","text":"<ul> <li> <p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/dashboards</p> </li> <li> <p>https://blog.zabbix.com/handy-tips-6-organize-your-dashboards-and-create-slideshows-with-dashboard-pages/17511/</p> </li> <li> <p>https://blog.zabbix.com/interactive-dashboard-creation-for-large-organizations-and-msps/30132/</p> </li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/","title":"Host Groups","text":"<p>In Zabbix, host groups serve as a foundational mechanism for organizing monitored entities. They allow you to logically categorize hosts for easier management, simplified permissions, and streamlined configuration, especially useful in larger environments.</p> <p>Common examples include:</p> <ul> <li>Grouping all Linux servers together.</li> <li>Separating database servers (e.g., PostgreSQL, MySQL).</li> <li>Organizing hosts by team, location, or function.</li> </ul> <p>Host groups are not only for structuring your monitored hosts, they also play an important role in assigning templates, setting up user permissions, and filtering hosts in dashboards or maps.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#accessing-host-groups","title":"Accessing Host Groups","text":"<p>You can manage host groups by navigating to:</p> <p>Menu \u2192 Data collection \u2192 Host groups</p> <p></p> <p>2.19 Host Groups menu</p> <p>In this menu under <code>Data collection</code>, you'll notice two distinct sections:</p> <ul> <li>Host groups: Groups that contain hosts.</li> <li>Template groups: A newer addition, specifically created for organizing templates.</li> </ul> Info <p>If you're migrating from an older Zabbix version: In previous versions, templates and hosts were often placed in the same groups. This led to confusion, particularly for new users, as templates don't technically belong to host groups in Zabbix. As of recent versions (starting from Zabbix 6.x), template groups are separated out for better clarity.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#understanding-the-host-groups-overview","title":"Understanding the Host Groups Overview","text":"<p>When you open the Host groups menu, you'll see a list of predefined groups. Each group entry includes:</p> <ul> <li>Group name (e.g., <code>Linux servers</code>)</li> <li>Number of hosts in the group (displayed as a number in front)</li> <li>Host names currently assigned to that group</li> </ul> <p>Clicking on a host name will take you directly to the host's configuration screen, providing a convenient way to manage settings without navigating through multiple menus.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#creating-a-host-group","title":"Creating a Host Group","text":"<p>There are two main ways to create host groups:</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#1-during-host-creation","title":"1. During Host Creation","text":"<p>When adding a new host:</p> <ol> <li>Go to Data collection \u2192 Hosts.</li> <li>Click Create host (top right).</li> <li>In the Host groups field, select an existing group or type a new name to    create one on the fly.</li> </ol>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#2-from-the-host-groups-page","title":"2. From the Host Groups Page","text":"<ol> <li>Navigate to Data collection \u2192 Host groups.</li> <li>Click Create host group in the top right.</li> <li>Enter a Group name and click Add.</li> </ol> <p>2.20 Create new host groups</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#nested-host-groups","title":"Nested Host Groups","text":"<p>Zabbix supports nested host groups using forward slashes (<code>/</code>) in group names. This allows you to represent hierarchies such as:</p> <ul> <li><code>Europe/Belgium</code></li> <li><code>Europe/France</code></li> <li><code>Datacenters/US/Chicago</code></li> </ul> <p>These nested group names are just names Zabbix does not require that parent folders (e.g., <code>Europe</code>) physically exist as separate groups unless you explicitly create them.</p> Note <ul> <li>You cannot escape the <code>/</code> character.</li> <li>Group names cannot contain leading/trailing slashes or multiple consecutive   slashes.</li> <li><code>/</code> is reserved for nesting and cannot be used in regular group names.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#applying-permissions-and-tag-filters-to-nested-groups","title":"Applying Permissions and Tag Filters to Nested Groups","text":"<p>Once you've created nested groups, the Host group overview screen provides an option to apply permissions and tag filters to all subgroups:</p> <ol> <li>Click on a parent group (e.g., <code>Europe</code>).</li> <li>A box appears: Apply permissions and tag filters to all subgroups.</li> <li>Enabling this will cascade any rights assigned to the parent group down to its    subgroups.</li> </ol> <p></p> <p>2.21 subgroup permissions</p> <p>This is especially useful for user groups. For example:</p> <ul> <li>If Brian is in a user group with access to <code>Europe/Belgium</code>, enabling this   option allows Brian to see all hosts in subgroups like <code>Europe/Belgium/Gent</code>   or <code>Europe/Belgium/Brussels</code>, including their tags and data.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#best-practices","title":"Best Practices","text":"<ul> <li>Use a consistent naming convention: <code>Location/Function</code>, <code>Team/Environment</code>, etc.</li> <li>Assign hosts to multiple groups if they logically belong in more than one.</li> <li>Avoid overly deep nesting keep it readable and manageable.</li> <li>Regularly review group usage and clean up unused or outdated groups.</li> </ul> Tip <p>You can even try adding emojis to group names for a fun visual touch! \ud83c\udf89 For example: <code>\ud83c\udf0d Europe/\ud83c\udde7\ud83c\uddea Belgium</code> or <code>\ud83d\udce6 Containers/Docker</code>.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#conclusion","title":"Conclusion","text":"<p>Host groups are a key organizational tool in Zabbix. With the introduction of template groups, clearer group separation, and support for nested structures, modern versions of Zabbix offer great flexibility for tailoring your monitoring setup to your organization's structure and workflows.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#questions","title":"Questions","text":"<ul> <li>What are host groups used for in Zabbix?</li> <li>Can you assign a host to more than one group?</li> <li>How are nested groups created in Zabbix?</li> <li>What happens when you apply permissions to subgroups?</li> <li>Why are slashes (/) special in host group names?</li> <li>Can a parent group exist only logically (i.e., not created in Zabbix)?</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/host-groups/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/hosts/host_groups</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/http/","title":"HTTP","text":"<p>HTTP authentication is one of external authentication methods provided by Zabbix and can be used to additionally secure your Zabbix WebUI with basic authentication mechanism at HTTP server level.</p> <p>Basic HTTP authentication protects Website (Zabbix WebUI) resources with a username and password. When a user attempts to access Zabbix WebUI, the browser pops up a dialog asking for credentials before sending anything over to Zabbix WebUI php code.</p> <p>An HTTP server has a file with credentials that is used to authenticate users.</p> Note <p>IMPORTANT: usernames configured for basic authentication in HTTP server must exit in Zabbix. But only passwords configured in HTTP server are used for users authentication.</p> <p>First let's see how we can configure basic authentication in HTTP server.</p> Warning <p>The examples below provide just minimum set of options to configure basic authentication. Please refer to respective HTTP server documentation for more details</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#basic-authentication-in-nginx","title":"Basic authentication in Nginx","text":"<p>Find <code>location / {</code> block in Nginx configuration file that defines your Zabbix WebUI (in my Zabbix deployment it is <code>/etc/nginx/conf.d/nginx.conf</code> file) and add these two lines:</p> <pre><code>    location / {\n        ...\n        auth_basic \"Basic Auth Protected Site\";\n        auth_basic_user_file /etc/nginx/httpauth;\n    }\n</code></pre> <p>Do not forget to restart Nginx service after making this change.</p> <p>Then you need to create <code>/etc/nginx/httpauth</code> file which will keep all users' password (make sure to restrict access to this file). Format of this file is <code>username:hashed_password</code>, for example, for users <code>Admin</code> and <code>test</code>:</p> <pre><code>Admin:$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\ntest:$1$GXoDIOCA$u/n1kkDeFwcI4KhyHkY6p/\n</code></pre> <p>To generate hashed_password you can use <code>openssl</code> tool entering the password twice: <pre><code>openssl passwd\nPassword:\nVerifying - Password:\n$1$8T6SbR/N$rgANUPGvFh7H.R1Mffexh.\n</code></pre></p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#basic-authentication-in-apache-httpd","title":"Basic authentication in Apache HTTPD","text":"<p>Find <code>&lt;Directory \"/usr/share/zabbix\"&gt;</code> block in Apache HTTPD configuration file that defines your Zabbix WebUI (in my case it is <code>/etc/zabbix/apache.conf</code>) and add these lines:</p> Note <p>By default configuration has <code>Require all granted</code>, remove this line.</p> <p>For Ubuntu/Debian: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>For RedHat: <pre><code>    &lt;Directory \"/usr/share/zabbix\"&gt;\n        ...\n        AuthType Basic\n        AuthName \"Restricted Content\"\n        AuthUserFile /etc/httpd/.htpasswd\n        Require valid-user\n    &lt;/Directory&gt;\n</code></pre></p> <p>Do not forget to restart apache2 service after making this change.</p> <p>Create <code>/etc/apache2/.httpasswd</code> (<code>/etc/httpd/.htpassword</code> for RedHat) file that will have all the users with passwords, do it by using <code>htpasswd</code> tool, to add user <code>test</code> execute:</p> <p>For Ubuntu/Debian <pre><code>sudo htpasswd -c /etc/apache2/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>For RedHat <pre><code>sudo htpasswd -c /etc/httpd/.htpasswd test\nNew password: \nRe-type new password: \nAdding password for user test\n</code></pre></p> <p>To add more users to the file repeat the command without <code>-c</code> flag.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#zabbix-configuration-for-http-authentication","title":"Zabbix configuration for HTTP authentication","text":"<p>When we have a WEB server configured with basic authentication it is high time to configure Zabbix server. In Zabbix menu select <code>Users | Authentication | HTTP settings</code> and check <code>Enable HTTP authentication</code> check-box. Click <code>Update</code> and confirm the changes by clicking <code>OK</code> button.</p> <p></p> <p>2.1 HTTP users authentication</p> <p><code>Remove domain name</code> field should have a comma separated list of domains that Zabbix will remove from provided username, e.g. if a user enters \"test@myzabbix\" or \"myzabbix\\test\" and we have \"myzabbix\" in this field then the user will be logged in with username \"test\".</p> <p>Unchecking <code>Case-sensitive login</code> check-box will tell Zabbix to not pay attention to capital/small letters in usernames, e.g. \"tEst\" and \"test\" will become equally legitimate usernames even if in Zabbix we have only \"test\" user configured.</p> <p>Note that <code>Default login form</code> is set to \"Zabbix login form\". Now if you sign out you will see \"Sign in with HTTP\" link below Username and Password fields. If you click on the link you will be automatically logged in into Zabbix WebUI with the same username you previously used. Or you can enter different Username and Password and normally log in into Zabbix WebUI as different user.</p> <p></p> <p>2.2 HTTP users authentication login form</p> <p>If you select \"HTTP login form\" in <code>Default login form</code> drop-down you won't see standard Zabbix login form when you try to log out. You actually won't be able to sign out unless your authentication session expires. The only way to sign out is to clear cookies in your browser. Then you'll have to go through the Web server basic authentication procedure again.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#conclusion","title":"Conclusion","text":"<p>Configuring HTTP level authentication adds a critical layer of access control to your Zabbix Web UI by leveraging your web server's native authentication mechanisms. Whether using Nginx or Apache, this approach ensures that users are prompted for credentials before even reaching Zabbix, effectively guarding against unauthorized access at the HTTP entry point. Key considerations include ensuring that usernames used in the HTTP authentication are already defined within Zabbix itself only the password from the web server matters for credential checks and correctly setting up Zabbix's HTTP authentication settings (such as domain removal and case sensitivity options). By coordinating web server authentication settings with Zabbix's internal configuration, you can achieve seamless and secure user login workflows that blend frontend usability with robust protective measures.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#questions","title":"Questions","text":"<ul> <li> <p>What advantage does HTTP (web server based) authentication provide compared to   Zabbix's internal authentication mechanism? (Consider protection at the web   server layer before the user even reaches the Zabbix UI.)</p> </li> <li> <p>Why is it essential that a user must exist in Zabbix even when HTTP authentication   is enabled and why does the Zabbix password become irrelevant in that case?</p> </li> <li> <p>What are the configuration options in Zabbix's frontend under \u201cAdministration   \u2192 Authentication\u201d for HTTP authentication, and how might each affect login behavior?   Examples include enabling/disabling case sensitivity, domain stripping, and choice   of login form. </p> </li> <li> <p>Suppose you disable case sensitive logins and maintain both 'Admin' and 'admin'   accounts in Zabbix. How will HTTP authentication behave, and what outcome should   you expect?</p> </li> <li> <p>Imagine troubleshooting a login failure when using HTTP authentication: What   steps would you take to ensure the web server\u2019s authentication is configured   correctly before examining Zabbix settings?</p> </li> <li> <p>From a security standpoint, when would HTTP authentication alone be   insufficient and what other authentication methods (e.g., LDAP, SAML, MFA) might   you layer on top for added security?</p> </li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/http/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/http</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/ldap-ad/","title":"LDAP / AD","text":"<p>As any modern system Zabbix can perform users authentication using Lightweight Directory Access Protocol (LDAP). In theory LDAP is very well defined open protocol that should be vendor independent but its relative complexity plays a role in every LDAP server implementation. Zabbix is known to work well with Microsoft Active Directory and OpenLDAP server.</p> <p>LDAP authentication can be configured in two modes:</p> <ul> <li>Users authentication</li> <li>Users authentication with users provisioning</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#users-authentication-mode","title":"Users authentication mode","text":"<p>The process of the authenticating users follows this diagram.</p> <p></p> <p>2.3 LDAP users authentication</p> <p>As shown on the diagram a user that tries to log in must be pre-created in Zabbix to be able to log in using LDAP. The database user records do not have any fields \"saying\" that the user will be authenticated via LDAP, it's just users' passwords stored in the database are ignored, instead, Zabbix goes to a LDAP server to verify whether:</p> <ul> <li>user with a given username exists</li> <li>user provided the correct password</li> </ul> <p>no other attributes configured for the user on the LDAP server side are taken into account.</p> <p>So when Zabbix is used by many users and groups, user management becomes not a very trivial task as new people join different teams (or leave). This problem is addressed by \"users provisioning\" and we'll cover this topic a bit later. For now let's take a look at how to configure LDAP authentication.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#configure-ldap","title":"Configure LDAP","text":"<p>We believe that it is better to learn this topic by example so we'll be using our own LDAP server that you can spin up in a container by executing:</p> <pre><code># Install docker if you don't have it\n# For Ubuntu\napt install docker-ce\n\n# Start LDAP server container with pre-loaded data\ndocker run -p 3389:389 -p 6636:636 --name openldap-server --detach bgmot42/openldap-server:0.1.1\n</code></pre> <p>All users (including <code>ldap_search</code>) in this test LDAP server for simplicity have the word <code>password</code> as their passwords.</p> <p>Users <code>user1</code> and <code>user2</code> is a member of <code>zabbix-admins</code> LDAP group. User <code>user3</code> is a member of <code>zabbix-users</code> LDAP group.</p> Optional <p>To visually see LDAP server data (and add your own configuration like users and groups) you can start this standard container <code>docker run -p 8081:80 -p 4443:443 --name phpldapadmin --hostname phpldapadmin\\ --link openldap-server:ldap-host --env PHPLDAPADMIN_LDAP_HOSTS=ldap-host\\ --detach osixia/phpldapadmin:0.9.0</code> Now you can access this LDAP server via https://:4443 (or any other port you configure to access this Docker container), click Login, enter \u201ccn=admin,dc=example,dc=org\u201d in Login DN field and \u201cpassword\u201d in Password field, click Authenticate. You should see the following structure of the LDAP server (picture shows \u2018zabbix-admins\u2019 group configuration): <p></p> <p>2.4 LDAP server data</p> <p>Let's configure LDAP server settings in Zabbix. In Zabbix menu select <code>Users | Authentication | LDAP settings</code>, then check the check-box <code>Enable LDAP authentication</code> and click <code>Add</code> under <code>Servers</code> (change IP address of your LDAP server and port number according to your set up):</p> <p></p> <p>2.5 LDAP server settings in Zabbix</p> <p>Following diagram can help you understand how to configure LDAP server in Zabbix based on your LDAP server data structure:</p> <p></p> <p>2.6 LDAP server to Zabbix</p> <p>\u201cSpecial\u201d Distinguished Name (DN) cn=ldap_search,dc=example,dc=org is used for searching, i.e. Zabbix uses this DN to connect to LDAP server and of course when you connect to LDAP server you need to be authenticated \u2013 this is why you need to provide Bind password. This DN should have access to a sub-tree in LDAP data hierarchy where all your users are configured. In our case all the users configured \u201cunder\u201d ou=Users,dc=example,dc=org, this DN is called base DN and used by Zabbix as so to say \u201cstarting point\u201d to start searching.</p> Note <p>technically it is possible to bind to LDAP server anonymously, without providing a password but this is a huge breach in security as the whole users sub-tree becomes available for anonymous (unauthenticated) search, i.e. effectively exposed to any LDAP client that can connect to LDAP server over TCP. The LDAP server we deployed previously in Docker container does not provide this functionality.</p> <p>Click <code>Test</code> button and enter <code>user1</code> and <code>password</code> in the respective fields, the test should be successful confirming Zabbix can authenticate users against LDAP server.</p> Note <p>We can add multiple LDAP servers and use them for different <code>User groups</code>.</p> <p>To test real users login using LDAP authentication we need to create user groups and users in Zabbix. In Zabbix menu select <code>Users | User groups</code>. Make sure <code>Zabbix administrators</code> group exists (we'll need it later) and create new group <code>Zabbix users</code> by clicking <code>Create user group</code> button. Enter \"Zabbix users\" in <code>Group name</code> field, select \"LDAP\" in <code>Frontend access</code> drop-down that will make Zabbix to authenticate users belonging to this group against LDAP server and in <code>LDAP server</code> drop-down select LDAP server we earlier configured \"Test LDAP server\". Click <code>Add</code> button to create this User group:</p> <p></p> <p>2.7 Add user group in zabbix</p> <p>Now we need to create our test user. In Zabbix menu select <code>Users | Users</code> and click <code>Create user</code> button. Then enter \"user3\" in <code>Username</code> field. Select \"Zabbix users\" in <code>Groups</code> field. What you enter in <code>Password</code> and <code>Password (once again)</code> fields does not matter as Zabbix will not try to use this password, instead it will go to LDAP server to authenticate this user since it's a member of the User group that has authentication method <code>LDAP</code>, just make sure you enter the same string in these two fields and it satisfied your password strength policy defined in <code>Users | Authentication</code>.</p> <p></p> <p>2.8 Add user in Zabbix</p> <p>Then click <code>Permissions</code> tab and select \"User role\" in <code>Role</code> field:</p> <p></p> <p>2.9 Add user in Zabbix - permissions</p> <p>Click <code>Add</code> button to create the user.</p> <p>We are ready to test our LDAP server authentication! Click <code>Sign out</code> in Zabbix menu and login with \"user3\" as Username and \"password\" as <code>Password</code>, if you carefully followed the steps above you should successfully login with User role permissions.</p> <p>Click <code>Sign out</code> again and login as Admin again to proceed.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#just-in-time-user-provisioning","title":"Just-in-Time user provisioning","text":"<p>Now let's talk about really cool feature Zabbix provides - \"Just-in-Time user provisioning (JIT) available since Zabbix 6.4.</p> <p>This picture illustrates on high level how it works: </p> <p>2.10 LDAP JIT explained</p> <p>Here when Zabbix gets a username and password from the Zabbix Login form it goes to the LDAP server and gets all the information available for this user including his/her LDAP groups membership and e-mail address. Obviously, it gets all that only if the correct (from LDAP server perspective) username and password were provided. Then Zabbix goes through pre-configured mapping that defines users from which <code>LDAP group</code> goes to which <code>Zabbix user group</code>. If at least one match is found then a <code>Zabbix user</code> is created in the Zabbix database belonging to a <code>Zabbix user group</code> and having a <code>Zabbix user role</code> according to configured \u201cmatch\u201d. So far sounds pretty simple, right? Now let\u2019s go into details about how all this should be configured.</p> <p>In <code>Users | Authentication</code> we need to do two things:</p> <ul> <li> <p>Set <code>Default authentication</code> to LDAP. When JIT is turned off then type of   authentication is defined based on the User group a user that tries to login   belongs to. In case of JIT the user does not exist in Zabbix yet thus obviously   does not belong to any User group so Default method authentication is used   and we want it to be LDAP.</p> </li> <li> <p>Provide <code>Deprovisioned users group</code>. This group must be literally disabled   otherwise you won't be able to select it here. This is the Zabbix user group   where all de-provisioned users will be put into so effectively will get   disabled from accessing Zabbix.</p> </li> </ul> <p></p> <p>2.11 Default authentication</p> <p>Click <code>Update</code> button`.</p> <ul> <li>Enable JIT provisioning check-box which obviously needs to be checked for this   feature to work. It's done in our Test LDAP server configuration - select   <code>Users | Authentication | LDAP settings</code> and click on our server in <code>Servers</code>   section. After enabling this check-box we'll see some other fields related to   JIT to be filled in and what we put in there depends on the method we choose to   perform JIT.</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#group-configuration-method-memberof","title":"Group configuration method \u201cmemberOf\u201d","text":"<p>All users in our LDAP server have memberOf attribute which defines what LDAP groups every user belongs to, e.g. if we perform a LDAP query for user1 user we\u2019ll get that its memberOf attribute has this value:</p> <p>memberOf: cn=zabbix-admins,ou=Group,dc=example,dc=org</p> <p>Note, that your real LDAP server can have totally different LDAP attribute that provides users\u2019 group membership, and of course, you can easily configure what attribute to use when searching for user\u2019s LDAP groups by putting it into <code>User group membership attribute</code> field:</p> <p></p> <p>2.12 LDAP groups mapping</p> <p>In the picture above we are telling Zabbix to use memberOf attribute to extract DN defining user\u2019s group membership (in this case it is cn=zabbix-admins,out=Group,dc=example,dc=org) and take only cn attribute from that DN (in this case it is zabbix-admins) to use in searching for a match in User group mapping rules. Then we define as many mapping rules as we want. In the picture above we have two rules:</p> <ul> <li>All users belonging to zabbix-users LDAP group will be created in Zabbix as   members of Zabbix users group with User role</li> <li>All users belonging to zabbix-admins LDAP group will be created in Zabbix   as members of Zabbix administrators group with Super admin role</li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#group-configuration-method-groupofnames","title":"Group configuration method \u201cgroupOfNames\u201d","text":"<p>There is another method of finding users\u2019 group membership called \u201cgroupOfNames\u201d it is not as efficient as \u201cmemberOf\u201d method but can provide much more flexibility if needed. Here Zabbix is not querying LDAP server for a user instead it is searching for LDAP groups based on a given criterion (filter). It\u2019s easier to explain with pictures depicting an example:</p> <p></p> <p>2.13 LDAP server groupOfNames</p> <p>Firstly we define LDAP \u201csub-tree\u201d where Zabbix will be searching for LDAP groups \u2013 note ou=Group,dc=example,dc=org in Group base DN field. Then in the field <code>Group name attribute</code> field we what attribute to use when we search in mapping rules (in this case we take cn, i.e. only zabbix-admins from full DN cn=zabbix-admins,ou=Group,dc=example,dc=org). Each LDAP group in our LDAP server has member attribute that has all users that belong to this LDAP group (look at the right picture) so we put member in <code>Group member attribute</code> field. Each user\u2019s DN will help us construct <code>Group filter</code> field. Now pay attention: <code>Reference attribute</code> field defines what LDAP user\u2019s attribute Zabbix will use in the <code>Group filter</code>, i.e. %{ref} will be replaced with the value of this attribute (here we are talking about the user\u2019s attributes \u2013 we already authenticated this user, i.e. got all its attributes from LDAP server). To sum up what I've said above Zabbix:</p> <ol> <li>Authenticates the user with entered Username and Password against LDAP    server getting all user\u2019s LDAP attributes</li> <li>Uses <code>Reference attribute</code> and <code>Group filter</code> fields to construct a filter    (when user1 logs in the filter will be (member=uid=user1,ou=Users,dc=example,    dc=org)</li> <li>Performs LDAP query to get all LDAP groups with member attribute (configured    in <code>Group member attribute</code> field) containing constructed in step 2) filter</li> <li>Goes through all LDAP groups received in step 3) and picks <code>cn</code> attribute    (configured in <code>Group name attribute</code> field) and finds a match in User group    mapping rules</li> </ol> <p>Looks a bit complicated but all you really need to know is the structure of your LDAP data.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#ready-to-test","title":"Ready to test","text":"<p>Now when you login with user1 or user2 username then these users will be created by Zabbix and put into Zabbix administrators user group, when you login with user3 username then this user will be created by Zabbix and put into Zabbix users user group:</p> <p></p> <p>2.14 Test user1</p> <p></p> <p>2.15 Test user3</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#conclusion","title":"Conclusion","text":"<p>Integrating Zabbix with LDAP\u2014or specifically, Active Directory elevates your system's authentication capabilities by leveraging existing organizational credentials. It allows users to log in using familiar domain credentials, while Zabbix offloads the password verification process to a trusted external directory. Notably, even when configuring LDAP authentication, corresponding user accounts must still exist within Zabbix though their internal passwords become irrelevant once external authentication is active.</p> <p>Particularly powerful is the Just-In-Time (JIT) provisioning feature: this enables Zabbix to dynamically create user accounts upon first successful LDAP login streamlining onboarding and reducing manual administration. Beyond that, JIT supports ongoing synchronization updating user roles, group memberships, or even user removals in Zabbix to mirror changes in LDAP\u2014either when a user logs in or during configured provisioning intervals.</p> <p>Important configuration details such as case sensitivity, authentication binding methods, search filters, and group mapping need careful attention to ensure reliable and secure operation. And while LDAP offers seamless integration, Zabbix still maintains control over roles, permissions, and access behavior through its own user and user group models Zabbix.</p> <p>In sum, LDAP/AD authentication offers a scalable, secure, and enterprise-aligned approach to centralizing identity management in Zabbix. With flexible provisioning and synchronization, organizations can reduce administrative load while reinforcing consistency across their access control and authentication strategy.</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#questions","title":"Questions","text":"<ul> <li> <p>What are the main benefits of integrating Zabbix authentication with LDAP or Active   Directory compared to using only internal Zabbix accounts?</p> </li> <li> <p>Why must a user still exist in Zabbix even when LDAP authentication is enabled,   and what role does the internal password play in that case?</p> </li> <li> <p>How does Just-In-Time (JIT) provisioning simplify user management in Zabbix,   and what potential risks or caveats should an administrator consider when   enabling it?</p> </li> <li> <p>What is the difference between user authentication and user authorization in   the context of LDAP integration with Zabbix? (Hint: Authentication verifies   credentials, while authorization determines permissions inside Zabbix.)</p> </li> <li> <p>Imagine an administrator incorrectly configures the LDAP search filter. What issues   might users encounter when attempting to log in, and how could you troubleshoot   the problem?</p> </li> <li> <p>How could LDAP group mappings be used to streamline permission assignment in   Zabbix? Can you think of an example from your own environment?</p> </li> <li> <p>If an organization disables a user account in Active Directory, how does JIT   provisioning ensure that Zabbix access is also updated? What would happen if   JIT was not enabled?</p> </li> </ul>","tags":["expert"]},{"location":"ch02-zabbix-installation/ldap-ad/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/ldap</p>","tags":["expert"]},{"location":"ch02-zabbix-installation/mfa/","title":"Multi factor authentication","text":"<p>We all know that before you can start configuring Zabbix via WebUI you have to sign in. Zabbix has several options to provide better security for user passwords by configuring password policy:</p> <ul> <li>Requirement for Minimum password length</li> <li>Requirements for password to contain an uppercase and a lowercase Latin letter,   a digit, a special character</li> <li>Requirement to avoid easy-to-guess passwords</li> </ul> <p>To secure sign in process even more you can configure multi factor authentication (MFA). MFA protects Zabbix by using a second source of validation before granting access to its WebUI after a user enters his/her password correctly. Zabbix offers to types of MFA - Time-based one-time password (TOTP) and Duo MFA provider.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#time-based-one-time-password","title":"Time-based one-time password","text":"<p>In the menu select <code>Users</code> section and then <code>Authentication</code></p> <p></p> <p>2.20 Initial MFA settings</p> <p>Now in <code>MFA settings</code> tab select the <code>Enable multi-factor authentication</code> check-box, then select <code>TOTP</code> in Type drop-down list.</p> <p></p> <p>2.21 New MFA method</p> <p>In <code>Hash function</code> drop-down list you can choose SHA-1, SHA-256 or SHA-512, the higher number is the better security.</p> <p>In <code>Code lentgh</code> you can select how many digits will be generated for you by Authenticator application on your phone.</p> <p>Click <code>Add</code> and then <code>Update</code>. Now you have TOTP MFA configured and it is the default method of MFA.</p> <p></p> <p>2.22 New MFA method added</p> <p>Now you need to tell Zabbix for which User group (or groups) to use MFA. Let's create a User group that would require MFA.</p> <p>In the menu select <code>Users</code> section and then <code>User groups</code>, then click <code>Create user group</code> button</p> <p></p> <p>2.23 Create user group</p> <p>In <code>Group name</code> put \"test\". Note that <code>Multi-factor authentication</code> field is \"Default\", as currently we have only one MFA method configured it does not matter whether we select \"Default\" or \"TOTP1\" that we created above. You also can disable MFA for all users belonging to this User group. Click <code>Add</code> button to create \"test\" User group.</p> <p></p> <p>2.24 New user group configuration</p> Note <p>MFA method is defined on per User group basis, i.e. MFA method configured for a User group will be applied to all users belonging to this group.</p> <p>Let's add a user to this user group. In the menu select <code>Users</code> section and then <code>Users</code>, then click <code>Create user</code> button</p> <p></p> <p>2.25 Create user</p> <p>Fill in <code>Username</code>, <code>Password</code> and <code>Password (once again)</code> fields. Make sure you select <code>test</code> user group in <code>Groups</code> field.</p> <p></p> <p>2.26 New user configuration</p> <p>Then switch to <code>Permissions</code> tab and select any role.</p> <p></p> <p>2.27 New user permissions</p> <p>Click <code>Add</code> button to add the user.</p> <p>Now we can test how TOTP MFA works. Sign out and then try to sign in as a test user you just created. You will be presented with a QR code. That means that the user <code>test</code> has not been enrolled in TOTP MFA yet.</p> <p></p> <p>2.28 TOTP QR code</p> <p>On your phone you need to install either \"Microsoft authenticator\" or \"Google authenticator\" application. The procedure of adding new QR code is quite similar, here is how it looks in \"Google authenticator\". Tap <code>Add a code</code> and then <code>Scan a QR code</code>. You'll be immediately presented with a 6 digit code (remember we selected 6 in <code>Code length</code> when we configured TOTP MFA?)</p> <p></p> <p>2.29 Authenticator app, step 1</p> <p></p> <p>2.30 Authenticator app, step 2</p> <p></p> <p>2.31 Authenticator app, step 3</p> <p>Enter this code into <code>Verification code</code> field of your login screen and click <code>Sign in</code>, if you did everything right you are logged in into Zabbix at this point. At this point the user \"test\" is considered enrolled into TOTP MFA and Zabbix stores a special code used for further authentications in its database. The next time user \"test\" tries to login into Zabbix there will be only a field to enter verification code</p> <p></p> <p>2.32 Verification code request</p> Warning <p>For TOTP MFA to work your Zabbix server must have correct time. Sometimes it's not the case especially if you are working with containers so pay attention to this.</p> <p>If a user changes (or loses) his/her phone, then Zabbix administrator should reset his/her enrolment. To do that in the menu select <code>Users</code> then mark a check-box to the left of \"test\" user and click \"Reset TOTP secret\" button.</p> <p></p> <p>2.33 Reset TOTP secret</p> <p>After you reset TOTP secret the \"test\" user will have to undergo enrolment procedure again.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#duo-mfa-provider","title":"Duo MFA provider","text":"<p>Duo is a very famous security platform that provides a lot of security related features/products. To read more please visit Duo. Here we'll talk about Duo only in regards to Zabbix MFA.</p> Warning <p>For Duo MFA to work your Zabbix WebUI must be configured to work with HTTPS (valid certificate is not required, self-signed certificate will work).</p> <p>First of all you need to create an account with Duo (it's free to manage up to 10 users) then login into Duo, you are an admin here. In the menu on the left select <code>Applications</code> and click <code>Protect an Application</code> button.</p> <p></p> <p>2.34 DUO Applications menu</p> <p>Then you will see WebSDK in applications list, click on it</p> <p></p> <p>2.35 DUO Applications list</p> <p>Here you'll see all the data needed for Zabbix.</p> <p></p> <p>2.36 DUO WebSDK application settings</p> <p>Now let's go to Zabbix. First we need to configure Duo MFA method. In the menu select <code>Users</code> and click <code>Authentication</code>. Then on <code>MFA settings</code> tab click <code>Add</code> in <code>Methods</code> section.</p> <p></p> <p>2.37 Add MFA method</p> <p>Fill in all the fields with data from Duo Dashboard -&gt; Applications -&gt; Web SDK page (see screenshot above) and click <code>Add</code>, then click <code>Update</code> to update Authentication settings.</p> <p></p> <p>2.38 DUO method settings</p> <p>After the MFA method is configured let's switch the \"Test\" group to use Duo MFA. In the menu select <code>Users</code> and click <code>User groups</code>, then click \"test\" group. In the field <code>Multi-factor authentication</code> select \"DUO1\" and click <code>Update</code>.</p> <p></p> <p>2.39 DUO MFA authentication method for user group</p> <p>Everything is ready. Let's test it. Sign out of Zabbix and sign back in with \"test\" user. You should see a welcome screen from Duo. Click several <code>Next</code> buttons.</p> <p></p> <p>2.40 Enrolling into DUO, step1</p> <p></p> <p>2.41 Enrolling into DUO, step2</p> <p></p> <p>2.42 Enrolling into DUO, step3</p> <p>Then you need to select the method of authentication.</p> <p></p> <p>2.43 Enrolling into DUO, step4</p> <p>It is up to you what to select you can experiment with all these methods. Let's select \"Duo Mobile\" (you need to install \"Duo mobile\" application on your device). Click <code>I have a tablet</code> (it's just easier to activate your device this way) and confirm that you installed \"Duo mobile\" on your phone. At this point you should see a QR code that you need to scan in \"Duo mobile\" application.</p> <p></p> <p>2.44 Enrolling into DUO, step5</p> <p></p> <p>2.45 Enrolling into DUO, step6</p> <p></p> <p>2.46 Enrolling into DUO, step7</p> <p>Open \"Duo mobile\" on your phone. If you did not have this application previously installed (thus no accounts enrolled) you will see couple of welcome screens.</p> <p></p> <p>2.47 Configure DUO app, step 1</p> <p></p> <p>2.48 Configure DUO app, step 2</p> <p>Tap on \"Use a QR code\" and then scan the code presented by Duo in your Zabbix login screen. After you do that you will see that the account is enrolled to your Duo MFA. Enter account name and tap \"Done\" and you will see the account in the list of all accounts enrolled into Duo MFA on this device. In Zabbix WebUI you will also see a confirmation, click \"Continue\".</p> <p></p> <p>2.49 Configure DUO app, step 3</p> <p></p> <p>2.50 Configure DUO app, step 4</p> <p></p> <p>2.51 Enrolment confirmation</p> <p>Duo will ask you now whether you want to add another method of authentication, click <code>Skip for now</code> and you'll see a confirmation that set up completed. Click <code>Login with Duo</code> and a notification will be pushed to your device.</p> <p></p> <p>2.52 Add another way to login</p> <p></p> <p>2.53 MFA DUO set up completed</p> <p></p> <p>2.54 DUO push notification sent</p> <p>Now just tap on \"Approve\" on your device and you will be logged in into Zabbix.</p> <p></p> <p>2.55 DUO push notification on the phone</p> <p>Duo MFA enrolment complete. If you sign out and sign in back then immediately a push notification will be sent to your device and all you need is tap on \"Approve\". Also you will see the user \"test\" in Duo where you can delete the user, or deactivate just click on it and experiment.</p> <p></p> <p>2.56 New user registered in DUO</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#conclusion","title":"Conclusion","text":"<p>Implementing Multi-Factor Authentication (MFA) in Zabbix is a powerful way to significantly advance your system\u2019s security beyond the standard password policies. This chapter outlined how Zabbix supports two robust MFA mechanisms:</p> <ul> <li> <p>Time Based One-Time Password (TOTP): Offers user-friendly, secure login via an   authenticator app (like Google or Microsoft Authenticator). It's easy to   configure and effective just ensure that your Zabbix server maintains accurate   time settings to avoid authentication issues.</p> </li> <li> <p>Duo MFA: Integrates a more advanced, enterprise grade solution that provides   features like push notifications and customizable authentication methods. Duo   offers flexible and strong security, albeit requiring a bit more setup (including   HTTPS on the Zabbix WebUI).</p> </li> </ul> <p>Both MFA options elevate the login process by introducing an additional layer of validation. Administrators can apply MFA selectively by assigning it to specific user groups thus tailoring the security posture to organizational needs.</p> <p>Ultimately, enabling MFA not only enhances protection against unauthorized access but also fits within a broader strategy of robust authentication. Whether through TOTP or Duo, adding MFA demonstrates a commitment to safeguarding access to your Zabbix environment and fortifying your monitoring infrastructure.n</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#questions","title":"Questions","text":"<ul> <li> <p>Why is relying on a password alone not sufficient to secure access to a Zabbix   instance? (Think about common attack methods like password reuse, brute force,   or phishing.)</p> </li> <li> <p>What are the key differences between TOTP-based MFA and Duo MFA in terms of setup,   security, and user experience?</p> </li> <li> <p>How does accurate system time affect the reliability of TOTP authentication,   and what could go wrong if time synchronization is not maintained?</p> </li> <li> <p>If you were tasked with enabling MFA for a production Zabbix system, which method   (TOTP or Duo) would you choose, and why? (Consider factors such as environment   size, user skill level, regulatory requirements, and available resources.)</p> </li> <li> <p>What are some potential challenges when rolling out MFA in an organization,   and how could an administrator mitigate user resistance or technical issues?</p> </li> <li> <p>Why might it be useful to enable MFA only for certain user groups in Zabbix   rather than enforcing it globally?</p> </li> <li> <p>How does adding MFA to Zabbix align with a broader security strategy, and what   other complementary security measures should be considered?</p> </li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/mfa/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/mfa https://duo.com/docs/sso-zabbix</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/","title":"SAML","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#google","title":"Google","text":"<p>Integrating Security Assertion Markup Language (SAML) for authentication within Zabbix presents a non-trivial configuration challenge. This process necessitates meticulous management of cryptographic certificates and the precise definition of attribute filters. Furthermore, the official Zabbix documentation, while comprehensive, can initially appear terse.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#initial-configuration-certificate-generation","title":"Initial Configuration: Certificate Generation","text":"<p>The foundational step in SAML integration involves the generation of a <code>private key</code> and a corresponding X.509 certificate. These cryptographic assets are critical for establishing a secure trust relationship between Zabbix and the Identity Provider (IdP).</p> <p>By default, Zabbix expects these files to reside within the <code>ui/conf/certs/</code> directory. However, for environments requiring customized storage locations, the zabbix.conf.php configuration file allows for the specification of alternative paths.</p> <p>Let's create our private key and certificate file.</p> <pre><code>cd /usr/share/zabbix/ui/conf/certs/\nopenssl req -newkey rsa:2048 -nodes -keyout sp.key -x509 -days 365 -out sp.crt\n</code></pre> <p>Following the generation and placement of the Zabbix Service Provider (SP) certificates, the next critical phase involves configuring the Identity Provider (IdP). In this context, we will focus on Google Workspace as the IdP.</p> <p>Retrieving the IdP Certificate (idp.crt) from Google Workspace:</p> <ol> <li>Access the Google Workspace Admin Console: Log in to your Google Workspace    administrator account.</li> <li>Navigate to Applications: Within the admin console, locate and select the    \"Apps\" section.</li> <li>Access Web and Mobile Apps: Choose <code>Web and mobile apps</code> from the available    options.</li> <li>Create a New Application: Initiate the creation of a new application to    facilitate SAML integration. This action will trigger Google Workspace to generate    the necessary IdP certificate.    </li> </ol> <p>2.16 create new application</p> <ol> <li>Download the IdP Certificate: Within the newly created application's settings,    locate and download the idp.crt file. This certificate is crucial for establishing    trust between Zabbix and Google Workspace.</li> <li>Placement of idp.crt: Copy the downloaded <code>idp.crt</code> file to the same directory    as the SP certificates in Zabbix, under <code>ui/conf/certs/</code>.</li> </ol> <p></p> <p>2.17 add certificate</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#saml-attribute-mapping-and-group-authorization","title":"SAML Attribute Mapping and Group Authorization","text":"<p>A key aspect of SAML configuration is the mapping of attributes between Google Workspace and Zabbix. This mapping defines how user information is transferred and interpreted.</p> <p>Attribute Mapping:</p> <ul> <li>It is strongly recommended to map the Google Workspace \"Primary Email\" attribute   to the Zabbix \"Username\" field. This ensures seamless user login using their   Google Workspace email addresses.</li> <li>Furthermore, mapping relevant Google Workspace group attributes allows for granular   control over Zabbix user access. For instance, specific Google Workspace groups   can be authorized to access particular Zabbix resources or functionalities.</li> </ul> <p>Group Authorization:</p> <ul> <li>Within the Google Workspace application settings, define the groups that are   authorized to utilize SAML authentication with Zabbix.</li> <li>This configuration enables the administrator to control which users can use   SAML to log into Zabbix.</li> <li>In Zabbix, you will also need to create matching user groups and configure   the authentication to use those groups.</li> </ul> <p>Configuration Example (Conceptual):</p> <ul> <li>Google Workspace Attribute: \"Primary Email\" -&gt; Zabbix Attribute: \"Username\"</li> <li>Google Workspace Attribute: \"Group Membership\" -&gt; Zabbix Attribute: \"User Group\"</li> </ul> <p>This attribute mapping ensures that users can log in using their familiar Google Workspace credentials and that their access privileges within Zabbix are determined by their Google Workspace group memberships.</p> <p></p> <p>2.18 SAML mappings</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#zabbix-saml-configuration","title":"Zabbix SAML Configuration","text":"<p>With the IdP certificate and attribute mappings established within Google Workspace, the final step involves configuring Zabbix to complete the SAML integration.</p> <p>Accessing SAML Settings in Zabbix:</p> <ul> <li>Navigate to User Management: Log in to the Zabbix web interface as an administrator.</li> <li>Access Authentication Settings: Go to \"Users\" -&gt; \"Authentication\" in the   left-hand menu.</li> <li>Select SAML Settings: Choose the \"SAML settings\" tab.</li> </ul> <p>Configuring SAML Parameters:</p> <p>Within the \"SAML settings\" tab, the following parameters must be configured:</p> <ul> <li>IdP Entity ID: This value uniquely identifies the Identity Provider   (Google Workspace in this case). It can be retrieved from the Google Workspace   SAML configuration metadata.</li> <li>SSO Service URL: This URL specifies the endpoint where Zabbix should send   authentication requests to Google Workspace. This URL is also found within the   Google Workspace SAML configuration metadata.</li> <li>Retrieving Metadata: To obtain the IdP entity ID and SSO service URL, within     the Google Workspace SAML application configuration, select the option to <code>Download metadata</code>. This XML file contains the necessary values.</li> <li>Username Attribute: Set this to \"username.\" This specifies the attribute   within the SAML assertion that Zabbix should use to identify the user.</li> <li>SP Entity ID: This value uniquely identifies the Zabbix Service Provider.   It should be a URL or URI that matches the Zabbix server's hostname.</li> <li>Sign: Select <code>Assertions</code>. This configures Zabbix to require that the SAML   assertions from Google Workspace are digitally signed, ensuring their integrity.</li> </ul> <p>Example Configuration (Conceptual)</p> <ul> <li>IdP entity ID: https://accounts.google.com/o/saml2?idpid=your_idp_id</li> <li>SSO service URL: https://accounts.google.com/o/saml2/idp/SSO?idpid=your_idp_id&amp;SAMLRequest=your_request</li> <li>Username attribute: username</li> <li>SP entity ID: https://your_zabbix_server/zabbix</li> <li>Sign: Assertions</li> </ul> <p></p> <p>2.19 SAML config</p> <p>Additional Configuration Options:</p> <p>The Zabbix documentation provides a comprehensive overview of additional SAML configuration options. Consult the official Zabbix documentation for advanced settings, such as attribute mapping customization, session timeouts, and error handling configurations.</p> <p>Verification and Testing:</p> <p>After configuring the SAML settings, it is crucial to thoroughly test the integration. Attempt to log in to Zabbix using your Google Workspace credentials. Verify that user attributes are correctly mapped and that group-based access control is functioning as expected.</p> <p>Troubleshooting:</p> <p>If authentication fails, review the Zabbix server logs and the Google Workspace audit logs for potential error messages. Ensure that the certificate paths are correct, the attribute mappings are accurate, and the network connectivity between Zabbix and Google Workspace is stable.</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#saml-media-type-mappings","title":"SAML Media Type mappings","text":"<p>After successfully configuring SAML authentication, the final step is to integrate media type mappings directly within the SAML settings. This ensures that media delivery is dynamically determined based on SAML attributes.</p> <p>Mapping Media Types within SAML Configuration:</p> <ul> <li>Navigate to SAML Settings: In the Zabbix web interface, go to \"Users\" -&gt;   \"Authentication\" and select the \"SAML settings\" tab.</li> <li>Locate Media Mapping Section: Within the SAML settings, look for the section   related to media type mapping. This section might be labeled \"Media mappings\"   or similar.</li> <li>Add Media Mapping: Click \"Add\" to create a new media type mapping.</li> <li>Select Media Type: Choose the desired media type, such as \"Gmail relay.\"</li> <li>Specify Attribute: In the attribute field, enter the SAML attribute that   contains the user's email address (typically \"username,\" aligning with the   primary email attribute mapping).</li> <li>Configure Active Period : Specify the active period for this media type.   This allows for time-based control of notifications.</li> <li>Configure Severity Levels: Configure the severity levels for which this   media type should be used.</li> </ul> <p>Example Configuration (Conceptual):</p> <ul> <li>Media Type: Gmail relay</li> <li>Attribute: username</li> <li>Active Period: 08:00-17:00 (Monday-Friday)</li> <li>Severity Levels: High, Disaster</li> </ul> <p>Rationale:</p> <p>By mapping media types directly within the SAML configuration, Zabbix can dynamically determine the appropriate media delivery method based on the SAML attributes received from the IdP. This eliminates the need for manual media configuration within individual user profiles when SAML authentication is in use.</p> <p>Key Considerations:</p> <ul> <li>Ensure that the SAML attribute used for media mapping accurately corresponds to   the user's email address.</li> <li>Verify that the chosen media type is correctly configured within Zabbix.</li> <li>Consult the Zabbix documentation for specific information about the SAML media   mapping functionality, as the exact configuration options may vary depending on   the Zabbix version.</li> </ul>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#final-configuration-frontend-configuration-adjustments","title":"Final Configuration: Frontend Configuration Adjustments","text":"<p>After configuring the SAML settings within the Zabbix backend and Google Workspace, the final step involves adjusting the Zabbix frontend configuration. This ensures that the frontend correctly handles SAML authentication requests.</p> <p>Modifying <code>zabbix.conf.php</code>:</p> <ul> <li> <p>Locate Configuration File: Access the Zabbix frontend configuration file,   typically located at /etc/zabbix/web/zabbix.conf.php.</p> </li> <li> <p>Edit Configuration: Open the zabbix.conf.php file using a text editor with   root or administrative privileges.</p> </li> <li> <p>Configure SAML Settings: Within the file, locate or add the following   configuration directives:</p> </li> </ul> <p><code>php // Uncomment to override the default paths to SP private key, SP and IdP X.509 certificates, // and to set extra settings. $SSO['SP_KEY']                  = 'conf/certs/sp.key'; $SSO['SP_CERT']                 = 'conf/certs/sp.crt'; $SSO['IDP_CERT']                = 'conf/certs/idp.crt'; //$SSO['SETTINGS']              = [];</code></p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#ms-cloud","title":"MS Cloud","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#okta","title":"Okta","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch02-zabbix-installation/saml/#useful-urls","title":"Useful URLs","text":"<p>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/users/authentication/saml</p>","tags":["advanced"]},{"location":"ch02-zabbix-installation/user-groups/","title":"User Groups","text":"<p>In any enterprise monitoring platform, establishing role-based access control (RBAC) is critical for maintaining both security and clarity of operational responsibility. For Zabbix, this control is built upon the fundamental concept of User Groups.</p> <p>In Zabbix 8.0, user groups serve as the primary mechanism for assigning permissions and structuring access to the monitored data and configuration entities. This chapter details the function of user groups, guides you through their configuration, and outlines best practices for applying them in a robust, real world deployment.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-role-of-a-user-group","title":"The Role of a User Group","text":"<p>A User Group in Zabbix is a logical collection of individual user accounts. Rather than managing permissions for hundreds of users individually, Zabbix requires that users be assigned to one or more groups. Access rights, such as the ability to view host groups, configure templates, or see specific problem tags are then granted at the group level.</p> <p>This group centric architecture provides several major benefits:</p> <ul> <li>Simplified Management: Access rights are managed by role (e.g., \"Network Engineers,\"   \"Database Administrators\") instead of by individual user.</li> <li>Consistency: Ensures that all users within the same role possess a consistent,   standardized set of permissions.</li> <li>Segregation of Duties: Enables clear separation between viewing (read-only)   and configuration (read-write) access.</li> </ul> <p>Technical Definition: User groups allow grouping users for both organizational purposes and for assigning   permissions to data. Permissions to viewing and configuring data of host groups   and template groups are assigned to user groups, not individual users. A user   can belong to any number of groups.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#configuring-a-user-group","title":"Configuring a User Group","text":"<p>In Zabbix, user groups are defined and maintained solely via the web frontend. The procedure has remained largely unchanged between version 8.0 and previous generations, ensuring a familiar configuration experience for administrators.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#group-creation-and-general-attributes","title":"Group Creation and General Attributes","text":"<ol> <li>Navigate to Administration \u2192  User groups.</li> <li>Click Create user group (or select an existing group to modify).</li> <li>The configuration form is divided into four critical tabs: User group,    Template permissions, Host permissions, and Problem tag filter.</li> </ol> <p>2.20 user group menu</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-user-group-tab","title":"The <code>User group</code> Tab","text":"<p>This initial tab defines the group's general properties and its membership:</p> <ul> <li>Group name: A unique, descriptive identifier (e.g., <code>NOC-RO</code>, <code>System-Admins-RW</code>).</li> <li>Users: Add existing users to this group. A user can be a member of multiple   groups.</li> <li>Frontend access: Controls the authentication method for group members. Options   include <code>System default</code>, <code>Internal</code>, <code>LDAP</code>, or <code>Disabled</code> (useful for API-only   accounts or for temporarily locking frontend access for a role).</li> <li>LDAP server: If <code>LDAP</code> access is chosen, select the specific LDAP server   configuration to be used for members of this group.</li> <li>Multi-factor authentication (MFA): Select the method to be enforced for the   group. If a user is a member of multiple groups, the most secure MFA setting   will typically apply.</li> <li>Enabled: The master switch to activate or deactivate the group and its members.</li> <li>Debug mode: A powerful, optional setting that enables detailed debug logging   for all group members in the Zabbix frontend.</li> </ul> The Debug User Group <p>Zabbix includes a dedicated <code>Debug</code> user group out-of-the-box. Instead of activating the debug option for an existing production group, it is cleaner practice to simply add the required user to the pre-existing <code>Debug</code> group.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#permission-tabs-host-groups-and-template-groups","title":"Permission Tabs: Host Groups and Template Groups","text":"<p>Permissions are configured by assigning access levels to Host Groups and Template Groups. These entities act as containers, meaning the permissions assigned to the group apply to all nested groups and all entities within them.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#template-permissions-tab","title":"Template Permissions Tab","text":"<p>This section controls access to the configuration elements of templates (items, triggers, graphs, etc.) via their Template Groups.</p> <p>For each assigned Template Group, one of the following permissions must be selected:</p> <ul> <li>Read-only: Users can view the template configuration and see data derived   from it, but they cannot modify or link the template.</li> <li>Read-write: Users can view, modify, and link/unlink the template and its   entities (items, triggers, etc.).</li> <li>Deny: Explicitly blocks all access.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#host-permissions-tab","title":"Host Permissions Tab","text":"<p>This tab works identically to the Template Permissions tab but applies the access levels to Host Groups and the hosts contained within them.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#problem-tag-filters-granular-alert-access","title":"Problem Tag Filters: Granular Alert Access","text":"<p>The final configuration tab, Problem tag filter, allows for fine-grained control over which problems (alerts) a user group can see.</p> <p>This is invaluable for enterprise environments where users should only be alerted to issues relevant to their domain. For instance, a Database Administrator should not be distracted by network switch problems.</p> <p>Filters are applied to specific host groups and can be configured to display:</p> <ul> <li>All tags for the specified hosts.</li> <li>Only problems matching specific tag name/value pairs.</li> </ul> <p>When a user is a member of multiple groups, the tag filters apply with OR logic. If any of the user's groups allows visibility of a specific problem based on its tags, the user will see it.</p> Example: Database Administrator Filter <p>To ensure a Database Administrator group only sees relevant issues, the problem tag filter would be configured to specify: - Tag name: <code>service</code> - Value: <code>mysql</code></p> <p>This ensures the user only sees problems tagged with <code>service:mysql</code> on the host groups they have permission to view.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#template-permissions-frontend-behavior-and-editing-limitations","title":"Template Permissions \u2014 Frontend Behavior and Editing Limitations","text":"<p>The behavior of the Data collection \u2192 Templates view and host configuration screens is strictly tied to the user\u2019s permission level on template groups. Zabbix intentionally hides templates from users who have only Read-only access. This is by design, as described in https://support.zabbix.com/browse/ZBXNEXT-1070</p> Action or Screen Element Read-only Read-write Description / Impact View Data collection \u2192 Templates \u274c \u2705 Users with Read-only access do not see any templates. Template groups are only visible to users with Read-write rights. (ZBXNEXT-1070) Open template configuration \u274c \u2705 Not available for Read-only users \u2014 templates are hidden entirely","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#the-rule-of-precedence-deny-always-wins","title":"The Rule of Precedence: Deny Always Wins","text":"<p>A user's effective permission is the result of combining the rights from all groups they belong to. Zabbix resolves these overlapping permissions by applying a simple, strict hierarchy based on the most restrictive level, unless a <code>Deny</code> is present.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#hierarchy-of-precedence","title":"Hierarchy of Precedence","text":"<p>The order of precedence is absolute: Deny is the highest, followed by Read-write, and finally Read-only.</p> <pre><code>flowchart TB\n    A[\"Deny (highest precedence)\"]:::deny\n    B[\"Read-write (overrides Read-only)\"]:::rw\n    C[\"Read-only (lowest precedence)\"]:::ro\n\n    A --&gt; B\n    B --&gt; C\n\n    classDef deny fill:#f87171,stroke:#7f1d1d,stroke-width:2px,color:white;\n    classDef rw fill:#60a5fa,stroke:#1e3a8a,stroke-width:2px,color:white;\n    classDef ro fill:#a7f3d0,stroke:#065f46,stroke-width:2px,color:black;\n</code></pre> <p>This precedence can be summarized by two core rules:</p> <ol> <li>Deny Always Overrides: If any group grants Deny access to a host or    template group, that user will not have access, regardless of any other    <code>Read-only</code> or <code>Read-write</code> permissions.</li> <li>Most Permissive Wins (Otherwise): If no <code>Deny</code> is present, the most permissive    right applies. Read-write always overrides Read-only.</li> </ol> Scenario Group A Group B Effective Permission Rationale RW Over RO Read-only Read-write Read-write The most permissive right wins when Deny is absent. Deny Over RO Read-only Deny Deny Deny always takes precedence and blocks all access. Deny Over RW Read-write Deny Deny The most restrictive right (Deny) overrides the most permissive.","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#permissions-in-the-update-problem-dialog","title":"Permissions in the \"Update Problem\" Dialog","text":"<p>In Zabbix 8.0, the actions available in the Monitoring \u2192 Problems view (via the Update problem dialog) are controlled by two distinct mechanisms working in tandem:</p> <ol> <li>Host/Template Permissions: Governs basic access to the problem and whether    configuration-level changes can be made.</li> <li>User Role Capabilities: Governs which specific administrative actions (like    acknowledging, changing severity, or closing) are enabled.</li> </ol> <p>The table below clarifies the minimum required permissions to perform actions on an active problem:</p> Action in \u201cUpdate problem\u201d dialog Required Host Permission Required Template Permission Required Role Capability / Notes Message (add comment) Read-only or Read-write Same level as host Requires the role capability Acknowledge problems. Acknowledge Read-only or Read-write Same level as host Requires Acknowledge problems. Read-only access is sufficient. Change severity Read-write required Read-write if template trigger Requires the Change problem severity capability. Suppress / Unsuppress Read-write required Read-write if template trigger Requires the Suppress problems capability. Convert to cause Read-write required Read-write if template trigger Requires Manage problem correlations capability. Close problem Read-write required Read-write if template trigger Requires Close problems manually capability.","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#best-practices-for-enterprise-access-control","title":"Best Practices for Enterprise Access Control","text":"<p>Building a maintainable, secure Zabbix environment requires discipline in defining groups and permissions.</p> <ol> <li>Adopt Role-Based Naming: Use clear, standardized names that reflect the    user's role and their access level, such as <code>Ops-RW</code> (Operations Read/Write)    or <code>NOC-RO</code> (NOC Read-Only).</li> <li>Grant Access via Groups Only: Never assign permissions directly to an individual    user; always rely on group membership. This ensures auditability and maintainability.</li> <li>Principle of Least Privilege: Start with the most restrictive access (Read-only)    and only escalate to Read-write when configuration-level changes are an    absolute requirement of the user's role.</li> <li>Align with Organizational Structure: Ensure your Host Groups and Template    Groups mirror your organization's teams or asset categories (e.g., <code>EU-Network</code>,    <code>US-Database</code>, <code>Finance-Templates</code>). This makes permission assignment intuitive.</li> <li>Regular Review and Audit: Periodically review group memberships and permissions.    A user's role may change, and their access in Zabbix must be adjusted accordingly.</li> <li>Test Restricted Views: After creating a group, always log in as a test user    belonging to that group to verify that dashboards, widgets, and configuration    pages display the correct restricted view.</li> </ol>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#example-user-permissions","title":"Example : User permissions","text":"<p>This exercise will demonstrate how Zabbix calculates a user's effective permissions when they belong to multiple User Groups, focusing exclusively on the core access levels: Read-only, Read-write, and Deny.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#our-scenario","title":"Our Scenario","text":"<p>You are managing access rights for a large Zabbix deployment. You need to grant general viewing access to all Linux servers but specifically prevent a junior team from even seeing, let alone modifying, your highly critical database servers.</p> <p>You will have to configure two overlapping User Groups to demonstrate the precedence rules:</p> <ul> <li>Group A (Junior Monitoring): Grants general Read-only access to a wide host scope.</li> <li>Group B (Critical Exclusion): Applies an explicit Deny to a specific, critical   host subset.</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#host-group-preparation","title":"Host Group Preparation","text":"<p>Ensure the following Host Groups exist in your Zabbix environment:</p> <ul> <li>HG_All_Linux_Servers (The wide scope of hosts)</li> <li>HG_Critical_Databases (A subset of servers that is also within HG_All_Linux_Servers)</li> </ul> <p>You can create them under <code>Data collection</code> \u2192 <code>Host groups</code>.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#configuring-the-user-groups","title":"Configuring the User Groups","text":"<ul> <li>Create Group A: 'Junior Monitoring'<ul> <li>Navigate to Users \u2192 User groups.</li> <li>Create a new group named 'Junior Monitoring'.</li> <li>In the Host permissions tab, assign the following right:</li> <li>HG_All_Linux_Servers: Read-only (Read)</li> <li>HG_Critical_Databases: Read-only (Read)</li> </ul> </li> </ul> <p> 2.21 Junior monitoring</p> <ul> <li>Create Group B: 'Critical Exclusion'<ul> <li>Create a second group named 'Critical Exclusion'.</li> <li>In the Host permissions tab, assign the following right:</li> <li>HG_Critical_Databases: Deny</li> </ul> </li> </ul> <p> ch02.22 Critical exclusion</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#creating-the-test-user","title":"Creating the Test User","text":"<p>We will create the user first, then assign them to the groups.</p> <ul> <li>Navigate to User Creation: Go to Users \u2192 Users in the Zabbix frontend.</li> <li>Click Create user.</li> <li>Details:<ul> <li>Username: test_junior</li> <li>Name &amp; Surname: (Optional)</li> <li>Password: Set a strong password and confirm it.</li> <li>Language &amp; Theme: Set as desired.</li> <li>Permissions: Select role <code>User role</code> as this has the type User (This is important,   as 'Super Admin' bypasses all group restrictions).</li> <li>Add the user to both group <code>Junior Monitoring</code> and <code>Critical Exclusion</code>.</li> </ul> </li> <li>Save: Click Add.</li> </ul> <p> ch02.23 test user</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#create-the-hosts","title":"Create the hosts","text":"<p>We will create 2 host a linux server and a db server.</p> <ul> <li>Navigate to <code>Data collection</code> \u2192 <code>Hosts</code>.</li> <li>Click on create  host.</li> <li>Details:<ul> <li>Host name: Linux server</li> <li>Templates: Linux by Zabbix agent</li> <li>Host groups: HG_All_Linux_Servers</li> <li>Interfaces: Agent with IP 127.0.0.1</li> </ul> </li> <li>Save: Click Add.</li> </ul> <p> ch02.24 Add hosts</p> <p>Add a DB server exact as above but change :</p> <ul> <li>Host name: DB server</li> <li>Host groups: HG_Critical_Databases</li> <li>Save: Click Add.</li> </ul> <p>This should work as long as you have your zabbix agent installed reporting back on <code>127.0.0.1</code>. This is how it's configured when you first setup the Zabbix server with an agent.</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#test-the-outcome","title":"Test the Outcome","text":"<p>Logout as the <code>Super admin</code> user and log back in as user <code>test_junior</code>.</p> <p>When we now  navigate to <code>Monitoring</code> \u2192 <code>Hosts</code>, we see that only the <code>Linux server</code> is visible in the list of hosts. When we click on <code>Select</code> behind <code>Host groups</code> we will only be able to see the group <code>HG_All_Linux_Servers</code>.</p> <p>This table outlines the combined, effective rights for the user <code>test_junior</code> (who is a member of both User Groups).</p> Host Group (HG) Permission via 'Junior Monitoring' Permission via 'Critical Exclusion' Effective Permission Outcome <code>HG_All_Linux_Servers</code> Read-only No Explicit Rule Read-only Access to view data is Allowed. <code>HG_Critical_Databases</code> Read-only Deny Deny Access is Blocked (host is hidden).","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#conclusion","title":"Conclusion","text":"<p>Because test_junior belongs to a group that explicitly denies access to the Critical Databases, the host is hidden entirely, proving that Deny Always Wins regardless of other permissions. So we can conclude that user groups form the essential foundation of access control in Zabbix 8.0. They define what each user can see and configure (via host/template permissions).</p>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#questions","title":"Questions","text":"<ul> <li>If a user only has Read-only permissions assigned to a Template Group, will they   be able to see those templates listed under Data collection \u2192 Templates?</li> <li>Scenario: A user, Bob, is a member of two User Groups: 'NOC Viewers' (which   has Read-only access to HG_Routers) and 'Tier 2 Techs' (which has Read-write   access to the same HG_Routers).    Question: Can Bob modify the configuration of the routers in Zabbix, or is he   limited to viewing data? Explain your answer based on Zabbix's precedence rules.</li> <li>Scenario: A user, Alice, is a member of two User Groups: 'Ops Team' (which has   Read-write access to the Host Group HG_Webservers) and 'Security Lockdown' (which   has Deny access to the exact same HG_Webservers).   Question: What are Alice's effective permissions for the hosts in HG_Webservers?   Can she view or modify them, and why?</li> </ul>","tags":["beginner"]},{"location":"ch02-zabbix-installation/user-groups/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/users_and_usergroups/usergroup</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/users_and_usergroups/permissions</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/","title":"Active and Passive proxies","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#active-proxies","title":"Active proxies","text":"<p>Let's first start with the setup of an active Proxy. Things should be very simple to setup. The only thing we need to have for now is a working Zabbix installation. The underlying OS is not important.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#zabbix-gui-configuration","title":"Zabbix GUI configuration","text":"<p>There are 2 things we need to to when we like to setup a Zabbix proxy and one of those steps is adding the proxy in the frontend of Zabbix. So from the menu let's select <code>Administration</code> =&gt; <code>Proxies</code> and click in the upper right corner on <code>Create proxy</code>.</p> <p></p> <p>3.3 Create proxy</p> <p>Once pressed a new modal form will pop-up where we need to fill in some information. For active proxies we only need to enter the <code>Proxy name</code> field. Here we will enter <code>ProxyA</code> to remind us this will be an active proxy. Don't worry about the other fields we will cover them later. In the <code>Description</code> field you could enter some text to make it even more clear that this is an active proxy.</p> Note <p>For Zabbix active proxies, you only need to specify the hostname during configuration. This hostname acts as the unique identifier that the Zabbix server uses to distinguish between different active proxies and manage their data correctly.</p> <p></p> <p>3.4 New proxy</p> <p>Our next step involves installing the proxy binaries on our OS. If you don't remember how to this or aren't sure then let's have a look at <code>Chapter 01</code> =&gt; <code>Basic Installation</code>.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#installing-the-proxy","title":"Installing the proxy","text":"<p>Next up, we need to get the Zabbix proxy software onto your system. If you're not sure how to do this or need a reminder, take a quick peek at <code>Chapter 1</code>, called <code>Basic Installation.</code> It walks you through the whole process.</p> <p>Now that your system knows where to find the Zabbix software, we can actually install it. It's pretty simple, but there's one thing we need to decide upfront. Zabbix proxies need a place to store their information, and they can use one of three options: MySQL, PostgreSQL, or SQLite3.</p> <p>We will only cover SQlite as MySQL and PostgreSQL are basically already covered in <code>Chapter 1</code>, the <code>Basic installation</code>.</p> Note <p>The only thing that is a bit different when you setup a proxy with MySQL or PostgreSQL are the scripts you need to setup the DB structure. for MySQL they are located under <code>/usr/share/zabbix/sql-scripts/mysql/proxy.sql</code> for PostgreSQL they can be found at <code>/usr/share/zabbix/sql-scripts/postgresql/proxy.sql</code>. Make sure you always check the correct Zabbix documentation for your version as they have been moved to different locations over time even. https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages/rhel#proxy-installation</p> <p>Install zabbix-proxy-sqlite3</p> <p>Red Hat <pre><code>sudo dnf install zabbix-proxy-sqlite3\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-proxy-sqlite3\n</code></pre></p> Note <p>If you want to use MySQL or PostgreSQL then you can use the package <code>zabbix-proxy-mysql</code> or <code>zabbix-proxy-pgsql</code> depending on your needs.</p> <p>Now that we have installed the needed package we still have to do a few configuration changes. Let's edit our file <code>/etc/zabbix/zabbix_proxy.conf</code> with your favourite editor. There are only a few lines we need to alter. The first option we will have to check is <code>ProxyMode</code>. Since we want to configure our proxy as active it needs to have value <code>0</code> lucky for us this is the default value.</p> <p>The other option that is important is the option <code>Server</code> this is standard <code>127.0.0.1</code> and we need to replace this with the IP or DNS name of our <code>zabbix server</code>.</p> Note <p>You can fill in multiple servers here in case you have more then 1 <code>zabbix server</code> connecting to your proxy. Also the port can be added here in case your server listens on another port then the standard port 10051. Just be careful to not add the IP and DNS name for the same server as this can return double values.</p> <p>Another important option is <code>Hostname</code> remember in our frontend we gave our proxy the name <code>ProxyA</code> now we have to fill in the exact same name here for hostname. Just like a <code>zabbix agent</code> in active mode <code>Zabbix server</code> will use the name as a unique identifier.</p> <p>The last parameter that we need to set is <code>DBName</code> this is the name for our database and since we work with SQLite3 there is no need to create a database, Zabbix can handle this for us. Let's use the following configuration <code>DBName=/home/zabbix/zabbix_proxy</code>.</p> <p>Before we can start our proxy we need to create the correct folder. <code>sudo mkdir /home/zabbix</code> and add the correct rights. <code>sudo chown zabbix: /home/zabbix/</code></p> Note <p>A list of all configuration options can be found in the Zabbix documentation. https://www.zabbix.com/documentation/current/en/manual/appendix/config/zabbix_proxy</p> Info <p>One important new configuration parameter that was added in <code>7.0</code> is <code>ProxyBufferMode</code>. In Proxies that where installed before <code>7.0</code> the data was first written to disk in the database and then sent to the <code>Zabbix server</code>. For these installations when we upgrade this remains the default behavior after upgrading to Zabbix 7.x or higher. It's now recommended for performance reasons to use the new setting <code>hybrid</code> and to define the <code>ProxyMemoryBufferSize</code>.</p> <p>The Zabbix proxy uses a temporary space to hold data before sending it to the main server. There are two ways this works.</p> <ul> <li> <p>In 'hybrid' mode: this temporary space has a safety feature. If the proxy stops,   if the space gets full, or if the data has been there for too long, the proxy   will save everything to the database to prevent any loss. After saving, it goes   back to its normal temporary holding.</p> </li> <li> <p>In 'memory' mode: it only uses this temporary space without the extra saving   step. This is faster, but it means that if the proxy stops or the temporary space   overflows, any data that hasn't been sent yet will be lost.</p> </li> </ul> <p>Once you have made all the changes you need in the config file besides the once   we have covered we only need to enable the service and start our proxy.   Of course don't forget to open the firewall port <code>10051</code> on your <code>Zabbix server</code>   side as this is an active proxy.</p> enable and start the proxy service <p>Red Hat &amp; Ubuntu   <pre><code>sudo systemctl enable zabbix-proxy --now\n</code></pre></p> <p>If all goes well we can check the log file from our proxy and we will see that Zabbix has created the database by itself.</p> <p><code>sudo tail -f /var/log/zabbix/zabbix_proxy.log</code></p> <pre><code> 11134:20250519:152232.419 Starting Zabbix Proxy (active) [Zabbix proxy]. Zabbix 7.4.0beta2 (revision 7cd11a01d42).\n 11134:20250519:152232.419 **** Enabled features ****\n 11134:20250519:152232.419 SNMP monitoring:       YES\n 11134:20250519:152232.419 IPMI monitoring:       YES\n 11134:20250519:152232.419 Web monitoring:        YES\n 11134:20250519:152232.419 VMware monitoring:     YES\n 11134:20250519:152232.419 ODBC:                  YES\n 11134:20250519:152232.419 SSH support:           YES\n 11134:20250519:152232.419 IPv6 support:          YES\n 11134:20250519:152232.419 TLS support:           YES\n 11134:20250519:152232.419 **************************\n 11134:20250519:152232.419 using configuration file: /etc/zabbix/zabbix_proxy.conf\n 11134:20250519:152232.419 cannot open database file \"/home/zabbix/zabbix_proxy\": [2] No such file or directory\n 11134:20250519:152232.419 creating database ...\n 11134:20250519:152232.478 current database version (mandatory/optional): 07030032/07030032\n 11134:20250519:152232.478 required mandatory version: 07030032\n</code></pre> <p>Going back to our frontend once everything is properly configured and started on our proxy side we should be able to see in the frontend that our active proxy is online. Zabbix will also show the version of our proxy and the last seen age.</p> <p>You are now ready. Your proxy will behave like the Zabbix server from now on all hosts will need to connect to the proxy with their config instead of the <code>Zabbix server</code>.</p> <p></p> <p>3.5 Active proxy configured</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#passive-proxy","title":"Passive Proxy","text":"<p>Just like with the setup of our active proxy we need a working Zabbix server and a extra VM with Ubuntu or Rocky so we can install a proxy.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#zabbix-gui-configuration_1","title":"Zabbix GUI configuration","text":"<p>There are 2 things we need to to when we like to setup a Zabbix proxy and one of those steps is adding the proxy in the frontend of Zabbix. So from the menu let's select <code>Administration</code> =&gt; <code>Proxies</code> and click in the upper right corner on <code>Create proxy</code>.</p> <p></p> <p>3.6 Create proxy</p> <p>Once pressed a new modal form will pop-up where we need to fill in some information. For active proxies we only need to enter the <code>Proxy name</code> field. Here we will enter <code>ProxyP</code> to remind us this will be a passive proxy. For the passive proxy we also need to specify the <code>Interface</code> field. Here we add the IP of the host where our proxy runs on. You also notice that we use the same port <code>10051</code> as the <code>Zabbix server</code> to communicate with our proxy. Don't worry about the other fields we will cover them later. In the <code>Description</code> field you could enter some text to make it even more clear that this is a passive proxy.</p> <p></p> <p>3.7 New passive proxy</p> <p>Our next step involves installing the proxy binaries on our OS. If you don't remember how to this or aren't sure then let's have a look at <code>Chapter 01</code> =&gt; <code>Basic Installation</code>.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#installing-the-proxy_1","title":"Installing the proxy","text":"<p>Next up, we need to get the Zabbix proxy software onto your system. If you're not sure how to do this or need a reminder, take a quick peek at <code>Chapter 1</code>, called <code>Basic Installation.</code> It walks you through the whole process.</p> <p>Now that your system knows where to find the Zabbix software, we can actually install it. It's pretty simple, but there's one thing we need to decide upfront. Zabbix proxies need a place to store their information, and they can use one of three options: MySQL, PostgreSQL, or SQLite3.</p> <p>We will only cover SQlite as MySQL and PostgreSQL are basically already covered in <code>Chapter 1</code>, the <code>Basic installation</code>.</p> Note <p>The only thing that is a bit different when you setup a proxy with MySQL or PostgreSQL are the scripts you need to setup the DB structure. for MySQL they are located under <code>/usr/share/zabbix/sql-scripts/mysql/proxy.sql</code> for PostgreSQL they can be found at <code>/usr/share/zabbix/sql-scripts/postgresql/proxy.sql</code>. Make sure you always check the correct Zabbix documentation for your version as they have been moved to different locations over time even. https://www.zabbix.com/documentation/current/en/manual/installation/install_from_packages/rhel#proxy-installation</p> <p>Install zabbix-proxy-sqlite3</p> <p>Red Hat <pre><code>sudo dnf install zabbix-proxy-sqlite3\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install zabbix-proxy-sqlite3\n</code></pre></p> Note <p>If you want to use MySQL or PostgreSQL then you can use the package <code>zabbix-proxy-mysql</code> or <code>zabbix-proxy-pgsql</code> depending on your needs.</p> <p>Now that we have installed the needed package we still have to do a few configuration changes. Let's edit our file <code>/etc/zabbix/zabbix_proxy.conf</code> with your favourite editor. There are only a few lines we need to alter. The first option we will have to check is <code>ProxyMode</code>. Since we want to configure our proxy as passive it needs to have value <code>1</code>. Note that the default value is <code>0</code> for Active.</p> <p>The other option that is important is the option <code>Server</code> this is standard <code>127.0.0.1</code> and we need to replace this with the IP or DNS name of our <code>zabbix server</code>.</p> Note <p>You can fill in multiple servers here in case you have more then 1 <code>zabbix server</code> connecting to your proxy. Also the port can be added here in case your server listens on another port then the standard port 10051. Just be careful to not add the IP and DNS name for the same server as this can return double values</p> <p>Another important option is <code>Hostname</code> remember in our frontend we gave our proxy the name <code>ProxyP</code> now we have to fill in the exact same name here for hostname.</p> <p>The last parameter that we need to set is <code>DBName</code> this is the name for our database and since we work with SQLite3 there is no need to create a database, Zabbix can handle this for us. Let use the following configuration <code>DBName=/home/zabbix/zabbix_proxyP</code>.</p> <p>Before we can start our proxy we need to create the correct folder. <code>sudo mkdir /home/zabbix</code> and add the correct rights. <code>sudo chown zabbix: /home/zabbix/</code></p> Info <p>One important new configuration parameter that was added in <code>7.0</code> is <code>ProxyBufferMode</code>. In Proxies that where installed before <code>7.0</code> the data was first written to disk in the database and then sent to the <code>Zabbix server</code>. For these installations when we upgrade this remains the default behavior after upgrading to Zabbix 7.x or higher. It's now recommended for performance reasons to use the new setting <code>hybrid</code> and to define the <code>ProxyMemoryBufferSize</code>.</p> <p>The Zabbix proxy uses a temporary space to hold data before sending it to the main server. There are two ways this works.</p> <ul> <li> <p>In 'hybrid' mode: this temporary space has a safety feature. If the proxy stops,   if the space gets full, or if the data has been there for too long, the proxy   will save everything to the database to prevent any loss. After saving, it goes   back to its normal temporary holding.</p> </li> <li> <p>In 'memory' mode: it only uses this temporary space without the extra saving   step. This is faster, but it means that if the proxy stops or the temporary space   overflows, any data that hasn't been sent yet will be lost.</p> </li> </ul> <p>Once you have made all the changes you need in the config file besides the once   we have covered we only need to enable the service and start our proxy.</p> <p>enable and start the proxy service</p> <p>Red Hat &amp; Ubuntu <pre><code>sudo systemctl enable zabbix-proxy --now\n</code></pre></p> <p>If all goes well we can check the log file from our proxy and we will see that Zabbix has created the database by itself.</p> <pre><code>``` bash\nsudo tail -f /var/log/zabbix/zabbix_proxy.log\n```\n\n``` bash\n11134:20250519:152232.419 Starting Zabbix Proxy (passive) [ProyP]. Zabbix \\\n7.4.0beta2 (revision 7cd11a01d42).\n11134:20250519:152232.419 **** Enabled features ****\n11134:20250519:152232.419 SNMP monitoring:       YES\n11134:20250519:152232.419 IPMI monitoring:       YES\n11134:20250519:152232.419 Web monitoring:        YES\n11134:20250519:152232.419 VMware monitoring:     YES\n11134:20250519:152232.419 ODBC:                  YES\n11134:20250519:152232.419 SSH support:           YES\n11134:20250519:152232.419 IPv6 support:          YES\n11134:20250519:152232.419 TLS support:           YES\n11134:20250519:152232.419 **************************\n11134:20250519:152232.419 using configuration file: /etc/zabbix/zabbix_proxy.conf\n11134:20250519:152232.419 cannot open database file \"/home/zabbix/zabbix_proxy\": [2] No such file or directory\n11134:20250519:152232.419 creating database ...\n11134:20250519:152232.478 current database version (mandatory/optional): 07030032/07030032\n11134:20250519:152232.478 required mandatory version: 07030032\n```\n</code></pre> <p>However if we go to our frontend nothing seems to be working at all even we have configured everything correct on our proxy.</p> <p></p> <p>3.8 Proxy not working</p> <p>The explanation is rather easy as we run a passive proxy, the <code>Zabbix server</code> needs to poll our proxy. But we didn't configured our Server yet. So next step is to add the needed proxy pollers in our server config file. Use your preferred editor to open the <code>zabbix server</code> configuration file.</p> <p>/etc/zabbix/zabbix_server.conf</p> <p>Look for the option <code>StartproxyPollers</code> and remove the <code>#</code> sign in front and give it value 2. Save the file and exit. Now we have to restart the zabbix server with <code>systemctl restart zabbix-server</code></p> <p>If you look back in the frontend we see that it's still not working and this makes sense as we still need to open the firewall on our proxy.</p> <p>Open firewall port 10051/tcp</p> <p>Red Hat <pre><code>sudo firewall-cmd --add-port=10051/tcp --permanent`\nsudo firewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 10051/tcp\n</code></pre></p> <p>If we now look at our proxy interface in the frontend we will see that our <code>passive proxy</code> becomes available. If it's not green give it a few seconds or check all steps again and verify your log files.</p> <p></p> <p>3.8 Proxy working</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#conclusion","title":"Conclusion","text":"<p>This chapter has demonstrated the indispensable role of Zabbix proxies in building robust, scalable, and distributed monitoring infrastructures. We've explored the fundamental distinction between <code>active</code> and <code>passive proxy</code> modes, highlighting how each serves different deployment scenarios and network topologies. Understanding their individual strengths, from simplified firewall configurations with <code>active proxies</code> to the server-initiated control of <code>passive proxies</code>, is crucial for optimal system design.</p> <p>We delved into the comprehensive settings that govern proxy behavior, emphasizing how proper configuration of parameters like agent polling intervals and data senders, directly impacts performance and data accuracy. The evolution of data storage mechanisms within the proxy, from purely memory-based approaches to the flexible options of disk and hybrid storage, empowers administrators to finely tune resource utilization and data persistence based on their specific needs and the volume of monitored data.</p> <p>Finally, we examined the critical advancements in configuration synchronization, particularly the significant improvements introduced with Zabbix 7.0. The shift towards more efficient and streamlined config sync processes, moving beyond the limitations of earlier versions, underscores Zabbix's continuous commitment to enhancing operational efficiency and simplifying large-scale deployments.</p> <p>In essence, Zabbix proxies are far more than simple data forwarders; they are intelligent intermediaries that offload significant processing from the central Zabbix server, reduce network traffic, and enhance the resilience of your monitoring solution. By carefully selecting the appropriate proxy type, meticulously configuring its settings, and leveraging the latest features in data storage and configuration management, you can unlock the full potential of Zabbix to monitor even the most complex and geographically dispersed environments with unparalleled efficiency and reliability. The knowledge gained in this chapter will be instrumental in designing and maintaining a Zabbix infrastructure that is not only robust today but also adaptable to future monitoring challenges.</p>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#questions","title":"Questions","text":"<ul> <li>What is the fundamental difference between an active proxy and a passive proxy   in terms of who initiates the connection?</li> </ul>","tags":["advanced"]},{"location":"ch03-zabbix-proxies/active-passive-proxies/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/chapter/","title":"Proxies and the Web services component","text":"<p>Proxies are often regarded as an advanced topic in Zabbix, but in reality, they are a fundamental part of many installations and one of the first components we set up for numerous customers. In this chapter, we'll make proxies the third subject we cover, encouraging you to consider them from the very beginning of your Zabbix journey.</p> <p>We'll start with a basic proxy setup, providing straightforward steps to get you up and running quickly. Then, we'll take a deep dive into the mechanics of proxies how they operate within the Zabbix ecosystem, their benefits, and the critical role they play in distributing monitoring load and enhancing system scalability.</p> <p>Understanding proxies from the start can significantly improve your architecture, especially in distributed or large scale environments. Whether you're new to Zabbix or looking to refine your existing setup, this chapter will offer valuable insights into why proxies should be an integral part of your monitoring strategy from the start.</p> <p>By the end, you'll not only know how to set up a basic proxy but also have a clear understanding of their underlying workings and strategic advantages, ensuring you make informed decisions as you scale your Zabbix installation.</p>"},{"location":"ch03-zabbix-proxies/proxies-as-container/","title":"Running Proxies as containers","text":"<p>As discussed in the previous section, Zabbix proxies offer a lightweight and efficient solution for distributed monitoring. Leveraging SQLite as their backend database, they are inherently flexible and portable, making them well-suited for deployment in containerized environments. This chapter provides a step-by-step guide on deploying a Zabbix proxy within a container, outlining configuration options and best practices for optimal performance and maintainability.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#setting-up-containers","title":"Setting up containers","text":"<p>We will begin by demonstrating how to set up containerized environments on Red Hat-based systems using Podman. Podman is the recommended container engine on Red Hat distributions and offers several advantages over Docker.</p> <p>Firstly, Podman enhances security by supporting rootless containers, allowing containers to run under non-privileged user accounts. Secondly, it integrates seamlessly with SELinux, enabling robust access control and policy enforcement. Thirdly, Podman works natively with systemd, which facilitates container lifecycle management through systemd units and quadlets.</p> <p>For this setup, you will need a virtual machine (VM) where we will install Podman and deploy the Zabbix proxy container. This container will then be configured to communicate with your Zabbix server.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#add-the-proxy-to-the-zabbix-frontend","title":"Add the proxy to the zabbix frontend","text":"<p>3.9 Add proxy to frontend</p> <p>To keep the configuration straightforward, we will deploy an active Zabbix proxy. In this case, only two parameters need to be configured: the proxy's hostname (as defined in the Zabbix frontend) and the proxy\u2019s IP address for communication with the Zabbix server.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#create-the-podman-setup","title":"Create the podman setup","text":"<p>Next, we begin configuring Podman on the host system where the Zabbix proxy container will be installed and managed.</p> Install podman and needed tools <pre><code>Red Hat\ndnf install podman\ndnf install policycoreutils-python-utils\nuseradd podman\nsu - podman\n\nUbuntu\nsudo adduser podman\nsudo su - podman\n</code></pre> <p>Still as user podman create the following folders</p> Run on both RedHat and Ubuntu <pre><code>mkdir -p ~/.local/share/containers\nmkdir -p ~/.config/containers/systemd/\n</code></pre> <p>Once done become to user <code>root</code> and execute the following commands.</p> Only if your system uses SELinux <pre><code>semanage fcontext -a -e /var/lib/containers /home/podman/.local/share/containers\n</code></pre> <p>This command adds a SELinux file context mapping by creating an equivalence (-e) between the default container storage directory /var/lib/containers and the user\u2019s Podman container storage path /home/podman/.local/share/containers. Essentially, it tells SELinux to treat files in the user's container storage the same way it treats files in the default system container storage, ensuring proper access permissions under SELinux policy.</p> Only if your system uses SELinux <pre><code>restorecon -R -v /home/podman/.local/share/containers\n</code></pre> <p>After defining new SELinux contexts, this command recursively (-R) applies the correct SELinux security contexts to the files in the specified directory. The -v flag enables verbose output, showing what changes are made. This ensures that all files in the container storage directory have the correct SELinux labels as defined by the previous semanage commands.</p> On both RedHat and Ubuntu <pre><code>loginctl enable-linger podman\n</code></pre> <p>This command enables \u201clinger\u201d for the user podman. Linger allows user services (such as containers managed by systemd) to continue running even when the user is not actively logged in. This is useful for running Podman containers in the background and ensures that containerized proxies or other services remain active after logout or system reboots.</p> On both RedHat and Ubuntu <pre><code>echo export XDG_RUNTIME_DIR=\"/run/user/$(id -u podman)\" &gt;&gt; ~/.bash_profile\n</code></pre> <p>This line ensures that the XDG_RUNTIME_DIR environment variable is correctly set for the podman user. This variable points to the location where user-specific runtime files are stored, including the systemd user session bus. Setting it is essential for enabling systemctl --user to function properly with Podman-managed containers.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#prepare-the-proxy-config","title":"Prepare the Proxy config","text":"<p>The next step is to create a .container unit file for our Quadlet setup. This file should be placed in the directory ~/.config/containers/systemd/. For example, we will create a file named <code>zabbix-proxy-sqlite.container</code>, which will define the configuration for running the Zabbix proxy container under systemd using Podman.</p> On both RedHat and Ubuntu <pre><code>su - podman\nvi ~/.config/containers/systemd/zabbix-proxy-sqlite.container\n</code></pre> <pre><code>[Unit]\nDescription=ZabbixProxy\n\n[Container]\nImage=docker.io/zabbix/zabbix-proxy-sqlite3:7.0-centos-latest\nContainerName=ZabbixProxySqlite-Quadlet\nAutoUpdate=registry\nEnvironmentFile=ZabbixProxy.env\nPublishPort=10051:10051\n\n[Service]\nRestart=always\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>The container image for the Zabbix proxy using SQLite can be sourced from Docker Hub. Specifically, we will use the image tagged 7.0-centos-latest, which is maintained by the official Zabbix project. This image can be found at:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3/tags?name=centos</p> <p>A complete list of available image tags, including different versions and operating system bases, is available on the image\u2019s main page:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</p> <p>For our purposes, the 7.0-centos-latest tag provides a CentOS-based container image that is well-suited for LTS environments, and it includes all necessary components to run the Zabbix proxy with SQLite.</p> <p>In addition to the .container unit file, we also need to create an environment file that defines the configuration variables for the container. This file must reside in the same directory as the .container file <code>~/.config/containers/systemd/</code> and should be named <code>ZabbixProxy.env</code>, as referenced in our .container configuration.</p> <p>This environment file allows us to override default container settings by specifying environment variables used during container runtime. The list of supported variables and their functions is clearly documented on the container's Docker Hub page:</p> <p>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</p> <p>These variables allow you to configure key parameters such as the proxy mode, server address, hostname, database settings, and logging options, providing a flexible and declarative way to tailor the proxy\u2019s behavior to your environment.</p> <p>Let's create the file <code>~/.config/containers/systemd/ZabbixProxy.env</code> and add the following content.</p> On both RedHat and Ubuntu <pre><code># Zabbix proxy hostname as it appears in the Zabbix frontend\nZBX_HOSTNAME=ProxyA\n\n# IP address or DNS name of the Zabbix server\nZBX_SERVER_HOST=&lt;DNS or IP&gt;\n\n# Proxy mode: 0 = active, 1 = passive\nZBX_PROXYMODE=0\n</code></pre> <p>With our configuration complete, the final step is to reload the systemd user daemon so it recognizes the new Quadlet unit. This can be done using the following command:</p> On both RedHat and Ubuntu run : <pre><code>systemctl --user daemon-reload\n</code></pre> <p>If everything is set up correctly, systemd will automatically generate a service unit for the container based on the <code>.container</code> file. You can verify that the unit has been registered by running:</p> On both RedHat and Ubuntu <pre><code>systemctl --user list-unit-files | grep zabbix\n</code></pre> <p>You should see output similar to:</p> On both RedHat and Ubuntu <pre><code>zabbix-proxy-sqlite.service             generated\n</code></pre> <p>To start the container, use the following command (replacing the service name if you used a different one):</p> On both RedHat and Ubuntu <pre><code>systemctl --user start zabbix-proxy-sqlite.service\n</code></pre> <p>To verify that the container started correctly, you can inspect the running containers with:</p> On both RedHat and Ubuntu <pre><code>podman ps\n</code></pre> <p>This will return output like the example below:</p> On both RedHat and Ubuntu <pre><code>CONTAINER ID  IMAGE                                               COMMAND               CREATED       STATUS       PORTS                     NAMES\nb5716f8f379d  docker.io/zabbix/zabbix-proxy-sqlite3:7.0-centos-latest /usr/sbin/zabbix_...  2 hours ago   Up 2 hours   0.0.0.0:10051-&gt;10051/tcp  ZabbixProxySqlite-Quadlet\n</code></pre> <p>Take note of the <code>CONTAINER ID</code>\u2014in this example, it is <code>b5716f8f379d</code>. You can then retrieve the container's logs using:</p> On both RedHat and Ubuntu <pre><code>podman logs b5716f8f379d\n</code></pre> <p>This command will return the startup and runtime logs for the container, which are helpful for troubleshooting and verifying that the Zabbix proxy has started correctly.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-our-containers","title":"Upgrading our containers","text":"<p>At some point, you may be asking yourself: How do I upgrade my Zabbix containers? Fortunately, container upgrades are a straightforward process that can be handled either manually or through automation, depending on your deployment strategy.</p> <p>Throughout this book, we've been using the image tag <code>7.0-centos-latest</code>, which always pulls the most up-to-date CentOS-based Zabbix 7.0 image available at the time. This approach ensures you are running the latest fixes and improvements without specifying an exact version.</p> <p>Alternatively, you can opt for version specific tags such as <code>centos-7.0.13</code>, which allow you to maintain strict control over the version deployed. This can be helpful in environments where consistency and reproducibility are critical.</p> <p>In the following sections, we will explore both approaches: using the <code>latest</code> tag for automated updates and specifying fixed versions for controlled environments.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-manually","title":"Upgrading manually","text":"<p>If you're running your Zabbix container using a floating tag such as :latest or :trunk-centos, upgrading is a simple and efficient process. These tags always point to the most recent image available in the repository.</p> To upgrade: <p>Pull the latest image using Podman. <pre><code>podman pull zabbix/zabbix-proxy-sqlite3:7.0-centos-latest\n</code></pre> Restart the systemd service associated with the container.</p> <pre><code>systemctl --user restart zabbix-proxy-sqlite.service\n</code></pre> <p>Thanks to our Quadlet integration, systemd will handle the rest automatically: The currently running container will be stopped. A new container instance will be started using the freshly pulled image. All configuration options defined in the associated .container file will be reapplied. This approach allows for quick updates with minimal effort, while still preserving consistent configuration management through systemd.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-when-using-a-fixed-image-tag","title":"Upgrading When Using a Fixed Image Tag","text":"<p>If your container is configured to use a fixed image tag (e.g., <code>7.0.13-centos</code>) rather than a floating tag like <code>:latest</code> or <code>:trunk</code>, the upgrade process involves one additional step: manually updating the tag in your <code>.container</code> file.</p> <p>For example, if you're running a user-level Quadlet container and your configuration file is located at:</p> <pre><code>~/.config/containers/systemd/zabbix-proxy-sqlite.container\n</code></pre> <p>You'll need to edit this file and update the <code>Image=</code> line. For instance, change:</p> <pre><code>Image=docker.io/zabbix/zabbix-proxy-sqlite3:7.0.13-centos\n</code></pre> <p>to:</p> <pre><code>Image=docker.io/zabbix/zabbix-proxy-sqlite3:7.0.14-centos\n</code></pre> <p>Once the file has been updated, apply the changes by running:</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user restart zabbix-proxy-sqlite.service\n</code></pre> <p>This tells systemd to reload the modified unit file and restart the container with the updated image. Since you're using a fixed tag, this upgrade process gives you full control over when and how new versions are introduced.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#upgrading-automatically","title":"Upgrading automatically","text":"<p>When using floating tags like <code>:latest</code> or <code>:trunk-centos</code> for your Zabbix container images, Podman Quadlet supports automated upgrades by combining them with the <code>AutoUpdate=registry</code> directive in your <code>.container</code> file.</p> <p>This setup ensures your container is automatically refreshed whenever a new image is available in the remote registry without requiring manual intervention.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#example-configuration","title":"Example Configuration","text":"<pre><code>[Container]\nImage=docker.io/zabbix/zabbix-proxy-sqlite3:trunk-centos\nAutoUpdate=registry\n...\n</code></pre> <p>In this example, the <code>Image</code> points to the <code>trunk-centos</code> tag, and <code>AutoUpdate=registry</code> tells Podman to periodically check the container registry for updates to this tag.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#how-the-auto-update-process-works","title":"How the Auto-Update Process Works","text":"<p>Once configured, the following steps are handled automatically:</p> <ol> <li> <p>Image Check    The systemd service <code>podman-auto-update</code> is triggered by a timer (usually daily).    It compares the current image digest with the remote image's digest for the    same tag.</p> </li> <li> <p>Image Update    If a new version is detected:</p> </li> <li> <p>The updated image is pulled from the registry.</p> </li> <li>The currently running container is stopped and removed.</li> <li> <p>A new container is created from the updated image.</p> </li> <li> <p>Configuration Reuse    The new container is launched using the exact same configuration defined in    your <code>.container</code> file, including environment variables, volume mounts, ports,    and networking.</p> </li> </ol> <p>This approach provides a clean, repeatable way to keep your Zabbix proxy (or other components) current without direct user intervention.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#enabling-the-auto-update-timer","title":"Enabling the Auto-Update Timer","text":"<p>To ensure that updates are applied regularly, you must enable the Podman auto-update timer.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#for-system-wide-services","title":"For System-Wide Services","text":"<pre><code>sudo systemctl enable --now podman-auto-update.timer\n</code></pre>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#for-user-level-services","title":"For User-Level Services","text":"<pre><code>systemctl --user enable --now podman-auto-update.timer\n</code></pre> <p>This activates a systemd timer that periodically invokes <code>podman-auto-update.service</code>.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#when-to-use-this-approach","title":"When to Use This Approach","text":"<p><code>AutoUpdate=registry</code> is particularly useful in the following scenarios:</p> <ul> <li>Development or staging environments, where running the latest version is   beneficial.</li> <li>Non-critical Zabbix components, such as test proxies or lab deployments.</li> <li>When you prefer a hands-off update strategy, and image stability is trusted.</li> </ul> Note <p>This setup is not recommended for production environments without a proper rollback plan. Floating tags like <code>:latest</code> or <code>:trunk-centos</code> can introduce breaking changes unexpectedly. For production use, fixed version tags (e.g. <code>7.0.13-centos</code>) offer greater stability and control.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#conclusion","title":"Conclusion","text":"<p>In this chapter, we deployed a Zabbix active proxy using Podman and systemd Quadlets on a Red Hat-based system. We configured SELinux, enabled user lingering, and created both <code>.container</code> and <code>.env</code> files to define proxy behavior. Using Podman in rootless mode ensures improved security and system integration. Systemd management makes the container easy to control and monitor. This setup offers a lightweight, flexible, and secure approach to deploying Zabbix proxies. It is ideal for modern environments, especially when using containers or virtualisation. With the proxy running, you're ready to extend Zabbix monitoring to remote locations efficiently.</p>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#questions","title":"Questions","text":"<ul> <li>What are the main advantages of using Podman over Docker for running containers   on Red Hat-based systems?</li> <li>Why is the loginctl enable-linger command important when using systemd with rootless   Podman containers?</li> <li>What is the purpose of the .env file in the context of a Quadlet-managed container?</li> <li>How do SELinux policies affect Podman container execution, and how can you configure   them correctly?</li> <li>How can you verify that your Zabbix proxy container started successfully?</li> <li>What is the difference between an active and passive Zabbix proxy?</li> </ul>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxies-as-container/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://hub.docker.com/r/zabbix/zabbix-proxy-sqlite3</li> <li>https://podman.io/</li> <li>https://docs.podman.io/en/latest/markdown/podman-systemd.unit.5.html</li> <li>https://blog.zabbix.com/podman-container-monitoring-with-prometheus-exporter-part-1/30513/</li> </ul>","tags":["expert"]},{"location":"ch03-zabbix-proxies/proxy-basics/","title":"Proxy basics","text":"<p>In this chapter we will cover the basic needs for our proxies. We won't pay attention to active or passive proxies yet this is something we cover later in the next chapters.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-requirements","title":"Proxy requirements","text":"<p>If you like to setup a few proxies for test or in your environment you will need a few Linux hosts to install the Proxies on. Proxies are also available in containers so a full VM is not needed. However here we will use a VM so we can show you how to install a proxy. Don't worry we will cover containers as well. When it comes to proxies they are very lightweight however since Zabbix 4.2 Proxies are able to do Item value preprocessing and this can use a lot of CPU power. So the number of CPUs and memory will depends on how many machines you will monitor and how many preprocessing rules you have on your hosts.</p> <p>So in short a Zabbix proxy can be used to:</p> <ul> <li>Monitor remote locations</li> <li>Monitor locations that have unreliable connections</li> <li>Offload the Zabbix server when monitoring thousands of devices</li> <li>Simplify the maintenance and management</li> </ul> Note <p>Imagine that you need to restart your Zabbix server and that all proxies start to push the data they have gathered during the downtime of the Zabbix server. This would create a huge amount of data being sent at once to the Zabbix server and bring it to its knees in no time. Since Zabbix 6 Zabbix has added protection for overload. When Zabbix server history cache is full the history cache write access is being throttled. Zabbix server will stop accepting data from proxies when history cache usage reaches 80%. Instead those proxies will be put on a throttling list. This will continue until the cache usage falls down to 60%. Now server will start accepting data from proxies one by one, defined by the throttling list. This means the first proxy that attempted to upload data during the throttling period will be served first and until it's done the server will not accept data from other proxies.</p> <p>This table gives you an overview of how and when throttling works in Zabbix.</p> History write cache usage Zabbix server mode Zabbix server action Reaches 80% Wait Stops accepting proxy data, but maintains a throttling list (prioritized list of proxies to be contacted later). Drops to 60% Throttled Starts processing throttling list, but still not accepting proxy data. Drops to 20% Normal Drops the throttling list and starts accepting proxy data normally.","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#active-versus-passive-proxy","title":"Active versus Passive proxy","text":"<p>Zabbix proxies have been available since Zabbix 1.6, at that time they where available only as what we know today as <code>Active proxies</code>. Active means that the proxy will initiate the connection by itself to the Zabbix Server. Since version 1.8.3 passive proxies where introduced. This allowed the server to connect to the proxy. As mentioned before Zabbix agents can be both active and passive however proxies cannot be both so we have to choose the way of the communication when we install a proxy. Just remember that choosing the proxy mode <code>active</code> or <code>passive</code> has no impact on how Zabbix agents can communicate with our proxy. It's perfectly fine to have an <code>active proxy</code> and a <code>passive agent</code> working together.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#active-proxy","title":"Active proxy","text":"<p>A proxy in active mode will be the one in control of all the settings like the when it looks for new configuration changes and pushes new data to the server. In a standard setup the active proxy will sent it's data every second to the <code>Zabbix server</code> reload it's config every 10 seconds.</p> <p>The most important options for an active proxy that we need to remember are changed in the <code>Zabbix proxy</code> configuration file only.</p> <ul> <li>ProxyMode: 0</li> <li>Server: IP or DNS of the Zabbix server</li> <li>Hostname: Proxy name this needs to be exact the same as configured in the   frontend.</li> <li>ProxyOfflineBuffer: How long we like to keep data in the DB (in hours) if   we can' contact the <code>Zabbix server</code>.</li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> <li>ProxyConfigFrequency: Replaces ConfigFrequency and defines how often we   request configuration updates (every 10 seconds) from the <code>Zabbix server</code>.</li> <li>DataSenderFrequency: How often data is sent to <code>Zabbix server</code> (every second)</li> </ul> <p>When it comes to configuring the needed resources for the <code>Active proxy</code> we have to realise that the proxy can use up to 2 trapper items on the <code>Zabbix server</code> when it tries to connect. One will be used to sent the actual data and the other trapper will be used to retrieve new configuration changes. So it's best practice to configure 2 trappers per <code>Active proxy</code> on the server side.</p> <p></p> <p>3.1 Active proxy communication</p> Info <p>Before Zabbix 7.0 a proxy would reload it's configuration once every 3600 seconds. This has been changed since Zabbix 7.0 as they way proxies handle updates have been optimized.</p> Warning <p>Before you continue with the setup of your active or passive proxy make sure your OS is properly configure like explained in our chapter <code>Getting Started</code> =&gt; <code>System Requirements</code>. As it's very important to have your firewall and time server properly configured.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#passive-proxy","title":"Passive proxy","text":"<p>A proxy in passive mode will have all settings controlled by the <code>Zabbix server</code>.</p> <p>The most important options for a passive proxy that we need to remember are changed in the <code>Zabbix server</code> configuration file and the <code>Zabbix proxy</code> as it is the server that controls when and how proxy data is requested by making use of pollers.</p> <p>The most important setting we can find back in the <code>proxy</code> configuration file are:</p> <ul> <li>ProxyMode:1 (passive)</li> <li>Server: IP or DNS of the <code>Zabbix server</code></li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> <li>ProxyLocalBuffer: How long we like to keep data in the DB (in hours) even   we have sent it already to the <code>Zabbix server</code>.</li> </ul> <p>And finally the config settings we need to change on our <code>Zabbix server</code>:</p> <ul> <li>StartProxyPollers: The number of pollers to contact proxies</li> <li>ProxyConfigFrequency: Replaces ConfigFrequency and defines how often   <code>Zabbix server</code> will sent configuration changes to our proxies.</li> <li>ProxyDataFrequency: How often <code>Zabbix server</code> will request data from our proxies.</li> </ul> <p></p> <p>3.2 Passive proxy communication</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-configuration-changes","title":"Proxy configuration changes","text":"<p>Before Zabbix 7.0, a full configuration synchronization was performed by proxies every 3600 seconds (1 hour) by default. With the introduction of Zabbix 7.0, this behavior changed significantly. Now, configuration synchronization occurs much more frequently, every 10 seconds by default, but it's an incremental update. This means that instead of transferring the entire configuration, only the modified entities are synchronized, greatly improving efficiency and reducing network overhead.</p> <p>Upon initial proxy startup, a full configuration synchronization is still performed. Subsequently, both the server and the proxy maintain a revision of the configuration. When a change is made on the server, only the differences, based on these revision numbers, are applied to the proxy's configuration, rather than a complete replacement of the entire configuration as in older versions. This incremental approach allows for near real-time propagation of configuration changes while minimizing resource consumption.</p>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-runtime-control-options","title":"Proxy runtime control options","text":"<p>Just like the <code>Zabbix server</code> our proxy supports runtime control options always check latest options with the --help option. But here is a short overview of options available to use.</p> <ul> <li>zabbix_proxy --runtime-control housekeeper_execute</li> <li>zabbix_proxy --runtime-control log_level_increase=target</li> <li>zabbix_proxy --runtime-control log_level_decrease=target</li> <li>zabbix_proxy --runtime-control snmp_cache_reload</li> <li>zabbix_proxy --runtime-control diaginfo=section</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-basics/#proxy-firewall","title":"Proxy firewall","text":"<p>Our proxies work like small <code>Zabbix servers</code> so when it comes to the ports to connect to agents, SNMP, ... nothing changes all ports need to be configured same as on your server.</p> <p>When it comes to port for the proxy it depends on our proxy being <code>active</code> or <code>passive</code>.</p> <ul> <li>Active Proxy: Zabbix server needs to have port <code>10051/tcp</code> open so proxy can   connect.</li> <li>Passive Proxy: Needs to have port <code>10051/tcp</code> open on the proxy so that the   <code>server</code> can connect to the proxy.</li> </ul>","tags":["beginner"]},{"location":"ch03-zabbix-proxies/proxy-groups/","title":"Proxy groups","text":"","tags":["advanced"]},{"location":"ch03-zabbix-proxies/web-services/","title":"Web services","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/browser/","title":"Browser item","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#conclusion","title":"Conclusion","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#questions","title":"Questions","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/browser/#useful-urls","title":"Useful URLs","text":"","tags":["advanced","expert"]},{"location":"ch04-zabbix-collecting-data/calculated/","title":"Calculated items","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/calculated/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/chapter/","title":"Collecting data with your Zabbix environment","text":"<p>In this chapter, we'll take a detailed journey through Zabbix data flow, showing how to progress from an empty setup to a fully functioning system capable of sending timely notifications. We\u2019ll break down each step, giving you a clear understanding of how data moves through Zabbix.</p> <p>We'll then explore the various protocols used in Zabbix, how they function, their compatibility with different components, and how to configure them effectively. This will provide you with a comprehensive overview of the communication backbone that powers Zabbix monitoring capabilities.</p> <p>Next, we'll cover the essentials like hosts, host groups, host interfaces, and items, ensuring you understand their roles and how to set them up correctly. </p> <p>For now, we'll hold off on custom scripts and external check items, focusing instead on the core elements. When we touch on active agents, we'll reference the chapter on auto-registration, guiding you to more detailed discussions on that topic later.</p> <p>By the end of this chapter, you'll have a strong grasp of Zabbix data flow and the protocols that enable seamless monitoring and notifications, preparing you for more advanced configurations and integrations.</p>"},{"location":"ch04-zabbix-collecting-data/database-agent/","title":"Database checks via agent","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-agent/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/","title":"Database checks via odbc","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/database-odbc/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/dataflow/","title":"Dataflow","text":"<p>The Zabbix dataflow is a concept that is meant to guide us through the various different stages of building up our monitoring system. In the end, when building a Zabbix environment we want to achieve a few things:</p> <ul> <li>Collected metrics are stored, can be easily found and are visualised</li> <li>Problems are created from our data and shown in the frontend</li> <li>We take action on important problems by sending a message or executing commands</li> </ul> <p>Those three parts of the Zabbix dataflow in our Zabbix environment can be easily identified as:</p> <ul> <li>Items </li> <li>Triggers</li> <li>Actions</li> </ul> <p>But when we look at <code>Items</code> specifically, it's also possible to alter our data before storing the metrics in Zabbix. This is something we do with a process called pre-processing, which will take the collected data and change it before storing it in the Zabbix database. Our dataflow in the end then looks as such:</p> <p> 4.1 Zabbix basic dataflow</p> <p>This gives us a very basic understanding of what steps we have to go through in Zabbix to get from data being collected to alerts being sent out. Very important to us Zabbix administrators, as we need to go through these steps each time we want to end up with a certain type of monitoring.</p> <p>But, now that we have identified what parts to look at, let's dive a bit deeper into what each of those parts does. Logically, that would start with <code>Items</code> looking at the image above. But before we can start discussing <code>Items</code> there is another  concept we need to understand.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#hosts","title":"Hosts","text":"<p>To create <code>Items</code> in Zabbix, we first need to create <code>Hosts</code>. A <code>host</code> is nothing more than a container (not the Docker kind), it's something that contains <code>Items</code>, <code>Triggers</code>, <code>graphs</code>, <code>Low Level Discovery</code> rules and <code>Web scenarios</code>. All of these various different entities are contained within our Hosts.</p> <p>Often times, Zabbix users and administrators make the misconception here that a <code>host</code> always represents a physical or virtualised host. But in the end, hosts are nothing more than a representation of a <code>monitoring target</code>. A monitoring target is something we want to monitor. This can be a server in your datacenter, a virtual machine on your hypervisor, a Docker container or even just a website. Everything you want to monitor in Zabbix will need a host and the host will then contain your monitoring configuration on its entities.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#items","title":"Items","text":"<p><code>Items</code> in Zabbix are Metrics. One <code>Item</code> is usually a single metric we'd like to collect, with the exception being bulk metric collection which we will discuss later on in the book. When we want to create our <code>Items</code> we can do this on a host and we can actually create an unlimited amount of <code>Items</code> on a host.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#preprocessing","title":"Preprocessing","text":"<p>But we cannot stop there with <code>Items</code> just yet, as we also mentioned an additional part of our dataflow. It is possible to change the collected metric on an item before storing it into the Zabbix database. We do this with a process called preprocessing. </p> <p>Preprocessing is something we add onto our items when creating the configuration of such items. It is a part of the item, but not mandatory on every single item.</p> <p>General rule:</p> <ul> <li>Collect metric and store as-is in the database? No preprocessing</li> <li>Collect metric and change before storing in the database? Add preprocessing</li> </ul> <p>We will discuss this in more detail later on in the book as well.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#triggers","title":"Triggers","text":"<p>With all of the collected metrics, we can now also start to create triggers if we would want to. A trigger is Zabbix is nothing more than a bit of configuration on our host, which we will use to define thresholds using metrics collected on items. </p> <p>A trigger can be setup to use the data collected on an item in a logical expression. This logical expression will define the threshold and when data is received on the item(s) used in the logical expression the trigger can go or stay in on of two states:</p> <ul> <li>PROBLEM: When the logical expression is TRUE</li> <li>OK: When the logical expression is FALSE</li> </ul> <p>This is how we define if our data is in a good or a bad state.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#events","title":"Events","text":"<p>When we discuss triggers however, we cannot skip past the Events. Whenever a trigger changes state, for example it was in OK state and goes into the PROBLEM state, then Zabbix will create a new Event. There's three types of these events created by our triggers:</p> <ul> <li>Problem event: When the trigger goes from OK to PROBLEM</li> <li>Problem resolution event: When the trigger goes from PROBLEM to OK</li> <li>Problem update event: When someone manually updates a problem</li> </ul> <p>These problem events are what you will see in the frontend when you navigate to <code>Monitoring</code> | <code>Problems</code>, but they are also very important in the next step in the Zabbix dataflow <code>Actions</code>.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#actions","title":"Actions","text":"<p>Actions are the last step in our Zabbix dataflow and they are kind of split into two parts. An action consists of <code>Conditions</code> and <code>Operations</code>. This is going to be important in making sure the action executes on the right time (conditions) and executes the right activity (operations). </p> <p>What happens is, whenever a problem event in Zabbix is created it is sent to every single problem action in our Zabbix environment. All of these action will then check the event details like what host did it come from, with which severity, when did it start, which tags are present. These event details are then checked against the action conditions and only when the conditions match will the operations be executed. The operation can then be something like, send a message to Microsoft Teams or Telegram. But an operation could also be, execute the reboot command on this host.</p> <p>As you can imagine, the conditions will be very important to make sure that operation on that action are only executed when we specifically want it to. We do not want to for example reboot a host without the right problem being first detected.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#conclusion","title":"Conclusion","text":"<p>To summarize, all the steps in the dataflow work together to make sure that you can build the perfect Zabbix environment. When we put the entire dataflow together it looks like the image below.</p> <p> 4.2 Zabbix detailed dataflow</p> <p>Here we can see the various steps coming together.</p> <ul> <li>We have our <code>Hosts</code> container our <code>Items</code> and <code>Triggers</code>. </li> <li>Our <code>Items</code> are collecting metrics</li> <li>The <code>Triggers</code> are using data from <code>Items</code> to detected problems and create problem <code>Events</code>.</li> <li>If a problem <code>Event</code> matches the Conditions on an <code>Action</code> the Operations can be executed</li> </ul> <p>Important to note here is that if an item is collecting metrics, it doesn't necessarily need to have a trigger attached to it. The trigger expression is a separate configuration where we can choose which items we want to define thresholds on. In the end, not ever item needs to start creating problems. We can also see that we can use several items or event several items from different hosts in a single trigger.</p> <p>The same is the case for our events. Not every event will match the conditions on an action. In practice, this means that some problems will only show up in your Zabbix frontend, while other might go on to send you an alert message or even execute commands or scripts. A single event can also match the conditions on multiple actions, since we mentioned that all events are always send to all action for evaluation. This can be useful, for example if you want to split you messaging and your script execution in different action to keep things organised.</p> <p>Now that we understand the various parts of our Zabbix dataflow we can dive deeper into creating the configuration for the steps in the dataflow.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dataflow/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/","title":"Dependent items","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/dependent/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/external-checks/","title":"External checks","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/external-checks/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/","title":"Host Interfaces","text":"<p>When we create a host in Zabbix, we have the option to create <code>Host interfaces</code>. You might have noticed this in the previous chapter already when you created a host or when you added the simple check.</p> <p>Host interfaces in Zabbix are used to define a remote monitoring target. We define the <code>IP address</code> or <code>DNS name</code> as well as the <code>Port</code> that we want our Zabbix server (or proxy) to connect to when collecting our monitoring information. There are three types of interfaces.</p> <ul> <li>Agent (or ZBX) </li> <li>SNMP</li> <li>JMX</li> <li>IPMI</li> </ul> <p>These interface types are tied directly to the items types. Meaning that when you want to monitoring the Zabbix agent (passive) you will need a ZBX (agent) type interface. If you do not have the correct interface, you will not be able to add the items for monitoring. </p> <ul> <li>Agent (or ZBX) is used by Zabbix agent items</li> <li>SNMP is used by SNMP agent and SNMP trap items</li> <li>JMX is used by JMX agent items</li> <li>IPMI is used by IPMI agent items</li> </ul> <p>Besides these matches, there are also various items like the <code>Simple check</code> items that can use all four interface types. These items will then only use the interface IP or DNS to connect to the remote monitoring target.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#agentzbx-and-jmx","title":"Agent/ZBX and JMX","text":"<p>The Zabbix agent type interface and JMX interface work quite similarly. Both interface types allow us to define four things. </p> <p> 4.9 Agent and JMX type interfaces</p> <ul> <li>IP address </li> <li>DNS name</li> <li>Connect to (IP or DNS)</li> <li>Port</li> </ul> <p>It's important to take note of the <code>Connect to</code> field here. It indicates whether we will use the <code>IP address</code> or <code>DNS name</code> field configured for this interface. Within Zabbix interfaces it is only possible to use one at the time. That means there is no failover if DNS starts to fail and as such when using DNS your monitoring will be dependent on your DNS servers.</p> Tip <p>The question often asked at this point is \"Should I use DNS or IP\". The choice in the end is up to the Zabbix administrator, but a simple rule we always follow is:</p> <p>If it's static use IP, as your monitoring will keep working even if DNS is down. If it's dynamic, use DNS as you will save yourself the administrative overhead.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#snmp","title":"SNMP","text":"<p>The SNMP interface has the most options of all four interface types. The reason for this is because the SNMP type interface allows us to specify the SNMP details like version, community and credentials.</p> <p> 4.10 SNMPv2 interface</p> <p>When selecting the <code>SNMP version</code> as either <code>SNMPv1</code> or <code>SNMPv2</code>, we are shown the <code>SNMP community</code> field. <code>SNMPv1</code> and <code>SNMPv2</code> both use unauthenticated and unencrypted connections by using a plain text <code>SNMP community</code> to initiate a connection to the SNMP monitoring target like a switch or a router. This `SNMP community is sent over the network in plain text and as such it can not be seen as fully secure authentication.</p> <p>All three SNMP versions will also show the <code>Use combined requests</code> checkbox. When selected, Zabbix will group multiple SNMP items into a single request to improve performance. For some older SNMP devices this can cause some issues and in those cases it might be needed to turn the checkbox off.</p> <p>Additionally when selecting <code>SNMPv2</code> or <code>SNMPv3</code> we are also presented with the <code>Max repetition count</code>. When Zabbix uses <code>GETBULK</code> requests it will retrieve multiple values per OID base in a single call. This option is used to reduce SNMP traffic overhead when using the <code>walk[]</code> SNMP agent item key. </p> <p> 4.11 SNMPv3 interface</p> <p>For <code>SNMPv3</code> many additional fields will be available for configuration. </p> <ul> <li>Context name Used to define a context, for example when connecting to a   single device split up in multiple virtual devices (like a virtual router)</li> <li>Security name The username we will use when authenticating to our SNMP monitoring   target</li> <li>Security level noAuthNoPriv, AuthNoPriv, AuthPriv. We can choose to do SNMPv3   without authentication and data encryption, with authentication and without data   encryption or with both authentication and data encryption.</li> <li>Authentication protocol MD5, SHA1, SHA224, SHA256, SHA384, SHA512. The encryption   strength for our authentication.</li> <li>Authentication passphrase The password for authentication.</li> <li>Privacy protocol DES, AES128, AES192, AES256, AES192C, AES256C. The encryption   strength for our data encryption.</li> <li>Privacy passphrase The password for data encryption.</li> </ul> <p>With <code>SNMPv3</code> it is important to keep security in mind. <code>SNMPv1</code> and <code>SNMPv2</code> should be considered obsolete at this point, providing potential bad actors with access to important information or worse write access to devices without authentication. <code>SNMPv3</code> with authentication and data encryption is as such always recommended. It's up to the Zabbix administrator to determine what the monitoring target supports, but higher security is better in this case. </p> <p>noAuthNoPriv utilizes the <code>SNMPv3</code> protocol without authenticating and encrypting the data.  AuthNoPriv uses encrypted authentication, but sends monitoring data plain text over the network AuthPriv is the recommended method for high security, as it uses encrypted authentication and also sends monitoring data encrypted over the network. </p> <p>When using <code>SNMPv3</code> it is also best practice to use a strong authentication protocol. MD5 and DES are both no longer recommended due to the possibility to brute force the passwords with consumer grade hardware amongst other risks. That's why SHA1 and AES128 or higher is always recommended. </p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#ipmi","title":"IPMI","text":"<p>For <code>IPMI agent</code> type items we want to add the <code>IPMI</code> type interface. We can use it to connect to <code>BMC's (Baseboard Management Controller)</code> like <code>iDRAC</code> and <code>iLo</code>. This interface is slightly different again from the previous three interfaces.</p> <p> 4.12 IPMI interface</p> <p>We have the same settings for <code>IP</code>, <code>DNS</code> and <code>Port</code> again, but in the case of IPMI we do not define credentials on the interface level. Instead these are provided on a different tab on the host configuration settings.</p> <p> 4.13 IPMI host settings</p> <p>For a host in Zabbix we can only define one IPMI use for authentication, regardless of the amount of interfaces we add. </p> <ul> <li>Authentication algorithm None, MD2, MD5, Straight, OEM, RMCP+. Determines the encryption strength.</li> <li>Privilege level Callback, User, Operator, Admin, OEM. Determines the privilege level our user should be allowed to connect with.</li> <li>Username The username to authenticate with.</li> <li>Password The password to authenticate with.</li> </ul> <p>Once again, for security purposes <code>MD2</code> and <code>MD5</code> are not recommended. As well as <code>Straight</code> which is plain text unencrypted and <code>OEM</code> which is vendor specific. If possible, try to use <code>RMCP+</code>, which in most cases is the most secure.</p> <p>For the <code>Privilege level</code> it is recommended to use either <code>Callback</code> or <code>User</code> in most scenarios. <code>Callback</code> will allow us to access alerts, <code>User</code> will also allow us to access monitoring data. If need higher privilege levels to execute commands on the <code>BMC</code> as well, this is possible. But keep in mind, write access from your monitoring system comes with additional security risks.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#interface-availability","title":"Interface availability","text":"<p>All four interface types, also come with an icon that can turn Green, Orange, Red or Grey. This color determines the interface its availability.</p> <p>... ... ...</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#conclusion","title":"Conclusion","text":"<p>When configuring your host interfaces in Zabbix, we need to match our <code>Item type</code> to our <code>Interface type</code>. When we have the correct <code>Host interface</code> configured we will be able to add the corresponding <code>Items</code> on our  host to collect data. Upon successful data collection, the interface availability icon will also turn <code>Green</code>.</p> <p>Some item types like the <code>Simple check</code> also have the possibility to use host interfaces, but do not need them. These items, although they use the interface, do not have an affect on interface availability and the availability icon.</p> <p>When configuring host interfaces with security settings, keep in mind to use the most secure option that your monitoring target supports. This will make sure your Zabbix environment is more secure, even if a bad actor would be present on your network somehow.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/host-interfaces/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/","title":"Hosts","text":"<p>After reading the previous dataflow section, it is now clear we have to go through the  dataflow steps to get from collecting data to sending out alerts.  The first part of the dataflow is to create a host, so that is what we are now going to tackle in this part.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#creating-a-host","title":"Creating a host","text":"<p>As we mentioned, Hosts in Zabbix are nothing more than a container (not the Docker kind). They contain our <code>Items</code>, <code>Triggers</code>, <code>graphs</code>, <code>Low Level Discovery</code> rules and <code>Web scenarios</code>.  </p> <p>At this point, we should create our first monitoring host in Zabbix. Navigate to <code>Data collection</code> | <code>Hosts</code>  and in the top right corner click on the <code>Create host</code> button. This will open up the following modal window:</p> <p> 4.3 Empty host creation window</p> <p>There are a lot of fields we can fill in, but few are important to note here specifically. </p> <ul> <li>Host name </li> <li>Host groups</li> </ul> <p>These are the only two mandatory fields in the host creation window. If we fill these two,  we can create our host. </p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#host-name","title":"Host name","text":"<p>The <code>Host name</code> is very important. It functions as both the technical name of the host we will use in various different locations, but it is also used as the <code>Visible name</code> by default. This  means that we will work with this name to find through filters this host with its associated data.</p> <p>Make sure to select a host name that is short and descriptive. For example:</p> <ul> <li>linux-srv01-prd</li> <li>www.thezabbixbook.com</li> <li>docker-container-42</li> <li>db-srv10 - Website database</li> </ul> <p>The best practise is to keep the host name the same in Zabbix as it is configured on your monitoring target. The monitoring target, being whatever you are trying to monitor.  Whether that is a physical or virtual server, a website, a database server or  a specific database on that database server. Every host in Zabbix is a monitoring target,  i.e. something you are trying to monitor.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#visible-name","title":"Visible name","text":"<p>Now, we didn't mention it as it is not a mandatory field. Nevertheless, we need to discuss the <code>Visible name</code> field before we continue with the <code>Host groups</code>. Although not mandatory, as I mentioned, the <code>Host name</code> is automatically used as the visible name when not filled in.</p> <p>Many of us see a form style list and have the need to fill out everything there is to fill out. This should not be the case with forms like the host creation window in Zabbix. We are only trying to fill out everything we should be configuring. As such, since the visible name is not mandatory, I  do not fill it out. Unless, there is an actual need to use the field. </p> <p>The visible name was added in Zabbix as the host name and visible name fields in Zabbix use different character encoding in the Zabbix database. </p> <p><code>Host name</code> = <code>UTF8</code> and supports alphanumeric, dashes, underscores and spaces (not leading or trailing). <code>Visible name</code> = <code>UTF8_MB4</code> and supports special characters like <code>\u00e7</code> and even emojis like <code>\ud83d\udc40</code>.</p> <p>This is the main difference. When you want to use a local language for example you could do:</p> <p><code>Host name</code> = <code>sherbimi-central</code> <code>Visible name</code> = <code>sh\u00ebrbimi-\u00e7entral</code></p> <p>That way you keep your local language in the frontend, but the technical name doesn't include the  special character. Keep in mind however, that this can create confusion. You now need to remember two different names for the same host. As such, visible names are only recommended when you really need them or if you are trying to work around something. Otherwise, there is not need to use them.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#host-groups","title":"Host groups","text":"<p>In Chapter 02 of the book, we had a deep dive into setting up various different host groups to keep our Zabbix environment structured. When we create a host, we can now start using on of our created host groups. Keep in mind, to only add the host to the lowest level of the subgroups. For example when we have <code>Servers</code> and <code>Servers/Linux</code>, we will only add our host to <code>Servers/Linux</code>.</p> <p>It's also possible to create a host straight from the host creation window. To do so, simply start typing the host group name into the <code>Host groups</code> field and it will ask you if you want to create the host group.</p> <p></p> <p>4.4 Host creation - new host group</p> <p>Let's add the host <code>simple-checks</code> in the <code>Linux/Servers</code> host group.</p> Note <p>It's recommended to read the simple checks recipe from here, as it  contains useful tips on creating good items.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/hosts/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/http/","title":"Http","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/http/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/","title":"IPMI","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ipmi/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/","title":"Monitoring Java Applications with JMX","text":"<p>One of the neat features that Zabbix offers out of the box is the ability to monitor Java applications. To make this happen, Zabbix uses something called the <code>Java Gateway</code>, which communicates with Java applications via the <code>Java Management Extensions</code> JMX, for short.</p> <p><code>JMX</code> is a built-in Java technology designed specifically for monitoring and managing Java applications and the <code>Java Virtual Machine</code> (JVM). It works through components called <code>MBeans</code> (Managed Beans), which act like data sensors and control points. These MBeans can expose useful information like memory usage, thread counts, and even allow runtime configuration changes, all while the application is running.</p> <p>One of the strengths of JMX is its flexibility. It supports both local and remote access, so whether your Java app is on the same machine or halfway across the network, Zabbix can still keep an eye on it. Combined with the Java Gateway, this makes JMX a powerful and scalable option for monitoring Java-based environments with minimal setup. Also JMX was an extension but is part of JAVA SE since java 5.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#key-concepts-in-jmx-monitoring","title":"Key Concepts in JMX Monitoring","text":"<p>Before diving into JMX monitoring with Zabbix, it helps to get familiar with a few core building blocks that make it all work:</p> <p>Managed Beans (MBeans): These are the heart of JMX. MBeans are Java objects that expose useful bits of data (called attributes) and operations (as regular methods) from your application. Think of them as little control panels inside your Java app, you can read metrics, tweak settings, or trigger actions through them.</p> <p>JMX Agent: This is the engine behind the scenes. Running inside the Java Virtual Machine (JVM), the JMX agent connects everything together. It's what lets management tools (like Zabbix) interact with the MBeans.</p> <p>MBean Server: A key part of the JMX agent, the MBean server is like a central registry where MBeans are registered and managed. It keeps everything organized and accessible.</p> <p>Connectors: Want to monitor your Java app remotely? That's where connectors come in. They let external tools connect to the JMX agent over a network. So you're not limited to local monitoring.</p> <p>Adaptors: Sometimes you need JMX data to speak a different language. Adaptors convert JMX info into formats that non-Java tools can understand, like HTTP or SNMP, making integration easier with broader monitoring ecosystems.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#jmx-core-architecture","title":"JMX Core Architecture","text":"<p>To understand how Zabbix collects data from Java applications, it helps to know the basic structure of JMX itself. JMX is built on a three-layer architecture that separates how metrics are defined, how they are stored inside the JVM, and how external tools can reach them.</p> <ul> <li> <p>Instrumentation Layer: This is where the application exposes its internal   state through MBeans (Managed Beans). They can be standard, dynamic, or MXBeans,   and represent things like memory usage, thread counts, or application specific   metrics.</p> </li> <li> <p>Agent Layer: \u2013 Every JVM contains an MBeanServer, which acts as a registry   and makes these MBeans available for management. When you start a JVM with   -Dcom.sun.management.jmxremote, you are exposing this server for external access.</p> </li> <li> <p>Remote Management Layer: This is how outside tools connect to the JVM.   Connectors (such as RMI or JMXMP) and adaptors (such as HTTP or SNMP bridges)   allow Zabbix and other monitoring systems to fetch the metrics. By default,   Zabbix uses an RMI connector via the Java Gateway.</p> </li> </ul> <pre><code>flowchart LR\n    A[Application] --&gt; B[MBeans]\n    B --&gt; C[MBeanServer]\n    C --&gt; D[Connector RMI - JMXMP]\n    D --&gt; E[Zabbix Java Gateway]\n    E --&gt; F[Zabbix Server / DB]\n    F --&gt; G[Frontend]\n\n    classDef app fill:#fef3c7,stroke:#111,stroke-width:1px,color:#111;\n    classDef mbean fill:#dbeafe,stroke:#111,stroke-width:1px,color:#111;\n    classDef gateway fill:#fde68a,stroke:#111,stroke-width:1px,color:#111;\n    classDef zabbix fill:#bbf7d0,stroke:#111,stroke-width:1px,color:#111;\n\n    class A app;\n    class B,C mbean;\n    class D,E gateway;\n    class F,G zabbix;\n\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#where-does-the-zabbix-java-gateway-fit-in-this-picture","title":"Where Does the Zabbix Java Gateway Fit in this picture?","text":"<p>The Zabbix Java Gateway is an external component in the Zabbix ecosystem specifically designed to handle JMX monitoring. While it's not part of the JMX framework itself, it acts as a JMX client that connects to your Java application\u2019s JMX agent and collects data from MBeans. So, if we map it to the components we just discussed, here's how it fits: =&gt; Category: Connectors (Client-Side)</p> <p>Why? Because the Zabbix Java Gateway is essentially a remote management application that connects to the JMX agent running inside your Java app\u2019s JVM. It uses JMX's remote communication protocols (usually over RMI) to pull data from the MBean server.</p> <p>Think of it like this:</p> <ul> <li>Your Java app exposes data via MBeans.</li> <li>The JMX agent and MBean server inside the JVM make that data available.</li> <li>The Zabbix Java Gateway reaches in from the outside, asks for that data,   and passes it along to your Zabbix server.</li> </ul> <p>So, while connectors in JMX terminology usually refer to the part inside the JVM that allows remote access, the Java Gateway is the counterpart on the outside. The client that initiates those connections.</p> <pre><code>flowchart LR\n    subgraph JVM[\"Java Application (JVM)\"]\n        subgraph JMX[\"JMX Agent\"]\n            MBServer[\"MBean Server\"]\n            Connector[\"Connectors\"]\n            Adaptor[\"Adaptors\"]\n            M1[\"MBean\"]\n            M2[\"MBean\"]\n\n            MBServer --- M1\n            MBServer --- M2\n            MBServer --- Connector\n            MBServer --- Adaptor\n        end\n    end\n\n    ZS[\"Zabbix Server\"]\n    JGW[\"Zabbix Java Gateway\"]\n\n    ZS --&gt; JGW\n    JGW --&gt; Connector\n\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#setup-tomcat-to-monitor-with-zabbix","title":"Setup Tomcat to monitor with Zabbix.","text":"<p>To ensure accurate testing of JMX monitoring with Zabbix, a dedicated host is essential. Although configuration on the Zabbix server is possible, a separate machine provides a more realistic representation of a production environment. For our setup, we'll use a new virtual machine running either Rocky Linux or Ubuntu. This machine will serve as our JMX-enabled target, and we'll install and configure Tomcat on it for this purpose.</p> Setup Tomcat <p>Red hat <pre><code>dnf install tomcat\nvi /etc/sysconfig/tomcat\n</code></pre> Ubuntu <pre><code>apt install tomcat10\nvi /etc/default/tomcat10\n</code></pre> Add the following config: in Ubuntu remove the original JAVA_OPTS line or place a # in front</p> <pre><code>JAVA_OPTS=\"\\\n  -Dcom.sun.management.jmxremote=true \\\n  -Dcom.sun.management.jmxremote.port=8686 \\\n  -Dcom.sun.management.jmxremote.rmi.port=8686 \\\n  -Dcom.sun.management.jmxremote.authenticate=false \\\n  -Dcom.sun.management.jmxremote.ssl=false \\\n  -Djava.rmi.server.hostname=&lt;local ip or hostname&gt;\"\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#explanation-of-each-line","title":"Explanation of Each Line","text":"<p>Let's go over the lines we just configured. They are a set of configuration options, called JMX options, passed to the Java Virtual Machine (JVM) at startup. These options enable and configure the Java Management Extensions (JMX) agent, which allows for remote monitoring and management of the application, in this case, Apache Tomcat.</p> <ul> <li> <p><code>JAVA_OPTS=\"... \"</code>   This is a variable used by Tomcat's startup scripts to hold a collection of   command-line arguments for the Java process. The backslash (<code>\\</code>) at the end of   each line is a shell syntax feature that allows a single command or variable   to span multiple lines, making the configuration easier to read.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote=true</code>   This is the main switch to enable the JMX remote agent. By setting this to <code>true</code>,   you're telling the JVM to start the JMX management server.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.port=8686</code>   This option specifies the port number for the JMX agent to listen on for   incoming connections. In this case, it's set to <code>8686</code>.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.rmi.port=8686</code>   This sets the port for the RMI (Remote Method Invocation) server. The JMX   agent uses RMI to communicate with remote clients. In this configuration,   both the JMX agent and the RMI server are configured to use the same port,   simplifying the setup.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.authenticate=false</code>   This disables authentication for JMX connections. For production environments,   this should be set to <code>true</code> to require a username and password. Setting it to   <code>false</code> is only suitable for development or testing environments.</p> </li> <li> <p><code>-Dcom.sun.management.jmxremote.ssl=false</code>   This disables Secure Sockets Layer (SSL) for JMX connections, meaning communication   is not encrypted. Like authentication, this should be set to <code>true</code> in a production   environment to secure the connection.</p> </li> <li> <p><code>-Djava.rmi.server.hostname=&lt;local ip&gt;\"</code>   This is a crucial option that tells the RMI server which IP address to announce   to clients. Clients will use this hostname to connect to the server. If this   is not explicitly set, the RMI server might use the server's internal hostname   or a loopback address (<code>127.0.0.1</code>), which would prevent external connections.   By setting it to <code>&lt;your local IP&gt;</code>, you ensure that the JMX port is bound to   the correct network interface for remote access.</p> </li> </ul> Note <pre><code>There isn't a single, universally \"standard\" port for JMX that is accepted\nacross all applications and vendors. The JMX specification itself does not\ndefine a default port, leaving it to the implementer to choose one.\n\nHowever, certain ports have become common or de facto standards within the Java\necosystem. The most frequently seen ports for JMX are in the high-number range,\ntypically:\n\n- 1099: This port is a historic default for the RMI Registry, which JMX often\n  uses for communication. While it's not strictly a JMX port, it's often\n  associated with older JMX configurations.\n\n- 8686: This port is a well-accepted and formally registered port for JMX with\n  the Internet Assigned Numbers Authority (IANA). The IANA service name for port\n  8686 is sun-as-jmxrmi. This makes it a great choice because it's officially\n  recognized and less likely to conflict with other common services.\n\nWhy Port 8686 is a Good Choice?\nPort 8686 is a User Port (1024-49151), which means it's available for registered\nservices but isn't a \"well known\" port that requires a special permission level\nto use. It's IANA registration as sun-as-jmxrmi makes it a safe and logical\nchoice for JMX monitoring, especially when you need to standardize port assignments\nacross a large infrastructure.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#setup-zabbix-to-monitor-jmx","title":"Setup Zabbix to monitor JMX","text":"<p>Now that we've set up a JMX-enabled application, we need to configure Zabbix to monitor it. Since Zabbix can't connect directly to JMX endpoints, we need an intermediary tool: the Zabbix Java Gateway.</p> <p>This gateway needs to be installed and configured on your Zabbix server or proxy, allowing a single gateway to service multiple JMX applications. The gateway operates in a passive mode, which means it polls data directly from your JMX application. The Zabbix server or proxy then polls the gateway to retrieve this data, completing the connection chain.</p> <p></p> <p>04.35 JMX Gateway</p> Install the JAVA Gateway <p>Red Hat <pre><code>dnf install zabbix-java-gateway\n</code></pre> Ubuntu <pre><code>apt install zabbix-java-gateway\n</code></pre></p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#configuring-zabbix-and-the-java-gateway","title":"Configuring Zabbix and the JAVA Gateway","text":"<p>After installing the gateway, you'll find its configuration file at <code>/etc/zabbix/zabbix_java_gateway.conf</code>. The default <code>LISTEN_IP</code> is set to 0.0.0.0, which means it listens on all network interfaces, though you can change this. The gateway listens on port 10052, a non IANA registered port, which can also be adjusted using the <code>LISTEN_PORT</code> option if needed.</p> <p>The first setting we'll change is <code>START_POLLERS</code>. We need to uncomment this line and set a value, for example, <code>START_POLLERS=5</code> to define the number of concurrent connections. The TIMEOUT option controls network operation timeouts, while <code>PROPERTIES_FILE</code> allows you to define or override additional key-value properties, such as a keystore password, without exposing them in a command line.</p> <p>For your Zabbix server, you'll need to update the configuration file at <code>/etc/zabbix/zabbix_server.conf</code>.</p> <p>You'll need to modify three key options:</p> <ul> <li> <p>JavaGateway: Uncomment this line and set its value to the IP address of   the host running your Java gateway. This will likely be your Zabbix   server itself, but it can be on a separate VM or proxy.</p> </li> <li> <p>JavaGatewayPort: This option should remain at the default <code>10052</code> unless   you've changed the port in your gateway's configuration.</p> </li> <li> <p>StartJavaPollers: Uncomment and set this option to define the number of   concurrent Java pollers the server will use. A good starting   point is to match the number you set on the gateway, for   example, 5.</p> </li> </ul> <p>After making the changes to <code>/etc/zabbix/zabbix_server.conf</code> and <code>/etc/zabbix/zabbix_java_gateway.conf</code>, you need to restart the following services:</p> <ul> <li>Zabbix Java Gateway</li> <li>Zabbix Server</li> </ul> <p>Restarting these two services applies the new configuration, allowing the server to communicate with the Java Gateway and begin polling for JMX data. Also don't forget to enable the <code>Zabbix Java Gateway</code> service.</p> Restart the services <p>RedHat and Ubuntu <pre><code>systemctl enable zabbix-java-gateway --now\nsystemclt restart zabbix-server\n</code></pre></p> <p>On the application side don't forget to open the firewall so that our <code>zabbix-java-gateway</code> can connect to our application.</p> <p>Allow JMX</p> <p>Red Hat <pre><code>firewall-cmd --add-port=8686/tcp --permanent\nfirewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 8686/tcp\n</code></pre></p> Warning <pre><code>Don't forget to place SeLinux in permissive mode before you start else the\nJAVA gateway will not work. You should fix SeLinux permissions once the setup\nis working.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#monitoring-jmx-items","title":"Monitoring JMX items","text":"<p>After having setup everything, we can now connect to our Java application's JMX port to verify everything is working.</p> <p>For this, we can use JConsole, a monitoring tool that comes with the Java Development Kit (JDK). Another great option is VisualVM, which offers a more visual and feature rich experience. You can download it from https://visualvm.github.io/download.html.</p> <p>Start your preferred application and connect to our JMX port on 8686.</p> <p></p> <p>04.36 Jconsole</p> <p>After a successful login you should be greeted with a screen like this. Were you have a tree view overview of all the Mbeans we can use to gather information from.</p> <p></p> <p>04.37 Login screen</p> <p>Before we can do this we need to create a new host in our Zabbix server. Let's go to <code>Data collection</code> - <code>Hosts</code> and click on <code>Create host</code> in the upper right corner. Use the following settings to create our host:</p> <ul> <li>Hostname : Tomcat</li> <li>Host groups: JMX</li> <li>Interfaces: JMX<ul> <li>IP address: IP of your Tomcat server</li> <li>Port : 8686 or the port you specified in your Tomcat configuration.</li> </ul> </li> </ul> <p>Press the <code>Add</code> button when ready.</p> Note <pre><code>It seems weird that we not specify the JavaGateway here but it's actually\nnormal. Zabbix knows from its configuration file where the gateway is. So we\nneed to specify the IP and the PORT of the JAVA application here that we would\nlike to monitor.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#create-our-first-item","title":"Create our first item","text":"<p>On our host Tomcat create a new item and add the following information.</p> <ul> <li>Name: requestCount</li> <li>Type: JMX Agent</li> <li>Key: jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\", \"requestCount\"]</li> <li>Type of information: Numeric(unsigned)</li> <li>Host interface: The JMX interface we just created on our host.</li> </ul> <p></p> <p>ch04.38 JMX item</p> Verifying and Saving the Item <pre><code>Before saving the configured item, use the Test button. Clicking Get value\nor Get value and test should populate the value field with data, confirming\nthat the item is functional. Once the test is successful, you can save the\nitem.\n</code></pre> <p>To understand how we constructed the item key, let's look at the process in JConsole.</p> <ol> <li> <p>Navigate to the MBeans tab and expand Catalina &gt; GlobalRequestProcessor &gt; http-nio-8080.</p> </li> <li> <p>The ObjectNAme field on the right displays the MBean's fully qualified name:    <code>Catalina:type=GlobalRequestProcessor,name=\"http-nio-8080\"</code>. This is the base    for our Zabbix item key.</p> </li> </ol> <p>The primary challenge with this specific key is that it contains double quotes (\") within the <code>name</code> attribute. Zabbix requires the entire JMX key to be enclosed in double quotes, which would conflict with the existing quotes. To resolve this, we must escape the inner double quotes with a backslash ().</p> <p>This results in the following structure for the Zabbix item key: <code>jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\"]</code>.</p> <p>This key is still incomplete. To specify the metric to be monitored, you must append an attribute name, such as maxTime, requestCount, or bytesReceived, at the end of the key, separated by a comma. <code>jmx[\"Catalina:type=GlobalRequestProcessor,name=\\\"http-nio-8080\\\"\",\"requestCount\"]</code></p> <p></p> <p>04.39 requestCount item</p> <p>The <code>java.lang.management.Memory</code> MBean provides a good example of how to handle CompositeData types in Zabbix. This MBean has an attribute called <code>HeapMemoryUsage</code>, which is not a simple value but rather an instance of <code>CompositeData</code>. This special JMX data type is used to represent complex structures.</p> <p>This means that attributes like <code>init</code>, <code>used</code>, <code>committed</code>, or <code>max</code> aren't accessed directly on the MBean itself. Instead, they are part of the <code>MemoryUsage</code> object that is returned when you query the <code>HeapMemoryUsage</code> attribute.</p> <p>To monitor a specific value from this composite object, you must specify the attribute name within the <code>CompositeData</code> structure. For example, to get the maximum heap memory usage, the Zabbix item key would be: <code>jmx[\"java.lang:type=Memory\",\"HeapMemoryUsage.max\"]</code>.</p> <p></p> <p>_04.40 HeapMemoryUsage</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#viewing-tabular-data","title":"Viewing Tabular Data","text":"<p>To view the detailed breakdown of the <code>HeapMemoryUsage</code> attribute, double click on its value in the attribute value column. This action displays the composite data in a tabular format, making it easier to see individual metrics like <code>init</code>, <code>used</code>, <code>committed</code>, and <code>max</code>.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#zabbix-jmx-item-keys","title":"Zabbix JMX Item Keys","text":"<p>Zabbix offers three primary item keys for JMX monitoring:</p> <ul> <li> <p>jmx[]: This is the standard key used for monitoring a specific JMX attribute.   It's the most common key for creating simple, direct checks.</p> </li> <li> <p>jmx.get[]: This key is used to retrieve a full object from an MBean. It is   often paired with Low Level Discovery (LLD) rules and preprocessing steps to   extract specific values from the returned data, allowing for more flexible data   collection.</p> </li> <li> <p>jmx.discovery[]: This key is specifically designed for use with Low Level   Discovery. It helps Zabbix automatically discover multiple JMX MBeans or attributes   on a monitored host, which is essential for scaling JMX monitoring across a large   number of components.</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#making-use-of-jmxget","title":"Making use of jmx.get[]","text":"<p>The <code>jmx.get[]</code> item key returns a JSON array containing a list of MBean objects or their attributes. Unlike <code>jmx.discovery[]</code>, it does not automatically define LLD macros. Instead, it is particularly useful when you need to retrieve a structured set of data and then process it using JSONPath in a dependent item or a low level discovery rule.</p> <p>While <code>jmx.get[]</code> is commonly used for Low Level Discovery (LLD), it is also highly effective for creating dependent items without using a full discovery rule. This allows you to collect multiple related metrics from a single request to the JMX agent, which is more efficient.</p> <p>For instance, the key <code>jmx.get[attributes,\"*:type=GarbageCollector,name=PS MarkSweep\"]</code> would return a comprehensive payload with all attributes of the specified garbage collector.</p> <pre><code>[\n  {\n    \"name\": \"CollectionCount\",\n    \"description\": \"java.lang:type=GarbageCollector,name=PS MarkSweep,CollectionCount\",\n    \"type\": \"java.lang.Long\",\n    \"value\": \"0\",\n    \"object\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\"\n  },\n  ...\n  ...\n  ...\n  ...\n  {\n    \"name\": \"ObjectName\",\n    \"description\": \"java.lang:type=GarbageCollector,name=PS MarkSweep,ObjectName\",\n    \"type\": \"javax.management.ObjectName\",\n    \"value\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\",\n    \"object\": \"java.lang:type=GarbageCollector,name=PS MarkSweep\"\n  }\n]\n</code></pre> <p>This JSON output can then be used as the master item for multiple dependent items, each with a preprocessing step to extract a specific value (e.g., <code>CollectionCount</code> or <code>CollectionTime</code>) using a JSONPath expression. This technique is a powerful way to reduce the load on both the JMX agent and the Zabbix server by making a single call to collect multiple metrics.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#performance-considerations-for-jmx-monitoring","title":"Performance Considerations for JMX Monitoring","text":"<p>JMX monitoring is powerful but comes with higher overhead compared to traditional Zabbix agent checks. To ensure your monitoring remains efficient and doesn't impact either your Zabbix infrastructure or the monitored JVMs, keep the following points in mind.</p> <p>Zabbix communicates with the Java Gateway synchronously:</p> <ul> <li>The Zabbix server sends a request for a JMX item.</li> <li>The Java Gateway connects to the target JVM and retrieves the data.</li> <li>Only when the response comes back does the Zabbix server proceed with that item's   check. This means that if JMX queries are slow (due to network, JVM GC pauses, or overloaded gateways), your monitoring queue can back up.</li> </ul> <p>To optimize performance:</p> <ul> <li>The Java Gateway bundles multiple requests for the same host and processes them   in a single JVM connection.</li> <li>This reduces the overhead of repeatedly opening/closing JMX connections.</li> <li> <p>For example, if you monitor 20 JVM attributes on the same Tomcat, the gateway   will collect them in fewer, larger batches instead of 20 separate calls.</p> </li> <li> <p>Once a JMX connection to a JVM is established, the gateway keeps it alive and   reuses it for subsequent checks.</p> </li> <li>This avoids expensive RMI connection setup for   every metric.</li> <li>If the JVM restarts or the connection drops, the gateway will re-establish it automatically.</li> </ul> <p>Two important parameters in zabbix_server.conf and zabbix_java_gateway.conf directly affect JMX performance:</p> <ul> <li>StartJavaPollers (on Zabbix Server)<ul> <li>Defines how many parallel JMX pollers the server can use.</li> <li>Too few pollers \u2192 JMX checks queue up and fall behind.</li> <li>Too many pollers \u2192 high load on Java Gateway and JVMs.</li> </ul> </li> <li>StartPollers (general pollers)   Balance with Java pollers so your server can handle both JMX and regular agent   checks without bottlenecks.</li> <li> <p>Rule of thumb: start small (Ex: 5\u201310 Java pollers) and increase gradually while   monitoring load.</p> </li> <li> <p>Don't enable all MBeans just because you can.</p> </li> <li>Focus on actionable JVM metrics (heap, non-heap, GC, threads, JDBC pools) and   a few application-specific MBeans that map to real-world performance.</li> <li>Too many JMX items not only stress the JVM but also flood your Zabbix database   with unnecessary history data.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#monitoring-jmx-through-jolokia","title":"Monitoring JMX through Jolokia","text":"<p>While Zabbix can natively collect JMX data using the Zabbix Java Gateway, an alternative worth considering is Jolokia \u2014 a lightweight JMX-to-HTTP bridge.</p> <p>Jolokia exposes JMX MBeans over a simple REST/JSON interface, which means you can collect Java metrics using Zabbix's HTTP Agent items instead of the Java Gateway. The result is often lower overhead, easier network configuration, and greater flexibility.</p> <p>Why Jolokia?</p> <ul> <li>No Gateway Needed. Jolokia runs as a Java agent, servlet, or OSGi bundle directly   inside the JVM.</li> <li>Efficient Data Collection. You can request multiple attributes in a single HTTP   call and split them into dependent items using JSONPath preprocessing.</li> <li>Firewall-Friendly. Works over standard HTTP(S) ports, avoiding the complexity   of RMI and port ranges.</li> <li>Secure, it supports HTTPS, authentication, and access control policies out of   the box.</li> </ul> <p>Example:</p> <pre><code>curl -s http://localhost:8778/jolokia/read/java.lang:type=Memory,java.lang:type=Threading\n</code></pre> <p>In Zabbix:</p> <p>Create an HTTP Agent master item pointing to the Jolokia endpoint. Add dependent items to extract individual values, e.g.:</p> <pre><code>$.value['java.lang:type=Memory']['HeapMemoryUsage']['used']\n$.value['java.lang:type=Threading']['ThreadCount']\n</code></pre> <p>This approach allows you to collect dozens of metrics with a single network request.</p> When to use it ? <p>Choose Jolokia if you prefer a stateless, agent-based setup or need to monitor many JVMs without maintaining a central Java Gateway. Stick with the Zabbix Java Gateway if you rely on built-in templates or want a fully integrated, out of the box JMX experience.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#conclusion","title":"Conclusion","text":"<p>Zabbix handles JMX monitoring synchronously, but optimizes performance with request bundling and connection reuse. By tuning pollers, using reasonable update intervals, and selecting only the most valuable metrics, you can scale JMX monitoring without overloading your monitoring system or your Java applications.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#questions","title":"Questions","text":"<ul> <li>Explain how the Zabbix Java Gateway fits into the overall JMX architecture.   Why is it needed?</li> <li>In Zabbix, what is the difference between the item keys jmx[], jmx.get[] and   jmx.discovery[]? Give an example use case for each.</li> <li>Reflect: In your environment, what Java-applications would benefit most from   JMX monitoring? What metrics would you pick first, and why?</li> <li>What are security considerations when enabling remote JMX monitoring in production?   What could go wrong if you leave flags like authenticate=false and ssl=false in   a live environment?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/jmx/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.youtube.com/watch?v=aKGYa6Y9r60&amp;t=87s</li> <li>https://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/jmx_monitoring</li> <li>https://jolokia.org/</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/","title":"Preprocessing","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/preprocessing/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/script/","title":"Script item","text":"<p>Zabbix offers several item types for gathering data, but sometimes you need logic, multiple API calls, or data manipulation that's too complex for simple preprocessing. Script items fill that gap, they run JavaScript directly on the Zabbix Server or Proxy and can fetch, process, and return data exactly how you need it.</p> <p>In this chapter, we'll explore what script items can do through two working examples:</p> <ol> <li>Checking GitHub repository stars via public API</li> <li>Querying the public weather page Open-Meteo</li> </ol>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#understanding-script-items","title":"Understanding Script items","text":"<p>Script items execute JavaScript in the Zabbix backend using the built-in Duktape engine.</p> <p>They're ideal when you need:</p> <ul> <li>HTTP or API calls that return JSON/XML data</li> <li>Conditional logic or loops</li> <li>Chained API requests (login + data fetch)</li> <li>Monitoring without deploying an agent</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#common-javascript-objects","title":"Common JavaScript objects","text":"<p>Zabbix provides several JavaScript objects for script items:</p> Object Purpose <code>HttpRequest</code> Perform HTTP(S) requests <code>Zabbix.log(level, message)</code> Log messages (level 4=debug, 3=info, etc.) <code>JSON.parse()</code> / <code>JSON.stringify()</code> Handle JSON data <code>parameters.&lt;name&gt;</code> Access item parameters defined in the UI <p>Limits: up to 10 <code>HttpRequest</code> objects per run; typical timeout \u2264 30 seconds (depending on item settings).</p> <p>The complete list of objects can be found in the official Zabbix documentation: https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing/javascript/javascript_objects</p> <p>Let's create some example scripts so that you get a better understanding of how it works.</p> <p>Create a new host in <code>Data collection</code> -&gt; <code>Hosts</code>.</p> <ul> <li>Host name: javascript</li> <li>Host groups: JS Servers</li> </ul> <p>Actually name and group are not important at all in this case :) When done create an item on the host.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-1-query-a-public-api-github-repository-stars","title":"Example 1 \u2013 Query a public API (GitHub repository stars)","text":"<p>This item will return the current number of stars for a given GitHub repository using the REST API.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#item-setup","title":"Item setup","text":"Field Value Name Query Github Repository Type Script Key github.repo.stars Type of information Numeric (unsigned) Unit Stars Update interval 1h Timeout 5s Parameters owner = <code>zabbix</code> repo = <code>zabbix</code> token = <code>&lt;optional Github token&gt;</code> <p>Note: GitHub\u2019s API enforces rate limits for unauthenticated requests (\u224860/hour per IP). Add a personal access token for higher limits.</p> <p>Add the following code in the script box of the item.</p> <pre><code>// Parameters (item \u2192 Parameters):\n//   owner = zabbix\n//   repo  = zabbix\n//   token = &lt;optional PAT&gt;\n\n// Parse parameters from `value` (JSON string)\nvar p = {};\ntry {\n  p = JSON.parse(value);   // { owner, repo, token }\n} catch (e) {\n  throw \"Parameter JSON parse failed: \" + e;\n}\n\nvar owner = p.owner;\nvar repo  = p.repo;\nvar token = p.token || \"\";\n\nif (!owner || !repo) {\n  throw \"Missing 'owner' or 'repo' parameter\";\n}\n\nvar url = \"https://api.github.com/repos/\" + owner + \"/\" + repo;\n\nvar req = new HttpRequest();\nreq.addHeader(\"User-Agent: zabbix-script-item\"); // required by GitHub\nreq.addHeader(\"Accept: application/vnd.github+json\");\nif (token) {\n  req.addHeader(\"Authorization: Bearer \" + token);\n}\n\nvar body = req.get(url);\nvar code = req.getStatus();\nif (code !== 200) {\n  throw \"GitHub API HTTP \" + code + \" body=\" + body;\n}\n\nvar data = JSON.parse(body);\nif (typeof data.stargazers_count !== \"number\") {\n  throw \"Unexpected response: missing stargazers_count\";\n}\n\nreturn data.stargazers_count;\n</code></pre> <p></p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-trigger","title":"Example trigger","text":"<pre><code>last(/javascript/github.repo.stars)=0\n</code></pre> <p>In this case we get an alert if the script returns 0</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#example-2-public-weather","title":"Example 2 - Public weather","text":"<p>In this script we call Open-Meteo and ask for for information like temperature, windspeed, direction based on our longitude / latitude.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#item-setup_1","title":"Item setup","text":"Field Value Name Query Weather Open Meteo Type Script Key weather.openmeteo.json Type of information Text Update interval 1h Parameters latitude = <code>50.85</code>, longitude = <code>4.7</code> temperature_unit = <code>celsius</code> (celsius / fahrenheit) windspeed_unit = <code>kmh</code>   (kmh / ms / mph / kn) <p>Add the following code in the script box.</p> <p><pre><code>// Parameters (item \u2192 Parameters):\n//   latitude = 50.85\n//   temperaature_unit  = 4.7\n//   windspeed_unit = kmh / ms / mph / kn\n\nfunction toNumberFixLocale(s){ if(s==null)return NaN; var t=String(s).trim().replace(\",\",\".\"); return parseFloat(t); }\n\nvar p={}; try{ p=JSON.parse(value);}catch(e){ throw \"Param JSON parse failed: \"+e; }\n\nvar lat=toNumberFixLocale(p.latitude), lon=toNumberFixLocale(p.longitude);\nif(isNaN(lat)||isNaN(lon)) return JSON.stringify({ok:0,status:\"BAD_COORDS\",note:\"Use dots, e.g. 50.85 and 4.35\"});\nif(lat&lt;-90||lat&gt;90||lon&lt;-180||lon&gt;180) return JSON.stringify({ok:0,status:\"RANGE_ERROR\"});\n\nvar tUnit=(p.temperature_unit||\"celsius\").toLowerCase();\nvar wUnit=(p.windspeed_unit||\"kmh\").toLowerCase();\n\nvar url=\"https://api.open-meteo.com/v1/forecast?latitude=\"+encodeURIComponent(lat)+\"&amp;longitude=\"+encodeURIComponent(lon)+\"&amp;current_weather=true&amp;temperature_unit=\"+encodeURIComponent(tUnit)+\"&amp;windspeed_unit=\"+encodeURIComponent(wUnit)+\"&amp;timezone=auto\";\n\nvar req=new HttpRequest(); req.addHeader(\"User-Agent: zabbix-script-item\");\nvar body=req.get(url); var code=req.getStatus();\nif(code!==200) return JSON.stringify({ok:0,status:\"HTTP\",http:code,url:url,body:String(body).slice(0,180)});\n\nvar j; try{ j=JSON.parse(body);}catch(e){ return JSON.stringify({ok:0,status:\"BAD_JSON\"}); }\nvar cw=j.current_weather||j.current||null;\nif(!cw||typeof cw.temperature!==\"number\"||typeof cw.windspeed!==\"number\") return JSON.stringify({ok:0,status:\"NO_CURRENT\"});\n\nreturn JSON.stringify({ok:1,status:\"OK\",temperature:cw.temperature,windspeed:cw.windspeed,winddirection:cw.winddirection,is_day:cw.is_day,time:cw.time||\"\"});\n</code></pre> </p> <p>Next create a few dependent items that use this script as master item.</p> Field Value Name: Temperature Key: weather.temp Type of information: Float Preprocessing JSONPath: -&gt; $.temperature Field Value Name: Windspeed Key: weather.windspeed Type of information: Float Preprocessing JSONPath: -&gt; $.windspeed Field Value Name: Wind direction Key: weather.winddir Type of information: Unsigned Preprocessing JSONPath: -&gt; $.winddirection Field Value Name: Is day Key: weather.is_day Type of information: Unsigned Preprocessing JSONPath: -&gt; $.is_day <p></p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#best-practices-and-troubleshooting","title":"Best practices and troubleshooting","text":"<ul> <li>Timeouts: Keep script execution short; APIs may delay.</li> <li>Testing: Use \u201cCheck now\u201d in the item to see raw output.</li> <li>Logging: Use <code>Zabbix.log(3, \"message\")</code> for debug output (appears in server   or proxy log).</li> <li>Error handling: Always <code>throw</code> errors instead of returning strings; Zabbix   will mark the item as unsupported automatically.</li> <li>Object reuse: Each script can create up to 10 <code>HttpRequest</code> objects reuse   one when chaining API calls.</li> <li>Security: Never hard-code passwords or tokens; use macros or item parameters.</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#when-to-use-script-items","title":"When to use Script items","text":"<p>Use Script items when:</p> <ul> <li>You need logic, loops, or multiple API calls.</li> <li>You monitor remote services where agents aren't available.</li> <li>You want to prototype an integration before writing a custom plugin.</li> </ul> <p>For simple JSON transformations, preprocessing JavaScript might be enough, but Script items shine when you need full control.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#expert-techniques-for-script-items","title":"Expert techniques for Script items","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#1-debugging-things","title":"1. Debugging things","text":"<p>During development, use the internal logging API to trace script behavior:</p> <pre><code>Zabbix.log(4, \"Debug: response body = \" + body);\nZabbix.log(3, \"Info: token received successfully\");\nZabbix.log(2, \"Warning: unexpected API reply\");\n</code></pre> Tip <ul> <li>Log level <code>4</code> = debug, visible only if the server log level \u22654.</li> <li>Log level <code>3</code> = informational.</li> <li>The log lines are written to the Zabbix server or proxy log, not the frontend.</li> </ul> <p>When a script throws an error, Zabbix automatically marks the item as unsupported.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#2-using-macros-and-secret-parameters","title":"2. Using macros and secret parameters","text":"<p>Always move credentials, tokens, and sensitive values to item parameters or macros rather than hard coding them.</p> <p>For example:</p> Parameter Value <code>token</code> <code>{$GITHUB_TOKEN}</code> <p>Then define <code>{$GITHUB_TOKEN}</code> in your host or template with secret visibility. This allows you to reuse the same script safely across environments.</p> Tip <p>Manage secrets via template macros so that they are portable if you export the template. Store secrets in a vault instead of the DB.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#3-error-handling-and-fallback-logic","title":"3. Error handling and fallback logic","text":"<p>Production scripts should degrade gracefully. You can catch and handle network failures, retry, or return a fallback value:</p> <pre><code>var req = new HttpRequest();\ntry {\n  var data = req.get(parameters.url);\n  if (req.getStatus() !== 200)\n    throw \"HTTP \" + req.getStatus();\n  return JSON.parse(data).value;\n}\ncatch (e) {\n  Zabbix.log(2, \"Request failed: \" + e);\n  return 0;  // Fallback value for triggers\n}\n</code></pre> <p>This script catches any errors (network failure, bad JSON, missing .value, etc.): Logs the error at severity level 2 (Warning) into the Zabbix server log. It returns a numeric 0 instead of throwing errors, so the item remains supported.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#4-caching-between-executions","title":"4. Caching between executions","text":"<p>Script items don't keep memory between runs, but you can reuse data efficiently by combining one master Script or trapper item that stores the full JSON response with several dependent items that extract individual fields. This isn't true caching inside JavaScript. It's data reuse via Zabbix history, avoiding repeated API calls.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#5-parallelization-and-performance-considerations","title":"5. Parallelization and performance considerations","text":"<p>Each Script item consumes one poller slot. If you have dozens of Script items that do API calls, consider:</p> <ul> <li>Running them on a proxy close to the data source (reduces latency).</li> <li>Adjusting <code>StartPollers</code> and <code>Timeout</code> in <code>zabbix_server.conf</code>.</li> <li>Avoiding heavy JSON parsing or unnecessary loops.</li> <li>Using asynchronous APIs only when truly needed. Duktape executes synchronously.</li> </ul> <p>A single bad Script item can block a poller for its entire timeout period, so always test and tune.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#6-returning-structured-data","title":"6. Returning structured data","text":"<p>Script items can return JSON strings which can then be used in dependent items. Example: returning a JSON object containing multiple metrics.</p> <pre><code>return JSON.stringify({\n  cpu_usage: 25,\n  mem_usage: 67,\n  disk_free: 18234\n});\n</code></pre> <p>Then create dependent items with JSONPath like:</p> <pre><code>$.cpu_usage\n$.mem_usage\n$.disk_free\n</code></pre> <p>This allows one Script item to feed many dependent metrics. A professional optimization pattern.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#7-combining-script-items-with-preprocessing-javascript","title":"7. Combining script items with preprocessing JavaScript","text":"<p>Advanced users often pair a Script item that performs heavy retrieval with preprocessing JavaScript that performs lightweight normalization.</p> <p>Example:</p> <ul> <li>Script item fetches a full JSON payload from an API.</li> <li>Dependent item extracts a numeric value using preprocessing JavaScript:</li> </ul> <pre><code>var obj = JSON.parse(value);\nreturn obj.metrics.cpu;\n</code></pre> <p>This separates responsibilities and makes troubleshooting easier.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#8-controlling-execution-context","title":"8. Controlling execution context","text":"<p>Script items always run on the poller process of either the Zabbix server or proxy. Understanding this helps when debugging:</p> <ul> <li>If an item runs on a proxy, it has network access only from the proxy\u2019s location.</li> <li>You can force execution on a proxy by assigning the host to that proxy.</li> <li>Logs for script execution appear in the respective poller\u2019s log file.</li> </ul> Info <p>There is a small exception when it comes to the use of the poller process. If you make use of the test button to test the item then the check will not user the poller but the task manager process.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#9-best-practice-checklist","title":"9. Best practice checklist","text":"<ul> <li>\u2705 Keep scripts short (&lt;200 lines).</li> <li>\u2705 Always handle HTTP status codes and JSON errors.</li> <li>\u2705 Use parameters or macros for configuration.</li> <li>\u2705 Log at <code>Zabbix.log(3, ...)</code> for operations and <code>Zabbix.log(4, ...)</code> for debugging.</li> <li>\u2705 Reuse a single <code>HttpRequest</code> object per script.</li> <li>\u2705 Test interactively in the frontend with \u201cCheck now\u201d.</li> <li>\u2705 Document the purpose and return type at the top of each script.</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#12-summary","title":"12. Summary","text":"<p>By mastering Script items, you've reached the expert level of Zabbix data collection. You now understand not just how to fetch and return data, but how to:</p> <ul> <li>Debug effectively</li> <li>Secure your credentials</li> <li>Handle API errors gracefully</li> <li>Optimize poller usage</li> <li>Reuse scripts for multiple metrics</li> </ul> <p>These skills let you integrate Zabbix with virtually any system.</p> Note <p>When a Script item is executed, Zabbix starts a Duktape JavaScript interpreter inside the server or proxy process. For each check run, Zabbix injects a few built-in variables into the script\u2019s environment the most important one is <code>value</code>.</p> <p><code>value</code> is a JSON string that contains all item parameters you defined under Parameters \u2192 Name / Value.</p> <p>Inside the script, you must parse it first:</p> <p><code>var p = JSON.parse(value);</code></p> <p>You can then access the parameters by name:</p> <p><code>var host = p.host;</code> <code>var port = p.port;</code></p> <p>If you try to reference a <code>parameters</code> object (as seen in some very old examples), you will get : <code>ReferenceError: identifier 'parameters' undefined</code> because the Duktape runtime does not inject such a variable anymore. All parameters are passed inside the value JSON string.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#conclusion","title":"Conclusion","text":"<p>Script items make Zabbix remarkably flexible \u2014 they let you collect data from any API or service with just a few lines of JavaScript. While the built-in Duktape engine is synchronous and minimal, meaning no true parallelism or advanced JS features, it\u2019s more than enough for lightweight automation and integrations.</p> <p>The key to using Script items effectively is efficiency: fetch once, reuse results through dependent items, and keep scripts small and predictable. When heavier or high-frequency polling is needed, move it closer to the data source with proxies or external collectors.</p> <p>With those principles in mind, Script items become your gateway between Zabbix and the modern API world \u2014 simple, powerful, and entirely scriptable.</p>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#questions","title":"Questions","text":"<ul> <li>What makes Script items different from external checks or user parameters in Zabbix?</li> <li>How are Script item parameters passed to the JavaScript environment in modern   Zabbix versions?</li> <li>Why does using JSON.parse(value) make your scripts more portable?</li> <li>How can you avoid making multiple API calls when several metrics come from the   same endpoint?</li> <li>Why are global macros usually not a good choice for secrets in exported templates?</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/script/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/preprocessing/javascript/javascript_objects</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/script</li> </ul>","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/simple-checks/","title":"Simple checks","text":"<p>What would a Zabbix book be without setting up the actual monitoring itself, because in  the end a monitoring system is all about collecting data through various different protocols. </p> <p>Simple checks are one (or actually several) of such protocols. Zabbix has a bunch of built-in  checks we can do, executed from the Zabbix server or proxy towards our monitoring targets. The simple  checks contain protocol checks such as <code>ICMP Ping</code>, <code>TCP/UDP</code> but also built in <code>VMware</code> monitoring.</p> <p>Without further ado, let's set up our first items. Please keep in mind that we will be building everything on a host level for now. Check out Chapter 06 to learn how to do this properly on a template.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#building-the-item","title":"Building the item","text":"<p>We shall start with a simple ICMP Ping check. If you haven't already, at <code>Data collection</code> | <code>Hosts</code> let's create the host <code>simple-checks</code> in the host group <code>Servers/Linux</code>. Then, for this new host navigate to <code>Items</code>. You should see a <code>Create item</code> button in the top right corner. Click on this button and lets have a look at the item creation modal popup window:</p> <p></p> <p>4.5 Empty Item creation window</p> <p>Make sure to change the <code>Type</code> to <code>Simple check</code> to get a similar result. We can see there are only two fields (that aren't selectors) mandatory. These, we have to fill in to make our item work.</p> <ul> <li>Name </li> <li>Key</li> </ul>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#item-name","title":"Item Name","text":"<p>The <code>Item name</code> in Zabbix is a very important field for all of our items. This is going to be the first thing you see when looking for you configuration, but also the main identifier when you'll search the visualisation pages (like <code>Latest data</code>) for this item. </p> <p>Item names do not have to be unique (although it is recommended), as it will be the <code>Item key</code> that will make sure this item is distinguishable as a unique entity. So what is the best practise here? </p> <ul> <li>Item names should be short and descriptive</li> <li>Item names should contain prefixes where useful</li> <li>Item names should contain suffixes where useful</li> </ul> <p>Some examples of good item names: - Use <code>Memory utilization</code> not <code>The memory util of this host</code>. Keep it short and descriptive - Use <code>CPU load</code> or if you have multiple use a suffix <code>CPU load 1m</code> and <code>CPU load 5m</code> for example - Use prefixes like <code>Interface eth0: Bits incoming</code> and <code>Interface eth1: Bits incoming</code> for similar items on different entities</p> <p>Using those techniques, we can create items that are easy to find and most importantly that your Zabbix users will want to read. After all, you can count on IT engineers to not read well, especially in a troubleshooting while everything is down scenario. Keeping things simple will also make sure your monitoring system will be a pleasure to be used or at least people won't avoid using your monitoring.</p> <p>My final and favourite tip is: Remember: Zabbix uses alphabetical sorting in a lot of places. Why is this important, well let's look at the <code>Monitoring</code> | <code>Latest data</code> page with a host using a  default template:</p> <p> 4.6 Latest data Memory and CPU items sorting</p> <p>If this template had used CPU and Memory as a prefix for all respective items. Then this page would have nicely sorted them together. While right now, there are CPU items right between the memory related items. It creates a bit of a mess, making Zabbix harder to read. </p> <p>If you want to spend (waste?) 30 minutes of your time hearing all about sorting data in various different places in Zabbix. The following video is highly recommended: https://www.youtube.com/watch?v=5etxbNPrygU</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#item-key","title":"Item Key","text":"<p>Next up is the item key, an important part of setting up your Zabbix item as it will serve as the uniqueness criteria for the creation of this entity. There are two types of item keys:</p> <ul> <li>Built in</li> <li>User defined</li> </ul> <p>The built in item keys is what we will use to create our simple check in a while. The user defined item key is what we will use on items types like <code>SNMP</code> and <code>Script</code>. The main difference is that built in item keys are defined by Zabbix and attach to a specific monitoring function. The user defined item keys are just there to serve as the uniqueness criteria, while a different field in the item form will determine the monitoring function.</p> <p>Item keys can also be of a <code>Flexible</code> or <code>Non-flexible</code> kind. Flexible meaning the item key accepts parameters. These parameters change the function of the built-in item keys and also count as part of the uniqueness of the item keys. For example:</p> <ul> <li>agent.version a <code>Zabbix agent</code> item key doesn't accept parameters and only serves one purpose. To get the version of the Zabbix agent installed.</li> <li>net.tcp.service[service,,] a <code>Simple check</code> item key that accepts 3 parameters, each parameter divided by a comma(<code>,</code>). Optional parameters are marked by the <code>&lt;&gt;</code> signs, whereas mandatory parameters have no pre/suffix.","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#icmp-ping","title":"ICMP Ping","text":"<p>With all of this in mind, let's finish the creation our ICMP Ping item. First, we will give our new item a name. Since this is a simple ICMP Ping to the host lets go for:</p> <ul> <li>Name = <code>ICMP Ping</code></li> </ul> <p>For the key, we will have to use the built-in key <code>icmpping[&lt;target&gt;,&lt;packets&gt;,&lt;interval&gt;,&lt;size&gt;,&lt;timeout&gt;,&lt;options&gt;]</code>. This key accepts 6 parameters, all of which are optional. However, when we do not select an interface on an <code>icmpping</code> item, we need to fill in at least <code>icmpping[&lt;target&gt;]</code> for it to work. Normally <code>icmpping</code> can use the interface IP or DNS, but since we will discuss the <code>Host interfaces</code> later in this chapter, let's use the parameter instead.</p> <ul> <li>Key = <code>icmpping[127.0.0.1]</code></li> </ul> <p>The item will now look like this:</p> <p> 4.7 ICMP Ping item</p> <p>It's also best practise to add a tag with the name <code>component</code> to every item we create. Let's switch to the <code>Tags</code> tab on the item creation window, and create the tag <code>component:system</code>.</p> <p> 4.8 ICMP Ping item tags</p> <p>Zabbix utilises the fping utility, installed on the Zabbix server and/or proxy, to execute ICMP Ping checks. By default, Zabbix adds a repository containing the tool and installs the dependency. If you have a slightly different setup, make sure this utility is installed on your system and that the following two parameters are configured in the Zabbix server/proxy configuration file:</p> <p>!!! Define Fping paths\"</p> <pre><code>```\nFpingLocation=/usr/sbin/fping\n\nFping6Location=/usr/sbin/fping6\n```\n</code></pre>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#tcpudp-ports","title":"TCP/UDP Ports","text":"<p>Another useful simple check you can create is the TCP (and UDP) port check. With these 4 item keys  we can monitor the availability and performance of TCP and UDP ports. There are 4 built-in keys available for these checks:</p> <ul> <li>net.tcp.service[service,,] <li>net.tcp.service.perf[service,,] <li>net.udp.service[service,,] <li>net.udp.service.perf[service,,] <p>Granted, the <code>net.udp.service</code> item keys only monitor the availability and performance of the NTP protocol due to the \"take it our leave it\" nature of UDP. But, the <code>net.tcp.service</code> item keys are useful for monitoring every single TCP port available.</p> <p>We fill in the <code>service</code> parameter with <code>tcp</code> and the we use <code>ip</code> (or a host interface) and <code>port</code> to define which TCP port to check. Zabbix will connect to the port and tell us the up/down status or the connection speed if we use <code>net.tcp.service.perf</code>. If we fill in the <code>service</code> parameter with <code>ssh, ldap, smtp, ftp, pop, nntp, imap, tcp, https, telnet</code> it will use the correct (default) port automatically, as well as do an additional check to make sure the port is actually being used by that service.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#conclusion","title":"Conclusion","text":"<p>The simple checks are mainly used for ICMP ping and Port checks, which means they are quite useful for almost every host. It's always a good idea to do some basic network availability checks on your hosts.</p> <p>Keep in mind that Zabbix will apply alphabetical sorting in many places when you create things like items. Keeping things structured in your environment means that you and your colleagues will have an easier time using your monitoring and observability platform.</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/simple-checks/#useful-urls","title":"Useful URLs","text":"<p>https://www.youtube.com/watch?v=5etxbNPrygU</p>","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/","title":"SNMP Polling","text":"<p>In the previous chapter, we explored monitoring strategies that relied on both active and passive Zabbix agents. This chapter introduces an alternative approach monitoring via SNMP (Simple Network Management Protocol) which does not require the installation of a Zabbix agent on the monitored device. This method is especially useful in environments where agent based monitoring is impractical, restricted or simply not allowed.</p> <p>Simple Network Management Protocol (SNMP) is a widely adopted protocol designed for monitoring and managing devices on IP networks. Despite the word \"management\" in its name, SNMP is predominantly employed for monitoring purposes. Its widespread support across networking hardware and embedded systems has made it a cornerstone of modern network visibility solutions.</p> <p>Originally developed in the late 1980s, SNMP has undergone several revisions. Early versions, such as SNMPv1 and SNMPv2c, were hampered by significant security limitations. As a result, while SNMP includes functionality for remote device configuration, its use has remained largely to status monitoring rather than active management of devices.</p> <p>SNMP is especially valuable for monitoring resource constrained or embedded devices that lack the capacity to run a full monitoring agent.</p> <p>Common examples include:</p> <ul> <li>Printers</li> <li>Network switches, routers, and firewalls</li> <li>Uninterruptible Power Supplies (UPSs)</li> <li>NAS (Network-Attached Storage) appliances</li> <li>Environmental sensors (e.g., temperature, humidity sensors)</li> </ul> <p>These devices often provide built-in SNMP support, making them accessible for monitoring with minimal configuration. Additionally, SNMP can be employed on standard servers where installing or maintaining a Zabbix agent is either impractical or not permitted. This could be due to administrative policies, software compatibility or security concerns, or simply a desire to reduce system footprint.</p> <p>Recognizing the ubiquity of SNMP, Zabbix provides native SNMP support. This capability is powered by the open-source Net-SNMP suite, available at http://net-snmp.sourceforge.net. The integration allows Zabbix to retrieve metrics from SNMP-enabled devices using industry standard mechanisms.</p> <p>In this chapter, we will cover the following:</p> <ul> <li>An introduction to the Net-SNMP toolkit and its core utilities.</li> <li>How to integrate MIB (Management Information Base) files into Zabbix, enabling   the platform to interpret SNMP data correctly.</li> <li>The process of SNMP polling within Zabbix, including how to define SNMP-based   items and retrieve data from devices.</li> </ul> <p>This chapter serves as the foundation for SNMP-based monitoring in Zabbix. While we begin with the essentials such as polling, MIB usage, and SNMP item configuration this is just the start.</p> <p>Later in this book, we will build upon this knowledge by exploring Low-Level Discovery (LLD) mechanisms using SNMP. LLD allows Zabbix to automatically detect and create monitoring items for dynamic or repetitive structures, such as network interfaces, power supplies, ...</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-a-mib","title":"What is a MIB?","text":"<p>Imagine you have a house full of smart devices: a smart thermostat, a smart lamp, and a smart doorbell. All these devices keep track of various types of information. The thermostat has the indoor temperature and battery status, the lamp has its brightness and color, and the doorbell has a log of who has been at the door.</p> <p>A MIB (Management Information Base) is the \"table of contents\" or \"catalog\" of all this information on a network device. Every SNMP enabled device has its own MIB, which is structured and organized. Without a MIB, your Zabbix server wouldn't know what data is available to monitor. The MIB specifies exactly which metrics the device can share.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-an-oid","title":"What is an OID?","text":"<p>To retrieve a specific piece of information from that catalog, you need an address. An OID (Object Identifier) is that address.</p> <p>You can think of an OID as a GPS coordinate or a book's unique ISBN number. It's a hierarchical sequence of numbers (for example, 1.3.6.1.2.1.1.3.0) that leads you to one specific piece of information, such as a device's uptime or the number of network errors on a particular port.</p> <p>The OID is the exact path to the data within the MIB. Zabbix uses these OIDs to know what to request from the device. You configure Zabbix to say: \"Request the value of this specific OID,\" and the device returns the requested value.</p> <p>In short:</p> <ul> <li>The MIB is the library catalog that describes the structure of all available   data.</li> <li>The OID is the specific address that leads you to the book (the data) you're   looking for.</li> </ul> <p>When Zabbix wants to monitor a device via SNMP, it uses an OID to send an SNMP request. The agent on the device searches its MIB for the data corresponding to that OID and sends the value back to Zabbix. This is the foundation of SNMP based monitoring.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-is-the-oid-tree-structure","title":"What Is the OID Tree Structure?","text":"<p>The OID (Object Identifier) structure is a hierarchical tree, much like a family tree or a computer's folder structure. This tree is standardized globally. Each point on the tree, from the root to the \"leaves,\" is represented by a number.</p> <p>The tree starts at the root, with a few main branches managed by international organizations. The most common branch for network management and SNMP often begins with <code>1.3.6.1</code>. Let's break down this OID to see how the structure works:</p> <ul> <li>1: This branch is managed by ISO (International Organization for Standardization).</li> <li>1.3: This branch is for <code>identified-organization</code>.</li> <li>1.3.6: This is the branch for the U.S. Department of Defense (DoD).</li> <li>1.3.6.1: This is the internet branch, managed by the IETF (Internet   Engineering Task Force).</li> <li>... and so on.</li> </ul> <p>Every branch in this tree is responsible for managing the numbers below it. Companies like Cisco or projects like Net-SNMP get their own unique number under a specific branch, most commonly under <code>1.3.6.1.4.1</code>, which is reserved for private enterprises.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#how-to-use-the-oid-tree","title":"How to Use the OID Tree","text":"<p>For Zabbix, the OID tree is essential for understanding what data is available on a device. Instead of remembering long, unreadable strings of numbers, MIB (Management Information Base) files use text labels to translate the numbers into human-readable names.</p> <p>Example:</p> <ul> <li>The OID for a device's system description is: <code>1.3.6.1.2.1.1.1.0</code>.</li> <li>An MIB file translates this to: <code>sysDescr.0</code>.</li> </ul> <p>You can use the OID tree to:</p> <ol> <li>Look up data manually: You can browse MIB files or online OID databases to    find the exact OID for the metric you want to monitor.</li> <li>Use SNMP commands: With commands like <code>snmpwalk</code>, <code>snmpget</code>, or <code>snmpstatus</code>,    you can use the numeric OIDs or the readable names (if MIBs are loaded) to    request data from a device.</li> <li>Configure LLD (Low-Level Discovery): Zabbix uses OID sub-trees to automatically    create monitoring items for dynamic components, such as network interfaces or    disk partitions.</li> </ol>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#net-snmp","title":"Net-SNMP","text":"<p>The Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring and managing networked devices. It operates primarily over UDP port 161, though in certain cases, SNMP agents or proxies may also support TCP port 161 for enhanced reliability or integration with specific tools. SNMP allows administrators to query information or trigger actions on remote devices using structured data identified by Object Identifiers (OIDs).</p> <p>To begin working with SNMP in a lab or testing environment, you may choose between two approaches:</p> <ul> <li>Use an existing SNMP capable device already present in your network infrastructure.</li> <li>Deploy a lightweight SNMP agent on a general-purpose server, such as your Zabbix   server or a dedicated virtual machine.</li> </ul> <p>In this chapter, we will walk through the installation and configuration of a basic SNMP agent on a Rocky or Ubuntu based Zabbix server. However, the same setup can be applied to any compatible Linux system.</p> <p>Note: If you're using a device already present on your network, ensure:</p> <ul> <li>You have network access to the device (verify routing and firewall settings).</li> <li>SNMP access is allowed from your Zabbix server\u2019s IP address.</li> <li>The correct community string is configured, and your IP is included in the SNMP   access control rules of the device.</li> </ul> <p>Dataflow between Zabbix and the SNMP device.</p> <pre><code>graph TD\n    A[Zabbix Server] --&gt;|SNMP Request on port 161/UDP| B(Router, Switch, Printer, ...);\n    B --&gt;|SNMP Agent| C{\"Management Information Base (MIB)\"};\n    C --&gt;|Read data via OID's| B;\n    B --&gt;|SNMP Response| A\n</code></pre> <p>4.28 Overview</p> <p>Before we start lets go over a few tools that we will use and explain what they exactly do.</p> <ul> <li>snmpget: Retrieves the value of a single, specific OID.</li> <li>snmpwalk: Walks an entire OID subtree and displays all of its values.</li> <li>snmpstatus: Provides a summary of a device's basic status.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#testing-an-snmp-device-where-to-start","title":"Testing an SNMP Device: Where to Start?","text":"<p>When you're looking to test an SNMP device, it's crucial to understand the available SNMP versions and which ones you should prioritize. Currently, there are three commonly used versions: SNMPv1, SNMPv2c, and SNMPv3.</p> <ul> <li>SNMPv1: This is the oldest version and should generally be avoided unless   absolutely necessary. It's quite limited in functionality and has serious security   vulnerabilities.</li> <li>SNMPv2c: Still the most prevalent version today, SNMPv2c offers improvements   over v1, especially in data retrieval and performance. It's relatively straightforward   to configure and use.</li> <li>SNMPv3: This version is rapidly gaining popularity and is considered the most   secure and advanced option. It provides encryption, authentication, and user   management, which are essential for secure networks.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#your-first-test-attempt-snmpv2c-and-the-public-community-string","title":"Your First Test Attempt: SNMPv2c and the 'public' Community String","text":"<p>To begin your testing, we recommend trying to connect to your device using SNMPv2c and the standard community string 'public'. Many devices ship with these default settings, though it's certainly insecure for production environments.</p> <p>You can use the <code>snmpstatus</code> command for this. Here\u2019s an example of how you might do this in your terminal:</p> <pre><code>   snmpstatus -v 2c -c public [IP-address_of_the_device]\n</code></pre> <p>Replace <code>[IP-address_of_the_device]</code> with the actual IP address or hostname of the device you wish to test.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#what-if-you-get-no-information-back","title":"What if You Get No Information Back?","text":"<p>If you don't receive any information after this attempt, don't panic. It simply means the default settings likely don't apply to your device, or there might be a network related issue. You'll need to dig deeper into your device's configuration or troubleshoot your network.</p> <p>First, check the device's configuration:</p> <ol> <li>SNMP Version: Which SNMP version (v1, v2c, or v3) is configured and enabled?</li> <li>Community String (for v1/v2c): If your device uses SNMPv1 or SNMPv2c, what    is the configured community string (similar to a password) for read-only and    potentially read- write access? It's rarely 'public' in a properly configured    environment.</li> <li>Username, Authentication, and Privacy (for v3): If your device uses SNMPv3,    you'll need more specific information:</li> <li>Username: What username has been created for SNMPv3?</li> <li>Authentication Protocol and Password: Which authentication protocol (e.g.,      MD5, SHA) is used, and what is its corresponding password?</li> <li>Privacy Protocol and Password: Which encryption protocol (e.g., DES, AES)      is used, and what is its corresponding password?</li> </ol> <p>Next, consider potential network issues:</p> <p>Even if your device is correctly configured, network obstacles can prevent SNMP communication. Check for:</p> <ul> <li>Firewall Blocking: A firewall (either on your testing machine, the network,   or the SNMP device itself) might be blocking the UDP port 161, which SNMP typically   uses. Ensure the necessary ports are open.</li> <li>ACL Settings on the Device: The SNMP device itself might have Access Control   List (ACL) settings configured to restrict access only to specific IP addresses.   Verify that your testing machine's IP address is permitted.</li> <li>Network Connectivity: Basic network issues like incorrect IP addresses, subnet   masks, or routing problems can also prevent communication. Ensure there's a clear   network path between your testing machine and the SNMP device.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#snmpv3-security-levels","title":"SNMPv3 Security Levels","text":"<p>SNMPv3 offers significant security enhancements over older, unsecured versions (SNMPv1 and SNMPv2c). The protocol has three security levels:</p> <ul> <li> <p>noAuthNoPriv (Authentication and encryption off): This is the least secure   level. There's no authentication and no encryption. It's similar to SNMPv1   and SNMPv2c and offers no protection. It should only be used in strictly   controlled lab environments where security is not a concern.</p> </li> <li> <p>authNoPriv (Authentication on, encryption off): This level authenticates   the user, which guarantees data integrity. It verifies that messages come from   a trusted source and haven't been tampered with. However, the data isn't   encrypted, so it remains readable if the traffic is intercepted. This level   is suitable for non-sensitive data in a relatively secure network. Authentication   protocols used here are typically MD5 or SHA.</p> </li> <li> <p>authPriv (Authentication and encryption on): This is the most secure and   recommended level. It provides both authentication and data encryption.   Authentication ensures the integrity and origin of the message, while encryption   makes the data unreadable to third parties. This is essential for monitoring   sensitive information or when communicating over unsecured networks. Encryption   protocols used include DES, 3DES, and AES.</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#examples-of-snmpv3-commands","title":"Examples of SNMPv3 Commands","text":"<p>Once you have the necessary information (and have ruled out network issues), you can try connecting with SNMPv3. Here are some examples of how you might use <code>snmpstatus</code> with SNMPv3 (depending on your configuration):</p> <ul> <li>Authentication only (no encryption):</li> </ul> <pre><code>   snmpstatus -v 3 -l authNoPriv -u [username] -a [authentication_protocol] -A [authentication_password]\n   [IP-address_of_the_device]\n</code></pre> <p>(Replace <code>[authentication_protocol]</code> with <code>MD5</code> or <code>SHA</code>)</p> <ul> <li>Authentication and Encryption:</li> </ul> <pre><code>   snmpstatus -v 3 -l authPriv -u [username] -a [authentication_protocol] -A [authentication_password]\n   -x [privacy_protocol] -X [privacy_wachtwoord] [IP-address_of_the_device]\n</code></pre> <p>(Replace <code>[authentication_protocol]</code> with <code>MD5</code> or <code>SHA</code> and <code>[privacy_protocol]</code>   with <code>DES</code> or <code>AES</code>)</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#a-note-on-snmpv1-avoid-if-possible","title":"A Note on SNMPv1: Avoid if Possible","text":"<p>While you can technically test with SNMPv1, we strongly advise against using it in production. SNMPv1 is an outdated and insecure protocol version vulnerable to various attacks. Always try to connect with v2c or v3 first. Only if you are absolutely certain that the device exclusively supports SNMPv1 and you have no other option, you can try using it:</p> <pre><code>    snmpstatus -v 1 -c [community_string] [IP-address_of_the_device]\n</code></pre> <p>However, remember that using SNMPv1 in a production environment poses a significant security risk.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#understanding-the-output-of-snmpstatus","title":"Understanding the Output of snmpstatus","text":"<p>Let's take a look at an example output from the <code>snmpstatus</code> command. Remember this is just an example output it will differ from your result.</p> <pre><code>    snmpstatus -v2c -c public 127.0.0.1\n    [UDP: [127.0.0.1]:161-&gt;[0.0.0.0]:33310]=&gt;[Linux localhost.localdomain 5.14.0-570.28.1.el9_6.aarch64\n    #1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64] Up: 1:24:36.58\n    Interfaces: 2, Recv/Trans packets: 355763/355129 | IP: 37414/35988\n</code></pre> <p>This output provides a concise summary of the device's status, indicating a successful SNMP query. Let's break down what each part means:</p> <ol> <li> <p><code>snmpstatus -v2c -c public 127.0.0.1</code>:</p> <ul> <li><code>-v2c</code>: Specifies that SNMP version 2c was used.</li> <li><code>-c public</code>: Indicates that the community string \"public\" was used for authentication.</li> <li><code>127.0.0.1</code>: This is the target IP address, in this case, the localhost (the   machine on which the command was run).</li> </ul> </li> <li> <p><code>[UDP: [127.0.0.1]:161-&gt;[0.0.0.0]:33310]</code>:</p> <ul> <li>This section describes the communication path.</li> <li><code>UDP</code>: Confirms that the User Datagram Protocol was used, which is standard   for SNMP.</li> <li><code>[127.0.0.1]:161</code>: This is the source of the SNMP request and the standard   SNMP port (161) on which the SNMP agent listens.</li> <li><code>-&gt;[0.0.0.0]:33310</code>: This indicates the destination of the response. <code>0.0.0.0</code>   is a placeholder for \"any address,\" and <code>33310</code> is a high-numbered ephemeral   port used by the client to receive the response.</li> </ul> </li> <li> <p><code>[Linux localhost.localdomain 5.14.0-570.28.1.el9_6.aarch64 #1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64]</code>:</p> <ul> <li>This is crucial information about the queried device itself.</li> <li><code>Linux localhost.localdomain</code>: Identifies the operating system as Linux, with the hostname <code>localhost.localdomain</code>.</li> <li><code>5.14.0-570.28.1.el9_6.aarch64</code>: This is the kernel version and architecture</li> <li><code>#1 SMP PREEMPT_DYNAMIC Thu Jul 24 07:50:10 EDT 2025 aarch64</code>: Provides further kernel build details, including the build date and time.</li> </ul> </li> <li> <p><code>Up: 1:24:36.58</code>:</p> <ul> <li>This indicates the uptime of the device. The system has been running for   1 day, 24 hours, 36 minutes, and 58 seconds.</li> </ul> </li> <li> <p><code>Interfaces: 2, Recv/Trans packets: 355763/355129 | IP: 37414/35988</code>:</p> <ul> <li><code>Interfaces: 2</code>: This tells us that the device has detected 2 network interfaces.</li> <li><code>Recv/Trans packets: 355763/355129</code>: These numbers represent the total   number of packets received and transmitted across all network interfaces   on the device since it was last booted.</li> <li><code>IP: 37414/35988</code>: These figures likely represent the number of IP datagrams   received and sent specifically by the IP layer on the device. This provides   a more specific metric of IP traffic compared to the total packet count   which includes other layer 2 protocols.</li> </ul> </li> </ol> <p>In summary, this output from <code>snmpstatus</code> quickly provides a clear overview of a Linux system's basic health and network activity, confirming that the SNMP agent is reachable and responding with the requested information using SNMPv2c.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#installing-snmp-agent-on-a-linux-host","title":"Installing SNMP Agent on a Linux Host","text":"<p>Now that we know a bit more about SNMP it's time to start playing next we will install the SNMP agent and utilities on our Zabbix server to do some testing. Or another compatible system if you prefer.</p> <p>Follow the steps below to get the SNMP agent installed.</p> <ol> <li>Install Required Packages</li> </ol> <p>Update the package list</p> <p>Red Hat <pre><code>sudo dnf update\n</code></pre></p> <p>Ubuntu: <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre></p> <p>Install Net-SNMP agent and utilities</p> <p>Red Hat <pre><code>sudo dnf install net-snmp net-snmp-utils\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install snmp snmpd\n</code></pre></p> <ol> <li>Configure the SNMP Agent    First, create a clean configuration file for the SNMP daemon:</li> </ol> <pre><code>    sudo vi /etc/snmp/snmpd.conf\n</code></pre> <p>Paste the following example configuration, which is optimized for SNMP-based discovery and testing in Zabbix:</p> <pre><code>tee /etc/snmp/snmpd.conf &lt;&lt;EOF\n# --------------------------------------------------------------------------\n# BASIC ACCESS CONTROL\n# --------------------------------------------------------------------------\n# This defines who has access and with which community string.\n# For a LAB ENVIRONMENT, 'public' is acceptable, but EMPHASIZE THAT THIS IS UNSAFE\n# FOR PRODUCTION. In production, use SNMPv3 or restricted IP ranges.\n\n# Read-only community string 'public' for all IP addresses (WARNING: LAB USE ONLY!)\nrocommunity public\n#\n# IMPORTANT NOTE: The 'public' community string is the default and most well-known community string.\n# Using this in a production environment is EXTREMELY INSECURE and makes your device vulnerable.\n# Anyone who knows your device's IP address can query basic information about your system.\n# USE THIS ONLY AND EXCLUSIVELY IN STRICTLY ISOLATED TEST OR LAB ENVIRONMENTS!\n# For production environments:\n# - Use a unique, complex community string (e.g., rocommunity YourSuperSecretString)\n# - STRONGLY CONSIDER implementing SNMPv3 for superior security (authentication and encryption).\n#\n\n# BETTER FOR LAB (or production with restrictions):\n# rocommunity my_secure_community_string 192.168.56.0/24\n# Replace '192.168.56.0/24' with the subnet where your Zabbix Server is located.\n\n\n# ============================================\n# SNMPv3 Configuration (Recommended for Production, but here with examples)\n# ============================================\n#\n# This section defines users for SNMPv3, each with a different security level.\n# In a production environment, you would typically ONLY use the 'authPriv' option\n# with strong, unique passwords. This setup is useful for lab and testing purposes.\n\n# --- 1. SNMPv3 User with Authentication and Privacy (authPriv) ---\n# THIS IS THE MOST SECURE AND RECOMMENDED SECURITY LEVEL FOR PRODUCTION.\n# It requires both correct authentication and encryption of the traffic.\n#\n# Syntax: createUser USERNAME AUTH_PROTOCOL \"AUTH_PASS\" PRIV_PROTOCOL \"PRIV_PASS\"\n# Example: createUser mysecureuser SHA \"StrongAuthP@ss1\" AES \"SuperPrivP@ss2\"\n\ncreateUser secureuser SHA \"AuthP@ssSec#1\" AES \"PrivP@ssSec#2\"\nrouser secureuser authPriv\n\n# --- 2. SNMPv3 User with Authentication Only (authNoPriv) ---\n# This level requires authentication, but the data is NOT encrypted.\n# The content of SNMP packets can be read if traffic is intercepted.\n# NOT RECOMMENDED FOR SENSITIVE DATA OR PRODUCTION ENVIRONMENTS.\n#\n# Syntax: createUser USERNAME AUTH_PROTOCOL \"AUTH_PASS\"\n# Example: createUser authonlyuser SHA \"AuthOnlyP@ss3\"\n\ncreateUser authonlyuser SHA \"AuthOnlyP@ss3\"\nrouser authonlyuser authNoPriv\n\n# --- 3. SNMPv3 User with \u001b[48;32;186;960;2604tNo Authentication and No Privacy (noAuthNoPriv) ---\n# THIS IS THE LEAST SECURE LEVEL AND SHOULD NEVER BE USED IN PRODUCTION!\n# It offers NO SECURITY WHATSOEVER. It's purely for very specific test scenarios\n# where security is not a concern.\n#\n# Syntax: createUser USERNAME\n# Example: createUser insecureuser\n\ncreateUser insecureuser\nrouser insecureuser noAuthNoPriv\n\n#\n# IMPORTANT SECURITY NOTES FOR ALL SNMPv3 USERS:\n# - Replace the example usernames and passwords with your OWN strong, unique values.\n# - Passwords must be a MINIMUM of 8 characters long.\n# - The passwords for AUTH and PRIV (with authPriv) do not have to be the same.\n# - Restrict access to specific IP addresses (e.g., 'rouser USERNAME authPriv 192.168.1.0/24')\n#   if you want to further tighten access.\n#\n\n\n# --------------------------------------------------------------------------\n# SYSTEM INFORMATION (OPTIONAL)\n# --------------------------------------------------------------------------\n# This information is generally available via SNMP and useful for identification.\nsyslocation  \"Rocky Linux Zabbix SNMP Lab Server\"\nsyscontact   \"Your Name &lt;your.email@example.com&gt;\"\nsysname      \"RockySNMPHost01\" # Often overridden by hostname, but can be specific\n\n# --------------------------------------------------------------------------\n# ENABLING CRUCIAL MIB MODULES FOR LLD\n# --------------------------------------------------------------------------\n# 'view' statements determine which parts of the MIB tree are visible.\n# 'systemview' is a standard view. We ensure that the most useful OID trees\n# for Zabbix LLD are included here.\n\n# Standard System MIBs (uptime, description, etc.)\nview systemview included .1.3.6.1.2.1.1    # SNMPv2-MIB::sysDescr, sysUptime, etc.\n\n# HOST-RESOURCES-MIB: ESSENTIAL FOR LLD OF HARDWARE/OS COMPONENTS\n# This MIB contains information about storage (filesystems), processors,\n# installed software, running processes, etc.\nview systemview included .1.3.6.1.2.1.25\n\n# IF-MIB: ESSENTIAL FOR LLD OF NETWORK INTERFACES\n# Contains detailed information about network interfaces.\nview systemview included .1.3.6.1.2.1.2\n\n# Other useful MIBs (often standard or optional)\nview systemview included .1.3.6.1.2.1.4\nview systemview included .1.3.6.1.2.1.6\nview systemview included .1.3.6.1.2.1.7\n\n# --------------------------------------------------------------------------\n# EXTENDING SNMPD WITH EXEC COMMANDS (OPTIONAL FOR CUSTOM LLD)\n# --------------------------------------------------------------------------\n# This allows you to make the output of shell commands or scripts available via SNMP.\n# This is ideal for monitoring things not natively available via SNMP.\n# Example: Monitor the number of logged-in users (not LLD, but demonstrates the principle)\n# exec activeUsers /usr/bin/who | wc -l\n\n# Example: A script that generates LLD-like output\n# imagine /opt/scripts/docker_lld.sh returns JSON that Zabbix can parse\n# exec dockerContainers /opt/scripts/docker_lld.sh\n# This requires a custom LLD parser in Zabbix. For an introduction, this\n# might be a bit too advanced, but it's good to mention as a possibility.\n\n# --------------------------------------------------------------------------\n# SYSLOGGING\n# --------------------------------------------------------------------------\n# For logging snmpd activities (useful for debugging)\ndontLogTCPWrappers no\nEOF\n</code></pre> <p>Let's do some practical tests with this setup we just created. Start the SNMP Service and Configure the Firewall</p> <pre><code># Start the SNMP daemon\nsudo systemctl start snmpd\n</code></pre> <pre><code># Enable it to start on boot\nsudo systemctl enable snmpd\n</code></pre> <pre><code># Check that the service is running\nsudo systemctl status snmpd\nIf your system uses firewalld, ensure that SNMP traffic is allowed:\n</code></pre> <pre><code># Add SNMP to permanent firewall rules\nsudo firewall-cmd --add-service=snmp --permanent\n</code></pre> <pre><code># Reload the firewall configuration\nsudo firewall-cmd --reload\n</code></pre> <pre><code># Confirm that SNMP is listed\nsudo firewall-cmd --list-services --permanent\n</code></pre> <pre><code>Verifying SNMP Functionality\nFrom your Zabbix server or any SNMP client system with net-snmp-utils installed:\n\n# Repace &lt;IP_ADDRESS&gt; wit the IP of the client where you installed the SNMP\n# config. If localhost you can use 127.0.0.1.\n\n# General system info (sysDescr, sysUptime, etc.)\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.1\n\n# List interface names (useful for interface LLD)\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.2.2.1.2\n\n# List filesystem descriptions\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.25.2.3.1.3\n\n# Get CPU load per processor core\nsnmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.25.3.3.1.2\n</code></pre> Note <p>For SNMPv3 we can do the same. You could adapt the configuration file or just go with what we have prepared already in the snmpd.conf file.</p> <pre><code>vi /etc/snmp/snmpd.conf\n\n# Look for the following lines and adapt them as you like.\n\ncreateUser authonlyuser SHA \"AuthOnlyP@ss3\"\nrouser authonlyuser authNoPriv\n\ncreateUser secureuser SHA \"AuthP@ssSec#1\" AES \"PrivP@ssSec#2\"\nrouser secureuser authPriv\n\ncreateUser insecureuser\nrouser insecureuser noAuthNoPriv\n</code></pre> <p>After you have adapted your config don't forget to restart the snmpd service</p> <pre><code>systemctl restart snmpd\n</code></pre> <p>You should now be able to test your items with SNMPv3 Let me give you an example command for noAuthNoPriv,authNoPriv and the most secure authPriv. This should work out of the box with what is already configured in our <code>snmpd.conf</code> file.</p> <pre><code>snmpwalk -v3 -l noAuthNoPriv -u insecureuser 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\nsnmpwalk -v3 -l authNoPriv -u authonlyuser -a SHA -A AuthOnlyP@ss3 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\nsnmpwalk -v3 -l authPriv -u secureuser -a SHA -A AuthP@ssSec#1 -x AES -X PrivP@ssSec#2 127.0.0.1 .1.3.6.1.2.1.2.2.1.2\n</code></pre> Note <p>If you change the config file and adapt the passwords and for some reason they do not get accepted do not worry just restart the service again it things still don't work you can remove the persistent key file sudo rm /var/lib/net-snmp/snmpd.conf It's quite brutal but in our test environment it will help you out.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#snmp-monitoring-in-zabbix","title":"SNMP Monitoring in Zabbix","text":"<p>Now that we have covered how SNMP works, it's time to put that knowledge into practice. We'll start up our Zabbix instance and begin monitoring, but first, it's crucial to understand the two different methods Zabbix offers for retrieving SNMP information from a device.</p> <p>Warning</p> <pre><code>The RFC3411 Specs specify that an EngineID needs to be unique this is very\nimportant for monitoring. You will see errors like Bad parse of ASN.1 if you\nhave a conflict.\n\nWithin an administrative domain, an snmpEngineID is the unique and\nunambiguous identifier of an SNMP engine.  Since there is a one-to-\none association between SNMP engines and SNMP entities, it also\nuniquely and unambiguously identifies the SNMP entity within that\nadministrative domain.  Note that it is possible for SNMP entities in\ndifferent administrative domains to have the same value for\nsnmpEngineID.  Federation of administrative domains may necessitate\nassignment of new values.\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#legacy-snmp-monitoring","title":"Legacy SNMP Monitoring","text":"<p>The traditional method for SNMP monitoring is synchronous. It uses a single OID placed directly into the item's SNMP OID field. Zabbix will wait for a response before it moves on to the next check.</p> <ul> <li>OID: A single textual or numeric OID is used to retrieve a single value synchronously.   For example: <code>1.3.6.1.2.1.31.1.1.1.6.3</code>.</li> <li>The timeout for these items is governed by the <code>Timeout</code> parameter in the Zabbix   server configuration file. To make this method functional, the <code>StartPollers</code>   parameter must also be correctly configured.</li> </ul> <p>When we talk about bulk processing in legacy it can be interesting to have a look at the Zabbix documentation about this subject. https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmp#internal-workings-of-combined-processing</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#asynchronous-snmp-monitoring-recommended","title":"Asynchronous SNMP Monitoring (Recommended)","text":"<p>The newer, recommended approach is asynchronous and provides much better performance. It leverages native SNMP bulk requests (<code>GetBulkRequest-PDUs</code>).</p> <ul> <li><code>walk[OID1, OID2, ...]</code>: This retrieves a subtree of values. For   example: <code>walk[1.3.6.1.2.1.2.2.1.2,1.3.6.1.2.1.2.2.1.3]</code>.</li> <li><code>get[OID]</code>: This retrieves a single value asynchronously. For example: <code>get[1.3.6.1.2.1.31.1.1.1.6.3]</code>.</li> </ul> <p>With asynchronous monitoring, timeout settings can be configured per item. It's best to set a low timeout value to avoid long delays if a device is unreachable, as Zabbix will attempt up to 5 retries. A 3-second timeout, for instance, could result in a 15-second wait.</p> <p>All <code>walk[OID]</code> and <code>get[OID]</code> items are executed asynchronously, meaning Zabbix does not need to wait for one response before starting other checks. DNS resolution is also handled asynchronously. The maximum concurrency for these checks is 1000, defined by the <code>MaxConcurrentChecksPerPoller</code> parameter. The number of SNMP pollers dedicated to this method is set by the <code>StartSNMPPollers</code> parameter.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#synchronous-versus-asynchronous-polling","title":"Synchronous versus Asynchronous Polling","text":"<p>Zabbix can also use two different internal methods for polling:</p> <p>Synchronous Polling</p> <p>Synchronous polling means the Zabbix server queries one SNMP OID at a time and waits for the response before continuing. This is simpler and ensures accurate timing, but it can become slow when monitoring hundreds or thousands of items per second.</p> <ul> <li>Characteristics: Sequential, blocking, predictable timing</li> <li>Use case: Small environments or when timing precision is critical</li> </ul> <p>Asynchronous Polling</p> <p>Asynchronous polling sends multiple SNMP requests in parallel without waiting for each response before sending the next. This dramatically increases performance and reduces latency in large environments.</p> <ul> <li>Characteristics: Parallel, non-blocking, more efficient</li> <li>Use case: Large-scale Zabbix installations with many SNMP hosts</li> </ul> Method Direction Timing Example Pros Cons Polling (Sync) Zabbix \u2192 Device Periodic SNMP GET for CPU load Predictable, simple Slower, more traffic Polling (Async) Zabbix \u2192 Device Parallel Many SNMP GETs at once Fast, scalable More complex tuning","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-your-first-oid-in-zabbix","title":"Polling Your First OID in Zabbix","text":"<p>Let's begin by polling our first OID in Zabbix. As you may recall from a previous <code>snmpwalk</code> command, querying <code>.1.3.6.1.2.1.2.2.1.2</code> returned two results, identifying the network interfaces on the device:</p> <ul> <li><code>IF-MIB::ifDescr.1 = STRING: lo</code></li> <li><code>IF-MIB::ifDescr.2 = STRING: enp0s1</code></li> </ul> <p>To find the inbound and outbound octets for the <code>enp0s1</code> network card, we need to locate the correct OID. While a MIB file would provide a clear map of all available OIDs, this isn't always an option. A common method to discover the correct OID is to perform a broader <code>snmpwalk</code> by removing the last digit from the initial OID.</p> <pre><code>snmpwalk -v2c -c public &lt;IP_ADDRESS&gt; .1.3.6.1.2.1.2.2.1\n</code></pre> <p>This command returns a more extensive list of MIB objects.</p> <pre><code>IF-MIB::ifIndex.1 = INTEGER: 1\nIF-MIB::ifIndex.2 = INTEGER: 2\nIF-MIB::ifDescr.1 = STRING: lo\nIF-MIB::ifDescr.2 = STRING: enp0s1\n...\nIF-MIB::ifInOctets.1 = Counter32: 697830615\nIF-MIB::ifInOctets.2 = Counter32: 49954965\n...\n</code></pre> <p>From this output, we can see that the index for our target network card, <code>enp0s1</code>, is <code>2</code>. This confirms that we can use this index to find the correct data. The output <code>IF-MIB::ifInOctets.2 = Counter32: 49954965</code> appears to be the value we need, but this is not the raw OID.</p> <p>To convert this human-readable output into a numerical OID that Zabbix can use, we can add the <code>-On</code> flag to our <code>snmpwalk</code> command, which converts the output to its numerical form.</p> <pre><code>snmpwalk -v2c -c public &lt;IP_ADDRESS&gt; IF-MIB::ifInOctets.2 -On\n</code></pre> <p>The result is the specific OID for the inbound octets on the <code>enp0s1</code> interface:</p> <pre><code>.1.3.6.1.2.1.2.2.1.10.2 = Counter32: 50050587\n</code></pre> <p>This is the OID you would use to configure an SNMP item in Zabbix to monitor the network traffic for this specific interface.</p> <p>Another useful tool that will help here is <code>snmptranslate</code> which does the same thing and also the other way back.</p> <p>snmptranslate</p> <pre><code>snmptranslate -On IF-MIB::ifInOctets.2\n.1.3.6.1.2.1.2.2.1.10.2\n\nsnmptranslate .1.3.6.1.2.1.2.2.1.10.2\nIF-MIB::ifInOctets.2\n</code></pre> <p>There is yet another tool that helps to visualise a SNMP table with the easy to remember name ... <code>snmptable</code>. This tool allows you to see the data more easy then a simple a snmp walk. To stay with our network cards have a look at this output.</p> <p>snmptable</p> <pre><code>snmptable -v 2c -c public 127.0.0.1 IF-MIB::ifTable\nSNMP table: IF-MIB::ifTable\n\n ifIndex ifDescr    ifType           ifMtu  ifSpeed    ifPhysAddress     ifAdminStatus\n   1      lo        softwareLoopback 65536  10000000                     up\n   2  enp0s1        ethernetCsmacd    1500        0    76:ae:5:aa:5f:45  up\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-a-single-snmp-item","title":"Polling a single SNMP item","text":"<p>Ok enough with the theory let's create an actual item in Zabbix. Create a new host with the name <code>SNMP Device</code> and place it in a group <code>SNMP Devices</code>. We also need to tell Zabbix where we can find our SNMP device as Zabbix is doing the polling (Or if we use a Proxy it will be the proxy.)</p> <p>So let's add a <code>SNMP Interface</code> and give it the IP of the device we would like to monitor. If you have been following our steps on the local machine you can use ip 127.0.0.1, our own server.</p> <p></p> <p>4.29 SNMP Interface</p> <p>Once our host is created and saved with the correct interface we have to create an item on the host. Click on <code>items</code> next to the host <code>SNMP Device</code>. On the top right click the box <code>Create item</code> you will be greeted with another form to fill in the item information.</p> <ul> <li>Name: In traffic enp0s1 (A short descriptive name)</li> <li>Type: SNMP Agent</li> <li>Key: snmp.in (free form short descriptive)</li> <li>Type of information: Numeric(Unsigned)</li> <li>Host interface: The SNMP interface we created on our host. If you have   more then 1 interface just select the one you need.</li> <li>SNMP OID: get[oid] to retrieve the information or only the oid but then it   will use synchronous polling.</li> <li>Units: The data is in bytes so use B.</li> </ul> <p></p> <p>04.30 SNMP Item</p> <p>Before we safe this item there is one more important step we need to do. Network items are usually counters. Meaning the device is just counting the amount of traffic that passed the interface. This means the counter will always go up as more data passes the interface over time. So we need to calculate a delta.</p> <p>For this we can use preprocessing steps so let's move to the tab <code>preprocessing</code> first before we save it.</p> <p>Add a preprocessing step with the name <code>Change per second</code></p> <p></p> <p>snmp preprocessing</p> <p>We can now safe the item and have a look at our latest data page we should have a nice graph with our data over time.</p> <p>If you decide to use the test button before you safe the item (this is always a good idea then don't forget that Zabbix needs 2 item values tot calculate the difference. ) So you will have to test the <code>Get value and test</code> button twice.</p> <p>Also don't forget to select the <code>Get value from host</code> box so Zabbix retrieves it from the host.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#how-does-change-per-second-work","title":"How does change per second work ?","text":"<p>Given a counter value sampled at two different times:</p> <ul> <li>At time ( t_1 ), the counter value is ( C_1 ).</li> <li>At time ( t_2 ), the counter value is ( C_2 ).</li> </ul> <p>The change per second (rate) is calculated as:</p> <p>$$ \\text{Rate} = \\frac{C_2 - C_1}{t_2 - t_1} $$</p> <p>where ( t_2 - t_1 ) is the time elapsed in seconds.</p> <p>If the counter rolls over (i.e., ( C_2 &lt; C_1 )), and the max counter value is ( M ), then adjust as:</p> <p>$$ \\text{Rate} = \\frac{(M - C_1) + C_2 + 1}{t_2 - t_1} $$</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#polling-a-list-of-item","title":"Polling a list of item","text":"<p>Let's do the same for our snmp walk item. This time we will look for the information from all our interfaces. For this we need to find our correct OID first. This can be done with <code>snmptranslate</code> which will convert our table name to an OID,</p> <pre><code>snmptranslate -On IF-MIB::ifTable\n.1.3.6.1.2.1.2.2\n</code></pre> <p>This is the OID we can use in our item. Let's clone our previous item and make some changes.</p> <ul> <li>Name: ifTable (or another descriptive name)</li> <li>Key: snmp.ifTable</li> <li>Type of information:: Text</li> <li>SNMP OID: walk[.1.3.6.1.2.1.2.2]</li> </ul> <p>The rest can stay as is just remove the preprocessing step we added in earlier example as this item will return us a whole list of information.</p> <p></p> <p>04.32 SNMP Walk</p> <p>When we press the <code>Get value and test</code> button in the test item screen we get a whole list of data.</p> <pre><code>.1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n.1.3.6.1.2.1.2.2.1.2.1 = STRING: \"lo\"\n.1.3.6.1.2.1.2.2.1.2.2 = STRING: \"enp0s1\"\n.1.3.6.1.2.1.2.2.1.3.1 = INTEGER: 24\n.1.3.6.1.2.1.2.2.1.3.2 = INTEGER: 6\n.1.3.6.1.2.1.2.2.1.4.1 = INTEGER: 65536\n.1.3.6.1.2.1.2.2.1.4.2 = INTEGER: 1500\n.1.3.6.1.2.1.2.2.1.5.1 = Gauge32: 10000000\n.1.3.6.1.2.1.2.2.1.5.2 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.6.1 = STRING: \"\"\n.1.3.6.1.2.1.2.2.1.6.2 = STRING: \"76:ae:5:aa:5f:45\"\n.1.3.6.1.2.1.2.2.1.7.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.7.2 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.8.1 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.8.2 = INTEGER: 1\n.1.3.6.1.2.1.2.2.1.9.1 = 0\n.1.3.6.1.2.1.2.2.1.9.2 = 0\n.1.3.6.1.2.1.2.2.1.10.1 = Counter32: 69417222\n.1.3.6.1.2.1.2.2.1.10.2 = Counter32: 59215034\n.1.3.6.1.2.1.2.2.1.11.1 = Counter32: 6460587\n.1.3.6.1.2.1.2.2.1.11.2 = Counter32: 113038\n.1.3.6.1.2.1.2.2.1.12.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.12.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.13.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.13.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.14.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.14.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.15.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.15.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.16.1 = Counter32: 69417222\n.1.3.6.1.2.1.2.2.1.16.2 = Counter32: 44139841\n.1.3.6.1.2.1.2.2.1.17.1 = Counter32: 6460587\n.1.3.6.1.2.1.2.2.1.17.2 = Counter32: 97398\n.1.3.6.1.2.1.2.2.1.18.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.18.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.19.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.19.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.20.1 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.20.2 = Counter32: 0\n.1.3.6.1.2.1.2.2.1.21.1 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.21.2 = Gauge32: 0\n.1.3.6.1.2.1.2.2.1.22.1 = OID: .0.0\n.1.3.6.1.2.1.2.2.1.22.2 = OID: .0.0\n</code></pre> <p>So we have the traffic in but we would like to find traffic out as well of course. Let's use our walk item to extract the outgoing traffic for this we need to create a dependent item.</p> <p>Go to <code>Data collection</code> - <code>Hosts</code> and click on <code>Items</code>. You should be able to see our newly created <code>ifTable</code> item and 3 dots before it's name.</p> <p>Click on those 3 dots and select <code>Create dependent item</code> from the list. Fill in the new item with the following information.</p> <ul> <li>Name: Out traffic enp0s1</li> <li>Type: dependent item</li> <li>Key: snmp.out</li> <li>Type of information: Unsigned</li> <li>Master item: Already filled in but should be our item ifTable that we made   before.</li> <li>Units: B</li> </ul> <p></p> <p>04.33 Dependent SNMP Item</p> <p>This item as is at the moment is an exact copy of our master item so we need to add some preprocessing steps first. Let's go to the tab <code>preprocessing</code> and add our first step.</p> <p>Add the step <code>SNMP walk value</code> and after it paste the OID we want <code>.1.3.6.1.2.1.2.2.1.16.1</code> and choose <code>unchanged</code>.</p> <p>find our correct OID</p> <pre><code>snmptranslate IF-MIB::ifOutOctets.1 -On\n.1.3.6.1.2.1.2.2.1.16.1\n</code></pre> <p>Remember from our previous item we need to calculate the <code>Changes per second</code> so add this as the second preprocessing step.</p> <p></p> <p>04.34 preprocessing steps</p> <p>Going now to our latest data page will show use the In and Our traffic for our network card but with data gathered in different ways. Both ways use the synchronous pollers but the last way will gather all data at once and then pre-process it.</p> <p>After you have added more items you can remove the option to keep history from your master items.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#conclusion","title":"Conclusion","text":"<p>SNMP polling remains a vital method for monitoring network devices when agents aren't an option. With Zabbix's asynchronous polling, checks can run in parallel, dramatically improving performance and lowering the load on both your server and the network. SNMPv3 should be your go-to choice, delivering authentication and encryption to secure sensitive data. The SNMP walk item type adds another advantage collecting multiple metrics in bulk with a single request, making discovery and ongoing polling faster and more efficient.</p> <p>By combining these modern features with carefully tuned polling intervals and item counts, you can create an SNMP setup that is secure, efficient, and scalable. And with asynchronous speed, SNMPv3 security, and bulk walks at your disposal, you're ready to monitor more devices, in less time, with greater confidence. Now it's time to put these capabilities to work and see just how far your monitoring can go.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#questions","title":"Questions","text":"<ul> <li>Why is it better use SNMPv3 instead of v2c or v1 ?</li> <li>Do I need to configure pollers for SNMP ? If so which pollers ?</li> <li>Can I still use the old style to monitor SNMP ? Should I start using get[]   and walk[] instead ?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-polling/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmp</li> <li>https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol</li> <li>https://datatracker.ietf.org/doc/html/rfc3410</li> <li>https://blog.zabbix.com/zabbix-snmp-what-you-need-to-know-and-how-to-configure-it/10345/</li> <li>https://datatracker.ietf.org/doc/html/rfc3411#section-3.1.1.1</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/","title":"SNMP Trapping","text":"<p>SNMP traps are one of the most powerful features in Zabbix network monitoring. Unlike traditional SNMP polling, which periodically queries devices for status updates, SNMP traps deliver real-time alerts directly from network equipment the moment an event occurs, no waiting for the next polling cycle.</p> <p>In this chapter, you'll learn how to set up SNMP trap handling in Zabbix, from installing and configuring snmptrapd to integrating it with the Zabbix server. You'll also discover how to analyse, filter, and map incoming traps using regular expressions, and how to link them with triggers and notifications for instant visibility into network issues.</p> <p>Whether you're monitoring switches, routers, UPS systems, or firewalls, mastering SNMP traps in Zabbix gives you faster event detection, reduced network load, and deeper operational insight.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#traps-versus-polling","title":"Traps versus Polling","text":"<p>In Zabbix, SNMP (Simple Network Management Protocol) is one of the most common methods for monitoring network devices such as switches, routers, firewalls, and UPS systems. There are two main ways Zabbix can receive information from an SNMP-enabled device:</p> <ul> <li>Polling (active monitoring) See our topic SNMP Polling in Chapter 4.</li> <li>Traps (passive monitoring)</li> </ul> <p>To understand the differences between trapping and polling and understand the advantages and disadvantages lets have a quick overview:</p> <ul> <li>With SNMP polling, the Zabbix server or proxy periodically queries the device for specific values using SNMP GET requests. For example, CPU load, interface status, temperature ... The device responds with the current data, and Zabbix stores it in the database.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#polling","title":"Polling","text":"<p>Polling is a client initiated and scheduled process. It is predictable, reliable, and suitable for continuous metrics that change over time.</p> <p>Advantages:</p> <ul> <li>Easy to control frequency and timing.</li> <li>Works even if the device doesn't support traps.</li> <li>Historical trend data is consistent.</li> </ul> <p>Disadvantages:</p> <ul> <li>Generates more network traffic on large infrastructures.</li> <li>Delays between polls mean slower event detection.</li> <li>If a device goes down, Zabbix won't notice until the next polling cycle. (This can be detected by using the nodata function or using \"SNMP agent availability\" item but not for individual items unless every items has the nodata function and this is also a bad idea.)</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#trapping","title":"Trapping","text":"<p>SNMP traps work the opposite way. The device itself sends a message (trap) to the Zabbix system when an event occurs. For example, a power failure, link down, or temperature alarm. Zabbix listens for incoming traps via the snmptrapd daemon and processes them through its SNMP trap item type.</p> <p>Traps are event driven and asynchronous, meaning they are sent immediately when something happens. No waiting or polling required.</p> <p>Advantages:</p> <ul> <li>Instant notification of important events.</li> <li>Reduces network load (no regular queries).</li> <li>Ideal for devices that push alerts rather than respond to queries.</li> </ul> <p>Disadvantages:</p> <ul> <li>Requires external configuration (snmptrapd, scripts, log parsing).</li> <li>Not all devices send traps for all events.</li> <li>If traps are missed or misconfigured, data is lost. (Traps use UDP)</li> </ul> Method Direction Timing Example Pros Cons Polling (Sync) Zabbix \u2192 Device Periodic SNMP GET for CPU load Predictable, simple Slower, more traffic Polling (Async) Zabbix \u2192 Device Parallel Many SNMP GETs at once Fast, scalable More complex tuning Traps Device \u2192 Zabbix Event-driven Interface down trap Instant alerts, low load Requires trap daemon, can miss events","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-traps-flow-in-zabbix","title":"SNMP Traps flow in Zabbix","text":"<pre><code>flowchart TB\n    %% --- Traps section (top) ---\n    subgraph TRAPS[Traps]\n        direction TB\n        TITLET[\"SNMP TrapsAcrive Monitoring\"]\n        WIDE[\"                                                                 \"]\n        DEV2[Network Device]\n        TRAPD[snmptrapd Daemon]\n        HANDLER[SNMPTT or perl script]\n        ZBXT[Zabbix Server or Proxy]\n        DBT[Zabbix Database]\n        UI2[Zabbix Frontend]\n        USER2[User]\n\n        TITLET --&gt; DEV2\n        DEV2 --&gt;|SNMP Trap UDP 162| TRAPD\n        TRAPD --&gt;|Handler Script| HANDLER\n        HANDLER --&gt;|Trap Log| ZBXT\n        ZBXT --&gt; DBT\n        DBT --&gt; UI2\n        UI2 --&gt;|Displays event| USER2\n    end\n\n    %% --- Invisible connector to force vertical stacking ---\n    TRAPS -.-&gt; POLLING\n\n    %% --- Polling section (bottom) ---\n    subgraph POLLING[Polling]\n        direction LR\n        TITLEP[\"SNMP PollingPassive Monitoring\"]\n        ZBX[Zabbix Server or Proxy]\n        DEV[Network Device]\n        TITLEP --&gt; ZBX\n        ZBX --&gt;|SNMP GET UDP 161| DEV\n        DEV --&gt;|SNMP Response| ZBX\n        ZBX --&gt; DBP[Zabbix Database]\n        DBP --&gt; UI1[Zabbix Frontend]\n        UI1 --&gt;|Displays polled data| USER1[User]\n    end\n\n    %% --- Styling ---\n    style POLLING fill:#f0fff0,stroke:#3a3,stroke-width:1px\n    style TRAPS fill:#f0f8ff,stroke:#339,stroke-width:1px\n    style WIDE fill:none,stroke:none\n    style TITLEP fill:transparent,stroke:transparent\n    style TITLET fill:transparent,stroke:transparent\n    style ZBX fill:#e0ffe0,stroke:#3a3\n    style DEV fill:#ffefd5,stroke:#c96\n    style DEV2 fill:#ffefd5,stroke:#c96\n    style TRAPD fill:#f9f9f9,stroke:#777\n    style HANDLER fill:#f0f8ff,stroke:#339\n    style ZBXT fill:#e0ffe0,stroke:#3a3\n    style DBP fill:#fffbe0,stroke:#996\n    style DBT fill:#fffbe0,stroke:#996\n    style UI1 fill:#e8e8ff,stroke:#669\n    style UI2 fill:#e8e8ff,stroke:#669\n    style USER1 fill:#fff0f0,stroke:#c33\n    style USER2 fill:#fff0f0,stroke:#c33\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-trap-flow-active-monitoring","title":"SNMP Trap Flow (Active Monitoring)","text":"<p>In an SNMP Trap setup, communication is device initiated. Meaning the network device sends an event message to Zabbix the moment something happens. This is called active monitoring because Zabbix doesn't need to query the device periodically.</p> <p>Step-by-step flow:</p> <ul> <li> <p>Network Device: When an event occurs (for example, a power failure, interface down, or temperature alarm), the device immediately sends an SNMP Trap to the configured destination on UDP port 162.</p> </li> <li> <p>snmptrapd Daemon: The Net-SNMP daemon snmptrapd  listens for incoming traps. It acts as a relay between the device and Zabbix, executing a handler script whenever a trap is received.</p> </li> <li> <p>Trap Handler / Log File: The handler script (often zabbix_trap_receiver.pl or SNMPTT) processes the trap and writes it into a log file, usually \"/var/log/snmptrap/snmptrap.log.\" This file contains the raw trap data including timestamps, source IPs, and OIDs.</p> </li> <li> <p>Zabbix Server or Proxy: The Zabbix component (server or proxy) monitors the trap log for new entries and matches them against configured SNMP trap items. These items use regular expressions or string filters to extract relevant data.</p> </li> <li> <p>Zabbix Database: Once processed, the trap information is stored in the database like any other item value.</p> </li> <li> <p>Zabbix Frontend: The event becomes visible in the Zabbix frontend almost instantly showing up in Latest Data, Problems, or triggering actions and notifications based on your configuration.</p> </li> </ul> Note <p>SNMP traps deliver real-time alerts without polling overhead, making them ideal for event driven devices like UPSs, firewalls, or network switches.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#snmp-polling-flow-passive-monitoring","title":"SNMP Polling Flow (Passive Monitoring)","text":"<p>In contrast, SNMP Polling is Zabbix initiated. This is called passive monitoring because the Zabbix server (or proxy)  queries the device at a set interval to retrieve values.</p> <p>Step-by-step flow:</p> <ul> <li> <p>Zabbix Server or Proxy: Periodically sends an SNMP GET request to the device using UDP port 161. Each SNMP item in Zabbix corresponds to a specific OID (Object Identifier) that defines which metric is requested (e.g., CPU usage, interface status).</p> </li> <li> <p>Network Device: Responds to the SNMP GET request with the current value of the requested OID.</p> </li> <li> <p>Zabbix Database: The response data is stored in the database with a timestamp for trend analysis and historical graphing.</p> </li> <li> <p>Zabbix Frontend: Displays the collected values in graphs, dashboards, and triggers thresholds if defined.</p> </li> </ul> Note <p>Polling provides consistent, periodic data collection. Ideal for metrics like bandwidth usage, temperature, or CPU load. However, it may have a small delay between data updates depending on the polling interval (e.g., every 30s, 1min, etc.).</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#summary","title":"Summary","text":"Feature SNMP Traps (Active) SNMP Polling (Passive) Initiator Network Device Zabbix Direction Device \u2192 Zabbix Zabbix \u2192 Device Transport Port UDP 162 UDP 161 Frequency Event-driven (immediate) Periodic (configurable interval) Resource Usage Lower (only on events) Higher (regular queries) Data Type Event notifications Continuous metrics Best for Fault and alert notifications Performance and trend monitoring <p>Tip</p> <p>In production Zabbix environments, many administrators combine both methods: - Use SNMP polling for regular metrics (e.g., interface traffic, system uptime). - Use SNMP traps for immediate events (e.g., link down, power failure). This hybrid approach gives you both real-time alerts and historical performance data, achieving complete SNMP visibility with minimal overhead.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#setting-up-snmp-traps-with-zabbix_trap_receiver","title":"Setting up SNMP traps with zabbix_trap_receiver","text":"<p>In this section, we'll configure Zabbix to receive and process SNMP traps using the Perl script zabbix_trap_receiver.pl. SNMP traps allow network devices to actively send event information to the Zabbix server, enabling near real-time alerting without periodic polling.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#open-the-firewall-for-snmp-trap-traffic","title":"Open the Firewall for SNMP Trap Traffic","text":"<p>By default, SNMP traps are received on UDP port 162. Make sure this port is open on your Zabbix server:</p> <p>Open firewall port 162/udp</p> <p>Red Hat <pre><code>sudo firewall-cmd --add-port=162/udp --permanent\nsudo firewall-cmd --reload\n</code></pre></p> <p>Ubuntu <pre><code>sudo ufw allow 162/udp\n</code></pre></p> <p>This allows incoming traps from SNMP-enabled devices.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#install-required-snmp-packages","title":"Install Required SNMP Packages","text":"<p>The snmptrapd daemon and Perl bindings are needed for trap handling.</p> <p>Install needed packages</p> <p>Red Hat <pre><code>sudo dnf install -y net-snmp-utils net-snmp-perl net-snmp\n</code></pre></p> <p>Ubuntu <pre><code>sudo apt install snmpd snmp libsnmp-dev snmptrapd\n</code></pre></p> <p>This installs the SNMP tools, daemon, and Perl modules used by Zabbix's receiver script.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#install-zabbix_trap_receiverpl","title":"Install zabbix_trap_receiver.pl","text":"<p>Download the latest zabbix_trap_receiver.pl script from the official Zabbix source archive https://cdn.zabbix.com/zabbix/sources/stable/</p> <pre><code>sudo wget https://cdn.zabbix.com/zabbix/sources/stable/8.0/zabbix-8.0.0.tar.gz\n</code></pre> <p>Once downloaded, extract the file and copy the script to /usr/bin and make it executable:</p> <pre><code>sudo tar -xvf zabbix-8.0.0.tar.gz\nsudo cp zabbix-8.0.0/misc/snmptrap/zabbix_trap_receiver.pl /usr/bin/.\nsudo chmod +x /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>This script receives traps from snmptrapd and writes them to a log file that Zabbix can read.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#configure-snmptrapd","title":"Configure snmptrapd","text":"<p>Edit the SNMP trap daemon configuration file:</p> <pre><code>sudo vi /etc/snmp/snmptrapd.conf\n</code></pre> <p>Append the following lines:</p> <pre><code>authCommunity execute public\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#explanation","title":"Explanation:","text":"<ul> <li>authCommunity execute public allows traps from devices using the community   string public.</li> <li>The perl do line executes the Zabbix Perl handler for each incoming trap.</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#edit-the-perl-script","title":"Edit the perl script","text":"<pre><code>sudo vi /usr/bin/zabbix_trap_receiver.pl\n</code></pre> <p>Replace <code>$SNMPTrapperFile = '/tmp/zabbix_traps.tmp';</code> with:</p> <pre><code>$SNMPTrapperFile = '/var/log/zabbix_traps_archive/zabbix_traps.log';\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#enable-snmp-trap-support-in-zabbix","title":"Enable SNMP Trap Support in Zabbix","text":"<p>Edit the Zabbix server configuration file:</p> <pre><code>sudo vi /etc/zabbix/zabbix_server.conf\n</code></pre> <p>Uncomment or add the following parameters:</p> <pre><code>StartSNMPTrapper=1\nSNMPTrapperFile=/var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> Note <ul> <li>StartSNMPTrapper=1 enables the Zabbix SNMP trapper process.</li> <li>The SNMPTrapperFile path must match exactly the path used inside zabbix_trap_receiver.pl.</li> </ul> <p>Restart the Zabbix server to apply changes:</p> <pre><code>sudo systemctl restart zabbix-server\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#enable-and-start-snmptrapd","title":"Enable and Start snmptrapd","text":"<p>Activate and start the SNMP trap daemon so it launches at boot:</p> <pre><code>sudo systemctl enable snmptrapd --now\n</code></pre> <p>This service will now listen on UDP 162 and feed incoming traps to Zabbix.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-rotate-the-trap-log-file","title":"(Optional) Rotate the Trap Log File","text":"<p>Zabbix writes all traps into a temporary log file. To prevent this file from growing indefinitely, configure log rotation.</p> <p>Create the directory:</p> <p><pre><code>sudo mkdir -p /var/log/zabbix_traps_archive\nsudo chmod 755 /var/log/zabbix_traps_archive\n</code></pre> On ubuntu only :</p> <pre><code>chown Debian-snmp: /var/log/zabbix_traps_archive/\n</code></pre> <p>Next we create a logrotate configuration file <code>/etc/logrotate.d/zabbix_traps</code>:</p> <pre><code>sudo vi /etc/logrotate.d/zabbix_traps\n</code></pre> <p>Add the following content to this file.</p> <pre><code>/var/log/zabbix_traps_archive/zabbix_traps.log {\n    weekly\n    size 10M\n    compress\n    notifempty\n    dateext\n    dateformat -%Y%m%d\n    missingok\n    olddir /var/log/zabbix_traps_archive\n    maxage 365\n    rotate 10\n}\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#conclusion","title":"Conclusion","text":"<p>You've now configured Zabbix to:</p> <ul> <li>Listen for SNMP traps on UDP 162</li> <li>Use snmptrapd and zabbix_trap_receiver.pl to capture traps</li> <li>Write traps to a Zabbix-monitored log file</li> <li>Rotate the trap log automatically</li> <li>Verify correct trap delivery and troubleshoot via SELinux if needed</li> </ul> <p>Once traps are arriving, you can create SNMP trap items in Zabbix (type SNMP trap, key snmptrap[regex]) to trigger events, alerts, and dashboards.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#setting-up-snmp-traps-with-bash-parser","title":"Setting up SNMP traps with bash parser","text":"<p>Using <code>perl</code> parser script might feel the only way to do trap parsing which is not true. <code>bash</code> script will use less dependencies and can be shortcut to get a working setup faster.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#bash-script-to-accept-the-trap","title":"Bash script to accept the trap","text":"<p>Create a file <code>/usr/bin/zabbix_trap_receiver.sh</code> with content:</p> <pre><code>#!/bin/bash\n\n# Outcome will be produced into a file\nOUT=/var/log/zabbix_traps_archive/zabbix_traps.log\n\n# Put contents of SNMP trap from stdin into a variable\nALL=$(tee)\n\n# Extract IP where trap is coming from\nHOST=$(echo \"$ALL\" | grep \"^UDP\" | grep -Eo \"[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\" | head -1)\n\n# Append SNMP trap into the log file\necho \"ZBXTRAP $HOST\n$(date)\n$ALL\" | tee --append \"$OUT\"\n</code></pre> <p>The most important part is for the message to hold keyword <code>ZBXTRAP</code> which is followed by IP address.</p> <p>tip</p> <p>The bash <code>HOST</code> variable can be redefined to extract an IP address from actual trap message, therefore giving an opportunity automatically forward and store message in appropriate host in Zabbix.</p> <p>To enable trap parser inside <code>/etc/snmp/snmptrapd.conf</code> instead of using:</p> <pre><code>perl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>use:</p> <pre><code>traphandle default /usr/bin/zabbix_trap_receiver.sh\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-and-debugging","title":"Testing and debugging","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#to-test-rotation-manually","title":"To test rotation manually","text":"<pre><code>sudo logrotate --force /etc/logrotate.d/zabbix_traps\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-snmp-trap-reception","title":"Testing SNMP Trap Reception","text":"<p>We can simulate a trap manually using the snmptrap command.</p> <pre><code>Example 1: SNMP v1 Test Trap\nsudo snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"eth0\"\n</code></pre> <pre><code>Example 2: SNMP v2c Test Trap\nsudo snmptrap -v 2c -c public localhost '' 1.3.6.1.4.1.8072.2.3.0.1 1.3.6.1.4.1.8072.2.3.2.1 i 123456\n</code></pre> <p>While using \"zabbix_trap_receiver.pl\" as a parser, the perl dependencies will be validated only at the runtime when receiving the actual message. It can be handy to see if the status of service is still healthy. Running the \"status\" for the systemd service automatically prints the most recent log lines of snmptrapd.</p> <pre><code>sudo systemctl status snmptrapd\n</code></pre> <p>For troubleshooting efficiency:</p> <ul> <li> <p>Wrong order is: restart service, run status, send trap</p> </li> <li> <p>Correct order is: restart service, send trap, run status</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#testing-snmp-trap-reception-without-upd-channel","title":"Testing SNMP Trap reception without UPD channel","text":"<p>This method helps to simulate an SNMP trap message even if device currently cannot send one.</p> <pre><code>echo \"ZBXTRAP 127.0.0.1\n$(date)\nline two\nline three\" | sudo tee --append /var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> <p>The most important part is having keyword \"ZBXTRAP\" (all caps) followed by the IP address. The IP must belong to an existing SNMP interface behind  Zabbix proxy/server.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#validate-if-proxyserver-runs-a-correct-mapping","title":"Validate if proxy/server runs a correct mapping","text":"<p>If the host is not yet made in frontend, that is perfect opportunity to validate if Zabbix proxy/server service has recognised the mapping with a zabbix_traps.log file.</p> <p>Every time the trap message is sent (and the device is not yet registered in GUI),  it should print a line about \"unmatched trap received from\"</p> <p>Send a test trap</p> <pre><code>sudo snmptrap -v 1 -c public 127.0.0.1 '.1.3.6.1.6.3.1.1.5.4' '0.0.0.0' 6 33 '55' .1.3.6.1.6.3.1.1.5.4 s \"eth0\"\n</code></pre> <p>Check immediately</p> <pre><code>date\ngrep \"unmatched trap received from\" /var/log/zabbix/zabbix_proxy.log\n</code></pre> <p>If the line appear, it's a solid indication the settings about StartSNMPTrapper and SNMPTrapperFile is configured correctly.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#selinux-considerations","title":"SELinux considerations","text":"<p>If SELinux is enabled and traps are not being processed, check for denied actions: <pre><code>sudo ausearch -m AVC,USER_AVC -ts recent\n</code></pre></p> <p>Adjust SELinux policies or create exceptions for /usr/bin/zabbix_trap_receiver.pl and the trap log directory as needed.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-snmpv3-trap-configuration","title":"(Optional) SNMPv3 Trap Configuration","text":"<p>If using SNMPv3 for secure traps, you can define users directly in snmptrapd.conf:</p> <pre><code>createUser -e &lt;engineid&gt; &lt;user&gt; SHA &lt;key&gt; AES &lt;key&gt;\nauthUser log,execute &lt;user&gt;\nperl do \"/usr/bin/zabbix_trap_receiver.pl\";\n</code></pre> <p>This adds authentication and encryption for trap communication.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#desperate-snmptrapdconf-for-snmpv2","title":"Desperate snmptrapd.conf for SNMPv2","text":"<p>If community names for SNMPv2 traps are not known and deadlines are approaching, we can allow every SNMP trap message to come in by ignoring all community names.</p> <p>Add at the beginning of existing configuration file add:</p> <pre><code>disableAuthorization yes \n</code></pre> <p>For example with a bash parser it's enough to have only 2 active lines to make it functional and have confidence that trap receiving is working.</p> <pre><code>echo \"\n# Allow everyone to register a message\ndisableAuthorization yes\n\n# Forward message to parser script\ntraphandle default /usr/bin/zabbix_trap_receiver.sh\n\" | sudo tee /etc/snmp/snmptrapd.conf\n</code></pre> <p>This is only applicable to SNMPv2 traps. This will not work with SNMPv3 traps.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#trap-mapping-and-preprocessing","title":"Trap mapping and preprocessing","text":"<p>With SNMP traps now configured and the trap receiver operational, the next step is to create a host in the Zabbix frontend so we can link incoming traps to a specific monitored device.</p> <p>In the Zabbix web interface, navigate to: Data collection \u2192 Hosts, and click Create host.</p> <ul> <li>Hostname : Network Switch 01</li> <li>Host groups : SNMP Devices</li> <li>Interfaces : SNMP with IP 127.0.0.1</li> </ul> <p></p> <p>In Zabbix, the macro {$SNMP_COMMUNITY} is often defined globally under Administration \u2192 Macros. This global macro provides a default SNMP community string used by all hosts that rely on SNMP for polling or trap-based communication.</p> <p>However, a better approach, especially in larger or more secure environments is to define a unique SNMP community per device and override the global macro at the host level. This allows for more granular access control and simplifies troubleshooting when multiple community strings are used across the network.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#sending-a-test-trap","title":"Sending a Test Trap","text":"<p>With the host and trap receiver configured, we can now simulate a link down event from our device by sending an SNMP trap manually from the command line:</p> <p>On the command line we can now sent a trap to mimic a Link down on our device. <code>snmptrap -v 2c -c public 127.0.0.1 '' 1.3.6.1.6.3.1.1.5.3</code></p> <p>This command sends a version 2c SNMP trap using the community string public to the local Zabbix trap receiver, emulating a linkDown event defined by OID 1.3.6.1.6.3.1.1.5.3.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#verifying-trap-reception","title":"Verifying Trap Reception","text":"<p>After sending the test trap, open the Zabbix frontend and navigate to: <code>Monitoring</code> \u2192 <code>Latest data</code></p> <p>Select the host <code>Network Switch 01</code>. If everything is configured correctly, you should now see data populated in your SNMP trap item, confirming that Zabbix successfully received and processed the trap.</p> <pre><code>2025-10-13T21:10:58+0200 PDU INFO:\n  errorindex                     0\n  notificationtype               TRAP\n  messageid                      0\n  transactionid                  2\n  receivedfrom                   UDP: [127.0.0.1]:50483-&gt;[127.0.0.1]:162\n  community                      public\n  requestid                      57240481\n  version                        1\n  errorstatus                    0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (227697) 0:37:56.97\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkDown\n</code></pre> <p>Sending a More Realistic Trap Example</p> <p>In a real production environment, SNMP traps usually include additional variable bindings (varbinds) that describe the state of the affected interface or component. To better simulate a real-world scenario, we can extend our previous test command to include this extra information.</p> <p>Run the following command on the Zabbix server:</p> <p><pre><code>snmptrap -v 2c -c public 127.0.0.1 '' \\\n  IF-MIB::linkDown \\\n  IF-MIB::ifIndex i 1 \\\n  IF-MIB::ifAdminStatus i 2 \\\n  IF-MIB::ifOperStatus i 2 \\\n  IF-MIB::ifName s \"Gi0/1\" \\\n  IF-MIB::ifDescr s \"GigabitEthernet0/1\"\n</code></pre> This will give use the following output:</p> <pre><code>2025-10-13T21:53:15+0200 PDU INFO:\n  errorstatus                    0\n  version                        1\n  requestid                      139495039\n  community                      public\n  transactionid                  14\n  receivedfrom                   UDP: [127.0.0.1]:35753-&gt;[127.0.0.1]:162\n  messageid                      0\n  notificationtype               TRAP\n  errorindex                     0\nVARBINDS:\n  DISMAN-EVENT-MIB::sysUpTimeInstance type=67 value=Timeticks: (481390) 1:20:13.90\n  SNMPv2-MIB::snmpTrapOID.0      type=6  value=OID: IF-MIB::linkDown\n  IF-MIB::ifIndex                type=2  value=INTEGER: 1\n  IF-MIB::ifAdminStatus          type=2  value=INTEGER: 1\n  IF-MIB::ifOperStatus           type=2  value=INTEGER: 1\n  IF-MIB::ifName                 type=4  value=STRING: \"Gi0/1\"\n  IF-MIB::ifDescr                type=4  value=STRING: \"GigabitEthernet0/1\"\n</code></pre>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#optional-bulletproof-solution","title":"(optional) Bulletproof solution","text":"<p>Official Zabbix SNMP templates do not require installing MIB files, targeting raw OIDs for data polling. If we continue this style for trapping too we can create a dependency free solution by enabling a \"numerical\" flag inside /etc/snmp/snmptrapd.conf</p> <pre><code>outputOption n\n</code></pre> <p>Edit the file, restart the snmptrapd service, send test trap, and check the log:</p> <pre><code>tail -99 /var/log/zabbix_traps_archive/zabbix_traps.log\n</code></pre> <p>In long run</p> <p>Using a numerical traps will take much more time to design a template. More time in creating items and triggers. Due to the '.' (dot) symbol of being a special character in the regular expression world, the items keys will require to escape. This makes solution not visually pleasant. Ignoring escaping the '.' will also work 99.9% of time, but it violates the idea of bulletproof and precise solution.</p> <p>Using numerical traps can be best direction if:</p> <ul> <li> <p>There is a big passion about bulletproof solution. Creating solution with bare minimum dependencies - MIBs are never required for Zabbix proxies.</p> </li> <li> <p>Template readability is not an issue. You are only person in the monitoring department. There are no team mates.</p> </li> <li> <p>Have a lot of time to design solution</p> </li> <li> <p>You are willing to share your masterpiece with the internet. Perhaps share it at GitHub</p> </li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#creating-snmp-trap-items","title":"Creating SNMP Trap Items","text":"<p>Now that our host is configured and we've verified that traps are being received, we can create a set of items to store and process the trap data in a structured way.</p> <p>We\u2019ll start with a catch-all (fallback) item that captures every SNMP trap received for this host. Then we'll add two dependent items to extract specific values such as the administrative and operational interface status.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#creating-the-snmp-fallback-item","title":"Creating the SNMP Fallback Item","text":"<p>This item serves as the master collector for all incoming traps. Any dependent items you create later will use this as their source.</p> <p>In the Zabbix frontend, navigate to <code>Data collection</code> \u2192 <code>Hosts</code> \u2192 <code>Network Switch 01</code> \u2192 <code>Items</code> and click Create item.</p> <p>Configure the following parameters:</p> <ul> <li>Name: SNMP Trap: Fallback</li> <li>Type: SNMP trap</li> <li>Key: snmptrap.fallback</li> <li>Type of information: Text</li> </ul> <p>Next we will create 2 dependent items. One item for the ifAdminStatus and another one for the ifOperStatus. You can do this by clicking on the 3 dots before our fallback item or by just creating a new item and selecting type <code>Dependent item</code></p> <ul> <li>Name: Trap ifAdminStatus</li> <li>Type: Dependent item</li> <li>Key: trap.ifAdminStatus</li> <li>Type of information: Numeric(unsigned)</li> <li>Master item: (Select your fallback item as master item)</li> </ul> <p>Click on the <code>preprocessing</code> tab and select <code>Regular expression</code>. use <code>IF-MIB::ifAdminStatus[\\s\\S]*?INTEGER:\\s+(\\d+)</code> in the Parameters field and <code>\\1</code> in the Output box.</p> <p>Select the box <code>Custom on fail</code> and use the option <code>Discard value</code>.</p> <p></p> <p>Next we create our second item also dependent on our Fallback item.</p> <ul> <li>Name: Trap ifOperStatus</li> <li>Type: Dependent item</li> <li>Key: trap.ifAdminStatus</li> <li>Type of information: Numeric(unsigned)</li> <li>Master item: (Select your fallback item as master item)</li> </ul> <p>Again go to the <code>Preprocessing</code> tab and enter following information.</p> <p>Select <code>Regular expression</code> and for Parameters enter <code>IF-MIB::ifOperStatus[\\s\\S]*?INTEGER:\\s+(\\d+)</code> and <code>\\1</code> in the Output box.</p> <p>Again add a <code>Custom on fail</code> step and select <code>Discard value</code>.</p> <p></p> <p>We have our items now but we still are missing our trigger. Go back to your host and click on the triggers and add the following trigger.</p> <p>Name: Problem (Link down:) Severity: Warning</p> <p>Problem expression: <code>last(/Network Switch 01/trap.ifOperStatus)=2 and last(/Network Switch 01/trap.ifAdminStatus)=2</code></p> <p>Recovery expression: <code>last(/Network Switch 01/trap.ifOperStatus)=1 and last(/Network Switch 01/trap.ifAdminStatus)=1</code></p> <p></p> <p>Make sure to also select the box <code>Allow manual close.</code> This can help to close the problem in case we don't receive a TRAP.</p> <p>You should now be able to sent a trap to open and close a problem in Zabbix based on the status of the ifOperStatus and the ifAdminStatus </p> <pre><code>snmptrap -v 2c -c public 127.0.0.1 '' IF-MIB::linkDown   IF-MIB::ifIndex i 1   IF-MIB::ifAdminStatus i 2   IF-MIB::ifOperStatus i 2   IF-MIB::ifName s \"Gi0/1\"   IF-MIB::ifDescr s \"GigabitEthernet0/1\"\nsnmptrap -v 2c -c public 127.0.0.1 '' IF-MIB::linkDown   IF-MIB::ifIndex i 1   IF-MIB::ifAdminStatus i 1   IF-MIB::ifOperStatus i 1   IF-MIB::ifName s \"Gi0/1\"   IF-MIB::ifDescr s \"GigabitEthernet0/1\"\n</code></pre> <p>As a bonus you can add on the host a value map and link the items with it.</p> <p></p> <p>If you don't like 2 different items and want to be more fancy you could create an dependent item like we did above and use JS instead of perl regex.</p> <p><pre><code>var s = value;\n\nfunction grab(re) {\n  var m = s.match(re);\n  return m ? m[1] : '';\n}\n\n// Extract fields from your sample payload\nvar ifName = grab(/IF-MIB::ifName[\\s\\S]*?STRING:\\s+\"([^\"]+)\"/m);\nvar admin  = grab(/IF-MIB::ifAdminStatus[\\s\\S]*?INTEGER:\\s+(\\d+)/m);\nvar oper   = grab(/IF-MIB::ifOperStatus[\\s\\S]*?INTEGER:\\s+(\\d+)/m);\n\n// Map 1/2/3 -&gt; up/down/testing\nvar map = { '1':'up', '2':'down', '3':'testing' };\nvar a = map[admin] || admin || '?';\nvar o = map[oper]  || oper  || '?';\nvar name = ifName || 'ifName=?';\n\nreturn 'interface=' + name + ' adminStatus=' + a + ' operStatus=' + o;\n</code></pre> This will return output in latest data like <code>interface=Gi0/1 adminStatus=down operStatus=down</code></p> <p>Another solution way more easy could be to create a specific item instead of falling back on the fallback item that looks exactly for a link that goes Down or Up. This can be done by creating a specific item like this:</p> <p><code>snmptrap[\"IF-MIB::link(Down|Up)\"]</code></p> <p>We could then create a trigger like: <code>str(/Network Switch 01/snmptrap[\"IF-MIB::link(Down|Up)\"],\"IF-MIB::linkDown\")=1</code> and a recovery trigger like : <code>str(/Network Switch 01/snmptrap[\"IF-MIB::link(Down|Up)\"],\"IF-MIB::linkUp\")=1</code></p> <p>As you can see the solutions are endless and SNMP traps are not so easy and probably need some tweaking before you have it all working like you want.</p> Note <p>The snmptrap.fallback is a good point to start with if you have no clue what traps to expect it can help you to discover all the traps and stay to be sure you catch all traps even if they are not configured on your host.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#deploying-bare-minimum-mib-files","title":"Deploying bare minimum MIB files","text":"<p>Gathering proper MIB files might sounds a tedious and time consuming task.</p> <p>Installing too many MIBs will cause degradation for the SNMP trap translation process and slow down the SNMP polling process.</p> <p>Here is an universal method (treat it as one option) on how to obtain bare minimum MIBs to work with most of devices. This is useful for SNMP polling too.</p> <p>The project https://github.com/netdisco/netdisco-mibs exist for 20 years and is a collection of MIBs for a lot of vendors. Dare I say: all vendors?</p> <p>To install/replace the Linux distribution stock MIB bundle:</p> <pre><code># move to /tmp\ncd /tmp\n\n# download\ncurl -kL https://github.com/netdisco/netdisco-mibs/archive/refs/heads/master.zip -o /tmp/netdisco-mibs.zip\n\n# unpack. this will create '/tmp/netdisco-mibs-master' directory\nunzip /tmp/netdisco-mibs.zip -d /tmp\n\n# remove existing/official MIBs from Linux distribution\nrm -rf /usr/share/snmp/mibs/*\n\n# install Netdisco collection. it will move all directories which start with lower case letter or digit\nfind /tmp/netdisco-mibs-master -mindepth 1 -maxdepth 1 -type d -name '[a-z0-9]*' -exec mv {} /usr/share/snmp/mibs/ \\;\n\n# list what is installed\nls -1 /usr/share/snmp/mibs\n\n# cleanup\nrm -rf /tmp/netdisco*\n</code></pre> <p>To enable bare minimum MIBs we need to enable two catalogs \"rfc\" and \"net-snmp\".</p> <p>Overwrite/replace configuration by using:</p> <pre><code>echo \"\nmibs :\nmibdirs /usr/share/snmp/mibs/rfc:/usr/share/snmp/mibs/net-snmp\nmibs +ALL\n\" | sudo tee /etc/snmp/snmp.conf\n</code></pre> <p>Fun fact</p> <p>Modifying /etc/snmp/snmp.conf file the changes are applied on the fly. No need to restart anything.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#include-another-vendor","title":"Include another vendor","text":"<p>Let's say we need to work with Cisco equipment. We can double-check if vendor is included in Netdisco bundle. Grep for case insensitive name:</p> <pre><code>ls -1 /usr/share/snmp/mibs | grep -i Cisco\n</code></pre> <p>If the vendor is in list, then include \"cisco\" directory together with \"rfc\" and \"net-snmp\" directory, like this:</p> <pre><code>echo \"\nmibs :\nmibdirs /usr/share/snmp/mibs/rfc:/usr/share/snmp/mibs/net-snmp:/usr/share/snmp/mibs/cisco\nmibs +ALL\n\" | sudo tee /etc/snmp/snmp.conf\n</code></pre> <p>Adding multiple vendors is possible but it will slow down the translation speed. Adding plus one vendor usually add at least 1s more to the translation speed.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#conclusion_1","title":"Conclusion","text":"<p>We started by setting up the trap reception environment using snmptrapd and the zabbix_trap_receiver.pl script, then integrated it into Zabbix through the SNMP Trapper process. You also learned how to open the necessary firewall ports, configure log rotation for the trap file, and verify successful reception using test traps.</p> <p>In the Zabbix frontend, we created a host representing our SNMP device, added a catch-all trap item, and built dependent items to extract key values such as ifAdminStatus and ifOperStatus. From there, we constructed a simple yet effective trigger pair that raises an alert when a linkDown trap is received and automatically resolves it when a linkUp trap arrives.</p> <p>Combine traps with SNMP polling to balance real-time alerts with long-term performance metrics.</p> <p>SNMP traps are one of the most powerful mechanisms in Zabbix for achieving proactive monitoring. When properly configured, they provide immediate visibility into the health and state of your infrastructure, allowing you to respond to issues the moment they happen, not minutes later.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#questions","title":"Questions","text":"<ul> <li>What is the key difference between SNMP polling and SNMP traps in how they collect data?</li> <li>Why are SNMP traps often described as active monitoring while SNMP polling is passive?</li> <li>What is the purpose of the zabbix_trap_receiver.pl script, and where is it defined in the SNMP configuration?</li> <li>What role does the parameter StartSNMPTrapper play in zabbix_server.conf?</li> <li>In what kind of situations would you prefer SNMP traps over polling?</li> <li>How could you use SNMP traps in combination with SNMP polling for a hybrid monitoring strategy?</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/snmp-trapping/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/itemtypes/snmptrap</li> <li>https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/misc/snmptrap</li> <li>https://www.net-snmp.org/</li> <li>https://datatracker.ietf.org/doc/html/rfc3416</li> <li>https://datatracker.ietf.org/doc/html/rfc1905</li> <li>https://datatracker.ietf.org/doc/html/rfc1157</li> </ul>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/","title":"SSH / Telnet","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#conclusion","title":"Conclusion","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#questions","title":"Questions","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/ssh-telnet/#useful-urls","title":"Useful URLs","text":"","tags":["beginner"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/","title":"Zabbix Agent Active monitoring","text":"<p>In the previous part we installed our Zabbix agent and started monitoring a host in the <code>Passive</code> mode. When we use <code>Passive</code> mode the Zabbix server or proxy will connect to the Zabbix agent and request specific item data. The item data is returned within the same TCP session. From a security aspect this means that we need to allow our Zabbix servers or proxies to connect to many different servers.</p> <p>For security reasons this might not be the best course of action. Instead let's look at the Zabbix agent in <code>Active</code> mode. In <code>Active</code> mode or Zabbix agent will be configured to initiate the connection to the Zabbix server or proxy. It will request its configuration data and receive it back in the same TCP session. After receiving its configuration it can then start sending the item data according to the configuration received. The connection as such is always initiated from the Zabbix agent side, meaning you will allow your many agents to connect to your Zabbix servers or proxies instead.</p> <p></p> <p>4.24 Zabbix Agent active hosts</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#setting-up-the-active-agent","title":"Setting up the active agent","text":"<p>It's possible to set-up a Zabbix agent to work in both passive and active mode at the same time. Sometimes, we see this as passive mode was being used but an active only check is added later. The Zabbix agent in active mode can execute all item keys, whereas the passive agent cannot execute log item keys. Another reason to prefer active mode in most cases. For clarity, in our example we will use a different linux and windows server for the active agent. We will call these hosts:</p> <ul> <li>zbx-agent-active-rocky</li> <li>zbx-agent-active-windows</li> </ul> <p>Because the Zabbix active agent will need to know where to request its configuration and where to start sending data, the setup for the active agent is quite different. The set-up process however is the same for both Linux and Windows. Let's start by editing the Zabbix agent configuration file.</p> <p>open Zabbix agent configuration file</p> <p>Linux usually:</p> <p>``` vim /etc/zabbix/zabbix_agent2.conf <pre><code>Windows usually:\n\n``` Open C:\\Program Files\\Zabbix agent\\zabbix_agent2.conf with a text editor\n</code></pre></p> <p>Once the configuration is open, there are two important parameters in the configuration file. First, let's make sure our Zabbix agent will know where to connect to.</p> <p>edit ServerActive parameter</p> <p><code>ServerActive=192.168.46.30</code></p> <p>In the example <code>192.168.46.30</code> is the IP address of our Zabbix server (or proxy). Do not forget to remove <code>127.0.0.1</code> in this case. Its important to remember that our Zabbix agent in active mode will connect to every single IP address or DNS name entered in the <code>ServerActive=</code> parameter. Unlike <code>Server=</code> which functions as an allowlist.</p> <p>Next up, our Zabbix agent needs to know which configuration data to collect. It will connect to the Zabbix server (or proxy) on the IP specified and send over its <code>Hostname=</code> parameter. By default this is set to <code>Hostname=Zabbix server</code> which is incorrect in all cases except the Zabbix server itself. Lets change the configuration.</p> <p>edit Hostname parameter</p> <p>Linux:</p> <p>``` Hostname=zbx-agent-active-rocky <pre><code>Windows\n\n``` Hostname=zbx-agent-active-windows\n</code></pre></p> <p>It is also possible to comment the <code>#Hostname=</code> parameters, in which case it will use the <code>system.hostname</code> item key to determine the hostname. This makes it easy for environments where the hostname is the same on the system as it will be in Zabbix (best practice).</p> <p>There is also the <code>HostnameItem=</code> parameter which you can use to set your own item to determine the hostname used. This can be an existing item, but also a <code>UserParameter</code> (more on those later). With this functionality, you can even execute a bash or powershell script to set a custom hostname like that.</p> <p>With this configuration set you can restart the Zabbix agent to make the changes take effect. In <code>Windows</code> restart the service, for <code>Linux</code> issue the command below.</p> <p>restart Zabbix agent</p> <p><code>systemctl restart zabbix-agent2</code></p> <p>This finalizes the configuration file changes. Now we need to configure the host in Zabbix.</p> <p></p> <p>4.25 Zabbix Agent active hosts in Zabbix</p> <p>All we need to do here is make sure to match the hostname of what we configured in the Zabbix agent configuration file. Keep in mind that the <code>Hostname</code> field has to match the <code>Hostname=</code> parameter in the configuration file. The <code>Visible name</code> field does not have effect on the active agent functioning.</p> <p>We also add the host to the correct host group and that is all for now.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#creating-active-items","title":"Creating active items","text":"<p>Now that these settings all configured we can now start to create some items on our active agent host in Zabbix frontend. Let's click on <code>Items</code> for our host and configure a new Zabbix active type items.</p> <p></p> <p>4.26 Zabbix Agent active item</p> <p>Make sure to set the item <code>Type</code> to <code>Zabbix agent (active)</code>. Most item keys will be the same between <code>Passive</code> and <code>Active</code> mode, but the <code>Type</code> needs to be set correctly.</p> <p>Also, do not forget to add the tag to this item.</p> <p></p> <p>4.27 Zabbix Agent active item tag</p> <p>Your <code>ZBX</code> icon for this host should now turn green, even in active mode.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#conclusion","title":"Conclusion","text":"<p>Zabbix agent in <code>Passive</code> and in <code>Active</code> mode are quite similar. Their main difference being their methods of communications and some different functionalities outside of their core functions being the same. One big difference we haven't mentioned yet however is timestamps. The Zabbix server or proxy communicating with a Zabbix agent in<code>Passive</code> mode adds the timestamp for a collected value at the Zabbix server or proxy side. In <code>Active</code> mode however the timestamp is added directly upon item value collection on the Zabbix agent side. This makes the Zabbix agent in <code>Active</code> mode more accurate with timestamps, but more sensitive for incorrect time settings on your monitoring targets. Keep in mind to set-up NTP when using the Zabbix agent in <code>Active</code> mode, a good idea even outside of Zabbix monitoring. The Zabbix agent in <code>Active</code> mode will always use UTC+0 and send over the timestamp in unixtime.</p> <p>Finally, let's do a bit of a comparison between the two modes.</p> Active Zabbix agent Passive Zabbix agent Timestamp Zabbix agent Zabbix server or proxy (event)log items Supported Not supported Port No port listening, connect to 10051 Listening on 10050 Hostname Has to match Can be anything Remote commands Supported Supported","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-active/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/","title":"Zabbix Agent installation and Passive monitoring","text":"<p>At this point we are familiar with the Zabbix dataflow, how to create hosts and, add interfaces and items to a host. As a system administrator or anyone else working with Linux, Unix or Windows systems usually we jump right into installing the Zabbix agent and monitoring with it. Using our previous steps however, we have laid the groundwork for building a proper monitoring solution. We have prepared our systems before monitoring, which is the most important part to avoid <code>Monitoring fatigue</code> later on.</p> Note <p><code>Monitoring fatigue</code> and <code>Alert fatigue</code> are two terms heard in monitoring and observability.</p> <p><code>Alert fatigue</code> happens in Zabbix when you configure too many (incorrect) triggers. When you flood your dashboards or even external media like Teams or Signal with too many alerts your users will not respond to them any longer.</p> <p><code>Monitoring fatigue</code> happens in Zabbix when you misconfigure things like dashboards, items, host groups, tags and other internal systems that keep things structured. The result is that you or your co-workers do not want to use your own system any longer as it does not deliver the right information easily enough.</p> <p>Now, we are ready to start monitoring an actual system.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-basics","title":"Agent basics","text":"<p>We have prepared an example setup in our Book LAB environment.</p> <p></p> <p>4.14 Zabbix Agent passive hosts</p> <p>What we can see here is a setup you might see in any datacenter or office server cabinet. We have a Zabbix server monitoring one Windows server and one Linux server directly (or through a proxy). We call Zabbix a network monitoring solution as it communicates over the network. In Zabbix we have two methods of communication.</p> <ul> <li>Passive Otherwise known as <code>polling</code>. We communicate from the Zabbix server   (or proxy) towards the monitoring target. The monitoring target is listening   on a port waiting for Zabbix to request data.</li> <li>Active Otherwise known as <code>trapping</code>. We communicate from the monitoring   target towards the Zabbix server (or proxy). The Zabbix server is listening   on a port waiting for the monitoring target to send data.</li> </ul> <p>As you can imagine there is quite a big difference between these two methods of communication. Often times it depends on the protocol which method is preferred. For example SNMP traps are always an active type of check.</p> <p>The Zabbix agent however can communicate in either <code>Active</code> or <code>Passive</code> mode. It can even do those simultaneously. Simultaneous communication can be useful when you want to use <code>Passive</code> mode for all communication, but still want to execute some items that are <code>Active</code> only. <code>Active</code> items can do everything <code>Passive</code> items can do however.</p> <p>Before we can configure either though, we will have to install our Zabbix agent first. When installing on Linux and Windows we have a choice between two different agents, <code>Zabbix agent</code> and <code>Zabbix agent 2</code>. Both of these Zabbix agents are still in active development and receive both major (LTS) and minor updates. The difference between them is in Programming language and features.</p> Zabbix agent Zabbix agent 2 Features No focus to include new features Supports everything agent 1 does + more Programming language C GoLang Extensions C Loadable Modules GoLang plugins Platforms All Linux and Windows Concurrency In sequence Concurrently Storage on outage No Sqlite Item timeouts Agent wide Per plugin","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-linux","title":"Agent installation on Linux","text":"<p>Installation on Linux can be done in one of three ways. Through direct install files like <code>.rpm</code> and <code>.deb</code>, by building from sources and through packages pulled from the repository. Installation through the packages is preferred as this means Zabbix agent will be updated when updating with commands like <code>dnf update</code> and <code>apt upgrade</code>. Keep in mind, Zabbix agent is a piece of software just like any other and as such news versions will contain security and bug fixes. Whatever installation method you choose, keep your Zabbix agent up-to-date.</p> <p>We will be using the packages on both RedHat-based and Ubuntu to install <code>Zabbix agent 2</code>. To use the packages we will add the Zabbix repository first.</p> <p>add zabbix repository</p> <p>Redhat</p> <pre><code>rpm -Uvh https://repo.zabbix.com/zabbix/7.2/release/rocky/9/noarch/zabbix-release-latest-7.2.el9.noarch.rpm\ndnf clean all\n</code></pre> <p>Ubuntu</p> <pre><code>sudo wget https://repo.zabbix.com/zabbix/7.2/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo dpkg -i zabbix-release_latest_7.2+ubuntu24.04_all.deb\nsudo apt update\n</code></pre> <p>After adding the repository, we should be able to install <code>Zabbix agent 2</code>.</p> <p>install Zabbix agent 2 package</p> <p>Redhat</p> <pre><code>dnf install zabbix-agent2\n</code></pre> <p>Ubuntu</p> <pre><code>sudo apt install zabbix-agent2\n</code></pre> <p>After installation make sure to start and enable the Zabbix agent.</p> <p>start Zabbix agent 2</p> <p>Redhat</p> <pre><code>systemctl start zabbix-agent2\nsystemctl enable zabbix-agent2\n</code></pre> <p>Your agent is now installed under the <code>zabbix</code> user and ready to be configured. On a Linux based system, by default we can find all of the Zabbix configuration files in <code>/etc/zabbix/</code>. Specifically we want to edit <code>/etc/zabbix/zabbix_agent2.conf</code>.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-windows","title":"Agent installation on Windows","text":"<p>On Windows, we have two options to install our Zabbix agent. Through downloading the <code>.exe</code> file and placing the configuration files in the right location or the easy option. Downloading the <code>.msi</code> and going through the installation wizard. Whichever method you prefer, you'll first have to navigate to the Zabbix download page. We will be using the <code>.msi</code> in our example.</p> <p>https://www.zabbix.com/download_agents?os=Windows</p> <p>Here you will be presented with the choice to download either <code>Zabbix agent</code> or <code>Zabbix agent 2</code>. Choose whichever one you would like to install, but by now we recommend <code>Zabbix agent 2</code> as it is stable and includes more features.</p> <p>Once downloaded, we can open the new <code>zabbix_agent2-x.x.x-windows-amd64-openssl.msi</code> file and it will take us to the wizard window.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 1</p> <p>Step 1 is a simple welcome screen, nothing to do here except click on <code>Next</code>.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 2</p> <p>For step 2, make sure to read the <code>License Agreement</code> (or don't, we do not give legal advice). Then click <code>Next</code>.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 3</p> <p>For step 3 we have some more actions to execute. By default the Zabbix agent on Windows <code>.msi</code> installer includes <code>Zabbix sender</code> and <code>Zabbix get</code>. These are separate utilities that we do not need on every Windows server. I will not install them now, but we can always use the <code>.msi</code> to install them later. The Zabbix agent will function fine without them.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 4</p> <p>Step 4 is our most important step. Here we will already configure our Zabbix agent configuration file, straight from the <code>.msi</code> installer. Let's make sure to set the <code>Hostname</code>, <code>Zabbix server IP/DNS</code> (<code>192.168.46.6</code> in our case) and let's also set the <code>Server or proxy for active checks</code> parameter. As you can see we could also immediately configure encryption with the <code>Enable PSK</code> option, but we will do this later.</p> <p></p> <p>4.15 Zabbix Agent Windows install step 5</p> <p>Now there is nothing left to do except press <code>Install</code> and our Zabbix agent will be both installed and configured.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-unix","title":"Agent installation on Unix","text":"<p>For Unix based systems, simply download the files on the Zabbix download page for either <code>AIX</code>, <code>FreeBSD</code>, <code>OpenBSD</code> or <code>Solaris</code>.</p> <p>https://www.zabbix.com/download_agents</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-installation-on-macos","title":"Agent installation on MacOS","text":"<p>For MacOS systems, simply download the files on the Zabbix download page and run through the <code>.pkg</code> installer.</p> <p>https://www.zabbix.com/download_agents?os=macOS</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#agent-side-configuration","title":"Agent side configuration","text":"<p>Configuring the Zabbix agent is similar for all installations. Whether you are on <code>Linux</code>, <code>Unix</code>, <code>Windows</code> or <code>MacOS</code> you will always find the <code>../zabbix_agent2.conf</code> file. The parameters in this configuration file are mostly the same, regardless of the operating system.</p> <p>For <code>Passive</code> Zabbix agent connections we have only one important parameters to configure out of the box. The <code>Server=</code> parameter. This parameter functions as an allowlist, where we can add IP addresses, IP ranges and DNS entries to a list. All of the entries in this <code>Server=</code> allowlist will be allowed to make a connection to the <code>Passive</code> Zabbix agent and collect data from it.</p> <p>Edit your configuration file to include your Zabbix server (or proxy) IP address, IP range or DNS entry.</p> <p>edit the Server= parameter</p> <pre><code>Server=127.0.0.1,192.168.46.30\n</code></pre> <p>As you can see in the example, I've left <code>127.0.0.1</code>. Although not required, this can be useful in certain situations. Through the use of a comma <code>,</code> we have indicated that both <code>127.0.0.1</code> and <code>192.168.46.30</code> are allowed to connect. If you are running Zabbix server in HA mode or if you are using Proxy Groups, make sure to include all entries for the Zabbix components that need to connect.</p> <p>After making changes to the Zabbix agent configuration file, make sure to restart the Windows service. On Linux systems use <code>sytemctl</code> to restart.</p> <p>restart Zabbix agent</p> <pre><code>systemctl restart zabbix-agent2\n</code></pre> <p>If you do not restart, the changes will not take effect.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#zabbix-side-configuration","title":"Zabbix side configuration","text":"<p>On the Zabbix server side we can now create a new host to monitor. Let's call it <code>zbx-agent-passive-rocky</code> or <code>zbx-agent-passive-windows</code> and let's add the interface.</p> <p></p> <p>4.20 Zabbix Agent passive Linux host</p> <p>For Windows it looks similar.</p> <p></p> <p>4.21 Zabbix Agent passive Windows host</p> <p>With the host added, correctly with an interface, we can now start monitoring. To do so, let's create one <code>Zabbix agent</code> item type as an example. For your new host <code>zbx-agent-passive-rocky</code> or <code>zbx-agent-passive-windows</code> in the Zabbix frontend, click on <code>Items</code> and then <code>Create item</code> in the top right corner.</p> <p>Let's create an item <code>System hostname</code>, making sure that if we have more system items alphabetical sorting will group them together. For <code>Passive</code> Zabbix agent the type <code>Zabbix agent</code> is used and we have to specific an <code>Interface</code>. We will use the item key <code>system.hostname</code>.</p> <p></p> <p>4.22 Zabbix Agent passive host item</p> <p>Do not forget to add the standard <code>Component</code> tag to the item to follow the best practise.</p> <p></p> <p>4.23 Zabbix Agent passive host item tag</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#conclusion","title":"Conclusion","text":"<p>Installing the Zabbix agent can be done with either <code>Zabbix agent</code> or <code>Zabbix agent 2</code>. By now <code>Zabbix agent 2</code> is recommended when available, but <code>Zabbix agent</code> is also still fully supported. Make sure to install the Zabbix agent through the most easily secured method and keep it updated.</p> <p>Once installed, for <code>Passive</code> communication we will use the <code>Server=</code> parameter to keep our agent secured. We do not want everyone to be able to connect to this agent, even when there might still be a firewall or two in between.</p> <p>Last but not least, keep <code>Active</code> versus <code>Passive</code> in mind. Depending on where the server is located, it might be preferred to open up ports through your firewall(s) incoming our outgoing. Usually we prefer <code>Active</code> communication, because it means we do not have to give a central server (Zabbix server and proxy) access to all our servers. But in specific cases <code>Passive</code> might be preferred.</p>","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-agent-passive/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/","title":"Zabbix Internals","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#conclusion","title":"Conclusion","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#questions","title":"Questions","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-internal/#useful-urls","title":"Useful URLs","text":"","tags":["expert"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/","title":"Zabbix trapper","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch04-zabbix-collecting-data/zabbix-trapper/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch05-zabbix-triggers/advanced-triggers/","title":"Advanced triggers","text":"","tags":["expert"]},{"location":"ch05-zabbix-triggers/chapter/","title":"Setting up triggers","text":"<p>In this chapter, we'll explore triggers in depth, starting with the basics of setting up step triggers and progressively moving into advanced trigger configurations. You'll gain a thorough understanding of how triggers work, ensuring you can leverage them effectively to monitor your infrastructure.</p> <p>We'll take a deep dive into the mechanics of triggers, examining how they evaluate conditions and generate alerts. This section will also address the important topic of monitoring and alerting fatigue, providing strategies to fine-tune your triggers to reduce unnecessary alerts while maintaining optimal system oversight.</p> <p>By the end, you'll have the knowledge to set up both simple and complex triggers, helping you maintain a well balanced monitoring system that minimizes noise and focuses on what truly matters.</p>"},{"location":"ch05-zabbix-triggers/triggers/","title":"Triggers","text":"<p>In the previous chapter we have been hard at work to collect our data from various monitoring targets. Because of that our Zabbix environment is filled with useful and important information about our IT infrastructure. However, when you want to know something about your various different devices and applications you have to go through a mountain of data. This is where triggers come in.</p> <p>Triggers in Zabbix work as a way for us to collect a mountain worth of data, while being alerted about what's important. It allows us to set our own expressions that will define exactly when Zabbix should log and alert us about something happening with our data. The easiest example being something like a CPU going to 90% utilization.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#preparing-the-environment","title":"Preparing the environment","text":"<p>In the previous chapter we created some hosts to monitor the active Zabbix agent, which are great for some example triggers. We created this host under the hostname <code>zbx-agent-active-rocky</code> or <code>zbx-agent-active-windows</code>, either should work for the example. We also should already have an item on this host to monitor the <code>Zabbix agent ping</code> with item key <code>agent.ping</code>. Let's add one item to our <code>zbx-agent-active-*</code> host, specifically to monitor the CPU load in percentage.</p> <p></p> <p>5.1 Zabbix Agent active CPU util item</p> <p>Let's not forget to add the tag.</p> <p></p> <p>5.2 Zabbix Agent active CPU util item tag</p> <p>With this item created, we have two great examples on our Zabbix agent active host for creating some basic triggers.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#trigger-creation","title":"Trigger creation","text":"<p>Let's now create two very common triggers in our Zabbix environment. Go to <code>Data collection | Hosts</code> and navigate to either your Linux or Windows <code>zbx-agent-active-*</code> host and click on <code>Triggers</code>. In the top right corner you can now click on <code>Create trigger</code> to start.</p> <p></p> <p>5.3 Empty trigger creation form</p> <p>To start with the basics we can see the follow information at the top part of our trigger creation form.</p> <ul> <li>Name</li> <li>Event name: The name of the event and problem you will see Monitoring | Problems</li> <li>Operational data</li> <li>Severity</li> <li>Expression</li> <li>OK event generation</li> </ul>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#name","title":"Name","text":"<p>The name of the trigger is important as it will be used for the name of our events and problems created from this trigger. For example if you would navigate to <code>Monitoring | Problems</code>, the triggers you see here will probably have the same name as a trigger.</p> <p>It doesn't have to be unique, meaning we can have multiple triggers with the same name. As long as the combination of <code>Name</code> and <code>Expression</code> is unique.</p> <p>Let's fill in <code>Zabbix agent not seen for &gt;5m</code>.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#event-name","title":"Event name","text":"<p>The <code>Event name</code> is very similar to the <code>Name</code> field, as it will be used to name the events and problems created from this trigger. However, when <code>Event name</code> is used, the <code>Name</code> field will no longer form the name of events and problems. <code>Event name</code> serves as an override for the <code>Name</code> field.</p> <p>The <code>Event name</code> field allows us to create longer and used more extensive macro functionality compared to the <code>Name</code> field. This is why it can be useful in some scenarios, but it is not mandatory to use it.</p> <p>Let's leave this empty for now.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#operational-data","title":"Operational data","text":"<p>Whenever we create a trigger, once the trigger goes into a problem state it will create a problem event in the background within Zabbix. This problem event in term then creates a <code>Problem</code> in Zabbix which we can find under <code>Monitoring | Problems</code>. It's important to keep in mind that event and problem names are always static. Even when the trigger name or trigger event name is updated later, existing event and problems will not get a new name until they resolve and go into problem state again.</p> <p>This is where <code>Operational data</code> becomes useful. It can be used to show dynamic information next to your problem names. This will allow you to for example use a macro like <code>{ITEM.LASTVALUE}</code> to always show the latest item value related to this triggers item(s).</p> <p>Let's fill in <code>{ITEM.VALUE}</code> and <code>{ITEM.LASTVALUE}</code></p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#severity","title":"Severity","text":"<p>This field is mandatory, as it is a selector we have to pick something with. By default Zabbix sets it to <code>No classified</code>, which is a severity rarely used outside of Zabbix internal problems. Instead we often pick one of the other 5 severities to indicate how important a problem created from this trigger is.</p> <p>For example, <code>Informational</code> is often used to indicate something we just want to log. Specifically, often <code>Informational</code> is something we do not necessarily want to see on our dashboards or receive external alerts from. <code>Disaster</code> on the other end however is often used to indicate something that requires immediate attention. The <code>Warning</code>, <code>Average</code> and <code>High</code> severities can be used to classify anything in between. My favourite basic setup usually looks like below.</p> <ul> <li>Informational: Just for logging and not showing on dashboards</li> <li>Warning: Requires attention, shown on dashboards</li> <li>Average: Requires more immediate attention, send out email or Slack/Teams message</li> <li>High: Requires attention even out of office hours, send SMS or Signal message</li> <li>Disaster: Problem with severe implications to the business, possible higher SMS or Signal escalation</li> </ul> <p>This is of course just an example of how you could use the different severities and it will depend on your organisation and setup if this is actually implemented as such. The key here is that the severity can be used later to filter in various locations. Like dashboards for showing problems and actions for sending out alerts.</p> <p>Let's select <code>High</code> for now.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#expression","title":"Expression","text":"<p>The expression of the trigger is arguably the most important part. This is where we are going to define exactly how our trigger will detect the problem. Zabbix comes with many different functions to detect problems in an almost unlimited number of ways. But the basis is simple.</p> <p>We collect values from an <code>Item</code> using a <code>Function</code> applied to a number of values or time period (namely <code>Last of (T) Count/Time</code>). To this collect set of values we set a operator and constant (namely <code>Result</code>) to indicate what we want the result of our expression to be. This is in the end a whole lot of words to say, more simply put, we select and item to collect values from and then state what we want those values to look like to show a problem in Zabbix.</p> <p>Let's click on the <code>Add</code> button now an used the expression builder. For <code>Item</code> we select <code>Zabbix agent ping</code>, for <code>Function</code> we select <code>nodata</code>, for <code>Last of (T)</code> we set <code>5m</code> and for <code>Result</code> we set <code>= 1</code>. Then press <code>Insert</code> to automatically create the expression below.</p> <p></p> <p>5.4 Example trigger expression</p> <p>The expression is now built automatically and we do not need to write the whole syntax correctly ourselves. This trigger will now detect if <code>nodata</code> (is true <code>=1</code>) has been received on the item <code>agent.ping</code> for host <code>zbx-agent-active-rocky</code> (or <code>zbx-agent-active-windows</code> if you used that instead). It will only detect that however if <code>nodata</code> was received for more than 5 minutes (<code>,5m</code>).</p> <p>The <code>nodata</code> function used in this trigger is a bit special, as it specifically can trigger if no data was received (true <code>=1</code>) or if data was received (false <code>=0</code>) over a time period. This is what we call a time based trigger in Zabbix, whereas most other triggers only trigger when an item receives data instead. More on those later.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#ok-event-generation","title":"OK event generation","text":"<p>In the case of this trigger, <code>OK event generation</code> is set to <code>Expression</code>. This means that the trigger expression will simply use the existing problem <code>Expression</code> to detect when the trigger creates an <code>OK</code> event. With our <code>nodata</code> trigger this will be whenever data has been received again, as the no data for 5 minutes will no longer be true.</p> <p>In short:</p> <ul> <li>Trigger expression is true: Problem event is created and problem starts</li> <li>Trigger expression is false: OK event is generated and existing problem resolves</li> </ul> <p>Our trigger should now look like the image below.</p> <p></p> <p>5.5 Zabbix agent not seen for 5m trigger</p> <p>Let's not forget to also add a tag to this trigger. On triggers in Zabbix the best practice is to create a <code>Scope</code> tag to indicate what the trigger is going to be about. We usually pick on of 5 options.</p> <ul> <li>availability</li> <li>performance</li> <li>notification</li> <li>security</li> <li>capacity</li> </ul> <p></p> <p>5.6 Zabbix agent not seen for 5m trigger tag</p> <p>We can now click on the <code>Add</code> button at the bottom of the form and our trigger is done! If we stop our Zabbix agent with <code>systemctl stop zabbix-agent2</code> we should get a new problem after 5 minutes.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#another-trigger","title":"Another trigger","text":"<p>Before we stop our chapter here though, let's go through one more trigger example. We also created a new item to monitor the monitoring target CPU utilization. A perfect example for another trigger. Let's create it like the image below.</p> <p></p> <p>5.7 CPU utilization over 90% trigger</p> <p>Don't forget to add the tag <code>scope:performance</code> and then add the trigger by clicking the <code>Add</code> button at the bottom of the form.</p> <p>Breaking down this expression we can see a very similar setup as the previous trigger. But this is not a time based trigger and it will not trigger based on a simple data being received or not. Instead this trigger uses the function <code>min</code> over a time period of 3 minutes (<code>3m</code>) and with the operator and constant <code>=&gt;90</code>.</p> <p>Simply put, this trigger will be evaluated every time new data is received on the item <code>proc.cpu.util</code>. We created that item earlier, with an update interval of 1 minute (<code>1m</code>). In a time period of 3 minutes that means we could have received the following.</p> <ul> <li>95%</li> <li>80%</li> <li>99%</li> </ul> <p>In this case, the CPU utilization is spiking shortly over 90%. The problem however will not start, because we used the <code>min</code> function. Function <code>min</code> and <code>max</code> are some of the most useful function in Zabbix, as they can be used to filter spikes and drops respectively. Since we used <code>min</code> in our expression, the result will be <code>80%</code> as that is the minimum (smallest) value in our 3 minute time period. If our data looked like below however, the result would be different.</p> <ul> <li>90%</li> <li>99%</li> <li>97%</li> </ul> <p>In this case our minimum value is <code>90%</code>, which is indeed equal to or higher than 90 as stated in the expression with <code>=&gt;90</code>.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#conclusion","title":"Conclusion","text":"<p>Triggers in Zabbix can be used to detect problems and automatically resolved them based on the data received on items in Zabbix. We do not have to create triggers for all of our items in Zabbix (see Zabbix dataflow in the previous chapter), but they can be useful on important data.</p> <p>A few more tips to keep in mind when working with triggers. Make sure to keep your severities setup correctly, as this is one of the most important parameters for filtering later. They are very important to create alerting correctly later.</p> <p>It is also a good idea to keep your trigger names short and descriptive. <code>CPU utilization &gt;90%</code> is a lot easier to understand than <code>CPU utilization on the server has been over 90% for the past three minutes</code>. People are usually in a rush, especially when there is a problem with IT infrastructure. The more reading you have to do in that situation, the less likely you are to see the issue straight away.</p> <p>The best tip regarding triggers? A good trigger shows you the problem. A great trigger instantly makes you think of where to go and what to do to solve it.</p>","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch05-zabbix-triggers/triggers/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch06-zabbix-templates/chapter/","title":"Building and using templates","text":"<p>A great way to guide users towards a deeper understanding of Zabbix is by initially holding off on templates and gradually introducing them much like in formal training. In this chapter, we'll start by explaining the basic usage of default templates and how to find new ones, helping you get up and running with minimal effort.</p> <p>Once you're comfortable with default templates, we\u2019ll dive into building your own templates, offering detailed instructions on customization and best practices. We\u2019ll also cover how to share your templates within the Zabbix community, fostering collaboration and knowledge exchange.</p> <p>To round off, we'll feature Tags and Macros, explaining their roles within templates and why they're most effective when understood in the context of template usage. This structured approach will ensure you grasp the full potential of templates and their associated features in Zabbix.</p> <p>By the end of this chapter, you'll be well versed in both using and creating templates, equipped to enhance your monitoring setup and contribute to the broader Zabbix ecosystem.</p>"},{"location":"ch06-zabbix-templates/templates/","title":"Working with templates","text":"<p>Templates are one of the most fundamental building blocks in Zabbix. They define what and how to monitor, and serve as reusable configuration blueprints that can be applied to any number of hosts. By grouping related items, triggers, graphs, discovery rules, and macros into a single logical entity, templates make it possible to standardize and scale monitoring efficiently.</p> <p>Zabbix 8.0 emphasizes a monolithic, self contained design. While template linking is still supported for compatibility, the recommended approach is to use standalone templates for simplicity and portability. A deliberate departure from the older inheritance based approach. used in previous versions. This design philosophy makes templates easier to export, share, and maintain, especially when managing multiple environments or distributing monitoring logic across teams.</p> Fun fact <p>In earlier releases such as Zabbix 3.0, there were only around 30\u201340 built-in templates available out of the box. In contrast, Zabbix 8.0 ships with hundreds of official templates and integrations, covering everything from operating systems and databases to cloud platforms and network devices. This dramatic growth highlights how Zabbix has evolved into a full-featured monitoring ecosystem with native support for nearly any technology stack.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-fundamentals","title":"Template Fundamentals","text":"<p>A template in Zabbix encapsulates all the elements required to monitor a specific technology or system. This can range from a simple operating system agent to a complex multi-layer application such as PostgreSQL, VMware, or Kubernetes.</p> <p>Each template can include:</p> <ul> <li>Items: definitions of data to collect (e.g., system.cpu.load, vfs.fs.size[/,free]).</li> <li>Triggers: logical expressions that evaluate collected data to identify problem   conditions.</li> <li>Graphs: visual representations of collected metrics.</li> <li>Discovery Rules: automated mechanisms to detect entities (like filesystems   or interfaces) and dynamically create item prototypes.</li> <li>Value Maps: mappings that translate raw data into human-readable text.</li> <li>Macros: reusable variables that make templates configurable and environment   agnostic.</li> <li>Tags: metadata used for filtering, correlation, and alert routing.</li> <li>Dashboards: predefined visualization layouts attached to the template.</li> </ul> <p>Templates are linked to hosts to apply these monitoring definitions. Once linked, the host immediately inherits all monitoring logic from the template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#the-monolithic-template-model","title":"The Monolithic Template Model","text":"<p>Before Zabbix 6.x, templates could be built hierarchically, using inheritance between parent and child templates. While powerful, this approach often led to dependency complexity, version mismatches, and export/import challenges.</p> <p>Starting with Zabbix 6.4 and refined in 7.x, the preferred design is monolithic templates meaning each template is self contained and does not rely on inheritance. This makes templates easier to:</p> <ul> <li>Export and share as standalone YAML files.</li> <li>Version control in Git or CI/CD environments.</li> <li>Import without dependency conflicts.</li> </ul> <p>Monolithic templates are also simpler to maintain, as all configuration elements are defined within one object, avoiding the \u201ctemplate chain\u201d problem where one missing dependency breaks the import process.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-uuids","title":"Template UUIDs","text":"<p>Starting with Zabbix 6.2, every configuration entity, including templates, is assigned a Universally Unique Identifier (UUID). This fundamentally changed how Zabbix tracks and synchronizes configuration objects across different environments.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-of-uuids","title":"Purpose of UUIDs","text":"<p>Before UUIDs were introduced, Zabbix relied on template names to identify and match templates during import/export. This created issues when two templates had identical names or when renaming templates between environments.</p> <p>UUIDs solve this problem by providing a persistent, globally unique reference for each template, independent of its name or internal database ID.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#benefits","title":"Benefits","text":"<ul> <li>Reliable synchronization: Imports and updates use the UUID, preventing duplication   and mismatched merges.</li> <li>Conflict prevention: Avoids overwriting templates with the same name.</li> <li>Version-control stability: Git-based workflows can track the same object   across environments.</li> <li>Improved automation: APIs and pipelines can safely address templates by UUID   rather than numeric IDs.</li> </ul> <p>Example YAML template:</p> <pre><code>zabbix_export:\n  version: '8.0'\n  templates:\n    - uuid: a4c1d0f2d7de4a40a8b347afeb9a88df\n      template: 'Template OS Rocky Linux'\n      groups:\n        - name: 'Templates/Operating Systems/Linux'\n      items:\n        - uuid: f0c1b836c81d4bba9419dc12bce7e411\n          name: 'System uptime'\n          key: 'system.uptime'\n          type: ZABBIX_AGENT\n</code></pre> Behavior and Persistence <p>The UUID remains constant even if the template is renamed or moved between groups. However, when a template is cloned or copied, Zabbix generates new UUIDs for the template and all of its entities. This ensures the cloned template is treated as a distinct object and does not conflict with the original during import, export, or API synchronization.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#what-happens-when-you-clone-a-template","title":"What Happens When You Clone a Template","text":"<p>When you clone or copy a template (for example, to customize it), Zabbix creates a completely new object. All nested entities like items, triggers, discovery rules, dashboards, etc. will receive new UUIDs.</p> <p>This means your cloned template is independent:</p> <ul> <li>It will not overwrite the original during imports.</li> <li>It can coexist safely even if it has a similar name.</li> <li>It is ideal for creating customized variants of official templates.</li> </ul> Note <p>If you manually remove or alter UUIDs in the YAML file, Zabbix treats it as a new object on import.</p> Best practice <p>Add a suffix or prefix such as (Custom) to distinguish cloned templates and document their origin in the template notes like: - Origin: Linux by Zabbix agent - Based on UUID: a4c1d0f2d7de4a40a8b347afeb9a88df</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-groups","title":"Template Groups","text":"<p>Template groups in Zabbix are used for <code>organization</code> and <code>access control targeting</code>. They provide a logical way to categorize templates (for example, Operating Systems, Databases, Network Devices), but they do not themselves define access rights.</p> <p>A template group itself does not carry permissions. Instead, <code>user groups</code> are granted <code>permissions</code> on <code>template groups</code>. These permissions determine whether members of a user group can view (read-only) or modify (read-write) the templates contained within those groups when working in the frontend.</p> <p>In other words:</p> <ul> <li>Template groups: organize and classify templates.</li> <li>User groups: hold the permissions that control access to those template groups.</li> </ul> <p>This model provides flexible role based access control (RBAC): administrators can manage access centrally by assigning or revoking permissions for user groups rather than editing individual templates.</p> <p>If you like to make a new template group then they can be found under <code>Data collection</code> \u2192 <code>Host groups</code> \u2192 <code>Create template group</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#permissions-and-access-control","title":"Permissions and Access Control","text":"<p>In Zabbix 8.0, access to templates is controlled by a combination of <code>user roles</code> and <code>usergroup</code> permissions.</p> <ul> <li>Roles define what actions a user can perform globally. Such as viewing problems,   acknowledging events, or modifying configuration.</li> <li>User groups: define which objects the role can act on by granting <code>Read-only   (RO)</code> or <code>Read-write (RW)</code> permissions to specific object groups (host groups,   template groups, map groups, etc.).</li> <li>Template groups are simply one of those object groups: a scope to which permissions   can be applied.</li> </ul> <p>For example, a user role may allow configuration changes, but the user will only be able to modify templates that belong to template groups where their user group has RW access.</p> <p>This separation provides precise control between what actions are allowed and where they are allowed.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#impact-of-template-permissions","title":"Impact of template permissions","text":"<p>Although template group permissions primarily govern configuration access, they can also influence operational behavior in the frontend. When users view or interact with problems, their ability to take certain actions depends both on their role and their permissions for the underlying host or template.</p> Action Read-only (RO) Read-write (RW) Acknowledge problem \u2705 \u2705 Add comment / update status \u2705 \u2705 Suppress problem \u2705 \u2705 Change problem severity \u274c \u2705 Manually close problem \u274c \u2705 Modify trigger severity \u274c \u2705 Edit or link templates \u274c \u2705 Tip <p>Read-only users can acknowledge or suppress issues but cannot change severity or manually close problems.</p> <p>As an example in Zabbix:</p> <p>Consider two distinct user groups with different roles and permissions:</p> <ul> <li>Operations (RO): Members can view hosts and problems, acknowledge or suppress   issues, but cannot change severity levels or modify triggers.</li> <li>Monitoring Admins (RW): Members can edit templates, adjust trigger logic,   and manually close problems.</li> </ul> <p>If both groups monitor hosts that use templates from Templates/Applications/Databases:</p> <ul> <li>Operations: can acknowledge and suppress problems as part of daily triage.</li> <li>Monitoring Admins: can modify or tune the underlying template configuration   when a systemic issue is detected.</li> </ul> <p>This segregation maintains stability. Operations staff can handle incidents, while admins manage definitions.</p> Note <p>Template group permissions control configuration visibility, but operational access (to data and problems) still depends on host group permissions.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#permissions-and-roles-how-access-really-works","title":"Permissions and Roles \u2013 How Access Really Works","text":"<p>Zabbix enforces permissions through user groups and roles, not through inheritance between objects. There is no automatic propagation of permissions from template groups to host groups or between templates and the hosts that use them.</p> <ul> <li>Roles determine what actions users may perform (view, edit, acknowledge,   configure, etc.).</li> <li>User groups determine where those actions may occur by assigning RO/RW/Deny   rights on object groups.</li> <li>Template groups and host groups are independent targets. A user with RW access   to a host group does not automatically gain rights to the related template group,   and vice versa.</li> </ul> <p>This clear separation ensures operational access (hosts) and configuration access (templates) remain distinct, preventing unintended modifications.</p> Note <p>Roles (user, admin and super admin) define what you can do. Usergroup permissions define where you can do it.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#best-practices-for-permissions","title":"Best Practices for Permissions","text":"<ul> <li>Separate operational and design access: Grant RO rights to operations teams   for monitoring, and RW rights to administrators maintaining templates.</li> <li>Align permissions logically: If a user group manages database hosts, grant   them RW access to both the relevant host groups and the corresponding <code>Templates/Databases</code>   group.</li> <li>Review permissions regularly: Periodically audit usergroup assignments to   ensure only authorized teams have configuration privileges.</li> <li>Use clear naming conventions for groups: Distinguish functional scopes (Templates/OS/Linux)   from organizational ones (Templates/Customers/Prod). This improves clarity when   assigning permissions in large environments.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-subgroups","title":"Template Subgroups","text":"<p>Zabbix 3.2 introduced nested template groups (subgroups), enabling a hierarchical structure similar to host groups. Subgroups allow administrators to build organized, multi-level collections of templates, which improves navigation and permission granularity.</p> <p>Subgroups are created in Zabbix by adding a <code>/</code> in the group names. For example if we want to create a group <code>Databases</code> as a subgroup of <code>Templates</code> then we only need to create the new group like this: <code>Templates/Databases</code>. However it's recommended to create <code>Templates</code> first.</p> <p>Example hierarchy:</p> <pre><code>Templates\n\u251c\u2500\u2500 Operating Systems\n\u2502   \u251c\u2500\u2500 Linux\n\u2502   \u251c\u2500\u2500 Windows\n\u2502   \u2514\u2500\u2500 Network Appliances\n\u2514\u2500\u2500 Applications\n    \u251c\u2500\u2500 Databases\n    \u2502   \u251c\u2500\u2500 PostgreSQL\n    \u2502   \u251c\u2500\u2500 MySQL\n    \u2502   \u2514\u2500\u2500 Oracle\n    \u2514\u2500\u2500 Web Servers\n</code></pre> <ul> <li>Hierarchy for organization and permissions only: Subgroups do not change how   templates link to hosts; they are purely structural.</li> <li>Automatic downward inheritance: If a user group has RW or RO access to a   parent template group, that access automatically extends to all its existing   subgroups. You can still assign explicit permissions on individual subgroups   to override inherited rights.</li> <li>Parent-creation edge case: When you create a new parent group for an already   existing subgroup (for example, creating Applications when Applications/Databases   already exists), no permissions are automatically assigned to the new parent.   Administrators must manually grant permissions on the parent group if required.</li> <li>Search and filtering benefits: The hierarchical view makes it easier to locate   and manage templates in large environments.</li> <li>Consistency with host groups: Subgroup behavior and inheritance are identical   for host groups and template groups, providing a uniform organizational model.</li> </ul> Tip <p>Use top-level groups for broad classifications (e.g., Templates/Applications) and subgroups for vendor or technology specialization. Assign RW rights at the top level for global administrators, and finer-grained access on subgroups for specialized teams.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#tags","title":"Tags","text":"<p>Tags are metadata elements used throughout Zabbix for event classification, filtering, correlation, and alert routing. They attach semantic meaning to triggers, items, or templates, helping to describe what the metric or event represents.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Tags</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-of-tags","title":"Purpose of Tags","text":"<ul> <li>Event correlation: tags are used by the event correlation engine to match   or suppress related problems.</li> <li>Alerting and automation: tags appear in actions, allowing conditional notifications   or escalations.</li> <li>Service mapping: tags link triggers and events to defined business services.</li> <li>Filtering: dashboards, reports, and API queries can filter by tag values.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#examples","title":"Examples","text":"<p>For a PostgreSQL database template: <pre><code>service: database\ncomponent: backend\n</code></pre></p> <p>For a network device template: <pre><code>vendor: cisco\ninterface: uplink\n</code></pre></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-to-consider","title":"Some good practices to consider","text":"<ul> <li>Use consistent naming for tag keys across templates (e.g., service, component,   role).</li> <li>Avoid over tagging; focus on attributes useful for filtering or alerting.</li> <li>Use lower case, underscore separated keys for uniformity.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#tag-inheritance-and-merging-behavior","title":"Tag Inheritance and Merging Behavior","text":"<p>When templates are linked to hosts and hosts or items already define their own tags \u2014 Zabbix merges all tag sources into a single event level tag set. Understanding this inheritance order is crucial for predictable alerting and correlation.</p> <pre><code>flowchart TB\n  %% --- TEMPLATED ENTITIES PATH (vertical) ---\n  subgraph TEMPLATED[\"Templated entities\"]\n    direction TB\n    TPL[\"Template tags:\nservice=database\ncomponent=backend\"]\n    H_TPL[\"Host tags (applied to templated entities):\nregion=europe\nenv=prod\"]\n    TPL_TRIG[\"Template trigger tags:\nseverity=high\"]\n    TPL_ITEM[\"Template item tags:\ncomponent=replication\"]\n    EV1[\"Event (templated trigger)\nMerged tags:\nservice=database\ncomponent=backend\ncomponent=replication\nseverity=high\nregion=europe\nenv=prod\"]\n    TPL --&gt; H_TPL --&gt; TPL_TRIG --&gt; TPL_ITEM --&gt; EV1\n  end\n\n  %% --- LOCAL ENTITIES PATH (vertical) ---\n  subgraph LOCAL[\"Local entities (on Host)\"]\n    direction TB\n    H_LOC[\"Host tags (local entities):\nsite=be-brussels\nteam=ops\"]\n    LOC_TRIG[\"Local trigger tags:\nclass=local\"]\n    LOC_ITEM[\"Local item tags:\nsensor=temp\"]\n    EV2[\"Event (local trigger)\nMerged tags:\nsite=be-brussels\nteam=ops\nclass=local\nsensor=temp\"]\n    H_LOC --&gt; LOC_TRIG --&gt; LOC_ITEM --&gt; EV2\n  end\n</code></pre> <p>Interpretation:</p> <p>Zabbix merges tags from top to bottom. Template level tags are the most general, while item level tags are the most specific. All resulting tags flow into the generated event.</p> <p>Inheritance Order explained:</p> <ol> <li>Item-level tags \u2192 applied directly to collected metrics (most specific).</li> <li>Trigger-level tags \u2192 apply to problems generated by the trigger.</li> <li>Host-level tags \u2192 inherited only by items and triggers that originate from    linked templates on that host (they do not apply automatically to locally    defined host items/triggers).</li> <li>Template-level tags \u2192 base tags from all linked templates.</li> </ol> <p>The final event inherits all tags from these levels, with duplicates automatically removed.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#conflict-handling","title":"Conflict Handling","text":"<ul> <li>If the same tag key appears multiple times with different values, all values are   kept.</li> <li>Duplicate key\u2013value pairs are deduplicated.</li> <li>Tags are additive, not overridden. Unlinking or clearing a template removes only   that template\u2019s tags from future events.</li> </ul> <p>Example :</p> Source Tag Key Tag Value Linux by Zabbix agent <code>service</code> <code>os</code> PostgreSQL by Zabbix agent 2 <code>service</code> <code>database</code> Host <code>region</code> <code>europe</code> Item <code>component</code> <code>replication</code> <p>The resulting event tags will be: <pre><code>service: os\nservice: database\nregion: europe\ncomponent: replication\n</code></pre></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-when-tagging","title":"Some good practices when tagging","text":"<ul> <li>Keep template level tags generic (e.g., service: database).</li> <li>Use host level tags for environmental context (e.g., region: europe, customer:   acme).</li> <li>Apply item/trigger-level tags for event specificity (component: disk, component:   replication).</li> <li>Regularly audit merged event tags under Monitoring \u2192 Problems \u2192 Tags to verify   inheritance behavior.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-macros","title":"Template macros","text":"<p>Macros are variables that make templates flexible and reusable. They define thresholds, credentials, or paths that can be adjusted per environment without editing template logic.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Macros</code></p> <p></p> <p>Example:</p> <pre><code>{$CPU_UTIL_MAX}=90\n{$MEMORY_WARN}=75\n</code></pre> <p>Macros can be defined globally, at the template level, host-group level, or host level, and can be overridden according to a strict precedence order.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#macro-precedence-and-conflict-resolution","title":"Macro Precedence and Conflict Resolution","text":"<p>When multiple templates linked to the same host define the same macro, Zabbix resolves conflicts by comparing template IDs.</p> <p>:warning: The macro from the template with the lowest template ID takes precedence.</p> <p>Example:</p> Template Name Template ID Macro Value Template OS Linux 10101 <code>{$CPU_UTIL_MAX}</code> 85 Template App PostgreSQL 10115 <code>{$CPU_UTIL_MAX}</code> 90 <p>\u2192 The oldest template (lowest ID) wins \u2192 {$CPU_UTIL_MAX}=85.</p> <p>Precedence Hierarchy:</p> Level Description Notes 1. Host macro Defined on host Highest priority 2. Template macro Lowest template ID wins if duplicate Applies to linked templates 3. Global macro Default fallback Lowest priority","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices","title":"Some good practices","text":"<ul> <li>Keep macro names unique within template families.</li> <li>Use host-level overrides for environment-specific adjustments.</li> <li>Document shared macros to prevent conflicts.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#value-maps","title":"Value Maps","text":"<p>Value maps convert raw numeric or coded values into meaningful, human readable text. They make dashboards, triggers, and data views more intuitive. For example, turning SNMP status codes like 1, 2, 3 into Up, Down, Unknown.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Template</code> \u2192 <code>Value maps</code></p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#scope-and-availability","title":"Scope and Availability","text":"<p>Value maps exist in two distinct scopes in Zabbix 8:</p> Scope Created In Can Be Used By Shared With Template-level value map Inside a template definition Items belonging to that same template \u274c Not accessible from other templates or hosts Host-level value map Directly on a specific host Items defined directly on that host \u274c Not accessible by other hosts or templates Note <p>There is no such thing as a global value map. Each map is strictly local to its parent template or host. To reuse a map elsewhere, you must export/import or recreate it under the new object.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#types-of-mappings","title":"Types of Mappings","text":"<p>A value map can contain one or more mapping rules, which determine how an incoming raw value is translated.</p> <p>Zabbix 8 supports the following mapping rule types:</p> Mapping Type Description Example Exact value One-to-one translation of a specific value <code>1 \u2192 Up</code>, <code>2 \u2192 Down</code>, <code>3 \u2192 Unknown</code> Range mapping Applies to any value within a range <code>0\u201349 \u2192 Normal</code>, <code>50\u201379 \u2192 Warning</code>, <code>80\u2013100 \u2192 Critical</code> Pattern (regex) Matches values by regular expression <code>^ERR.* \u2192 Error detected</code> Default value Fallback if no other rule matches <code>* \u2192 Undefined</code> <p>Mappings are evaluated from top to bottom \u2014 the first match wins.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-template-level-value-map","title":"Example: Template-Level Value Map","text":"<p>In a custom Template Network Switch, you might define:</p> Raw value Mapped text 1 Interface Up 2 Interface Down 3 Interface Testing * Unknown State <p>Items inside the template that return SNMP interface status (ifOperStatus) can reference this value map directly.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-host-level-value-map","title":"Example: Host-Level Value Map","text":"<p>For a specific host, e.g. Switch A, you might define:</p> Raw value Mapped text 1 Operational 2 Non-operational <p>Only items defined directly on Switch A (not inherited from a template) can use this map. If the same host a template is applied, that host will use the template\u2019s value map instead of the host-level one for items from the template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices-for-value-maps","title":"Some good practices for value maps","text":"<ul> <li>Keep template level value maps technology specific (e.g. SNMP interface, SMART   disk status).</li> <li>Define host level maps only when customization is necessary for that device.</li> <li>Maintain consistent naming conventions (Interface Status, Disk Health) across   templates to simplify export/import.</li> <li>If multiple templates require the same mapping logic, simply define identical   value maps within each template. Zabbix does not provide cross-template sharing,   so each template must contain its own copy of the map definition.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-dashboards","title":"Template Dashboards","text":"<p>Template dashboards allow you to attach pre-designed visual dashboards directly to a template. When the template is linked to a host, Zabbix automatically creates a host-specific dashboard instance based on that template. This makes it possible to provide consistent visualizations for every host or application without manually building dashboards for each one.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#where-to-find-template-dashboards","title":"Where to Find Template Dashboards","text":"<p>Template dashboards can be accessed and edited under:</p> <p><code>Data collection \u2192 Templates \u2192 [select template] \u2192 Dashboards tab</code></p> <p>Each template may include one or more dashboards. When a host is linked to a template containing a dashboard, that dashboard appears automatically under:</p> <p><code>Monitoring \u2192 Hosts \u2192 [select host] \u2192 Dashboards tab</code></p> <p>This dashboard is generated dynamically for the selected host, showing metrics and graphs populated with that host\u2019s data.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#purpose-and-use-cases","title":"Purpose and Use Cases","text":"<p>Template dashboards are most useful for application-level or host-specific visualization. They provide a structured, ready-to-use view tailored to the technology being monitored.</p> <p>Typical Use Cases:</p> <ul> <li>Application dashboards:<ul> <li>A Template App PostgreSQL can include charts for query throughput, buffer   cache hit ratio, replication delay, and trigger problem widgets.</li> <li>When linked, each database instance automatically gains its own PostgreSQL   performance dashboard.</li> </ul> </li> <li>Operating system dashboards:<ul> <li>Template OS Linux may display CPU load, memory utilization, filesystem usage,   and system uptime widgets.</li> </ul> </li> <li>Network device dashboards:<ul> <li>Template Net Cisco SNMP could show interface bandwidth, packet errors, and   uptime.</li> </ul> </li> </ul> <p>These dashboards ensure consistent presentation and help operators quickly understand the health of any host using that template.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#dashboard-components","title":"Dashboard Components","text":"<p>Template dashboards support the same widget types as user dashboards, including:</p> Category Widget Examples Purpose Data visualization Graphs, time series, top N Show trends and metric comparisons Status views Problems, Item values, SLA widgets Real-time status per host/application Service overview Business service state, SLA Map triggers to service impact Layout elements Text, maps, URL embeds Add context, documentation, or external views <p>Each widget automatically substitutes host-specific data when rendered under <code>Monitoring</code> \u2192 <code>Hosts</code> \u2192 <code>Dashboards</code>. No manual host configuration is required.</p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices_1","title":"Some Good Practices","text":"<ul> <li>Keep dashboards concise: Focus on the key health indicators of that application   or system.</li> <li>Leverage macros: Use template macros (e.g., {$PG.DBNAME}) inside widgets   to make them adaptive across instances.</li> <li>Group widgets logically: Use grid layout \u2014 metrics at top, triggers below,   historical trends on the side.</li> <li>Document context: Include a Text widget describing what each graph shows   or what thresholds mean.</li> <li>Use template dashboards: for \u201cper-instance\u201d visibility, and user dashboards   for multi-host or environment-wide overviews.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#example-template-app-postgresql","title":"Example: Template App PostgreSQL","text":"<p>A typical Template App PostgreSQL dashboard might include:</p> Widget Description Graph PostgreSQL transactions per second Graph Replication lag in seconds Item Value Cache hit ratio (<code>pg.stat.cache.hit</code>) Problem Widget Current trigger status for this instance Text Widget Notes: tuning guide, connection info, etc. <p>Once the template is linked to hosts db01, db02, and db03, Zabbix automatically renders three dashboards, each showing real metrics for its respective instance.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#advantages-of-template-dashboards","title":"Advantages of Template Dashboards","text":"<ul> <li>Consistency: every host or application gets the same visualization standard.</li> <li>Zero manual setup: dashboards appear automatically on linking.</li> <li>Version control: dashboards are stored inside templates and follow the same   YAML export/import flow.</li> <li>Maintainability: when you update a template dashboard, all hosts using that   template receive the new version automatically.</li> <li>Scalability: ideal for large environments \u2014 one dashboard design scales to   hundreds of hosts.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#template-management-operations","title":"Template Management Operations","text":"<p>Template management in Zabbix 8.0 offers multiple actions for maintaining, cloning, cleaning, and synchronizing templates efficiently.</p> <p>These operations are accessible under:</p> <p><code>Data collection \u2192 Hosts</code> on the host itself.</p> <p></p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#unlink-vs-unlink-and-clear","title":"Unlink vs. Unlink and Clear","text":"<ul> <li> <p>Unlink: Detaches the template from a host but retains all inherited items,   triggers, and discovery rules on the host.</p> </li> <li> <p>Unlink and Clear: Removes the template and deletes all entities that originated   from it (items, triggers, graphs, and discoveries).</p> </li> </ul> <p>Use Unlink to preserve historical data, and Unlink and Clear when you need to remove the monitoring logic completely.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#clone","title":"Clone","text":"<p>The <code>clone</code> button creates an exact copy of an existing template, including all items, triggers, dashboards, macros, and value maps. Every entity within the clone receives a new UUID, ensuring full independence from the original.</p> <p><code>Data collection</code> \u2192 <code>Templates</code> on the template itself.</p> <p></p> <p>Example:</p> <p><code>Template OS Linux \u2192 Clone \u2192 Template OS Rocky Linux (Custom)</code></p> Tip <p>Always rename cloned templates immediately to reflect their intended purpose or environment as we discussed before.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#delete-vs-delete-and-clear","title":"Delete vs. Delete and Clear","text":"<ul> <li>Delete: Removes the template definition but leaves all items and triggers   (now orphaned) on linked hosts.</li> <li>Delete and Clear: Deletes both the template and any entities created on   linked hosts.</li> </ul> <p>When performing cleanup or migration, Delete and Clear ensures no residual items remain in configuration cache.</p> Warning <p>Deletes happen immediately so there is no undo. Also deletes are performed on the database immediately so a large scale delete could have a serious performance impact.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#mass-update-of-templates","title":"Mass Update of Templates","text":"<p>Zabbix 8 provides a Mass update feature to modify multiple templates simultaneously. This is available via:</p> <p><code>Data collection \u2192 Templates \u2192 Mass update</code></p> <p>It\u2019s particularly useful for enforcing consistent macro values, tags, or template group structures across many templates.</p> Category Examples of Updatable Fields General Template groups, name, description, tags Macros Add, update, or remove template-level macros Discovery rules Adjust update intervals or filter expressions Dashboards Replace or refresh template dashboards Permissions Move templates between groups (changes RBAC context)","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#behavior-and-cautions","title":"Behavior and Cautions","text":"<ul> <li>Only the properties you select are overwritten.</li> <li>Existing macros or tags with identical names are replaced.</li> <li>Changes apply immediately; no rollback is available.</li> <li>When moving templates to a different group, verify that related user groups have   the proper permissions on that target group.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#some-good-practices_2","title":"Some Good Practices","text":"<ul> <li>Use mass update for homogeneous template sets (for example, all OS templates or   all network device templates).</li> <li>For larger or version-controlled environments, rely on YAML export/import through   Git or CI/CD to ensure traceability and change control.</li> <li>Always test mass updates on a staging instance before production rollout.</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#importing-and-exporting-templates","title":"Importing and Exporting Templates","text":"<p>Templates can be imported or exported in both YAML, JSON and XML formats, although YAML is strongly preferred for readability and version control. It is also the standard now in Zabbix.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#exporting","title":"Exporting","text":"<p>Navigate to <code>Data collection</code> \u2192 <code>Templates</code> \u2192 <code>Select Your Template(s)</code> \u2192 <code>Export</code>, then select <code>YAML</code>.</p> <p></p> <p>A typical export looks like:</p> <pre><code>zabbix_export:\n  version: '8.0'\n  templates:\n    - uuid: a4c1d0f2d7de4a40a8b347afeb9a88df\n      template: 'Template OS Rocky Linux'\n      groups:\n        - name: 'Templates/Operating Systems/Linux'\n      macros:\n        - macro: '{$CPU_UTIL_MAX}'\n          value: '90'\n      items:\n        - name: 'System uptime'\n          key: 'system.uptime'\n          type: ZABBIX_AGENT\n</code></pre>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#importing-templates","title":"Importing Templates","text":"<p>The import process in Zabbix 8.0  is intelligent \u2014 it compares UUIDs, detects differences, and optionally merges or removes entities. You can import templates via:</p> <p><code>Data collection \u2192 Templates \u2192 Import</code></p> <p>The button is on the upper right side of your window.</p> <p></p> <p>Zabbix supports both <code>YAML</code> <code>JSON and</code>XML`, though YAML is preferred due to its readability and UUID retention.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#import-options-and-their-effects","title":"Import Options and Their Effects","text":"<p>When importing a template, the import dialog presents several options that determine how conflicts and differences are handled:</p> Option Description Behavior Create new Import entities that do not exist yet New templates and their entities are created Update existing Update entities that already exist based on matching UUIDs Existing templates are modified to match the import file Delete missing Remove entities that exist in Zabbix but not in the import file Entities absent from the import are deleted Replace existing template Forcefully overwrite all existing definitions Full replacement, including dashboards and discovery rules","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#uuid-based-matching","title":"UUID-Based Matching","text":"<p>Starting with Zabbix 6.2, template imports rely primarily on UUIDs, not names, for matching.</p> <ul> <li>If the UUID exists, Zabbix updates that object \u2014 even if the name differs.</li> <li>If no UUID matches, Zabbix treats the object as new and creates it.</li> <li>If an object shares the same name but has a different UUID, it is treated as   a different entity \u2014 no merge occurs.</li> </ul> Tip <p>When re-importing from version-controlled YAML, always keep original UUIDs intact. Editing or regenerating them will cause duplicates rather than updates.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#diff-visualization","title":"Diff Visualization","text":"<p>Before confirming an import, Zabbix displays a visual diff screen showing what will change. This interface uses color coding to illustrate modifications at a granular level:</p> Color Meaning \ud83d\udfe9 Green Elements that will be added or new attribute values \ud83d\udfe5 Red Elements that will be removed or replaced <p>Zabbix compares entities by UUID and lists each difference per category, items, triggers, graphs, macros, value maps, discovery rules, and dashboards. Modified objects show their old values in red and new values in green, providing a clear preview of all pending changes.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#update-existing-behavior","title":"\u201cUpdate Existing\u201d Behavior","text":"<p>When Update existing is enabled:</p> <ul> <li>Entities with matching UUIDs are updated.</li> <li>Entities not in the import remain unchanged unless Delete missing is also checked.</li> <li>Template-level fields (name, groups, description, macros, dashboards) are replaced   by those from the import.</li> </ul> <p>This mode is ideal for incremental updates or synchronization with a Git-tracked source.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#delete-missing-behavior","title":"\u201cDelete Missing\u201d Behavior","text":"<p>With Delete missing enabled, Zabbix removes any element present in the database but absent in the import file:</p> <ul> <li>Items, triggers, discovery rules, graphs, dashboards, and value maps</li> <li>Orphaned macros and outdated entities</li> </ul> Warning <p>This action is destructive. It permanently removes definitions and historical associations. Use only when performing full synchronization from version-controlled sources or replacing obsolete templates.</p> <p>When both Update existing and Delete missing are checked, the import performs a full sync. The resulting template will exactly match the import file.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#error-handling","title":"Error Handling","text":"<p>Zabbix validates all entities before applying the import. If inconsistencies are found, the import halts and reports detailed errors, such as:</p> <ul> <li>Missing referenced value maps or linked templates</li> <li>Invalid macro names or syntax</li> <li>Circular template linkage</li> <li>Version mismatches between export and server</li> </ul> <p>The error list shows affected entity names, allowing quick correction and re-import.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#safe-import-workflow","title":"Safe Import Workflow","text":"<p>For production grade environments:</p> <ul> <li>Export first: always back up current templates.</li> <li>Validate syntax: use yamllint or JSON validators.<ul> <li>yamllint template.yaml</li> <li>jq empty template.json</li> </ul> </li> <li>Preview diff: check additions (green) and deletions (red).</li> <li>Test in staging: confirm behavior before production import.</li> <li>Promote via automation: use the Zabbix API (configuration.import) for reproducible   CI/CD deployments.</li> </ul> <p>???+ tip</p> <pre><code>  Automating template synchronization via API and Git ensures identical configurations\n  across multiple Zabbix servers or environments.\n</code></pre>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#conclusion","title":"Conclusion","text":"<p>Templates in Zabbix 8.0 are now fully self-contained, UUID-tracked, and automation  ready. With improved import/export handling, color-coded diffs, and fine-grained RBAC, they deliver both control and scalability.</p> <p>By following some good practices, cloning instead of editing <code>built-ins</code>, organizing templates by group and tag, tuning intervals, maintaining YAML or JSON in Git, and verifying diffs before import, administrators achieve consistent, predictable monitoring deployments.</p> <p>Templates are no longer mere configuration helpers; they are core assets in a modern observability strategy, enabling reproducible, automated, and standards driven monitoring across diverse infrastructures.</p>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#questions","title":"Questions","text":"<ul> <li>What are the main configuration elements a Zabbix template can contain, and how do they contribute to standardizing monitoring?</li> <li>Explain what happens to UUIDs when a template is cloned.</li> <li>Why is it important to preserve UUIDs when managing templates through YAML or Git?</li> <li>Describe how tags are inherited when a template is applied to a host.</li> <li>Which tags take precedence if both the host and the template define the same key?</li> <li>Why can't a template-level value map be used by local host items?</li> </ul>","tags":["advanced"]},{"location":"ch06-zabbix-templates/templates/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/current/en/manual/config/templates</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/items/mapping</li> <li>https://www.zabbix.com/documentation/current/en/manual/config/templates/template</li> <li>https://www.zabbix.com/documentation/current/en/manual/xml_export_import</li> <li>https://git.zabbix.com/repos?visibility=public</li> <li>https://jsonpathfinder.com/</li> <li>https://www.yamllint.com/</li> </ul>","tags":["advanced"]},{"location":"ch07-zabbix-alerts/actions/","title":"Actions","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#conclusion","title":"Conclusion","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#questions","title":"Questions","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/actions/#useful-urls","title":"Useful URLs","text":"","tags":["expert"]},{"location":"ch07-zabbix-alerts/chapter/","title":"Sending out alerts with Zabbix","text":"<p>After delving into templates, it's time to return to the data flow and bring everything together by exploring integrations with powerful external services. In this chapter, we\u2019ll complete the data flow journey, showing how to extend Zabbix capabilities through seamless connections with third-party tools and platforms.</p> <p>We'll guide you through setting up integrations that enhance your monitoring system, covering various use cases from alerting to data visualization and automation. By integrating Zabbix with external services, you'll unlock new levels of functionality, making your monitoring setup more dynamic and adaptable.</p> <p>By the end, you'll have a well-rounded understanding of how to fully utilize Zabbix data flow, augmented by strategic integrations that add value to your infrastructure management.</p>"},{"location":"ch07-zabbix-alerts/media-types/","title":"Media types","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#questions","title":"Questions","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/media-types/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch07-zabbix-alerts/scripts/","title":"Scripts","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#conclusion","title":"Conclusion","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#questions","title":"Questions","text":"","tags":["advanced","expert"]},{"location":"ch07-zabbix-alerts/scripts/#useful-urls","title":"Useful URLs","text":"","tags":["advanced","expert"]},{"location":"ch08-zabbix-lld/chapter/","title":"Using Low level discovery to automate","text":"<p>In this chapter, we'll dive into Low-Level Discovery (LLD), covering everything there is to know about this powerful feature in Zabbix. LLD automates the creation of hosts, items, triggers, and more, simplifying the management of large and dynamic environments.</p> <p>We'll also explain how to work with custom JSON in the context of LLD, showing you how to tailor discovery rules to fit your unique needs. By mastering these techniques, you'll be able to create highly adaptable monitoring setups that respond to changes in your infrastructure with minimal manual intervention.</p> <p>By the end of this chapter, you'll have a deep understanding of LLD, from basic concepts to advanced customization, enabling you to leverage its full potential in your Zabbix deployment.</p>"},{"location":"ch08-zabbix-lld/custom/","title":"Custom Low Level Discovery","text":"<p>Zabbix's Low-Level Discovery (LLD) plays a crucial role in dynamically detecting and managing monitored entities. While Zabbix provides built-in discovery rules, real-world environments often demand more flexibility and customization.</p> <p>In this chapter, we will explore custom LLD techniques, allowing you to create powerful, tailored discovery mechanisms that go beyond standard templates. You'll learn how to use scripts and custom rules to automatically detect and monitor services, network interfaces, and other dynamic components within your infrastructure.</p> <p>Whether you're monitoring cloud environments, network devices, or application-specific metrics, mastering custom LLD will help you reduce manual work, improve accuracy, and scale your monitoring effortlessly. Let\u2019s dive in!</p> Note <p>For this chapter we start with a working system with a proper configured agent in passive mode. If you have no clue how to do this go back to chapter 01.</p> <p>Zabbix Low-Level Discovery (LLD) provides a dynamic mechanism for automatically creating monitoring elements based on discovered entities within your infrastructure.</p> <p>Core Functionality :</p> <p>LLD enables Zabbix to detect changes in your environment and create corresponding items, triggers, and graphs without manual intervention. This automation is particularly valuable when monitoring elements with fluctuating quantities or identifiers.</p> <p>Discovery Targets: The discovery process can identify and monitor various system components including:</p> <ul> <li>File systems</li> <li>CPUs</li> <li>CPU cores</li> <li>Network interfaces</li> <li>SNMP OIDs</li> <li>JMX objects</li> <li>Windows services</li> <li>Systemd services</li> <li>Host interfaces</li> <li>Anything based on custom scripts</li> </ul> <p>Through LLD, administrators can implement scalable monitoring solutions that automatically adapt to infrastructure changes without requiring constant template modifications.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#implementing-low-level-discovery-in-zabbix","title":"Implementing Low-Level Discovery in Zabbix","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#the-challenge-of-manual-configuration","title":"The Challenge of Manual Configuration","text":"<p>We could manually create each item but this would be a very time-consuming task and impossible to manage in large environments. To enable automatic discovery of our items or entities, we need discovery rules.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#discovery-rules","title":"Discovery Rules","text":"<p>These rules send the necessary data to Zabbix for our discovery process. There  is no limit to the various methods we can employ, the only requirement is that the end result must be formatted in JSON. This output information is crucial as it forms the foundation for creating our items.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#prototypes-and-automation","title":"Prototypes and Automation","text":"<p>Once our discovery rule is in place, we can instruct Zabbix to automatically generate items, triggers, graphs, and even host prototypes. These function as blueprints directing Zabbix how to create those entities.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#lld-macros","title":"LLD Macros","text":"<p>To enhance flexibility, Zabbix implements LLD macros. These macros always begin with a # character before their name (e.g., {#FSNAME}). Acting as placeholders for the values of discovered entities, Zabbix replaces these macros with the actual discovered names of the items during the implementation process.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#the-zabbix-low-level-discovery-workflow","title":"The Zabbix Low-Level Discovery Workflow","text":"<p>The workflow that Zabbix follows during Low-Level Discovery consists of four distinct phases:</p> <p>Discovery Phase * Zabbix executes the discovery item according to the defined discovery rule * The item returns a JSON list of discovered entities</p> <p>Processing Phase * Zabbix parses the JSON data and extracts the necessary information</p> <p>Creation Phase * For each discovered entity, Zabbix creates items, triggers, and graphs based on   the prototypes * During this process, LLD macros are replaced with the actual discovered values</p> <p>Monitoring Phase * Zabbix monitors the created items using standard monitoring procedures</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#advantages-of-lld-implementation","title":"Advantages of LLD Implementation","text":"<p>The benefits of implementing Low-Level Discovery are substantial:</p> <ul> <li>Automation - Creation of items, triggers, graphs, and hosts becomes fully   automated</li> <li>Scalability - Enables monitoring of large numbers of hosts or items without   manual intervention</li> <li>Adaptability - Zabbix can dynamically adjust to environmental changes by    creating or removing entities as needed</li> </ul>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#learning-lld-custom-script","title":"Learning LLD custom script","text":"<p>We begin our series with LLD based on custom scripts because, while it represents one of the more complex topics, mastering this concept provides a solid foundation. Once you understand this implementation approach, the other LLD topics will be considerably easier to comprehend.</p> <p>Below is a sample JSON structure that Zabbix can interpret for Low-Level Discovery:</p> <pre><code>{\n  \"data\": [\n    {\n      \"{#FSNAME}\": \"/\",\n      \"{#FSTYPE}\": \"ext4\"\n    },\n    {\n      \"{#FSNAME}\": \"/boot\",\n      \"{#FSTYPE}\": \"ext4\"\n    },\n    {\n      \"{#FSNAME}\": \"/data\",\n      \"{#FSTYPE}\": \"xfs\"\n    }\n  ]\n}\n</code></pre> <p>Upon receiving this JSON data, Zabbix processes the discovery information to identify distinct file systems within the monitored environment. The system extracts and maps the following elements:</p> <ul> <li>File system mount points: /, /boot, and /data</li> <li>File system types: ext4 and xfs</li> </ul> <p>Zabbix automatically associates these discovered values with their corresponding LLD macros {#FSNAME} for the mount points and {#FSTYPE} for the file system types. This mapping enables dynamic creation of monitoring objects tailored to each specific file system configuration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-custom-script","title":"Creating a custom script.","text":"<p>In this example, we will develop a custom script to monitor user login activity on our systems. This script will track the number of users currently logged into each monitored host and report their login status.</p> <p>The implementation requires placing a custom script in the appropriate location on systems running Zabbix Agent (either version 1 or 2). Create the following script in the <code>/usr/bin/</code> directory on each agent installed system:</p> <p>create our script</p> <pre><code>sudo vi /usr/bin/users-discovery.sh\n</code></pre> <p>paste the following content in the file:</p> <p>users-discovery.sh</p> <pre><code>#!/bin/bash\n\n# Find all users with UID \u2265 1000 of UID = 0 from /etc/passwd, except \"nobody\"\nALL_USERS=$(awk -F: '($3 &gt;= 1000 || $3 == 0) &amp;&amp; $1 != \"nobody\" {print $1}' /etc/passwd)\n\n# Find all active users\nACTIVE_USERS=$(who | awk '{print $1}' | sort | uniq)\n\n# Begin JSON-output\necho -n '{\"data\":['\nFIRST=1\nfor USER in $ALL_USERS; do\n    # Check if the user is active\n    if echo \"$ACTIVE_USERS\" | grep -q \"^$USER$\"; then\n        ACTIVE=\"yes\"\n    else\n        ACTIVE=\"no\"\n    fi\n\n    # JSON-format\n    if [ $FIRST -eq 0 ]; then echo -n ','; fi\n    echo -n \"{\\\"{#USERNAME}\\\":\\\"$USER\\\", \\\"{#ACTIVE}\\\":\\\"$ACTIVE\\\"}\"\n    FIRST=0\ndone\necho ']}'\n</code></pre> <p>Once you have created the script don't forget to make it executable.</p> <pre><code>sudo chmod +x /usr/bin/users-discovery.sh\n</code></pre> <p>The script will be executed by the Zabbix agent and will return discovery data about user sessions in the JSON format required for Low-Level Discovery processing.</p> <p>Once deployed, this script will function as the data collection mechanism for our user monitoring solution, enabling Zabbix to dynamically discover user sessions and track login/logout activities across your infrastructure.</p> <p>User Provisioning for Testing</p> <p>Let's establish additional test user accounts on our system to ensure we have sufficient data for validating our monitoring implementation. This will provide a more comprehensive testing environment beyond the default root account and your personal user account. Feel free to add as many users as you like.</p> <p>create some users</p> <p><pre><code>sudo for user in sven brian cartman kenny; do sudo useradd $user; done\n</code></pre> Create a password for every user so that we can login on the console <pre><code>sudo passwd &lt;user&gt;\n</code></pre></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-template","title":"Creating a Template","text":"<p>It is always considered best practice to work with a template. The first step is to create a template for the LLD rules.  </p> <p>Navigate to Data collection, select Templates, and click Create template in the upper-right corner.  </p> <p>Fill in the required information, specifying at least a template name and  the template group it belongs to.</p> <p></p> <p>Once the template is created click on <code>Discovery</code> in the template between <code>Dashboards</code> and <code>Web</code>. In the upper right corner of the screen you see now a button <code>create discovery rule</code>.</p> <p>We will nog create our discovery rule that will import the <code>JSON</code> from our script. Click on the button.</p> <p>Fill in the needed information like on the screenshot :</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-a-template-for-lld-rules","title":"Creating a Template for LLD Rules","text":"<ul> <li>Type: Set to Zabbix agent, as the agent is configured to work in passive   mode. If the agent is properly configured for active mode, Zabbix agent (active)   can be used instead. Passive mode allows polling information from the script.  </li> <li>Key: This key acts as a reference sent to the agent, instructing it on which   script to execute.  </li> <li>Update Interval: Determines how often Zabbix executes the script. For detecting   newly created users, an interval of one hour is a reasonable setting.</li> </ul> Note <p>If you put the update interval for the discovery rule too frequent like every minute, then this will have a negative impact on the performance. In our case it's a small JSON file but most of the time it will contain much more data.</p> <p>Once everything is filled in we can save the template.</p> <p>Login to your console on the host that you would like to monitor and go to the following path. </p> <pre><code>cd `/etc/zabbix/zabbix_agent2.d/`\nor in case you are using Agent 1\ncd `/etc/zabbix/zabbix_agentd.d/`\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-the-user-parameter-configuration","title":"Creating the User Parameter Configuration","text":"<p>The next step is to create the userparameter-users.conf file in this directory. This file will define the reference key users.discovery from the LLD rule and map it to the corresponding script. By doing this, Zabbix can associate the item key with the correct script execution.</p> <pre><code>vi userparameter-users.conf\n</code></pre> <p>Add the following line in the config file and save it.</p> <pre><code>UserParameter=users.discovery,/usr/bin/users-discovery.sh\n</code></pre> Note <p>When you add a new <code>UserParameter</code> to the agent we need to restart the agent to pick up the new config or use the config option <code>-R userparameter_reload</code> on our agent this will apply the new configuration but only works on UserParameters not on other changes in the agent configuration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#saving-the-template-and-preparing-the-monitored-host","title":"Saving the Template and Preparing the Monitored Host","text":"<p>After entering all the required details, save the template to apply the configuration. Next, access the console of the host you want to monitor and navigate to the following directory.</p> Note <p>Zabbix agent has a new option since 6.0, <code>userparameter_reload</code>. This allows us to reload the config for the userparameters and makes a restart of the agent not necessary.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#testing-the-configuration","title":"Testing the Configuration","text":"<p>With the setup complete, it is time to perform some tests.  </p> <ol> <li>Navigate to Data collection and select Hosts.  </li> <li>Link the newly created template to the appropriate host in the Zabbix frontend.  </li> <li>Once the template is linked, go to the Discovery section.  </li> <li>Click on the discovery rule created earlier, Active users.  </li> <li>At the bottom of the screen, locate the Test button and click on it.  </li> <li>In the popup window, press Get value and test.  </li> </ol> <p>If everything is configured correctly, Zabbix will retrieve the expected value and store it in the database.</p> <p></p> <p>If all went well you should have received some data back in JSON like you see here,  depending on the number of users you made and what name you gave them.</p> <pre><code>{\n  \"data\": [\n    {\n      \"{#USERNAME}\": \"root\",\n      \"{#ACTIVE}\": \"yes\"\n    },\n    {\n      \"{#USERNAME}\": \"brian\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"sven\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"cartman\",\n      \"{#ACTIVE}\": \"no\"\n    },\n    {\n      \"{#USERNAME}\": \"kenny\",\n      \"{#ACTIVE}\": \"no\"\n    }\n  ]\n}\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-prototype-items","title":"Creating prototype items.","text":"<p>With our Low-Level Discovery (LLD) rule in place, we are ready to create our LLD item prototype. Follow these steps to configure the item prototype correctly:</p> <ol> <li>Navigating to Item Prototype Configuration</li> <li>Open your template in Zabbix.</li> <li>Click on the Discovery tab.</li> <li>Navigate to Item Prototypes.</li> <li> <p>Click on Create Item Prototype in the upper-right corner.</p> </li> <li> <p>Configuring the Item Prototype    Several key fields must be completed for the prototype to function correctly:</p> </li> <li> <p>Name:</p> <ul> <li>Use the macro <code>{#USERNAME}</code> to create dynamically generated item names.</li> <li>Example: <code>User {#USERNAME} login status</code>.</li> </ul> </li> <li> <p>Type:</p> <ul> <li>Select <code>Zabbix agent</code> as the item type to facilitate testing.</li> </ul> </li> <li> <p>Key:</p> <ul> <li>The item key must be unique.</li> <li>Utilize macros to ensure a unique key for each item instance.</li> </ul> </li> <li> <p>Type of Information:</p> <ul> <li>Defines the format of the received data.</li> <li>Since our script returns <code>0</code> or <code>1</code>, set this to <code>Numeric</code>.</li> </ul> </li> <li> <p>Update Interval:</p> <ul> <li>Determines how frequently the item is checked.</li> <li>A reasonable interval for checking user online status is <code>1m</code> (one minute).</li> </ul> </li> </ol> <p>With these configurations, your LLD item prototype is ready for deployment.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#configuring-the-agent-to-listen-for-lld-items","title":"Configuring the Agent to Listen for LLD Items","text":"<p>Our LLD item will retrieve data from the key custom.user[{#USERNAME}], so the next step is to configure the agent to listen for this key.</p> <ul> <li>Edit the <code>userparameter-users.conf</code> file that was created earlier on the <code>Zabbix agent</code>.</li> <li>Add the following line to the configuration file:</li> </ul> <pre><code>UserParameter=custom.user[*],who | grep -c \"$1\"\n</code></pre> <ul> <li>This configuration ensures that the agent listens for requests using the   <code>custom.user[{#USERNAME}]</code> key.</li> <li>The <code>{#USERNAME}</code> macro is dynamically replaced with usernames extracted from   the discovery rule.</li> </ul> Note <p>Important: After making changes to the configuration file, restart the <code>Zabbix agent</code> or reload the configuration to apply the new settings.</p> <p>With these configurations in place, your LLD item prototype is fully set up and ready for deployment.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#testing-our-lld-items","title":"Testing our lld items","text":"<p>Before we put things in production we can of course test it. Press the <code>test</code> button at the bottom. Fill in the needed information: </p> <ul> <li>Host address : the IP or DNS name where we have our scripts configured on our agent.</li> <li>Port : the agent port. This should be 10050 unless you have changed it for some reason.</li> <li>Macros : map the macro with one of the user names you have configured on your system.</li> </ul> <p>Press <code>Get value</code> and if all goes well Zabbix will return the value 1 or 0 depending if the user is online or not.</p> <p></p> <p>Apply the template to your host and have a look at the latest data. Things should slowly start to populate.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#adding-lld-triggers","title":"Adding LLD triggers","text":"<p>Let's go back to our template to our <code>Discovery</code> and select <code>Trigger prototype</code>. Click on the top right on <code>Create trigger prototype</code>. Fill in the following fields:</p> <ul> <li>Name : <code>User {#USERNAME} is logged in</code> Again we want our information to be   more dynamic so we make use of our macros in the name of our trigger.</li> <li>Severity : We select the severity level here. <code>Information</code> seems high enough.</li> <li>Expression : We want to get a notification if someone is online you can   make use of the <code>Add</code> button or just copy : <code>last(/Discover users/custom.user[{#USERNAME}])=1</code></li> </ul> <p></p> Note <p>Copying the Expression will only work if you used the same name for the template and item key.</p> <p>You can  now log in with a user that we created before or root and have a look at our dashboard. A notification should popup soon to inform you that a user was logged in.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#creating-lld-overrides","title":"Creating LLD overrides.","text":"<p>Having our notifications when users log in on our systems is a nice security feature but i'm more worried when a user logs in with root then when for example Brian logs in. When root logs in I would like to get the alert <code>High</code> instead of <code>Information</code>.</p> <p>This is possible in Zabbix when we make use of overrides. Overrides allow us to change the behaviour of our triggers under certain conditions.</p> <p>Go to the template to the discovery rule <code>Active users</code>. Click on the tab <code>Overrides</code>. Press on the button <code>Add</code> and fill in the needed information.</p> <ul> <li>Name : A useful name for our override in our case we call it <code>high severity for user root</code>.</li> <li>Filters : Here we filter for certain information that we find in our LLD    macros. In our case we look in the macro <code>{#USERNAME}</code> for the user <code>root</code>.</li> </ul> <p></p> <ul> <li>Operation : Here we define what needs to happen. We want to manipulate the   trigger so select for object <code>Trigger prototype</code> and select that we want to modify   the <code>Severity</code> and select <code>High</code>. This will modify the severity of our trigger   and change it to <code>High</code> if the user that is detected is the user <code>root</code>.</li> </ul> <p></p> Note <p>It can take a while before changes are applied to your host. Don't panic this is normal the discovery rule usually only updates every hour. If you like to force this just go to your discovery rule on the host, select it and press <code>Execute now</code>.</p> <p>Once everything is changed you can login on your system with the user <code>root</code> and one of the other users. As you will see both triggers will fire off but with different severity levels.</p> <p></p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#conclusion","title":"Conclusion","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#question","title":"Question","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/custom/#useful-urls","title":"Useful URLs","text":"","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/","title":"Low Level Discovery with Dependent items","text":"<p>Efficiency in monitoring isn't just about automation it's also about minimizing resource usage. Low-Level Discovery (LLD) with dependent items in Zabbix offers a powerful way to reduce agent load and database overhead by collecting data once and extracting multiple metrics from it.</p> <p>Instead of creating separate item queries for each discovered entity, dependent items allow you to process a single data source such as a JSON response, log entry, or SNMP bulk data and extract relevant metrics dynamically. This approach significantly optimizes performance while maintaining full automation.</p> <p>In this chapter, we'll explore how to implement LLD with dependent items, configure preprocessing rules, and leverage this technique to make your Zabbix monitoring more efficient, scalable, and resource friendly by using a practical example.</p> <p>Let\u2019s get started!</p> Note <p>For this chapter we start with a working system with a passive Zabbix agent. You can always refer to Chapter 01 if you like to know how to setup Zabbix. It can be a good start to have a look at our previous topic <code>Custom LLD</code> to get a better understanding on how LLD works.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-our-custom-data","title":"Creating our custom data","text":"<p>Before we can implement our Low-Level Discovery (LLD) rule, we first need relevant data to work with. Consider a scenario where a print server provides a list of printers along with their status in JSON format. This structured data will serve as the foundation for our discovery process.  </p> <p>Example data</p> <pre><code>{\n  \"data\": [\n    {\n      \"name\": \"Color Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"Color Printer 2\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 2\",\n      \"status\": \"NOK\"\n    }\n  ]\n}\n</code></pre> <p>On your Zabbix server, log in and create a text file containing the example data that will serve as the master item for our Low-Level Discovery (LLD) rule.</p> <ol> <li>Access the Server: Log in to your Zabbix server via SSH or directly.</li> <li>Create the File: Run the following command to store the JSON data:</li> </ol> <p>Run the following command:</p> <pre><code>echo\n'{\n  \"data\": [\n    {\n      \"name\": \"Color Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"Color Printer 2\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 1\",\n      \"status\": \"OK\"\n    },\n    {\n      \"name\": \"B&amp;W Printer 2\",\n      \"status\": \"NOK\"\n    }\n  ]\n}' | sudo tee /home/printer-status.txt &gt; /dev/null\n</code></pre> <ol> <li>Verify the File: Ensure the file is correctly created by running:</li> </ol> <p>Test the file</p> <pre><code>cat /home/printer-status.json\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#create-a-master-item","title":"Create a master item","text":"<p>We are now ready to create an item in Zabbix to get the information in to our master item. But first we need to create a host.</p> <p>Go to <code>Data collection | Hosts</code> and click <code>Create host</code>. Fill in the <code>Host name</code> and the <code>Host group</code> and create an <code>Agent interface</code>. Those are the only things we need for our host and press <code>Add</code>.</p> <p>Go to the host and click on <code>items</code> the next step will be to create our item so that we can retrieve the data from our printers.</p> <p> 8.1 Create host</p> Note <p>Remember this is just an example file we made in real life you will use probably a <code>HHTP agent</code> or a <code>Zabbix agent</code> to retrieve real life data.</p> <p>Click on top right of the page on <code>Create item</code> to create a new item so that we can retrieve our master items data.</p> <p>Once the <code>New Item</code> popup is on the screen fill in the following details:</p> <ul> <li>Name : RAW : Printer status page</li> <li>Type : Zabbix agent</li> <li>Key : vfs.file.contents[/home/printer-status.txt]</li> </ul> <p> 8.2 Create a LLD item</p> <p>Before you press <code>Add</code> let's test our item first to see if we can retrieve the data we need.</p> <p>Press <code>Test</code> at the bottom of the page a popup will come and you can press at the bottom of the page <code>Get value and test</code> or <code>Get value</code> just above. Both should work and return you the information form the txt file.</p> Note <p>When you press <code>Get value</code> it will show you the value as is retrieved from the host. <code>Get value and test</code> on the other hand will also try to execute other pre processing steps if there are any. So the output of the data could be different. Also if you use secret macros Zabbix will not resolve them you will need to fill in the correct information first by yourself.</p> <p> 8.3 Test LLD item</p> Tip <p>Keep a copy of the output somewhere you will need it in the following steps to create your LLD rule and LLD items etc ...</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#create-lld-discovery","title":"Create LLD Discovery","text":"<p>To create a discovery rule first to go <code>Discovery rules</code> on the top next to Items, Triggers and Graphs and click on <code>Create discovery rule</code>.</p> <p> 8.4 Create a discovery rule</p> <p>Before configuring our Low-Level Discovery (LLD) rule, we can test our JSON queries using tools like JSON Query Tool. If we apply the query <code>$..name</code>, it extracts all printer names, while <code>$..status</code> retrieves their statuses.</p> <p>However, referring to the Zabbix documentation, we see that starting from Zabbix 4.2, the expected JSON format for LLD has changed. The <code>data</code> object is no longer required; instead, LLD now supports a direct JSON array. This update enables features like item value preprocessing and custom JSONPath queries for macro extraction.</p> <p>While Zabbix still accepts legacy JSON structures containing a <code>data</code> object for backward compatibility, its use is discouraged. If the JSON consists of a single object with a <code>data</code> array, Zabbix will automatically extract its content using <code>$.data</code>. Additionally, LLD now allows user-defined macros with custom JSONPath expressions.  </p> <p>Due to these changes, we cannot use the filters <code>$..name</code> or <code>$..status</code> directly. Instead, we must use <code>$.name</code> and <code>$.status</code> for proper extraction. With this understanding, let's proceed with creating our LLD rule.  </p> <p>Head over to the <code>LLD macros</code> tab in our Discovery rule and map the following macros with our JSONpath filters to extract the needed info so that we can use it later in our LLD items, triggers, graphs .... .</p> <ul> <li>{#PRINTER.NAME} : Map it with <code>$.name</code>.</li> <li>{#PRINTER.STATUS} : Map it with <code>$.status</code>.</li> </ul> <p> 8.5 Create a LLD Macro</p> <p>When ready press <code>Update</code> at the bottom of the page.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-a-low-level-discovery-lld-item","title":"Creating a Low-Level Discovery (LLD) Item","text":"<p>After defining the discovery rule and mapping the data to the corresponding LLD macros, the next step is to create an LLD item. This is done through item prototypes.</p> <ol> <li>Navigate to the <code>Item prototypes</code> tab.  </li> <li>Click Create <code>item prototype</code> in the upper-right corner.  </li> <li> <p>Configure the following parameters:  </p> </li> <li> <p>Name: <code>Status from {#PRINTER.NAME}</code> </p> </li> <li>Type: <code>Dependent item</code> </li> <li>Key: <code>status.[{{#PRINTER.NAME}}]</code> </li> <li>Type of information: <code>Text</code> </li> <li>Master Item: Select the previously created raw item.  </li> </ol> <p>This setup ensures that the discovered printer statuses are correctly assigned and processed through the LLD mechanism.  </p> <p> 8.6 Create a LLD item</p> <p>Before saving the item, navigate to the <code>Preprocessing</code> tab to define the necessary preprocessing steps. These steps will ensure that the extracted data is correctly formatted for Zabbix. Configure the following preprocessing steps:</p> <ol> <li>JSONPath: $.data..[?(@.name=='{#PRINTER.NAME}')].status.first()</li> <li>Replace:  </li> <li>Convert <code>NOK</code> to <code>false</code>.  </li> <li>This step is required because Zabbix does not recognize <code>NOK</code> as a boolean      value but does recognize <code>false</code>.</li> <li>Boolean to Decimal:  </li> <li>This conversion transforms boolean values into numerical representation    (<code>1</code> for <code>OK</code>, <code>0</code> for <code>false</code>).</li> <li>Numeric values are more suitable for graphing and analysis in Zabbix.</li> <li>Type of Information:  </li> <li>Set to Numeric to ensure proper data processing and visualization.</li> </ol>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#understanding-the-jsonpath-expression","title":"Understanding the JSONPath Expression","text":"<p>To derive the correct JSONPath query, use a tool such as the <code>JSON Query Tool</code> (https://www.jsonquerytool.com/). This tool allows testing and refining JSON queries using real data retrieved from the raw item.</p> <p>The JSONPath query used in this case is:</p> <pre><code>$.data..[?(@.name=='{#PRINTER.NAME}')].status.first()\n</code></pre>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#breakdown-of-the-jsonpath-syntax","title":"Breakdown of the JSONPath Syntax","text":"<ul> <li><code>$</code> \u2192 Refers to the root of the JSON document.</li> <li><code>.data</code> \u2192 Accesses the <code>data</code> key within the JSON structure.</li> <li><code>..</code> \u2192 The recursive descent operator, searching through all nested levels   for matching elements.</li> <li><code>[?(@.name=='{#PRINTER.NAME}')]</code> \u2192 A filter expression that:</li> <li>Uses <code>?(@.name=='Color Printer 1')</code> to match objects where the <code>name</code> field     equals <code>\"Color Printer 1\"</code>.</li> <li><code>{#PRINTER.NAME}</code> is a Zabbix macro that dynamically replaces     <code>\"Color Printer 1\"</code> with the discovered printer name.</li> <li><code>@</code> \u2192 Represents the current element being evaluated.</li> <li><code>.status</code> \u2192 Retrieves the <code>status</code> field from the filtered result.</li> <li><code>.first()</code> \u2192 Returns only the first matching <code>status</code> value instead of   an array.</li> <li>Without <code>.first()</code>, the result would be <code>[\"OK\"]</code> instead of <code>\"OK\"</code>.</li> </ul> <p>By applying these preprocessing steps, we ensure that the extracted printer status is correctly formatted and can be efficiently used for monitoring and visualization in Zabbix.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#optimizing-data-collection-and-discovery-performance","title":"Optimizing Data Collection and Discovery Performance","text":"<p>Before finalizing our configuration, we need to make an important adjustment. The current settings may negatively impact system performance due to an overly frequent update interval.</p> <p>Navigate to <code>Data collection</code>|<code>Hosts</code> and click on <code>Items</code>. Select the <code>RAW item</code> that was created in the first step.</p> <p>By default, the update interval is set to <code>1 minute</code>. This means the item is refreshed every minute, and since our LLD rule is based on this item, Zabbix will rediscover printers every minute as well. While this ensures timely updates, it is inefficient and can impact performance.</p> <p>A common best practice is to configure discovery rules to run no more than <code>once per hour</code>. However, since our <code>LLD item</code> relies on this same RAW item, an hourly interval would be too infrequent for monitoring printer status updates. To strike a balance between efficiency and real-time monitoring, we can apply a <code>preprocessing trick</code>.</p> <p>Go to the <code>Preprocessing</code> tab and add the following preprocessing step:</p> <ul> <li>Discard unchanged with heartbeat \u2192 <code>1h</code></li> </ul> <p>This ensures that the database is updated <code>only when a status change occurs</code>. If no status change is detected, <code>no new entry is written to the database</code>, reducing unnecessary writes and improving performance. However, to ensure some data is still recorded, the status will be written to the database at least <code>once per hour</code>, even if no changes occur.</p> <p>Before saving the changes, we can further optimize storage by preventing the master item from being stored in the database. Navigate back to the <code>Item</code> tab and set <code>History</code> to <code>Do not store</code>.</p> Note <p>If you change your mind and want to keep the history then our preprocessing step will at least not save it every minute but only when there are changes or once every hour.</p> <p>The RAW item is only used to feed data into the LLD discovery rule and <code>LLD items</code>. Since we do not need to retain historical data for this master item, <code>discarding it</code> saves database space and improves efficiency.</p> <p>By applying these optimizations, we ensure that our monitoring system remains efficient while still capturing necessary status updates.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#creating-a-low-level-discovery-lld-filter","title":"Creating a Low-Level Discovery (LLD) Filter","text":"<p>Now lets have some fun and use a script that generates the output of our text file with random statuses so that we have a more close to real live environment. Create in the folder where your <code>printer-status.txt</code> file is a new file called <code>printer-demo.py</code> and paste following content in it.</p> <p>python script</p> <pre><code>#!/usr/bin/env python3\n\nimport json\nimport os\n\nSTATUS_FILE = \"printer-status.txt\"\n\n# Define printers\nprinters = [\n    {\"name\": \"Color Printer 1\", \"status\": \"OK\"},\n    {\"name\": \"Color Printer 2\", \"status\": \"OK\"},\n    {\"name\": \"B&amp;W Printer 1\", \"status\": \"OK\"},\n    {\"name\": \"B&amp;W Printer 2\", \"status\": \"NOK\"},\n    {\"name\": \"This is not a printer\", \"status\": \"NOK\"}\n]\n\n# Check if the status file exists\nif os.path.exists(STATUS_FILE):\n    # Read the existing status from the file\n    with open(STATUS_FILE, \"r\") as f:\n        output = json.load(f)\n    printers = output[\"data\"]\nelse:\n    # If no file, set initial values\n    output = {\"data\": printers}\n\n# Toggle statuses\nfor printer in printers:\n    printer[\"status\"] = \"NOK\" if printer[\"status\"] == \"OK\" else \"OK\"\n\n# Write the new status to file\nwith open(STATUS_FILE, \"w\") as f:\n    json.dump({\"data\": printers}, f, indent=2)\n\nprint(f\"Printer status updated and written to {STATUS_FILE}\")\n</code></pre> <p>Once you have created the script make it executable with <code>chmod +x printer-demo.py</code> and then run the script with the following command <code>./printer-demo.py</code>.</p> <p>If you cannot run the script then check the python environment or try to run it as <code>python printer-demo.py</code>.</p> <p>This script will change the status of our printers you can verify this in the <code>Latest data</code> page.</p> <p> 8.7 Latest data</p> <p>But hey wait as we can see there is an extra devices detected with the name <code>This is not a printer</code> and Zabbix hasn't detected any status for it .....</p> <p>That we don't have any status yet is normal remember we did a check only once per hour with our Preprocessing step so first time the data was changed the new device was detected. If the status from the device changes again zabbix will create an update for the item and a status will be processed.</p> Note <p>Low Level will work in 2 steps first step is the detection of the new devices and second step is populating the items with the correct data. Remember that we did an item interval of 1m so it can take up to 1m before our items gets a new value.</p> <p>Lets see now how we can remove the device <code>this is not a printer</code> from our list since we don't want to monitor this one.</p> <p>Let's go back to our LLD discovery rule this time to the tab Filters and add the following to the fields:</p> <ul> <li>Label : {#PRINTER.NAME} <code>does not match</code></li> <li>regular expression : <code>{$PRINTERS.NOT.TO.DETECT}</code></li> </ul> <p> 8.8 LLD Filters</p> <p>Press update and go to our Host and click on the tab <code>Macros</code>. Here we will create our macro and link it with a regular expression. Fill in the following values :</p> <ul> <li>Macro: {$PRINTERS.NOT.TO.DETECT}</li> <li>Value : ^This is not a printer$</li> </ul> <p> 8.9 LLD Filter Macros</p> <p>After executing our discovery rule and sending updated values to Zabbix, we can verify the filter's effectiveness by checking the <code>Latest data</code> view, where the excluded device no longer appears.</p> <p>When navigating to the <code>Items</code> section of our host, we'll observe that the previously discovered item for the filtered device now displays a <code>Disabled</code> status with an accompanying orange exclamation mark icon. Hovering over this icon reveals the system notification: <code>The item is not discovered anymore and has been disabled, will be deleted in 6d 23h 36m.</code></p> <p>This automatic cleanup behavior for undiscovered items follows Zabbix's default retention policy, which can be customized by modifying the <code>Keep lost resources period</code> parameter in the Discovery rule settings to align with your organization's monitoring governance requirements.</p> <p>This concludes our chapter.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#conclusion","title":"Conclusion","text":"<p>Low-Level Discovery in Zabbix represents a powerful approach to dynamic monitoring that scales efficiently with your infrastructure. Through this chapter, we've explored how the combination of LLD with dependent items and discovery filters creates a robust framework for automated monitoring that remains both comprehensive and manageable.</p> <p>By implementing dependent items within discovery rules, we've seen how to build sophisticated monitoring relationships without the performance overhead of multiple direct checks. This approach not only reduces the load on monitored systems but also simplifies the overall monitoring architecture by establishing clear parent-child relationships between metrics.</p> <p>The strategic application of LLD filters, as demonstrated in our examples, transforms raw discovery data into precisely targeted monitoring. Instead of drowning in irrelevant metrics, your Zabbix instance now focuses only on what matters to your organization's specific needs. Whether filtering by regex patterns, system types, or operational states, these filters act as the gatekeepers that maintain monitoring relevance as your environment expands.</p> <p>Perhaps most importantly, the techniques covered in this chapter enable truly scalable monitoring that grows automatically with your infrastructure. New servers, applications, or network devices are seamlessly incorporated into your monitoring framework without manual intervention, ensuring that visibility expands in lockstep with your environment.</p> <p>As you implement these concepts in your own Zabbix deployments, remember that effective monitoring is about balance and capturing sufficient detail while avoiding data overload. The combination of LLD, dependent items, and thoughtful filtering provides exactly this balance, giving you the tools to build monitoring systems that scale without sacrificing depth or precision.</p> <p>With these techniques at your disposal, your Zabbix implementation can evolve from a basic monitoring tool to an intelligent system that adapts to your changing infrastructure, providing actionable insights without constant reconfiguration.</p>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#questions","title":"Questions","text":"<ul> <li>How do LLD filters change the monitoring paradigm from \"collect everything\"   to a more targeted approach?</li> <li>How does Zabbix LLD fundamentally differ from traditional static monitoring   approaches ?</li> <li>Break down the components of the JSONPath expression $.data..[?(@.name=='{#PRINTER.NAME}')].status.first()   and explain how each part contributes to extracting the correct data.</li> <li>How would you modify the example to monitor printer ink levels in addition to   printer status?</li> </ul>","tags":["advanced"]},{"location":"ch08-zabbix-lld/lld-with-dependent-items/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.jsonquerytool.com/</li> <li>https://regex101.com/</li> <li>https://www.zabbix.com/documentation/current/en/manual/discovery/low_level_discovery#filter</li> <li>https://blog.zabbix.com/lld-filtering-with-macros/24959/</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/chapter/","title":"Leveraging custom items for extending the Zabbix environment","text":"<p>In this chapter, we'll take a deep dive into extending Zabbix functionality beyond its default item options. We'll cover the script item, external checks, remote commands, user parameters, and other advanced features that allow you to customize and expand your monitoring capabilities.</p> <p>You'll learn how to use these tools to integrate custom logic, monitor external applications, and automate tasks, making Zabbix an even more powerful and flexible solution tailored to your specific needs. </p> <p>By the end, you'll have the skills to push Zabbix beyond its default configuration, unlocking new possibilities for complex and unique monitoring scenarios.</p>"},{"location":"ch09-zabbix-extending/frontend-scripts/","title":"Frontend Scripts","text":"<p>So, you're diving into the world of Zabbix frontend scripts, and you're in for  a treat! These little powerhouses unlock a whole new level of flexibility within your Zabbix environment. Imagine being able to trigger custom actions directly from your Zabbix interface \u2013 whether it's as an action operation responding to an alert, a manual intervention on a host, or a targeted response to a specific event.</p> <p>What's truly exciting is where you can weave these scripts into your daily Zabbix workflow. Picture adding custom menu items right within your Hosts, Problems, Dashboards, and even your Maps sections. This means the information and tools you need are always at your fingertips.</p> <p>Ultimately, frontend scripts empower you to extend Zabbix far beyond it's out-of-the-box capabilities. They provide that crucial extra layer of customization, allowing you to seamlessly integrate your own scripts and workflows directly into the Zabbix frontend. Get ready to harness this power and tailor Zabbix precisely to your needs!</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#creating-a-frontend-scripts","title":"Creating a frontend scripts","text":"<p>For this example, we'll work with a frontend script I developed that lets you put hosts in maintenance mode. This script makes it possible to add a convenient option in your GUI, allowing you to place hosts in maintenance with just a few clicks. You can download the script from my GitHub repository :</p> <p>https://github.com/Trikke76/Zabbix/blob/master/maintenance/zabbix-maintenance.py</p> <p>Download this script and place it in <code>/usr/bin/</code> </p> <pre><code>cd /usr/bin/\nsudo dnf install wget -y\nwget https://raw.githubusercontent.com/Trikke76/Zabbix/refs/heads/master/maintenance/zabbix-maintenance.py -P /usr/bin/\nchmod +x /usr/bin/zabbix-maintenance.py\n</code></pre> <p>Our Python script relies on an additional package that needs to be installed before running. Make sure you have this dependency set up on your system before executing the script.</p> <p>install python3-requests</p> <p>Red Hat <pre><code>dnf install python3-requests\n</code></pre> Ubuntu <pre><code>sudo apt install python3-requests\n</code></pre></p> Note <p>For the user you can use the user <code>Admin</code> or you can create a new user. but make sure this user has enough permissions to create a maintenance mode. It's best practice to create a dedicated user for this in production.</p> <p>Starting with Zabbix 7.2, token-based authentication is required when working with the API. Each user can create their own tokens, while the <code>Super admin</code> has management privileges over all tokens.</p> <p>To create a token for your Admin user:</p> <ul> <li>Navigate to <code>User settings</code></li> <li>Select the <code>API tokens</code> sections</li> </ul> <p></p> <p>9.1 User API</p> <p>After selecting <code>API tokens</code> from the menu, you'll land on the <code>API tokens</code> page. Look for the <code>Create API</code> token button in the top right corner and click it to begin the creation process.</p> <p></p> <p>9.2 Create API page</p> <p>A popup window will appear for creating your new API token. You'll need to provide a unique <code>Name</code> for your token. While there's an option to set an expiration date, we'll keep our token active indefinitely by leaving the time limit settings unchanged.</p> <p></p> <p>9.3 Create new API token</p> <p>A confirmation popup will display your newly created API token, showing the <code>Auth token</code> string generated by Zabbix. Be sure to copy or write down this token immediately, as it will no longer be visible once you click <code>Close</code>. If you lose this token, you'll need to delete it and create a new one. There's no way to retrieve or view the token again through the interface.</p> <p></p> <p>9.4 Added API token</p> <p>The next step is updating our script with the proper connection details. Edit the script and modify the variables to include your Zabbix server's correct URL and the token you just created. Pay attention to whether your server uses HTTP or HTTPS protocol. Be sure the URL in your script matches your actual server configuration.</p> <p>Replace variables</p> <p><pre><code>sudo vi /usr/bin/zabbix-maintenance.py\n</code></pre> <pre><code>ZABBIX_API_URL = \"https://zabbix-url.be/api_jsonrpc.php\"\nZABBIX_API_TOKEN = \"API TOKEN\"\n</code></pre></p> <p>Now that our script is properly configured, we need to set it up in the Zabbix interface. From the main Zabbix menu, navigate to <code>Alerts</code> and then select <code>Scripts</code> from the dropdown to access the scripts configuration area.</p> <p></p> <p>9.5 Scripts menu</p> <p>You should already see a few existing script  like <code>Ping</code>, <code>Traceroute</code>, .... that's normal those where created with the installation of Zabbix. Press the button <code>Create scripts</code> on the top right corner. A now form will popup where we will configure our maintenance script. Fill out the following fields:</p> <ul> <li>Name: Create maintenance no data collection</li> <li>Scope : Manual host action</li> <li>Menu path : Maintenance</li> <li>Type : Script </li> <li>Execute on : Zabbix proxy or server</li> <li>Commands : <code>/usr/bin/zabbix-maintenance.py create \"{HOST.HOST}\" {MANUALINPUT} no</code></li> </ul> <p>At the bottom we have a tab <code>Advanced configuration</code> Click on this and extra configuration options will appear.</p> <p>As you probably noticed we used in our <code>Command</code> the macro <code>{MANUALINPUT}</code> this will be used to gather information from a user prompt. This allows us to ask the user to fill in the time he wants to place the host in maintenance.</p> <ul> <li>Enable user input : yes</li> <li>Input prompt : How many minutes do you want to place the host in maintenance ?</li> <li>Input type : String (A dropdown box can also be used in case you have a list of options)</li> <li>Default string : 60 (but we can use anything this will just be the default answer)</li> <li>Input validation rule : <code>(\\d+)</code> (our regex in perl to only allow digits)</li> <li>Enable confirmation : yes</li> <li>Confirmation text : Are you sure ?</li> </ul> <p>If everything went well you should end up with a similar looking page :</p> <p></p> <p>9.6 Script form</p> <p>When your are ready press <code>Add</code> at the bottom of the form. Let's test our script to see if it works.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#testing-the-frontend-script","title":"Testing the frontend script","text":"<p>In Zabbix go to the menu <code>Monitoring</code> =&gt; <code>Hosts</code> and click on the host <code>Zabbix server</code> and from the <code>scripts</code> menu select <code>Maintenance</code> and click on the sub Menu <code>Create maintenance no data collection</code>. You should see a popup asking you how  many minutes you like to place the host in maintenance.</p> <p></p> <p>9.7 Create maintenance</p> <p>When we click continue however we get a popup telling us that Zabbix cannot execute the script.</p> <p></p> <p>9.8 Error executing script</p> <p>This error is normal Zabbix has an option in the configuration file of the <code>Zabbix server</code> and the proxy that blocks the execution of global scripts. </p> <p>We get a notification that <code>Zabbix</code> cannot execute the script. The config file has an option to block global executions by default in the server or proxy config activate the option \"EnableGlobalScripts=1\". Go to the <code>Zabbix server</code> configuration file with you favourite editor and enable the parameter and restart the server service. </p> <p>If all goes well this time you will see a popup telling you it was successful this time.</p> <p></p> <p>9.9 Maintenance successful</p> <p>When we look in our Zabbix menu under <code>Data collection</code> =&gt; <code>Maintenance</code> we can see that a new maintenance was created for our host with the time we had specified. This will allow us to create Maintenance windows for hosts from the frontend with only a few clicks.</p> <p>Even better we are now able to allow certain non <code>Admin</code> users to create <code>maintenance periods</code> for hosts without the need to give special access rights or create special profiles. We have in our config of our script the option to limit the use of this <code>frontend script</code> to certain <code>Host groups</code> and <code>User groups</code>.</p> Tip <p>You can now create the same script but add the option <code>yes</code> instead of <code>no</code> when it comes to data collection and you can also create a script to delete the maintenance period by just replacing <code>create</code> with <code>delete</code> and remove all options after \"{HOST.HOST}\". This way you are able to create <code>maintenance periods</code> and delete them when not needed anymore per host.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've reached the end of this journey into Zabbix frontend scripts. By now, you should have a solid understanding of how to create, implement, and manage these tools to extend Zabbix's functionality.</p> <p>We've covered a lot of ground, from the initial steps of crafting your own scripts to seamlessly integrating them into the Zabbix frontend. You've learned how to gather user input to make your scripts more dynamic and versatile, and, crucially, how to configure user and host permissions to maintain a secure and controlled Zabbix environment.</p> <p>The ability to tailor Zabbix to your specific needs with frontend scripts is a significant advantage. It allows you to automate repetitive tasks, streamline workflows, and gain deeper insights into your infrastructure. Whether you're automating routine checks, creating custom dashboards, or integrating with external systems, the knowledge you've gained here will enable you to effectively leverage Zabbix.</p> <p>Remember, the examples and techniques presented in this book provide a foundation. The true power of Zabbix frontend scripts lies in their flexibility and your ability to adapt them to your specific needs. As you continue to explore and experiment, you'll discover new ways to enhance your monitoring capabilities and optimize your Zabbix setup.</p>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#questions","title":"Questions","text":"<ul> <li>Why are Zabbix frontend scripts useful?</li> <li>What are some ways Zabbix frontend scripts can help automate tasks?</li> <li>Why is it important to configure user and host permissions when using Zabbix frontend scripts?</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/frontend-scripts/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://blog.zabbix.com/setting-up-manual-ticket-creation-using-zabbix-frontend-scripts/15550/</li> <li>https://www.zabbix.com/documentation/current/en/manual/web_interface/frontend_sections/administration/scripts</li> <li>https://github.com/Trikke76/Zabbix/tree/master/maintenance</li> </ul>","tags":["advanced"]},{"location":"ch09-zabbix-extending/global-scripts/","title":"Global scripts","text":"","tags":["advanced","expert"]},{"location":"ch10-zabbix-discovery/chapter/","title":"Automating Your Monitoring with Auto Discovery and Active Agent Auto Registration","text":"<p>In this chapter, we'll explore two powerful automation features in Zabbix: auto discovery and active agent auto-registration. These tools are essential for scaling your monitoring efforts by minimizing manual configuration and ensuring new devices and services are seamlessly integrated into your Zabbix environment.</p> <p>We'll begin with auto discovery, which enables Zabbix to automatically detect and monitor new hosts and services within your network. You'll learn how to configure discovery rules, actions, and conditions to automate the onboarding process, making your monitoring more dynamic and adaptive to changes in your infrastructure.</p> <p>Next, we'll dive into active agent auto registration, which simplifies the management of Zabbix agents, especially in large or rapidly changing environments. We'll cover how to set up auto-registration rules that allow agents to register themselves with the Zabbix server, reducing administrative overhead and ensuring all relevant data is captured efficiently.</p> <p>By the end of this chapter, you'll have a thorough understanding of how to leverage auto-discovery and auto-registration to create a more automated, scalable, and efficient monitoring system.</p>"},{"location":"ch11-zabbix-visualisation/chapter/","title":"Graphs, Dashboards, Reports, Maps and other visualisation","text":"<p>In this chapter, we delve into the heart of Zabbix's visualization capabilities, where data comes to life through intuitive and powerful visual tools. From dynamic graphs that track your system's performance to comprehensive dashboards that provide at-a-glance insights, Zabbix offers a rich set of visualization features to help you understand and manage your infrastructure.</p> <p>We'll start by exploring graphs, which allow you to monitor metrics over time, helping you spot trends and anomalies with ease. Next, we'll move on to dashboards, where you can aggregate multiple widgets into a single view for a more holistic understanding of your network's health.</p> <p>Then, we'll discuss reports an essential feature for summarizing and sharing insights with your team or stakeholders. Finally, we'll cover maps, a unique visualization tool that lets you create interactive representations of your network topology, making it easier to pinpoint issues and understand relationships between different components.</p> <p>By the end of this chapter, you'll have a comprehensive understanding of how to leverage Zabbix's visualization tools to monitor, analyse, and communicate the state of your IT environment effectively.  Whether you're a seasoned administrator or just starting with Zabbix, mastering these visual tools will enhance your ability to manage complex infrastructures and ensure optimal performance.</p> <p>Let's dive into the world of Zabbix visualizations and unlock the full potential of your monitoring setup.</p>"},{"location":"ch12-zabbix-api/chapter/","title":"Zabbix API","text":"<p>The Zabbix API is a crucial part for anyone looking to expand the capabilities of their Zabbix environment, automate time-consuming tasks and get information for usage in other systems. In this chapter we will go over various of these capabilities to expand our knowledge of the Zabbix API.</p>"},{"location":"ch12-zabbix-api/self-engaging/","title":"Self-engaging","text":"<p>Welcome to Zabbix API self engaging methods. All upcoming chapters will address the tools available to allow software to re-engage with itself. It is like developing a small service(s) which runs on the top of Zabbix and do exactly the tasks we told to do. This is like simulating an extra employee in the company.</p>"},{"location":"ch12-zabbix-api/self-engaging/#api-variables","title":"API variables","text":"<p>To start to engage with Zabbix API:</p> <p>Create a dedicated service user. Go to Users =&gt; Users, click Create user, set Username api, install Groups No access to the frontend, Under Permissions tab, assign user role Super admin role which will automatically give user type Super admin.</p> <p></p> <p>12.1 Create API user</p> <p>Permissions tab:</p> <p> </p> <p>12.2 API user role and user type</p> <p>Under Users =&gt; API tokens press New API token, assign user api. We can uncheck Set expiration date and time, press Add. Copy macro to clipboard.</p> <p> </p> <p>12.3 Add token to user object</p> <p>Visit Administration =&gt; Macros and install macro. To simulate all upcoming chapters much faster, consider running token in plain text.</p> <p>Token <code>dafa06e74403ca317112cf5ddd3357b2ad2a2c5cb348665f294a53b4058cfbcf</code> must be placed:</p> <pre><code>{$ZABBIX.API.TOKEN}\n</code></pre> <p>Address <code>https://zabbix.book.the</code> of the frontend server must be used via:</p> <pre><code>{$ZABBIX.URL}\n</code></pre> <p>Later throughout chapters, we will use a reference on the API endpoint in a format of:</p> <pre><code>{$ZABBIX.URL}/api_jsonrpc.php\n</code></pre> <p>Now we can take new 2 variables and install globally:</p> <p></p> <p>12.4 User macros</p>"},{"location":"ch12-zabbix-api/self-engaging/#first-api-call","title":"First API call","text":"<p>If you feel new to Zabbix API, try this curl example from Zabbix frontend server.</p> <p>Set bash variables:</p> <pre><code>ZABBIX_API_TOKEN=\"dafa06e74403ca317112cf5ddd3357b2ad2a2c5cb348665f294a53b4058cfbcf\"\nZABBIX_URL=\"https://zabbix.book.the/api_jsonrpc.php\"\n</code></pre> <p>This snippet is tested and compatible with version 7.0/7.4: <pre><code>curl --insecure --request POST \\\n--header 'Content-Type: application/json-rpc' \\\n--header 'Authorization: Bearer '$ZABBIX_API_TOKEN \\\n--data '{\"jsonrpc\":\"2.0\",\"method\":\"proxy.get\",\"params\":{\"output\":[\"name\"]},\"id\":1}' \\\n$ZABBIX_URL\n</code></pre></p> <p>Setting Bearer token in header is available and recommended since 7.0.</p> <p>Setting a static token is available since 6.0. In version 6.0, the token is not in header, but inside JSON body like this: <pre><code>curl --insecure --request POST \\\n--header 'Content-Type: application/json-rpc' \\\n--data '{\"jsonrpc\":\"2.0\",\"method\":\"proxy.get\",\"params\":{\"output\":[\"host\"]},\"auth\":\"'\"$ZABBIX_API_TOKEN\"'\",\"id\":1}' \\\n$ZABBIX_URL\n</code></pre></p>"},{"location":"ch12-zabbix-api/self-engaging/#host-group-membership-http-agent","title":"Host group membership (HTTP agent)","text":"<p>Use case</p> <p>Every time an email arrives user would love to see all host groups the host belongs.</p> <p>Implementation</p> <p>Use {HOST.HOST} as an input for the \"host.get\" API method and find out about host group membership. Format reply in one line, store it in inventory.</p> <p>An item type \"HTTP agent\" is fastest way to run a single Zabbix API call and retrieve back result. This is possible since Zabbix 6.0 where configuring a static session token becomes possible. An upcoming solution is tested and works on version 7.0/7.4</p> <p>Create new HTTP agent item</p> Field Value Item name <code>host.get</code> Type <code>HTTP agent</code> Key <code>host.get</code> Type of information <code>Text</code> URL <code>{$ZABBIX.URL}/api_jsonrpc.php</code> Request type <code>POST</code> Request body type <code>JSON data</code> Update interval <code>1d</code> Populates host inventory field <code>Site rack location</code> <p>Request body:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"host.get\",\n    \"params\": {\n        \"output\": [\"hostgroups\"],\n        \"selectHostGroups\": \"extend\",\n        \"filter\": {\"host\":[\"{HOST.HOST}\"]}\n    },\n    \"id\": 1\n}\n</code></pre> <p>Headers</p> Field Value Authorization <code>Bearer {$ZABBIX.API.TOKEN}</code> <p></p> <p>12.5 Host get method via HTTP agent item</p> <p>Preprocessing steps</p> Name Parameters JSONPath <code>$.result[0].hostgroups[*].name</code> JavaScript <code>return JSON.parse(value).join(',');</code> <p></p> <p>12.6 Preprocessing</p> <p>Last step is to store the outcome in the inventory. Scroll down to the bottom of HTTP agent item and select an inventory field for example \"Site rack location\".</p> <p>To access suggested inventory field, we must use: <pre><code>{INVENTORY.SITE.RACK}\n</code></pre></p> <p>To include extra information inside the message template follow this lead:</p> <p></p> <p>12.7 Inventory fields in media type</p> <p>Warning</p> <p>If data collection is done by Zabbix proxy, it is possible the proxy is incapable to reach Zabbix frontend server due to limitation in firewall. Use <code>curl -kL \"https://zabbix.book.the\"</code> to test!</p>"},{"location":"ch12-zabbix-api/self-engaging/#auto-close-problem-webhook","title":"Auto close problem (Webhook)","text":"<p>Use case</p> <p>Due to reason of not being able to find a recovery expression for a trigger, need to close the event automatically after certain time.</p> <p>Implementation</p> <p>Trigger settings must support <code>Allow manual close</code>. On trigger which needs to be auto closed there must be a tag <code>auto</code> with a value <code>close</code>. An action will invoke a webhook which will use Zabbix API to close event.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p> </p> <p>12.13 Auto close problem</p> Field Value Name <code>Automatically close problem</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value eventid <code>{EVENT.ID}</code> msg <code>Auto closed by API</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script: <pre><code>var params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar eventAcknowledge = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"event.acknowledge\",\"params\":{\"eventids\":\"'+params.eventid+'\",\"action\":1,\"message\":\"'+params.msg+'\"},\"id\":1}'\n));\n\nreturn JSON.stringify(eventAcknowledge);\n</code></pre></p> <p>For the triggers which need to be closed automatically, we need to:</p> <p>1) Set <code>Allow manual close</code> checkbox ON</p> <p> </p> <p>12.8 Allow manual close</p> <p>2) Install tag <code>auto</code> with value <code>close</code></p> <p> </p> <p>12.9 Trigger tags</p> <p>Go to Alerts =&gt; Actions =&gt; Trigger actions</p> <p>Create an action which will be targetable by using tag name <code>auto</code> with a tag value <code>close</code>.</p> <p> </p> <p>12.10 Conditions for action</p> <p>It's important to not create operation step 1, but start operation with step 2:</p> <p></p> <p>12.11 A delayed operation</p> <p>The Default operation step duration field will serve the purpose to tell how long the event will be in problem state. </p> <p></p> <p>12.12 Close event later</p> <p>This solution has been tested with 7.0/7.4</p>"},{"location":"ch12-zabbix-api/self-engaging/#self-destructive-host-webhook","title":"Self destructive host (Webhook)","text":"<p>Use case</p> <p>On a big infrastructure with thousands of devices there is no human who can track which devices are deprovisioned. Need to automatically remove unhealthy devices.</p> <p>Implementation</p> <p>Problem events such as \"Zabbix agent is not available\" or \"No SNMP data collection\" sitting too long in problem state will invoke a webhook to delete the host.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p> </p> <p>12.13 Auto close problem</p> Field Value Name <code>Delete host</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value hostid <code>{HOST.ID}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// delete host via Zabbix API\nvar params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar hostDelete = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.delete\",\"params\":['+params.hostid+'],\"id\":1}'\n));\n\nreturn JSON.stringify(hostDelete);\n</code></pre> <p>To setup action, the trigger must running a tag <code>delete</code> with value <code>host</code>. The conditions can be to target tag plus value and trigger severity:</p> <p> </p> <p>12.15 Delete host target tag and tag value</p> <p>Here we are running a delayed action with a step number 31. Because default duration is 1d, the host will be deleted after 30 days.</p> <p></p> <p>12.16 Delete host operations</p>"},{"location":"ch12-zabbix-api/self-engaging/#replace-host-visible-name-script-item","title":"Replace host Visible name (Script item)","text":"<p>Use case</p> <p>Replace host \"Visible name\" with a name which is already stored in inventory</p> <p>Implementation</p> <p>The \"Script\" item, will read metadata for all hosts. Will read the Name field stored inside inventory and compare with current Visible name of host. If inventory field is empty, the visible field will not be replaced.</p> <p>This is maximum efficiency to run a single API call once per day. If nothing needs to be done, \"host.update\" API calls will not be wasted. No SQL UPDATE operations for the Zabbix database :)</p> <p>Go to Data collection =&gt; Hosts =&gt; press Create host</p> Field Value Host name <code>Update host Visible name</code> Host groups <code>Daily Zabbix API calls</code> <p>Go to Items and press Create item</p> Field Value Name <code>Visible name</code> Type <code>Script</code> Key <code>visible.name</code> Type of information <code>Text</code> Update interval <code>1d</code> <p>Parameters:</p> Field Value token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// load all parameters in memory\nvar params = JSON.parse(value);\n\n// new API call\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\n// obtain Bare minimum fields: host \"Visible name\" and inventory \"Name\"\nvar hostData = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.get\",\"params\":{\"output\":[\"hostid\",\"inventory\",\"name\",\"host\"],\"selectInventory\":[\"name\"]},\"id\":1}'\n)).result;\n\nvar listOfErrors = [];\nvar listOfSuccess = [];\n\n// iterate through host list\nfor (var h = 0; h &lt; hostData.length; h++) {\n\n    // validate if inventory \"name\" element exists\n    if (typeof hostData[h].inventory.name !== 'undefined') {\n\n        // if \"name\" field is not empty\n        if (hostData[h].inventory.name.length &gt; 0) {\n\n            // compare if inventory name is not the same as host visible name\n            if (hostData[h].inventory.name !== hostData[h].name) {\n\n                Zabbix.Log(params.debug, 'Host visible name field, host: ' + hostData[h].name + ' need to reinstall visible name');\n\n                // formulate payload for easy printing for troubleshoting\n                payload = '{\"jsonrpc\":\"2.0\",\"method\":\"host.update\",\"params\":' + JSON.stringify({\n                    'hostid':hostData[h].hostid,\n                    'name':hostData[h].inventory.name\n                    }) + ',\"id\":1}';\n\n                Zabbix.Log(params.debug, 'Host visible name field, payload: ' + payload);\n\n                try {\n                    hostUpdate = JSON.parse(request.post(params.url, payload));\n\n                    // save API errors, like name already exists:\n                    if (typeof hostUpdate.error !== 'undefined') { listOfErrors.push({'error':hostUpdate.error,'origin':hostData[h].host}) }\n\n                    // save successfull operation:\n                    if (typeof hostUpdate.result !== 'undefined') { listOfSuccess.push(hostUpdate.result) }\n\n                }\n                catch (error) {\n                    throw 'noo';\n                }\n\n            }\n\n        }\n\n    }\n\n}\n\nreturn JSON.stringify({ 'listOfSuccess': listOfSuccess, 'errors': listOfErrors });\n</code></pre> <p>Warning</p> <p>The chances of having duplicate host names are still possible. In this case, the script will continue to parse all hosts and will retry update operation. Ensure $.listOfErrors in output is an empty list.</p> <p>All together</p> <p></p> <p>12.17 Script item, host Visible name</p> <p>The item will be sit at host level and serve a purpose of cronjob</p> <p></p> <p>12.18 Script item ready</p> <p>This is tested and works with Zabbix 7.0</p>"},{"location":"ch12-zabbix-api/self-engaging/#cleanup-unused-zbx-interfaces-webhook","title":"Cleanup unused ZBX interfaces (Webhook)","text":"<p>Use case 1</p> <p>Default \"Host availability\" widget will print \"Unknown\" interfaces if none of Zabbix agent passive checks are using it. Need to remove interface to get \"Unknown\" interface number closer to 0</p> <p></p> <p>12.19 Unknown ZBX passive interfaces</p> <p>Use case 2</p> <p>Active checks by design do not require an interface. Having a defined interface will mislead the team to understand how active checks actually works.</p> <p>Use case 3</p> <p>https://cloud.zabbix.com/ is good for server monitoring with active checks. While registering new servers, the IP address of host interface is not relatable to infrastructure. Remove the interface to make setup look more clean.</p> <p>Implementation</p> <p>To bring aboard a host, run a webhook to validate if an interface is used by any passive Zabbix agent items. If it's not used, then remove interface.</p> <p>To implement, visit Alerts =&gt; Scripts, press Create script</p> <p></p> <p>12.20 Remove unused ZBX interfaces</p> <p>Webhook</p> Field Value Name <code>Remove unused ZBX interfaces</code> Scope <code>Action operation</code> Type <code>Webhook</code> <p>Parameters:</p> Field Value debug <code>4</code> host <code>{HOST.HOST}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>Script:</p> <pre><code>// Load all variables\nvar params = JSON.parse(value);\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\n// Pick up hostid\nvar hostid = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"host.get\",\"params\":{\"output\":[\"hostid\"],\"filter\":{\"host\":[\"' + params.host + '\"]}},\"id\":1}'\n)).result[0].hostid;\n\n// Extract all passive Zabbix agent interfaces\nvar allAgentInterfaces = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.get\",\"params\":{\"output\":[\"interfaceid\",\"main\"],\"filter\":{\"type\":\"1\"},\"hostids\":\"' + hostid + '\"},\"id\":1}'\n)).result;\n\n// If any ZBX interface was found then proceed fetching all items because need to find out if any items use an interface\nif (allAgentInterfaces.length &gt; 0) {\n    // Fetch all items which are defined at host level and ask which item use passive ZBX agent interface\n    // Simple check items (like icmpping) also can use zabbix agent interface\n    var items_with_int = JSON.parse(request.post(params.url,\n        '{\"jsonrpc\":\"2.0\",\"method\":\"item.get\",\"params\":{\"output\":[\"type\",\"interfaces\"],\"hostids\":\"' + hostid + '\",\"selectInterfaces\":\"query\"},\"id\":1}'\n    )).result;\n}\n\n// Define an interface array. This is required if more than one ZBX interface exists on host level\nvar interfacesInUse = [];\n\n// Iterate through all ZBX interfaces\nfor (var zbx = 0; zbx &lt; allAgentInterfaces.length; zbx++) {\n\n    // Go through all items which is defined at host level\n    for (var int = 0; int &lt; items_with_int.length; int++) {\n\n        // There are many items which does not need interface. Specifically analyze the ones which has an interface defined\n        if (items_with_int[int].interfaces.length &gt; 0) {\n\n            // There is an interface found for the item\n            if (items_with_int[int].interfaces[0].interfaceid == allAgentInterfaces[zbx].interfaceid) {\n                // Put this item in list which use an interface\n                var row = {};\n                row[\"itemid\"] = items_with_int[int].itemid;\n                row[\"interfaceid\"] = allAgentInterfaces[zbx].interfaceid;\n                row[\"main\"] = allAgentInterfaces[zbx].main;\n                interfacesInUse.push(row);\n            }\n        }\n    }\n}\n\n// Final scan to identify if any interface is wasted\nvar needToDelete = 1;\nvar evidenceOfDeletedInterfaces = [];\nvar mainNotUsed = 0;\nfor (var defined = 0; defined &lt; allAgentInterfaces.length; defined++) {\n\n    // Scan all items\n    needToDelete = 1;\n    for (var used = 0; used &lt; interfacesInUse.length; used++) {\n        if (allAgentInterfaces[defined].interfaceid == interfacesInUse[used].interfaceid) {\n            needToDelete = 0;\n        }\n    }\n\n    // If flag was not turned off, then no items with this interface were found. No items are using this interface. Safe to delete\n    // Delete all slaves first\n    if (needToDelete == 1 &amp;&amp; allAgentInterfaces[defined].main == 0) {\n        var deleteInt = JSON.parse(request.post(params.url,\n            '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.delete\",\"params\":[\"' + allAgentInterfaces[defined].interfaceid + '\"],\"id\":1}'\n        ));\n        var row = {};\n        row[\"deleted\"] = deleteInt;\n        evidenceOfDeletedInterfaces.push(row);\n    }\n\n    if (needToDelete == 1 &amp;&amp; allAgentInterfaces[defined].main == 1) {\n        var mainNotUsed = allAgentInterfaces[defined].interfaceid;\n    }\n\n}\n\n// Delete main interface at the end\nif (mainNotUsed &gt; 0) {\n    var deleteInt = JSON.parse(request.post(params.url,\n        '{\"jsonrpc\":\"2.0\",\"method\":\"hostinterface.delete\",\"params\":[\"' + mainNotUsed + '\"],\"id\":1}'\n    ));\n    var row = {};\n    row[\"deleted\"] = deleteInt;\n    evidenceOfDeletedInterfaces.push(row);\n}\n\nvar output = JSON.stringify({\n    \"allAgentInterfaces\": allAgentInterfaces,\n    \"interfacesInUse\": interfacesInUse,\n    \"evidenceOfDeletedInterfaces\": evidenceOfDeletedInterfaces\n});\n\nZabbix.Log(params.debug, 'Auto remove unused ZBX agent passive interfaces: ' + output)\n\nreturn 0;\n</code></pre> <p>To make webhook in action visit Alerts =&gt; Actions =&gt; Autoregistration actions. Press Create action. For example to auto register Linux servers, we can target a pattern \".lnx\" inside the hostname.</p> <p></p> <p>12.21 Conditions for ZBX active checks</p> <p>The operations will use newly made webhook</p> <p></p> <p>12.22 Operations of Zabbix agent autoregistration</p> <p>The complete picture is</p> <p></p> <p>12.23 Zabbix agent autoregistration completed</p>"},{"location":"ch12-zabbix-api/self-engaging/#read-log-file-from-yyyymmdd-filename-script","title":"Read log file from YYYY.MM.DD filename (Script)","text":"<p>Use case</p> <p>Requirement is to read a filename with today's pattern YYYY.MM.DD or YYYY_MM_DD or YYYYMMDD.</p> <p>Popular solution 1 - logrt</p> <p>Using \"logrt\" item key can be used to cover use case. However in case hundreds of files in directory, the CPU will have impact.</p> <p>Popular solution 2 - LLD rule</p> <p>We Zabbix LLD rule to find the files in directory. This method do not allow to store all data insize same itemid. When files are deleted from server, the items in Zabbix will get unsupported.</p> <p>Alternative solution</p> <p>We will use Zabbix API to create a global variables YYYY, MM, DD. Those will be universally available by any host, template. The \"cronjob host\" will run at least once per day and reinstall the date right after the midnight. Inside template level there will be a single/static item key which will be able to read today's log.</p> <p>Go to Data collection =&gt; Hosts =&gt; press Create host</p> Field Value Host name <code>Dude</code> Host groups <code>Cronjob</code> <p>Go to Items and press Create item</p> Field Value Name <code>Create or update global macro</code> Type <code>Script</code> Key <code>create.or.update.global.macro</code> Type of information <code>Text</code> Update interval <code>0</code> Custom intervals: Scheduling <code>h0m1s1</code> <p>Parameters:</p> Field Value 1_year <code>{$DATE:arg1.year}</code> 2_month <code>{$DATE:arg2.month}</code> 3_day <code>{$DATE:arg3.day}</code> 4_hour <code>{$DATE:arg4.hour}</code> 5_minute <code>{$DATE:arg5.minute}</code> 6_second <code>{$DATE:arg6.seconds}</code> token <code>{$ZABBIX.API.TOKEN}</code> url <code>{$ZABBIX.URL}/api_jsonrpc.php</code> <p>The script to create and maintain global variables:</p> <pre><code>// load all variables into memory\nvar params = JSON.parse(value),\n    now = new Date();\n\n// function to always print seconds, minutes, hours as 2 digits, even it its a 1 digit character\nfunction padLeft(value, length, char) {\n    value = String(value);\n    while (value.length &lt; length) {\n        value = char + value;\n    }\n    return value;\n}\n\n// define macros to check/create without '{$' an '}'\nvar macrosToCheck = [\n    'DATE:arg1.year',\n    'DATE:arg2.month',\n    'DATE:arg3.day',\n    'DATE:arg4.hour',\n    'DATE:arg5.minute',\n    'DATE:arg6.seconds'\n];\n\n// prepare values for replacement. order is important\nvar valuesToInsert = [\n    now.getFullYear().toString(),\n    padLeft(now.getMonth() + 1, 2, '0'),\n    padLeft(now.getDate(), 2, '0'),\n    padLeft(now.getHours(), 2, '0'),\n    padLeft(now.getMinutes(), 2, '0'),\n    padLeft(now.getSeconds(), 2, '0')\n];\n\nvar request = new HttpRequest();\nrequest.addHeader('Content-Type: application/json');\nrequest.addHeader('Authorization: Bearer ' + params.token);\n\nvar allGlobalMacrosBefore = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.get\",\"params\":{\"output\":[\"globalmacroid\",\"macro\",\"value\"],\"globalmacro\":true},\"id\":1}'\n)).result;\n\n// prepare much compact array which holds only necessary values\nvar target = [];\nfor (var a = 0; a &lt; allGlobalMacrosBefore.length; a++) {\n    for (var b = 0; b &lt; macrosToCheck.length; b++) {\n        Zabbix.Log(4, 'macro update compare: ' + allGlobalMacrosBefore[a].macro + ' with ' + '{$' + macrosToCheck[b] + '}');\n        if (allGlobalMacrosBefore[a].macro === '{$' + macrosToCheck[b] + '}') {\n            Zabbix.Log(4, 'macro update: ' + allGlobalMacrosBefore[a].macro + ' === ' + '{$' + macrosToCheck[b] + '}');\n            target.push(allGlobalMacrosBefore[a]);\n        }\n    }\n}\n\n// check if the amount of macros to maintain match existing macro. this portion will execute if run template for the first time\nvar macroExists = 0;\nvar allCreateOperation = [];\nif (macrosToCheck.length !== target.length) {\n    // something is missing, need to find what. open every macro which is known by Zabbix\n    for (var b = 0; b &lt; macrosToCheck.length; b++) {\n        // reset the counter, so far macro has not been found\n        macroExists = 0;\n        for (var a = 0; a &lt; target.length; a++) {\n            Zabbix.Log(3, 'look for missing macro update: ' + target[a].macro + ' VS {$' + macrosToCheck[b] + '}');\n            if (target[a].macro === '{$' + macrosToCheck[b] + '}') {\n                macroExists = 1;\n                break;\n            }\n        }\n\n        // if the list was completed and macro was not found then create a new\n        if (macroExists !== 1) {\n            var createNew = JSON.parse(request.post(params.url,\n                '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.createglobal\",\"params\":{\"macro\":\"' + '{$' + macrosToCheck[b] + '}' + '\",\"value\":\"' + valuesToInsert[b] + '\"},\"id\":1}'\n            ));\n            allCreateOperation.push(createNew);\n        }\n    }\n}\n\n// prepare payload what needs to be updated\nvar dataForUpdate = [];\nfor (var m = 0; m &lt; target.length; m++) {\n    // iterate through importand macro names\n    for (var n = 0; n &lt; macrosToCheck.length; n++) {\n        // compare the macro name\n        if (target[m].macro === '{$' + macrosToCheck[n] + '}') {\n            // if value is not correct at the moment\n            Zabbix.Log(4, 'about to macro update: ' + target[m].value + ' VS ' + valuesToInsert[n]);\n            if (Number(target[m].value) !== Number(valuesToInsert[n])) {\n                var row = {}\n                row[\"globalmacroid\"] = target[m].globalmacroid;\n                row[\"value\"] = valuesToInsert[n];\n                dataForUpdate.push(row);\n            }\n        }\n    }\n}\n\nZabbix.Log(4, 'about to macro update: ' + JSON.stringify(dataForUpdate));\n\n\n// if there is anything to update (usually seconds has been changed)\nif (dataForUpdate.length &gt; 0) {\nvar allUpdateOperations = JSON.parse(request.post(params.url,\n    '{\"jsonrpc\":\"2.0\",\"method\":\"usermacro.updateglobal\",\"params\":'+ JSON.stringify(dataForUpdate) +',\"id\":1}'\n));\n}\n\n\n// output\nreturn JSON.stringify({\n    'allCreateOperation': allCreateOperation,\n    'allUpdateOperations': allUpdateOperations\n})\n</code></pre> <p></p> <p>12.24 Create or reinstall global macros</p> <p>After running a script now, there are global variables available:</p> <p></p> <p>12.24 Global YYYY, MM, DD macros</p> <p>For log item monitoring we can use native log item key:</p> <pre><code>log[/var/log/zabbix/backup_{$DATE:arg1.year}.{$DATE:arg2.month}.{$DATE:arg3.day}.log]\n</code></pre> <p>In case need to analyze a single summary where file size is less than 16 MB, then can use:</p> <pre><code>vfs.file.contents[/var/log/backup/summary_{$DATE:arg1.year}.{$DATE:arg2.month}.{$DATE:arg3.day}.txt]\n</code></pre>"},{"location":"ch13-advanced-security/agent-security/","title":"Securing the agent","text":""},{"location":"ch13-advanced-security/chapter/","title":"Advanced set-up and security","text":"<p>In today's interconnected IT landscape, monitoring systems like Zabbix have become critical infrastructure components, offering visibility into the health and performance of entire networks. However, these powerful monitoring tools also represent potential security vulnerabilities if not properly secured. This chapter will explores the essential combination of SELinux and security best practices to harden your Zabbix deployment against modern threats.</p> <p>Security is not an optional feature but a fundamental requirement for any monitoring solution. Zabbix, with its extensive reach across your infrastructure, has access to sensitive system information and often operates with elevated privileges. Without proper security controls, a compromised monitoring system can become a launchpad for lateral movement across your network, potentially exposing critical business data and systems.</p> <p>We'll explore how SELinux's mandatory access control framework provides an additional security layer beyond traditional permissions, and how proper configuration can dramatically reduce your attack surface. You'll learn practical, implementable security measures that balance protection with functionality, ensuring your monitoring capabilities remain intact while defending against both external and internal threats.</p> <p>Whether you're a system administrator, security professional, or IT manager, understanding these security principles will help you transform your Zabbix deployment from a potential liability into a secure asset within your security architecture.</p>"},{"location":"ch13-advanced-security/partitioning-database/","title":"Partitioning a Zabbix MariaDB (MySQL) database with Perl","text":"<p>As your Zabbix environment grows, you'll eventually notice that the built-in housekeeper struggles to keep up. This happens because the Zabbix housekeeper works by scanning the database for each history or trend entry that exceeds its configured retention period and deletes them row by row. While this works for smaller setups, as the database grows your housekeeper process will reach a limit as to what it can delete in time.</p> <p>You can usually see this issue happening when the housekeeper process runs at 100% continuously and the database keeps growing larger. This indicated that the cleanup can't keep pace with incoming data.</p> <p>PostgreSQL users can use the native TimescaleDB plugin in Zabbix, which handles historical data retention more efficiently. <code>MariaDB</code> (or MySQL) doesn't have a similar built-in option.</p> <p>This is where <code>MariaDB</code> partitioning comes in.</p> Note <p>It's recommended to do partitioning right after setting up your Zabbix database. This process is a lot easier on a clean database, than it is on a database that is already is use.</p>"},{"location":"ch13-advanced-security/partitioning-database/#preparing-the-database","title":"Preparing the database","text":"<p>To begin implementing <code>MariaDB</code> partitioning, you'll need access with super privileges to your Zabbix database server. Before starting however, if you are going to partition an existing zabbix database make sure to create a backup of your database. We can do this in various ways and with various tools, but the built-in <code>mariadb-dump</code> tool will work perfectly fine.</p> <p>https://mariadb.com/kb/en/mariadb-dump/</p> <p>https://mariadb.com/kb/en/mariadb-import/</p> <p><code>Make sure to export your database backup to a different server (or disk at least).</code></p> <p>Keep in mind, data corruption can happen when performing large scale changes on your DB and as such also with partitioning.</p> <p>To prevent MariaDB running out of space, also make sure to have a generous amount of free space on your system. Running partitioning when you have no free space left can lead to a corrupted database data. Check your free space with:</p> <p>Check disk space availability</p> <pre><code>df -h\n</code></pre>"},{"location":"ch13-advanced-security/partitioning-database/#preparing-the-partitioning","title":"Preparing the partitioning","text":"<p>For existing Zabbix databases, partitioning can be a very time-consuming process. It all depends on the size of the database and the resources available to MariaDB-Server.</p> <p>This is why I always run partitioning in a <code>tmux</code> session. If <code>tmux</code> hasn't been installed onto your database server yet, do that now.</p> <p>Check disk space availability</p> <p>Red Hat-based <pre><code>dnf install tmux\n</code></pre> Debian-based <pre><code>apt install tmux\n</code></pre></p> <p>Now we can issue the tmux command to open a new tmux session:</p> <p>Open tmux session</p> <pre><code>tmux\n</code></pre> <p>This opens up an terminal session that will remain active even if our SSH session times out.</p> <p>Now, let's open up a notepad and prepare our partitions. We\u2019ll be partitioning the following tables:</p> Table name Purpose Data type history Stores numeric floating point values history_uint Stores numeric unsigned values history_str Stores text values up to 255 characters history_text Stores text values values up to 64kB history_log Stores text values up to 64kB with additional log related properties like timestamp history_bin Stores binary image data trends Stores the min/avg/max/count trends of numeric floating point data trends_uint Stores the min/avg/max/count trends of numeric unsigned data <p>We first will have first have to determine how long we want to store the information per table. MariaDB partitioning will take over the history and trend storage periods as usually configured in the Zabbix frontend. We will configure these retention periods later in the perl script.</p> <p>Let's say I want to store my history tables for <code>31 days</code> and my trend data for <code>15 months</code>. This allows me to troubleshoot in depth for a month and also audit my data for little over a year.</p> <p>Now this is where I open up a notepad and prepare my partitioning commands. Our history tables will be partitioned by day and our trends tables will be partitioned by month.</p> <p>So, let\u2019s start with our history_uint table:</p> <p>Prepare history partitioning (assuming today is May 10th 2025)</p> <pre><code>ALTER TABLE history_uint PARTITION BY RANGE ( clock)\n\n(PARTITION p2025_03_26 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-27 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_27 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-28 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_28 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-29 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_29 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-30 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03_30 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-02 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-03 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-04 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-05 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-06 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_06 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-07 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_07 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-08 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_08 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-09 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_09 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-10 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_10 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-11 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04_11 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-12 00:00:00\")) ENGINE = InnoDB);\n</code></pre> <p>As you can see, I only created <code>16</code> partitions here. I could have created <code>31</code>, which would have been better perhaps. <code>MariaDB</code> will now add all my older than 2025-03-26 data in that single partition. No problem, but it will take longer for my disk space to free up this bigger partitioning, after which is will only keep 1 day worth of data from that point.</p> <p>I also created a partition in the future, just to have it. The script will handle creating new partitions later for us.</p> <ul> <li>Creating less than 31 partitions: End up with 1 big partition until it is deleted</li> <li>Creating exactly 31 partitions: End up with the ideal set-up immediately, but more   to create.</li> </ul> <p>Now, create this <code>ALTER TABLE</code> commands with the partitions for all history tables. We then do the same for the trends tables:</p> <p>Prepare trends partitioning (assuming today is May 10th 2025)</p> <pre><code>ALTER TABLE trends_uint PARTITION BY RANGE ( clock)\n\n(PARTITION p2024_12 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-01-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_01 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-02-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_02 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-03-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_03 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-04-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_04 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-05-01 00:00:00\")) ENGINE = InnoDB,\n\nPARTITION p2025_05 VALUES LESS THAN (UNIX_TIMESTAMP(\"2025-06-01 00:00:00\")) ENGINE = InnoDB);\n</code></pre> <p>As you can see, here we are partitioning by month instead of by day. Once again, I can create all partitions for 15 months, or less. That's up to us to decide. Prepared this command for all trends tables.</p> <p>Then it is time to login to MariaDB and start the partitioning. Please do not forget to use the <code>tmux</code> command as we mentioned earlier.</p> <p>Login to MariaDB</p> <p><code>mariadb -u root -p</code></p> <p>Execute the history and trends partitioning commands you prepared in your notepad one by one and make sure to wait for each to finish. As mentioned with large database, be patient. With a clean Zabbix database, this process should be near instant.</p>"},{"location":"ch13-advanced-security/partitioning-database/#setting-up-the-perl-script","title":"Setting up the Perl script","text":"<p>With the partitioning done, we still need to maintain the partitioned setup. MariaDB will not create new and delete old partitions for us automatically, we need to use a <code>perl</code> script for this. Years ago, an honorable Zabbix community member wrote a <code>perl</code> script to maintain the partitioning and the people at <code>Opensource ICT Solutions</code> have been maintaining it. You can find it on their GitHub repository:</p> <p>https://github.com/OpensourceICTSolutions/zabbix-mysql-partitioning-perl</p> <p>Download the script from their GitHub and save it on your Zabbix database server(s) in the following folder:</p> <p>Script folder (create the folder if it doesn't exist)</p> <p><code>/usr/lib/zabbix/</code></p> <p>Then make the script executable, so we can create a cronjob later to execute it.</p> <p>Make the script executable</p> <p><code>chmod 750 /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>Now, let's make sure all the settings in the script are set-up correctly. Edit the script with your favourite editor (yes, nano is also an option).</p> <p>Edit the script</p> <p><code>vim /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>There are a few lines here we need to edit to make sure the script works. Let's start with our MariaDB login details.</p> <p>Add login details to the script</p> <pre><code>my $dsn = 'DBI:mysql:'.$db_schema.':mysql_socket=/var/lib/mysql/mysql.sock';\n\nmy $db_user_name = 'zabbix';\n\nmy $db_password = 'password';\n</code></pre> <p>Make sure to modify the credentials and socket path to reflect your own Zabbix database setup. The MariaDB username and password can, for instance, match those defined in your Zabbix server configuration file. You can also create a different user for this if preferred.</p> <p>Also, keep in mind that the MariaDB socket file can vary depending on your distribution. If the default path (/var/lib/mysql/mysql.sock) doesn't apply, update it accordingly. For example, on Ubuntu systems, the socket is often located at /var/run/mysqld/mysql.sock.</p> <p>Next up, we should edit the settings related to how long we want our data to be stored. We define that in the following block.</p> <p>Add login details to the script</p> <pre><code>my $tables = {  'history' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_log' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_str' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_text' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_uint' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'history_bin' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '31'},\n\n                'trends' =&gt; { 'period' =&gt; 'month', 'keep_history' =&gt; '15'},\n\n                'trends_uint' =&gt; { 'period' =&gt; 'month', 'keep_history' =&gt; '15'},\n</code></pre> <p>Keep in mind that <code>history</code> is defined by day here and <code>trends</code> are defined by month.</p> <p>We also need to change the timezone to match the timezone configured on our Zabbix database server. As this was written in the the Netherlands, I will use <code>Europe/Amsterdam</code>.</p> <p>Add correct timezone</p> <p><code>my $curr_tz = 'Europe/Amsterdam';</code></p> <p>Then the last important step is to make sure that we comment or uncomment some lines in the script. The script works for both <code>MariaDB</code> and <code>MySQL</code>, as well as for older versions. It is however not smart enough to detect what to use automatically, but feel free to open up that pull request!</p> <p>The script is already out of the box configured for <code>MariaDB</code>, so we don't need to do anything.</p> <p>For the <code>MySQL 8.x</code> users comment the following <code>MariaDB</code> lines.</p> <p>Comment MariaDB</p> <pre><code># MySQL 5.6 + MariaDB\n\n    #my $sth = $dbh-&gt;prepare(qq{SELECT plugin_status FROM information_schema.plugins\n    WHERE plugin_name = 'partition'});\n\n\n    #$sth-&gt;execute();\n\n\n    #my $row = $sth-&gt;fetchrow_array();\n\n\n    #$sth-&gt;finish();\n\n    #    return 1 if $row eq 'ACTIVE';\n</code></pre> <p>And uncomment the <code>MySQL 8.x</code> lines.</p> <p>Uncomment MySQL 8.x</p> <pre><code># MySQL 8.x (NOT MariaDB!)\n\n    my $sth = $dbh-&gt;prepare(qq{select version();});\n    $sth-&gt;execute();\n    my $row = $sth-&gt;fetchrow_array();\n\n    $sth-&gt;finish();\n\n           return 1 if $row &gt;= 8;\n\n    # End of MySQL 8.x\n</code></pre> <p>Keep in mind, ONLY do this if you are using <code>MySQL 8.x</code> and later. If you are on <code>MySQL 5.6</code> or <code>MariaDB</code> do NOT change these lines.</p> <p>For Zabbix 5.4 and OLDER versions also make sure to uncomment the indicated lines. But do not do this for Zabbix 6.0 and higher though.</p> <p>Uncomment for Zabbix 5.4 and older only</p> <pre><code># Uncomment the following line for Zabbix 5.4 and earlier\n\n    # $dbh-&gt;do(\"DELETE FROM auditlog_details WHERE NOT EXISTS (SELECT NULL FROM\n    auditlog WHERE auditlog.auditid = auditlog_details.auditid)\");\n\n    }\n</code></pre> <p>For Zabbix 6.4 and OLDER versions also make sure to comment the following line. Do not do this for Zabbix 7.0 and higher though:</p> <p>Uncomment for Zabbix 6.4 and older only</p> <p><code>'history_bin' =&gt; { 'period' =&gt; 'day', 'keep_history' =&gt; '60'},</code></p> <p>We also need to install some Perl dependencies to make sure we can execute the script.</p> <p>Install dependencies</p> <p>Red Hat-Based <pre><code>dnf install perl-DateTime perl-Sys-Syslog\n</code></pre> Debian-based <pre><code>apt-get install libdatetime-perl liblogger-syslog-perl\n</code></pre></p> <p>If perl-DateTime isn't available on your Red Hat 7.x installation make sure to install the powertools repo.</p> <p>Install correct repository</p> <p>Red Hat 7 based <pre><code>yum config-manager --set-enabled powertools\n</code></pre></p> <p>Red Hat 9 based <pre><code>dnf config-manager --enable crb\n</code></pre></p> <p>Genuine Red Hat <pre><code>subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms\n</code></pre></p> <p>Oracle Linux <pre><code>dnf config-manager --set-enabled ol8_codeready_builder\n</code></pre></p> <p>Then the last step is to add a cronjob to execute the script everyday.</p> <p>Open crontab</p> <p><code>crontab -e</code></p> <p>Add the following line to create the cronjob.</p> <p>Create cronjob</p> <p><code>55 22 * * * /usr/lib/zabbix/mysql_zbx_part.pl &gt;/dev/null 2&gt;&amp;1</code></p> <p>Execute the script manually to test.</p> <p>Manual script execution for testing</p> <p><code>perl /usr/lib/zabbix/mysql_zbx_part.pl</code></p> <p>Then we can check and see if it worked.</p> <p>Check the script log</p> <p><code>journalctl -t mysql_zbx_part</code></p> <p>This will give you back a list of created and deleted partitions if you've done everything right. Make sure to check this command again tomorrow, to make sure the cronjob is working as expected.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/","title":"Partitioning PostgreSQL with TimescaleDB","text":"<p>If you're familiar with partitioning a Zabbix database using MySQL or any of the other forks like MariaDB, you're likely aware of the complexity involved, which often requires Perl scripts and manual database operations. Fortunately, PostgreSQL offers a much simpler and more streamlined approach. With the TimescaleDB extension, partitioning is fully automated. This extension is not only powerful and efficient, it is also the only method officially supported by Zabbix for database partitioning. TimescaleDB takes care of the underlying logic, freeing you from custom scripts and manual tweaks. For this reason, PostgreSQL could be the preferred and most convenient option for managing large scale Zabbix environments.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#installing-timescaledb","title":"Installing TimescaleDB","text":"<p>First, make sure to download TimescaleDB from the correct source: https://docs.timescale.com/self-hosted/latest/install/. Avoid using the version available in the standard PostgreSQL package repository, as it is outdated and not suitable for Zabbix.</p> <p>TimescaleDB comes in two editions: one released under the Apache license and the other as the Community edition. For Zabbix, the Community edition is the recommended choice. It includes all advanced features such as native compression, which are essential for efficient long term data storage and performance in larger environments.</p> Info <p>To use TimescaleDB with Zabbix, make sure PostgreSQL is installed from the official PostgreSQL community repositories, as described in our setup guide. Do not use the PostgreSQL version provided by Red Hat or its derivatives. The TimescaleDB extension is not compatible with that version, and attempting to use it will lead to failure in the configuration.</p> Note <p>Always check in the Zabbix documentation before you start what version of PostgreSQL is supported and what version of the TimescaleDB is supported that way you don't install any unsupported version that could run you into issues. https://docs.timescale.com/self-hosted/latest/install/installation-linux/#supported-platforms</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#add-the-timescaledb-repository","title":"Add the TimescaleDB repository","text":"<p>adding the repository</p> <p>Red Hat <pre><code>sudo tee /etc/yum.repos.d/timescale_timescaledb.repo &lt;&lt;EOL\n[timescale_timescaledb]\nname=timescale_timescaledb\nbaseurl=https://packagecloud.io/timescale/timescaledb/el/$(rpm -E %{rhel})/\\$basearch\nrepo_gpgcheck=1\ngpgcheck=0\nenabled=1\ngpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nmetadata_expire=300\nEOL\n</code></pre> Ubuntu <pre><code>echo \"deb https://packagecloud.io/timescale/timescaledb/ubuntu/ $(lsb_release -c -s) main\" | sudo tee /etc/apt/sources.list.d/timescaledb.list\n</code></pre> <pre><code>wget --quiet -O - https://packagecloud.io/timescale/timescaledb/gpgkey |\n sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/timescaledb.gpg\n</code></pre></p> <p>Update your local repository list</p> <p>Red Hat <pre><code>sudo dnf update -y\n</code></pre> Ubuntu <pre><code>sudo apt update -y\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#install-timescaledb","title":"Install TimescaleDB","text":"<p>Install TimescaleDB</p> <p>Red Hat <pre><code>sudo yum install timescaledb-2-postgresql-17 postgresql17\n</code></pre> Ubuntu <pre><code>sudo apt install timescaledb-2-postgresql-17 postgresql-client-17\n</code></pre></p> Note <p>Of course, you need to match the TimescaleDB version to the version of PostgreSQL you installed. For example, if you are using PostgreSQL 14, you must install the corresponding TimescaleDB packages for version 14. The installation would look like this: <pre><code>dnf install timescaledb-2-postgresql-14 postgresql-client-14\n</code></pre> Using mismatched versions can lead to compatibility issues, so always make sure the TimescaleDB packages align with your PostgreSQL version.</p> Warning <pre><code>Be sure to install the version of TimescaleDB that is supported by Zabbix\nalso when you upgrade your OS verify that the new database version and\ntimescaledb are supported by Zabbix. It's probably best to exclude them from\nautomatic updates.\n</code></pre> <p>Check for specific versions</p> <p>Red Hat <pre><code>dnf list timescaledb-2-postgresql-17 --showduplicates\n</code></pre> Ubuntu <pre><code>apt-cache policy timescaledb-2-postgresql-17\n</code></pre></p> <p>installing a specific version and lock the version</p> <p>Red Hat <pre><code>sudo dnf install timescaledb-2-postgresql-17-2.19.3\nsudo dnf versionlock add timescaledb-2-postgresql-17\n</code></pre> Ubuntu <pre><code>sudo apt install timescaledb-2-postgresql-17=2.19.3~ubuntu24.04 timescaledb-2-loader-postgresql-17=2.19.3~ubuntu24.04\nsudo apt-mark hold timescaledb-2-postgresql-17\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#configure-timescaledb","title":"Configure TimescaleDB","text":"<p>The next step is to load the TimescaleDB extension into your PostgreSQL database and tune the configuration. There are two ways to do this: the automated way and the manual way.</p> <p>TimescaleDB provides a tuning script that analyses your system and applies recommended settings to optimize performance. On Red Hat based systems, you can run:</p> <pre><code>sudo timescaledb-tune --pg-config=/usr/pgsql/17/bin/pg_config\n</code></pre> <p>For Ubuntu and Debian based systems, simply run:</p> <pre><code>sudo timescaledb tune\n</code></pre> <p>This script will suggest configuration changes and can update your postgresql configuration file automatically. If you prefer to tune the settings manually, which is often recommended for experienced users, you will need to edit your postgresql configuration file yourself.</p> <p>At a minimum, make sure to add the following line at the end of the file:</p> <pre><code>shared_preload_libraries = 'timescaledb'\n</code></pre> <p>Let's load the library</p> <p>Red Hat <pre><code>echo \"shared_preload_libraries = 'timescaledb'\" | sudo tee -a /var/lib/pgsql/17/data/postgresql.conf\n</code></pre> <pre><code>systemctl restart postgresql-17\n</code></pre> Ubuntu <pre><code>echo \"shared_preload_libraries = 'timescaledb'\" | sudo tee -a /etc/postgresql/17/main/postgresql.conf\n</code></pre> <pre><code>sudo systemctl restart postgresql\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#configure-zabbix-for-timescaledb","title":"Configure Zabbix for timescaledb","text":"<p>Next, we connect to the Zabbix database as the user <code>zabbixsrv</code>, or whichever database user you have configured earlier, and create the TimescaleDB extension. However, before doing this, it is strongly recommended to stop the Zabbix server. This will prevent the application from interfering with the database during the process, which could otherwise cause locks or unexpected behavior.</p> <p>Stop Zabbix server</p> <p>Red Hat and Ubuntu <pre><code>sudo systemctl stop zabbix-server\n</code></pre></p> <p>Create timescaledb extension</p> <p>Red Hat and Ubuntu <pre><code>psql -Uzabbix-srv zabbix -W\n</code></pre> <pre><code>psql (17.5)\nType \"help\" for help.\n\nzabbix=&gt; CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;\n</code></pre></p> <p>Make sure the extension is installed by running <code>\\dx</code>.</p> <pre><code>zabbix=&gt; \\dx\n                                            List of installed extensions\nName     | Version |   Schema   |                                      Description\n-------------+---------+------------+---------------------------------------------------------------------------------------\n plpgsql     | 1.0     | pg_catalog | PL/pgSQL procedural language\n timescaledb | 2.19.3  | public     | Enables scalable inserts and complex queries for time-series data (Community Edition)\n(2 rows)\n\nzabbix=&gt;\n</code></pre>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#patch-zabbix-database","title":"Patch Zabbix database","text":"<p>While still connected to the Zabbix database, you can now apply the TimescaleDB patch. This patch will migrate your existing history, trends, and audit log tables to the TimescaleDB format. Depending on the amount of existing data, this process may take some time.</p> <p>Run the following command inside the database session:</p> <pre><code>zabbix=&gt; \\i /usr/share/zabbix/sql-scripts/postgresql/timescaledb/schema.sql\n</code></pre> <p>The <code>schema.sql</code> script adjusts several important housekeeping parameters:</p> <ul> <li>Override item history period</li> <li>Override item trend period</li> </ul> <p>To use partitioned housekeeping for history and trends, both of these options must be enabled. However, it is also possible to enable them individually, depending on your requirements.</p> <p>In addition, the script sets two TimescaleDB specific parameters:</p> <ul> <li>Enable compression</li> <li>Compress records older than 7 days</li> </ul> <p>These settings help reduce the size of historical data and improve long term performance. Let's start our zabbix server again before we continue</p> <p>start Zabbix server</p> <p>RedHat and Ubuntu <pre><code>sudo systemctl start zabbix-server\n</code></pre></p> <p>Let's have a look at them go in our menu to Administration -&gt; Housekeeping</p> <p></p> <p>13.1 housekeeper settings</p> Warning <p><pre><code>When running the `schema.sql` script on TimescaleDB version 2.9.0 or higher,\nyou may see warning messages indicating that certain best practices are not\nbeing followed. These warnings can be safely ignored. They do not affect the\noutcome of the configuration process.\n\nAs long as everything is set up correctly, the script will complete without\nissue. You should see the following confirmation at the end:\n</code></pre> <pre><code>psql:/usr/share/zabbix/sql scripts/postgresql/timescaledb/schema.sql:112:\nNOTICE:  TimescaleDB is configured successfully\n</code></pre> <pre><code>This confirms that the TimescaleDB extension and related Zabbix settings have\nbeen applied correctly.\n</code></pre></p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#conclusion","title":"Conclusion","text":"<p>Using TimescaleDB with PostgreSQL is the only officially supported method for database partitioning in Zabbix. It replaces complex manual setups with automated, efficient handling of historical and trend data. Features like native compression and time based partitioning significantly reduce storage usage and improve query performance.</p> <p>By installing PostgreSQL from the correct repository, tuning it properly, and applying the TimescaleDB schema patch, you ensure that Zabbix can scale reliably with minimal maintenance overhead. This setup not only optimizes performance but also prepares your environment for long term growth and data retention.</p>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#questions","title":"Questions","text":"<ul> <li>What are the key advantages of using TimescaleDB compared to partitioning with   MySQL or MariaDB?</li> <li>What might go wrong if you install PostgreSQL from the default Red Hat repositories   when planning to use TimescaleDB?</li> <li>How does enabling compression in TimescaleDB benefit your Zabbix installation?</li> </ul>"},{"location":"ch13-advanced-security/partitioning-postgresql-database/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://docs.timescale.com/self-hosted/latest/configuration/</li> <li>https://www.zabbix.com/documentation/7.2/en/manual/appendix/install/timescaledb?hl=TimescaleDB</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/","title":"Securing the frontend","text":"<p>The frontend is what we use to login into our system. The Zabbix frontend will connect to our Zabbix server and our database. But we also send information from our laptop to the frontend. It's important that when we enter our credentials that we can do this in a safe way. So it makes sense to make use of certificates and one way to do this is by making use of Self-Signed certificates.</p> <p>To give you a better understanding of why your browser will warn you when using self signed certificates, we have to know that when we request an SSL certificate from an official Certificate Authority (CA) that you submit a Certificate Signing request (CSR) to them. They in return provide you with a Signed SSL certificate. For this they make use of their root certificate and private key. Our browser comes with a copy of the root certificate (CA) from various authorities or it can access it from the OS. This is why our self signed certificates are not trusted by our browser, we don't have any CA validation. Our only workaround is to create our own root certificate and private key.</p>"},{"location":"ch13-advanced-security/securing-frontend/#understanding-the-concepts","title":"Understanding the concepts","text":""},{"location":"ch13-advanced-security/securing-frontend/#how-to-create-an-ssl-certificate","title":"How to create an SSL certificate","text":""},{"location":"ch13-advanced-security/securing-frontend/#how-ssl-works-client-server-flow","title":"How SSL works - Client - Server flow","text":"Note <p>Borrowed the designs from https://www.youtube.com/watch?v=WqgzYuHtnIM this video explains well how SSL works.</p>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-self-signed-certificates","title":"Securing the frontend with self signed Certificates","text":"<p>To configure this there are a few steps that we need to follow:</p> <pre><code>- Generate a private key for the CA ( Certificate Authority )\n- Generate a root certificate\n- Generating CA-Authenticated Certificates\n- Generate a Certificate Signing Request (CSR)\n- Generate an X509 V3 certificate extension configuration file\n- Generate the certificate using our CSR, the CA private key, the CA certificate,\n  and the config file\n- Copy the SSL certificates to our Virtual Host\n- Adapt your Nginx Zabbix config\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-private-key-for-the-ca","title":"Generate a private key for the CA","text":"<p>First step is to make a folder named SSL so we can create our certificates and safe them:</p> <pre><code>&gt;- mkdir ~/ssl\n&gt;- cd ~/ssl\n&gt;- openssl ecparam -out myCA.key -name prime256v1 -genkey\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl : The tool to use the OpenSSL library, this library provides us with    cryptographic functions and utilities.</li> <li>out myCA.key : This part of the command specifies the output file name for the    generated private key. </li> <li>name prime256v1: Name of the elliptic curve; X9.62/SECG curve over a 256 bit    prime field</li> <li>ecparam: This command is used to manipulate or generate EC parameter files.</li> <li>genkey: This option will generate a EC private key using the specified parameters.</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-root-certificate","title":"Generate a Root Certificate","text":"<pre><code>openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem\n</code></pre> <p>Let's explain all the options;</p> <ul> <li>openssl: The command-line tool for OpenSSL.</li> <li>req: This command is used for X.509 certificate signing request (CSR) management.</li> <li>x509: This option specifies that a self-signed certificate should be created.</li> <li>new: This option is used to generate a new certificate.</li> <li>nodes: This option indicates that the private key should not be encrypted.    It will generates a private key without a passphrase, making it more convenient    but potentially less secure.</li> <li>key myCA.key: This specifies the private key file (myCA.key) to be used in    generating the certificate.</li> <li>sha256: This option specifies the hash algorithm to be used for the certificate.    In this case, SHA-256 is chosen for stronger security.</li> <li>days 1825: This sets the validity period of the certificate in days. Here, it\u2019s    set to 1825 days (5 years).</li> <li>out myCA.pem: This specifies the output file name for the generated certificate.    In this case, \u201cmyCA.pem.\u201d</li> </ul> <p>The information you enter is not so important but it's best to fill it in as good as possible. Just make sure you enter for CN you IP or DNS.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generating-ca-authenticated-certificates","title":"Generating CA-Authenticated Certificates","text":"<p>It's probably good practice to use de dns name of your website in the name of the private key. As we use in this case no DNS but an IP address I will use the fictive dns zabbix.mycompany.internal.</p> <pre><code>openssl genrsa -out zabbix.mycompany.internal.key 2048\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-a-certificate-signing-request-csr","title":"Generate a Certificate Signing Request (CSR)","text":"<pre><code>openssl req -new -key zabbix.mycompany.internal.key -out zabbix.mycompany.internal.csr\n</code></pre> <p>You will be asked the same set of questions as above. Once again your answers hold minimal significance and in our case no one will inspect the certificate so they matter even less.</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [XX]:BE\nState or Province Name (full name) []:vlaams-brabant\nLocality Name (eg, city) [Default City]:leuven\nOrganization Name (eg, company) [Default Company Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (eg, your name or your server's hostname) []:192.168.0.134\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-an-x509-v3-certificate-extension-configuration-file","title":"Generate an X509 V3 certificate extension configuration file.","text":"<pre><code># vi zabbix.mycompany.internal.ext\n</code></pre> <p>Add the following lines in your certificate extension file. Replace IP or DNS with your own values.</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nIP.1 = 192.168.0.133\n#DNS.1 = MYDNS (You can use DNS if you have a dns name if you use IP then use the\nabove line)\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#generate-the-certificate-using-our-csr-the-ca-private-key-the-ca-certificate","title":"Generate the certificate using our CSR, the CA private key, the CA certificate,","text":"<p>and the config file</p> <pre><code>openssl x509 -req -in zabbix.mycompany.internal.csr -CA myCA.pem -CAkey myCA.key \\\n-CAcreateserial -out zabbix.mycompany.internal.crt -days 825 -sha256 -extfile zabbix.mycompany.internal.ext\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#copy-the-ssl-certificates-to-our-virtual-host","title":"Copy the SSL certificates to our Virtual Host","text":"<pre><code>cp zabbix.mycompany.internal.crt /etc/pki/tls/certs/. \ncp zabbix.mycompany.internal.key /etc/pki/tls/private/.\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-linux-rhel","title":"Import the CA in Linux (RHEL)","text":"<p>We need to update the CA certificate\u2019s, run the below command to update the CA certs.</p> <pre><code>cp myCA.pem /etc/pki/ca-trust/source/anchors/myCA.crt\nupdate-ca-trust extract\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-osx","title":"Import the CA in OSX","text":"<ul> <li>Open the macOS Keychain app.</li> <li>Navigate to File &gt; Import Items</li> <li>Choose your private key file (i.e., myCA.pem)</li> <li>Search for the \u201cCommon Name\u201d you provided earlier.</li> <li>Double-click on your root certificate in the list.</li> <li>Expand the Trust section.</li> <li>Modify the \u201cWhen using this certificate:\u201d dropdown to \u201cAlways Trust\u201d.</li> <li>Close the certificate window.</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#import-the-ca-in-windows","title":"Import the CA in Windows","text":"<ul> <li>Open the \u201cMicrosoft Management Console\u201d by pressing Windows + R, typing mmc, and   clicking Open.</li> <li>Navigate to File &gt; Add/Remove Snap-in.</li> <li>Select Certificates and click Add.</li> <li>Choose Computer Account and proceed by clicking Next.</li> <li>Select Local Computer and click Finish.</li> <li>Click OK to return to the MMC window.</li> <li>Expand the view by double-clicking Certificates (local computer).</li> <li>Right-click on Certificates under \u201cObject Type\u201d in the middle column, select   All Tasks, and then Import.</li> <li>Click Next, followed by Browse. Change the certificate extension dropdown next   to the filename field to All Files (.) and locate the myCA.pem file.</li> <li>Click Open, then Next.</li> <li>Choose \u201cPlace all certificates in the following store.\u201d with \u201cTrusted Root   Certification Authorities store\u201d as the default. Proceed by clicking Next, then   Finish, to finalize the wizard.</li> <li>If all went well you should find your certificate under Trusted Root Certification   Authorities &gt; Certificates</li> </ul> Warning <p>You also need to import the myCA.crt file in your OS we are not an official CA so we have to import it in our OS and tell it to trust this Certificate. This action depends on the OS you use.</p> <p>As you are using OpenSSL, you should also create a strong Diffie-Hellman group, which is used in negotiating Perfect Forward Secrecy with clients. You can do this by typing:</p> <pre><code>openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n</code></pre>"},{"location":"ch13-advanced-security/securing-frontend/#adapt-your-nginx-zabbix-config","title":"Adapt your Nginx Zabbix config","text":"<p>Add the following lines to your Nginx configuration, modifying the file paths as needed. Replace the the already existing lines with port 80 with this configuration. This will enable SSL and HTTP2.</p> <p>Adapt the Nginx config</p> <p>Red Hat <pre><code># vi /etc/nginx/conf.d/zabbix.conf\n</code></pre> <pre><code>server {\n        listen          443 http2 ssl;\n        listen          [::]:443 http2 ssl;\n        server_name     &lt;ip qddress&gt;;\n        ssl_certificate /etc/ssl/certs/zabbix.mycompany.internal.crt;\n        ssl_certificate_key /etc/pki/tls/private/zabbix.mycompany.internal.key;\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;\n</code></pre></p> <p>To redirect traffic from port 80 to 443 we can add the following lines above our https block:</p> <p><pre><code>server {\n       listen         80;\n       server_name    _; #dns or ip is also possible\n       return         301 https://$host$request_uri;\n}\n</code></pre> Ubuntu <pre><code>ToDo\n</code></pre></p>"},{"location":"ch13-advanced-security/securing-frontend/#adapt-your-apache-zabbix-config","title":"Adapt your Apache Zabbix config","text":""},{"location":"ch13-advanced-security/securing-frontend/#restart-all-services-and-allow-https-traffic","title":"Restart all services and allow https traffic","text":"<pre><code>systemctl restart php-fpm.service\nsystemctl restart nginx\n\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <p>When we go to our url <code>http://&lt;IP or DNS&gt;/</code> we get redirected to our <code>https://</code> page and when we check we can see that our site is secure:</p> <p></p> Note <ul> <li>To be even more secure have a loot at https://cipherlist.eu/ this page maintains a list of strong ciphers that you can use so secure your Nginx even more.</li> <li>You can test your nginx config with 'nginx -t' before you restart.</li> <li>For HTTP/2 to work you need at least nginx 1.9.5 or later</li> </ul>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-lets-encrypt-on-nginx","title":"Securing the Frontend with Let's Encrypt on Nginx","text":"<p>Creating a certificate with Let's Encrypt is quite easy the only thing you need is a domain. With a valid dns record set. Once this is in place you can with a few command in place add SSL to your website.</p>"},{"location":"ch13-advanced-security/securing-frontend/#setup-lets-encrypt-with-a-dns-server","title":"Setup Let's Encrypt with a DNS server","text":"<p>You have a DNS server and everything is properly configured, configuration this is going to be easy.</p> <pre><code>dnf install epel-release\ndnf install certbot python3-certbot-nginx\n\n# Make sure you have added your domain in the file /etc/nginx/conf.d/zabbix.com\n# rename the file\nmv /etc/nginx/conf.d/zabix.conf /etc/nginx/conf.d/&lt;yourdomain.com&gt;\n\n# run certbot replace yourdomain.com with your own domain \ncertbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre> <pre><code># add firewall config\nfirewall-cmd --permanent --add-service=https\nfirewall-cmd --reload\n</code></pre> <pre><code># Obtain the SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n</code></pre> <p>This will install the certificates automatic in your configuration file. In case you had not renamed your file with the domain name you have alter the config file yourself. You can take a look for an example to the next topic.</p>"},{"location":"ch13-advanced-security/securing-frontend/#setup-lets-encrypt-without-local-a-dns-server","title":"Setup Let;s encrypt without local a DNS server","text":"<p>In case you like to test this at home it's a bit more complex if you don't have a DNS server at home but still possible with DNS-01 if you have bought a domain and are able to configure the TXT records for this domain. In this case we can use get.acme.</p> <pre><code># Install the needed packages\nsudo dnf install epel-release\nsudo dnf install certbot python3-certbot-nginx\nsudo dnf install -y tar gzip openssl cronie\nsudo dnf install -y bind-utils # gives `dig`\n\n# Install the acme script and add it to you path\ncurl https://get.acme.sh | sh\nexec bash\nacme.sh --version\n\n# Activate crond and setup the certificate.\nsudo systemctl enable --now crond\nacme.sh --set-default-ca --server letsencrypt\nacme.sh --issue -d &lt;mydomain.com&gt; -d '*.&lt;mydomain.com&gt;' --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please\n\n# The script had provided you with 2 TXT records add them to your domain and\n# check if they are properly configured. It can take a few minutes before other\n# DNS servers pickup the config change.\ndig +short TXT _acme-challenge.&lt;mydomain.com&gt; @8.8.8.8\n\n# Try to renew the certificate and copy it to your webserver\nacme.sh --renew -d &lt;mydomain.com&gt; --ecc --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please\nsudo mkdir -p /etc/ssl/&lt;mydomain&gt;\nacme.sh --install-cert -d &lt;mydomain.com&gt; --ecc --key-file /etc/ssl/&lt;mydomain&gt;/site.key --fullchain-file /etc/ssl/&lt;mydomain&gt;/site.fullchain.pem  --reloadcmd\n</code></pre> <p>Next step is to alter your NGINX config and open the firewall on port 443</p> <pre><code># Configure the firewall\nfirewall-cmd --add-service=https --permanent\nfirewall-cmd --reload\n</code></pre> <pre><code># Add to your hosts file the domain zabbix.&lt;mydomain.com&gt;\nvi /etc/hosts\n</code></pre> <pre><code># Alter your NGINX config\nvi /etc/nginx/conf.d/zabbix.conf\n\nserver {\n        listen          443 ssl;\n        server_name     zabbix.mydoamin.com;\n        ssl_certificate     /etc/ssl/mydomain/site.fullchain.pem;\n        ssl_certificate_key /etc/ssl/mydomain/site.key;\n        ssl_protocols       TLSv1.2 TLSv1.3;\n        ssl_ciphers         HIGH:!aNULL:!MD5;\n</code></pre> <pre><code># Add a forward from port 80 to 443\n\nvi /etc/nginx/conf.d/no-ssl-zabbix.conf\nserver{\n    listen  80;\n    return 301 https://$host$request_uri?;\n}\n</code></pre> <pre><code># restart the NGINX webserver\nsystemctl restart nginx\n</code></pre> <p>You can now browse to the url zabbix.mydomain.com and you should have a working certificate.</p> Note <p>You should probably add a bit more security to your webserver this is only the bare minimum to make ssl working, A good place to start is probably https://cipherlist.eu/</p>"},{"location":"ch13-advanced-security/securing-frontend/#securing-the-frontend-with-lets-encrypt-on-nginx_1","title":"Securing the Frontend with Let's Encrypt on Nginx","text":""},{"location":"ch13-advanced-security/selinux-zabbix/","title":"SELinux and Zabbix","text":"<p>SELinux (Security-Enhanced Linux) provides mandatory access control for Zabbix by enforcing security policies that restrict what the Zabbix processes can do, even when running as root.</p> <p>SELinux contexts are a core component of how SELinux implements security control. Think of contexts as labels that are assigned to every object in the system (files, processes, ports, etc.). These labels determine what can interact with what.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#selinux-enforcement-mode","title":"SELinux Enforcement Mode","text":"<p>For SELinux to actually provide security protection, it needs to be set to \"enforcing\" mode. There are three possible modes for SELinux:</p> <ul> <li>Enforcing - SELinux security policy is enforced. Actions that violate policy are blocked and logged.</li> <li>Permissive - SELinux security policy is not enforced but violations are logged. This is useful for debugging.</li> <li>Disabled - SELinux is completely turned off.</li> </ul> <p>You can check the current SELinux mode with the getenforce command:</p> <pre><code>getenforce\n</code></pre> <p>This should return : Enforcing</p> <p>To properly secure Zabbix with SELinux, the system should be in <code>Enforcing</code> mode. If it's not, you can change it temporarily:</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#set-to-enforcing-immediately-until-reboot","title":"Set to enforcing immediately (until reboot)","text":"<pre><code>sudo setenforce 1\n</code></pre> <p>For permanent configuration, edit /etc/selinux/config and set:</p> <pre><code>SELINUX=Enforcing\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#basic-structure-of-an-selinux-context","title":"Basic Structure of an SELinux Context","text":"<p>An SELinux context typically consists of four parts:</p> <ul> <li>User: The SELinux user identity (not the same as Linux users)</li> <li>Role: What roles the user can enter</li> <li>Type: The domain for processes or type for files (most important part)</li> <li>Level: Optional MLS (Multi-Level Security) sensitivity level</li> </ul> <p>When displayed, these appear in the format: user:role:type:level</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#how-contexts-work-in-practice","title":"How Contexts Work in Practice","text":"<p>In the Zabbix SELinux configuration, several security types are defined to control access:</p> <ul> <li>zabbix_t: The domain in which the Zabbix server process runs</li> <li>zabbix_port_t: Type assigned to network ports that Zabbix uses</li> <li>zabbix_var_run_t: Type for Zabbix runtime socket files</li> <li>httpd_t: The domain for the Apache web server process</li> </ul> <p>The SELinux policy allows specific permissions between these types:</p> <p>Zabbix server can connect to its own Unix stream sockets Zabbix server can connect to network ports labeled as zabbix_port_t Zabbix server can create and remove socket files in directories labeled as zabbix_var_run_t</p> <p>The web server (httpd) can connect to Zabbix ports, allowing the web frontend to communicate with the Zabbix server. These permissions ensure Zabbix components can communicate properly while maintaining SELinux security boundaries.</p> <p>When Zabbix tries to access a file or network resource, SELinux checks if the context of the Zabbix process is allowed to access the context of that resource according to policy rules.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#viewing-contexts","title":"Viewing Contexts","text":"<p>You can view the contexts of files using:</p> <pre><code>ls -Z /path/to/zabbix/files\n</code></pre> <p>And for the processes:</p> <p><pre><code>ps -eZ | grep zabbix\"\n</code></pre> <pre><code>system_u:system_r:unconfined_service_t:s0 691 ?  00:02:20 zabbix_agent2\nsystem_u:system_r:zabbix_t:s0       707 ?        00:00:59 zabbix_server\nsystem_u:system_r:zabbix_t:s0      1203 ?        00:02:00 zabbix_server\n</code></pre></p> <p>And for log files</p> <pre><code>ls -alZ /var/log/zabbix/zabbix_server.log\n```yaml\n-rw-rw-r--. 1 zabbix zabbix system_u:object_r:zabbix_log_t:s0 11857 Apr 26 22:02 /var/log/zabbix/zabbix_server.log\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#zabbix-selinux-policy-package","title":"Zabbix-selinux-policy Package","text":"<p>The zabbix-selinux-policy package is a specialized SELinux policy module designed specifically for Zabbix deployments. It provides pre-configured SELinux policies that allow Zabbix components to function properly while running in an SELinux enforced environment.</p> <p>Key Functions of the Package:</p> <ul> <li>Pre-defined Contexts : Contains proper SELinux context definitions for Zabbix   binaries, configuration files, log directories, and other resources.</li> <li>Port Definitions : Registers standard Zabbix ports (like 10050 for agent, 10051 for server)   in the SELinux policy so they can be used without triggering denials.</li> <li>Access Rules: Defines which operations Zabbix processes can perform, like writing   to log files, connecting to databases, and communicating over networks.</li> <li>Boolean Toggles: Provides SELinux boolean settings specific to Zabbix that can   enable/disable certain functionalities without having to write custom policies.</li> </ul> <p>Benefits of Using the Package:</p> <ul> <li>Simplified Deployment : Reduces the need for manual SELinux policy adjustments when   installing Zabbix.</li> <li>Security by Default: Ensures Zabbix operates with minimal required permissions rather than running in permissive mode.</li> <li>Maintained Compatibility: The package is updated alongside Zabbix to ensure compatibility with new features.</li> </ul>"},{"location":"ch13-advanced-security/selinux-zabbix/#installation-and-usage","title":"Installation and Usage","text":"<p>The package is typically installed alongside other Zabbix components:</p> <pre><code>dnf install zabbix-selinux-policy\n</code></pre> <p>After installation, the SELinux contexts are automatically applied to standard Zabbix paths and ports. If you use non-standard configurations, you may still need to make manual adjustments. This package essentially bridges the gap between Zabbix's operational requirements and SELinux's strict security controls, making it much easier to run Zabbix securely without compromising on monitoring capabilities.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#for-zabbix-to-function-properly-with-selinux-enabled","title":"For Zabbix to function properly with SELinux enabled:","text":"<p>Zabbix binaries and configuration files need appropriate SELinux labels (typically zabbix_t context) Network ports used by Zabbix must be properly defined in SELinux policy Database connections require defined policies for Zabbix to communicate with MySQL/PostgreSQL File paths for monitoring, logging, and temporary files need correct contexts</p> <p>When issues occur, they typically manifest as denied operations in SELinux audit logs. Administrators can either:</p> <p>Use audit2allow to create custom policy modules for legitimate Zabbix operations Apply proper context labels using semanage and restorecon commands Configure boolean settings to enable specific Zabbix functionality</p> <p>This combination creates defense-in-depth by ensuring that even if Zabbix is compromised, the attacker remains constrained by SELinux policies, limiting potential damage to your systems.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#zabbix-selinux-boolean","title":"Zabbix SELinux Boolean","text":"<p>One of the most convenient aspects of the SELinux implementation for Zabbix is the use of \"booleans\". simple on/off switches that control specific permissions. These allow you to fine-tune SELinux policies without needing to understand complex policy writing. Key Zabbix booleans include:</p> <ul> <li>zabbix_can_network: Controls whether Zabbix can initiate network connections</li> <li>httpd_can_connect_zabbix: Controls whether the web server can connect to Zabbix</li> <li>zabbix_run_sudo: Controls whether Zabbix can execute sudo commands</li> </ul> <p>You can view these settings with:</p> <p><code>yaml     getsebool -a | grep zabbix</code> And you can toggle them as needed with setsebool.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#enable-zabbix-network-connections-persistent-across-reboots","title":"Enable Zabbix network connections (persistent across reboots)","text":"<pre><code>setsebool -P zabbix_can_network on\n</code></pre> <p>These booleans make it much easier to securely deploy Zabbix while maintaining SELinux protection, as you can enable only the specific capabilities that your Zabbix implementation needs without compromising overall system security.</p>"},{"location":"ch13-advanced-security/selinux-zabbix/#creating-custom-rules","title":"Creating custom rules","text":"<p>When running Zabbix in environments with SELinux enabled, you may encounter permission issues when Zabbix attempts to execute certain utilities like fping. This occurs because fping uses setuid (SUID) permissions, and SELinux's default policies prevent Zabbix from executing such binaries for security reasons.</p> <p>There are different solutions to this problem:</p> <ul> <li>Method 1: Automated Policy Generation :</li> </ul> <p>The most straightforward approach is to use the audit2allow utility to analyse SELinux denial messages and generate appropriate policies:</p> <p>First, capture the denial events from the audit log:</p> <pre><code>sudo grep zabbix /var/log/audit/audit.log | grep fping | audit2allow -M zabbix_fping\n</code></pre> <p>Install the generated policy module:</p> <pre><code>sudo semodule -i zabbix_fping.pp\n</code></pre> <p>Apply the correct SELinux context to the fping binary:</p> <pre><code>sudo chcon -t fping_exec_t /usr/sbin/fping\n</code></pre> <ul> <li>Method 2: Manual Policy Creation :</li> </ul> <p>For more control or in situations where audit logs aren't available, you can manually create a custom policy:</p> <p>Create a policy file named zabbix_fping.te with the following content:</p> <pre><code>module zabbix_fping 1.0;\n\nrequire {\n    type zabbix_t;\n    type fping_t;\n    type fping_exec_t;\n    class file { execute execute_no_trans getattr open read };\n    class capability net_raw;\n}\n\n#============= zabbix_t ==============\nallow zabbix_t fping_exec_t:file { execute execute_no_trans getattr open read };\nallow zabbix_t self:capability net_raw;\n</code></pre> <p>Compile the policy module:</p> <pre><code>checkmodule -M -m -o zabbix_fping.mod zabbix_fping.te\n</code></pre> <p>Package the compiled module:</p> <pre><code>semodule_package -o zabbix_fping.pp -m zabbix_fping.mod\n</code></pre> <p>Install the policy module:</p> <pre><code>semodule -i zabbix_fping.pp\n</code></pre>"},{"location":"ch13-advanced-security/selinux-zabbix/#securing-zabbix-admin","title":"Securing zabbix admin","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#https","title":"HTTPS","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#db-certs","title":"DB certs","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#conclusion","title":"Conclusion","text":""},{"location":"ch13-advanced-security/selinux-zabbix/#questions","title":"Questions","text":"<ul> <li>Why does SELinux prevent Zabbix from executing fping by default?</li> <li>In what situations might you need to create custom SELinux policies for other Zabbix monitoring tools?</li> <li>What are the key differences between using audit2allow and manually creating a custom policy module?</li> </ul>"},{"location":"ch13-advanced-security/selinux-zabbix/#useful-urls","title":"Useful URLs","text":"<ul> <li>https://www.zabbix.com/documentation/7.2/en/manual/installation/install_from_packages/rhel?hl=SELinux#selinux-configuration</li> <li>https://www.systutorials.com/docs/linux/man/8-zabbix_selinux/</li> <li>https://man.linuxreviews.org/man8/zabbix_agent_selinux.8.html</li> <li>https://phoenixnap.com/kb/selinux</li> </ul>"},{"location":"ch13-advanced-security/using-vault/","title":"Storing secrets","text":""},{"location":"ch14-zabbix-maintenance/chapter/","title":"Zabbix maintenance","text":"<p>Maintaining a stable and efficient Zabbix environment requires more than just monitoring external systems, it also involves taking care of Zabbix itself. This chapter explores the key aspects of Zabbix maintenance, including setting up regular backups to protect your data, using Zabbix's internal health checks to monitor its own performance, and applying upgrades to stay current with new features and security fixes. We'll also cover Zabbix's built-in maintenance mode, which allows you to schedule downtime for hosts and services without triggering unnecessary alerts. Together, these practices help ensure your monitoring system remains reliable, resilient, and ready to scale.</p>"},{"location":"ch14-zabbix-maintenance/internal-health/","title":"Zabbix internal health check","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/internal-health/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/maintenance/","title":"Maintenance","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/maintenance/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/","title":"Backup strategies","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/taking-backups/#useful-urls","title":"Useful URLs","text":""},{"location":"ch14-zabbix-maintenance/upgrades/","title":"Zabbix Upgrades","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#conclusion","title":"Conclusion","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#questions","title":"Questions","text":""},{"location":"ch14-zabbix-maintenance/upgrades/#useful-urls","title":"Useful URLs","text":""},{"location":"ch15-zabbix-real-world-examples/chapter/","title":"Zabbix real world examples","text":"<p>In this book we have learned a lot about our Zabbix environment, but most of it is building the foundation to start doing it on your own. From time to time you will encounter an implementation in a Zabbix environment that uses out of the box thinking or is just so simple you can't believe you never thought of it.</p> <p>This chapter aims to provide you a collection of interesting things people have built and things you absolutely have to know exist. </p>"}]}